msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-10 00:37+0000\n"
"PO-Revision-Date: 2020-04-10 00:53\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/advanced/terra/1_advanced_circuits.po\n"
"Language: ja_JP\n"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:9
msgid "Terra 0.8+ - Circuit API Updates"
msgstr "Terra 0.8+ - Circuit API 更新"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:16
msgid "In this tutorial, we'll introduce three new components of the Terra circuit-building API added in the Terra 0.8 release. Their purpose is to facilitate circuit construction, reduce boilerplate, and aid reuse through composition and parameterization. These three new components are:"
msgstr "このチュートリアルでは、Terra 0.8 リリースで追加された Terra 回路構築(circuit-building) API の３つの新しいコンポーネントを紹介します。これらの目的は、ボイラープレートを削減し、合成とパラメータ化を通じた再利用により、回路構築を促進します。これら３つの新しいコンポーネントは："

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:34
msgid "1. Optional registers"
msgstr "1. オプションレジスター"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:36
msgid "For circuits that require only a single register, register declarations can amount to unneeded overhead. Terra 0.8 adds more concise syntax to create and build circuits without explicit register declaration."
msgstr "単一レジスターしか必要のない回路では、レジスター宣言は必要のないオーバーヘッドになります。Terra 0.8 では、明示的にレジスターを宣言することなく、回路を作成・構築できるように、より簡潔なシンタックスを追加しました。"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:44
msgid "Registerless ``QuantumCircuit`` declaration"
msgstr "レジスターなし ``QuantumCircuit`` 宣言"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:51
msgid "An alternate constructor has been added to ``QuantumCircuit`` that accepts one or two integers: the number of qubits (required), and the number of classical bits (optional)."
msgstr "別のコンストラクターが ``QuantumCircuit`` に追加され、1つ、もしくは2つの整数を受け取ります：1つ目は量子ビットの数(必須) で、2つ目は古典ビット(オプション) です。"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:66
msgid "This will create a quantum circuit equivalent to the following (still valid) circuit declaration:"
msgstr "これは以下の回路宣言(まだ有効です) と同じ量子回路を作成します。"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:83
msgid "Registers are created automatically and can be accessed through the circuit as needed."
msgstr "レジスターは自動的に作成され、必要に応じ、回路を通じてアクセスできます。"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:120
msgid "Quantum/classical bit index-based addressing"
msgstr "量子/古典ビットのインデックス方式によるアドレス指定"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:127
msgid "In the spirit of register-less circuits, qubits and classical bits (clbits) can now be addressed directly by index, without a need for referencing a register. In the following example, ``bell.h(0)`` attaches a Hadamard gate to the first quantum bit."
msgstr "レジスター無し回路の精神では、量子ビットと古典ビット(clbits) はインデックスで直接指定され、レジスターを参照する必要がなくなります。以下の例では、``bell.h(0)`` が最初の量子ビットにアダマールゲートを追加します。"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:203
msgid "The gate's argument types will determine if an index references a qubit or a clbit (e.g. ``cx`` expects ``(qubit, qubit)``; ``measure`` expects ``(qubit, clbit)``). This syntax works with both forms of ``QuantumCircuit`` construction, and users can switch between register-based and index-based commands as convenient."
msgstr "ゲートの引数の型により、インデックスが量子ビットを参照しているのか、clbit を指定しているのかを決定します (例えば、``cx`` は ``(qubit, qubit)``; ``measure`` は ``(qubit, clbit)``) 。このシンタックスは、``QuantumCircuit`` 構築の両形式でも動作し、ユーザーはレジスター指定方式とインデックス方式間を都合により切り替えることが出来ます。"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:210
msgid "In circuits with multiple registers, index ordering will be set by the order in which registers were added to the circuit, and can be verified by inspecting the circuit's ``qubits`` and ``clbits`` properties."
msgstr "複数のレジスターを持つ回路では、インデックスの順序は回路にレジスターが追加された順序に対応し、回路の``qubits`` 、 ``clbits`` プロパティを調べることで確認できます。"

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:313
msgid "2. Portable ``Instruction``\\ s and ``CompositeGate`` replacement"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:320
msgid "Starting with Terra 0.8, ``Instruction`` instances have become more portable and serve as the basis for composing re-usable circuit components through the new ``append`` method on ``QuantumCircuit``\\ s."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:328
msgid "Opaque gates"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:335
msgid "The ``Gate`` and ``Instruction`` constructors have been updated to accept an integer number of qubits (``num_qubits``) and an integer number of classical bits (``num_cbits``), which define the gate's quantum and classical width."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:352
msgid "An ``append(instruction, qargs, cargs)`` method has been added to the ``QuantumCircuit`` class, which takes an anonymous ``Instruction`` instance and attaches it to the circuit at the specified ``qargs`` and ``cargs``."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:423
msgid "Composite Gates"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:430
msgid "Composite gates and complex circuit components can now be constructed and managed as independent ``QuantumCircuit``\\ s and, through the ``to_instruction`` method, converted to ``Instruction``\\ s to be appended to a target circuit at a given location."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:537
msgid "Circuits are not immediately decomposed upon conversion ``to_instruction`` to allow circuit design at higher levels of abstraction. When desired, or before compilation, sub-circuits will be decomposed via the ``decompose`` method."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:604
msgid "3. Parameterized circuits"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:611
msgid "Parameterization is a common feature of many quantum algorithms, as well as a standard building block for constructing libraries of standard gates and subcircuits."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:613
msgid "Terra 0.8 introduces a ``Parameter`` class that can be used to specify a placeholder wherever a numeric parameter can be used."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:620
msgid "In the following example, we want to quickly construct a series of experiments that vary the angle of a global :math:`R_z` rotation over a set of entangled qubits."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:724
msgid "We can inspect the circuit's parameters"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:758
msgid "Binding parameters to values"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:765
msgid "All circuit parameters must be bound before sending the circuit to a backend. This can be done in one of two ways: - The ``bind_parameters`` method accepts a dictionary mapping ``Parameter``\\ s to values, and returns a new circuit with each parameter replaced by its corresponding value. Partial binding is supported, in which case the returned circuit will be parameterized by any ``Parameter``\\ s that were not mapped to a value."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:832
msgid "``qiskit.execute`` now accepts a ``parameter_binds`` keyword argument which, when specified as a list of dictionaries mapping ``Parameter``\\ s to values, will bind and execute a circuit on the backend for every mapping dictionary in the list."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:855
msgid "In the example circuit, we apply a global :math:`R_z(\\theta)` rotation on a five-qubit entangled state, and so expect to see oscillation in qubit-0 at :math:`5\\theta`."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:907
msgid "Reducing compilation cost"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:914
msgid "Compiling over a parameterized circuit prior to binding can, in some cases, significantly reduce compilation time as compared to compiling over a set of bound circuits."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:1015
msgid "Composition"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:1022
msgid "Parameterized circuits can be composed like standard ``QuantumCircuit``\\ s. Generally, when composing two parameterized circuits, the resulting circuit will be parameterized by the union of the parameters of the input circuits."
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:1029
msgid "However, parameter names must be unique within a given circuit. When attempting to add a parameter whose name is already present in the target circuit: - if the source and target share the same ``Parameter`` instance, the parameters will be assumed to be the same and combined - if the source and target have different ``Parameter`` instances, an error will be raised"
msgstr ""

#: ../../tutorials/advanced/terra/1_advanced_circuits.ipynb:1100
msgid "To insert a subcircuit under a different parameterization, the ``to_instruction`` method accepts an optional argument (``parameter_map``) which, when present, will generate instructions with the source parameter replaced by a new parameter."
msgstr ""

