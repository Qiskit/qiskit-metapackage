# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-26 21:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../api/qiskit.transpiler.Layout.rst:2
msgid "Layout"
msgstr ""

#: of qiskit.transpiler.Layout:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.transpiler.Layout:1
msgid "Two-ways dict to represent a Layout."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:10
msgid "Methods Summary"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`add <qiskit.transpiler.Layout.add>`\\ \\(virtual\\_bit\\[\\, "
"physical\\_bit\\]\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Adds a map element between `bit` and `physical_bit`."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`add_register <qiskit.transpiler.Layout.add_register>`\\ \\(reg\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Adds at the end physical_qubits that map each bit in reg."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`combine_into_edge_map "
"<qiskit.transpiler.Layout.combine_into_edge_map>`\\ "
"\\(another\\_layout\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.combine_into_edge_map:1
msgid "Combines self and another_layout into an \"edge map\"."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`copy <qiskit.transpiler.Layout.copy>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.copy:1
msgid "Returns a copy of a Layout instance."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`from_dict <qiskit.transpiler.Layout.from_dict>`\\ \\(input\\_dict\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.from_dict:1
msgid "Populates a Layout from a dictionary."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`from_intlist <qiskit.transpiler.Layout.from_intlist>`\\ "
"\\(int\\_list\\, \\*qregs\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.from_intlist:1
msgid ""
"Converts a list of integers to a Layout mapping virtual qubits (index of "
"the list) to physical qubits (the list values)."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`from_qubit_list <qiskit.transpiler.Layout.from_qubit_list>`\\ "
"\\(qubit\\_list\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.from_qubit_list:1
msgid "Populates a Layout from a list containing virtual qubits, Qubit or None."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`from_tuplelist <qiskit.transpiler.Layout.from_tuplelist>`\\ "
"\\(tuple\\_list\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
"Populates a Layout from a list containing virtual "
"qubits---(QuantumRegister, int) tuples---, or None."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`generate_trivial_layout "
"<qiskit.transpiler.Layout.generate_trivial_layout>`\\ \\(\\*regs\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Creates a trivial (\"one-to-one\") Layout with the registers in `regs`."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`get_physical_bits <qiskit.transpiler.Layout.get_physical_bits>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.get_physical_bits:1
msgid ""
"Returns the dictionary where the keys are physical (qu)bits and the "
"values are virtual (qu)bits."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`get_registers <qiskit.transpiler.Layout.get_registers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.get_registers:1
msgid ""
"Returns the registers in the layout [QuantumRegister(2, 'qr0'), "
"QuantumRegister(3, 'qr1')] :returns: A list of Register in the layout "
":rtype: List"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`get_virtual_bits <qiskit.transpiler.Layout.get_virtual_bits>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.get_virtual_bits:1
msgid ""
"Returns the dictionary where the keys are virtual (qu)bits and the values"
" are physical (qu)bits."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`order_based_on_type "
"<qiskit.transpiler.Layout.order_based_on_type>`\\ \\(value1\\, value2\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "decides which one is physical/virtual based on the type."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`swap <qiskit.transpiler.Layout.swap>`\\ \\(left\\, right\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Swaps the map between left and right."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:29
msgid "Methods Documentation"
msgstr ""

#: of qiskit.transpiler.Layout.add:1
msgid ""
"Adds a map element between `bit` and `physical_bit`. If `physical_bit` is"
" not defined, `bit` will be mapped to a new physical bit (extending the "
"length of the layout by one.) :param virtual_bit: A (qu)bit. For example,"
" (QuantumRegister(3, 'qr'), 2). :type virtual_bit: tuple :param "
"physical_bit: A physical bit. For example, 3. :type physical_bit: int"
msgstr ""

#: of qiskit.transpiler.Layout.add_register:1
msgid ""
"Adds at the end physical_qubits that map each bit in reg. :param reg: A "
"(qu)bit Register. For example, QuantumRegister(3, 'qr'). :type reg: "
"Register"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:3
msgid "For example::"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:10
msgid "The edge map is used to compose dags via, for example, compose_back."
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_dict qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_qubit_list
msgid "パラメータ"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:12
msgid "The other layout to combine."
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_qubit_list
#: qiskit.transpiler.Layout.from_tuplelist
#: qiskit.transpiler.Layout.generate_trivial_layout
msgid "戻り値"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:15
msgid "A \"edge map\"."
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_qubit_list
#: qiskit.transpiler.Layout.from_tuplelist
#: qiskit.transpiler.Layout.generate_trivial_layout
msgid "戻り値の型"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_qubit_list
#: qiskit.transpiler.Layout.from_tuplelist qiskit.transpiler.Layout.swap
msgid "例外"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:18
msgid ""
"another_layout can be bigger than self, but not smaller. Otherwise, "
"raises."
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:3
msgid ""
"The dictionary must be a bijective mapping between virtual qubits (tuple)"
" and physical qubits (int)."
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:6
msgid ""
"e.g.::          {(QuantumRegister(3, 'qr'), 0): 0,      "
"(QuantumRegister(3, 'qr'), 1): 1,      (QuantumRegister(3, 'qr'), 2): 2}"
"          Can be written more concisely as follows:          * virtual to"
" physical::              {qr[0]: 0,          qr[1]: 1,          qr[2]: 2}"
"          * physical to virtual::              {0: qr[0],          1: "
"qr[1],          2: qr[2]}"
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:7
msgid "e.g.::"
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:5
msgid "A list of integers."
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:7
msgid "The quantum registers to apply the layout to."
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:11
msgid "The corresponding Layout object."
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:14
msgid "Invalid input layout."
msgstr ""

#: of qiskit.transpiler.Layout.from_qubit_list:4
msgid "e.g.: [qr[0], None, qr[2], qr[3]]"
msgstr ""

#: of qiskit.transpiler.Layout.from_qubit_list:7
#: qiskit.transpiler.Layout.from_tuplelist:6
msgid "the corresponding Layout object"
msgstr ""

#: of qiskit.transpiler.Layout.from_qubit_list:10
msgid "If the elements are not Qubit or None"
msgstr ""

#: of qiskit.transpiler.Layout.from_tuplelist:1
msgid ""
"Populates a Layout from a list containing virtual "
"qubits---(QuantumRegister, int) tuples---, or None. :param tuple_list: "
"e.g.: [(qr,0), None, (qr,2), (qr,3)] :type tuple_list: list"
msgstr ""

#: of qiskit.transpiler.Layout.from_tuplelist:9
msgid "If the elements are not (Register, integer) or None"
msgstr ""

#: of qiskit.transpiler.Layout.generate_trivial_layout:1
msgid ""
"Creates a trivial (\"one-to-one\") Layout with the registers in `regs`. "
":param \\*regs: registers to include in the layout. :type \\*regs: "
"Registers"
msgstr ""

#: of qiskit.transpiler.Layout.generate_trivial_layout:5
msgid "A layout with all the `regs` in the given order."
msgstr ""

#: of qiskit.transpiler.Layout.order_based_on_type:1
msgid ""
"decides which one is physical/virtual based on the type. Returns "
"(virtual, physical)"
msgstr ""

#: of qiskit.transpiler.Layout.swap:1
msgid ""
"Swaps the map between left and right. :param left: Item to swap with "
"right. :type left: tuple or int :param right: Item to swap with left. "
":type right: tuple or int"
msgstr ""

#: of qiskit.transpiler.Layout.swap:7
msgid "If left and right have not the same type."
msgstr ""

