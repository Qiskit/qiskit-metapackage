# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-26 21:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:2
msgid "DAGCircuit"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit:1
msgid "Quantum circuit as a directed acyclic graph."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit:3
msgid ""
"There are 3 types of nodes in the graph: inputs, outputs, and operations."
" The nodes are connected by directed edges that correspond to qubits and "
"bits."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:10
msgid "Attributes Summary"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:14:<autosummary>:1
msgid ":obj:`node_counter <qiskit.dagcircuit.DAGCircuit.node_counter>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:14:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.node_counter:1
msgid "Returns the number of nodes in the dag"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:16
msgid "Methods Summary"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`add_creg <qiskit.dagcircuit.DAGCircuit.add_creg>`\\ \\(creg\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.add_creg:1
msgid "Add all wires in a classical register."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`add_qreg <qiskit.dagcircuit.DAGCircuit.add_qreg>`\\ \\(qreg\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.add_qreg:1
msgid "Add all wires in a quantum register."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`ancestors <qiskit.dagcircuit.DAGCircuit.ancestors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.ancestors:1
msgid "Returns set of the ancestors of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`apply_operation_back "
"<qiskit.dagcircuit.DAGCircuit.apply_operation_back>`\\ \\(op\\[\\, "
"qargs\\, cargs\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.apply_operation_back:1
msgid "Apply an operation to the output of the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`apply_operation_front "
"<qiskit.dagcircuit.DAGCircuit.apply_operation_front>`\\ \\(op\\, qargs\\,"
" cargs\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:1
msgid "Apply an operation to the input of the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`bfs_successors <qiskit.dagcircuit.DAGCircuit.bfs_successors>`\\ "
"\\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.bfs_successors:1
msgid ""
"Returns an iterator of tuples of (DAGNode, [DAGNodes]) where the DAGNode "
"is the current node and [DAGNode] is its successors in  BFS order."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`clbits <qiskit.dagcircuit.DAGCircuit.clbits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.clbits:1
msgid "Return a list of classical bits (as a list of Clbit instances)."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`collect_runs <qiskit.dagcircuit.DAGCircuit.collect_runs>`\\ "
"\\(namelist\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.collect_runs:1
msgid "Return a set of non-conditional runs of \"op\" nodes with the given names."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`compose_back <qiskit.dagcircuit.DAGCircuit.compose_back>`\\ "
"\\(input\\_circuit\\[\\, edge\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.compose_back:1
msgid "Apply the input circuit to the output of this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`compose_front <qiskit.dagcircuit.DAGCircuit.compose_front>`\\ "
"\\(input\\_circuit\\[\\, edge\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.compose_front:1
msgid "Apply the input circuit to the input of this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`count_ops <qiskit.dagcircuit.DAGCircuit.count_ops>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.count_ops:1
msgid "Count the occurrences of operation names."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`count_ops_longest_path "
"<qiskit.dagcircuit.DAGCircuit.count_ops_longest_path>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.count_ops_longest_path:1
msgid "Count the occurrences of operation names on the longest path."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`depth <qiskit.dagcircuit.DAGCircuit.depth>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid "Return the circuit depth."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`descendants <qiskit.dagcircuit.DAGCircuit.descendants>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.descendants:1
msgid "Returns set of the descendants of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`draw <qiskit.dagcircuit.DAGCircuit.draw>`\\ \\(\\[scale\\, "
"filename\\, style\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.draw:1
msgid "Draws the dag circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`edges <qiskit.dagcircuit.DAGCircuit.edges>`\\ \\(\\[nodes\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.edges:1 qiskit.dagcircuit.DAGCircuit.nodes:1
msgid "Iterator for node values."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`extend_back <qiskit.dagcircuit.DAGCircuit.extend_back>`\\ "
"\\(dag\\[\\, edge\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.extend_back:1
msgid "Add `dag` at the end of `self`, using `edge_map`."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`gate_nodes <qiskit.dagcircuit.DAGCircuit.gate_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.gate_nodes:1
msgid "Get the list of gate nodes in the dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`idle_wires <qiskit.dagcircuit.DAGCircuit.idle_wires>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.idle_wires:1
msgid "Return idle wires."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`layers <qiskit.dagcircuit.DAGCircuit.layers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.layers:1
msgid ""
"Yield a shallow view on a layer of this DAGCircuit for all d layers of "
"this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`longest_path <qiskit.dagcircuit.DAGCircuit.longest_path>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.longest_path:1
msgid "Returns the longest path in the dag as a list of DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`multigraph_layers "
"<qiskit.dagcircuit.DAGCircuit.multigraph_layers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.multigraph_layers:1
msgid "Yield layers of the multigraph."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`named_nodes <qiskit.dagcircuit.DAGCircuit.named_nodes>`\\ "
"\\(\\*names\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.named_nodes:1
msgid "Get the set of \"op\" nodes with the given name."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`node <qiskit.dagcircuit.DAGCircuit.node>`\\ \\(node\\_id\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.node:1
msgid "Get the node in the dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`nodes <qiskit.dagcircuit.DAGCircuit.nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`nodes_on_wire <qiskit.dagcircuit.DAGCircuit.nodes_on_wire>`\\ "
"\\(wire\\[\\, only\\_ops\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.nodes_on_wire:1
msgid "Iterator for nodes that affect a given wire"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`num_clbits <qiskit.dagcircuit.DAGCircuit.num_clbits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.num_clbits:1
msgid "Return the total number of classical bits used by the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`num_qubits <qiskit.dagcircuit.DAGCircuit.num_qubits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid "Return the total number of qubits used by the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`num_tensor_factors "
"<qiskit.dagcircuit.DAGCircuit.num_tensor_factors>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.num_tensor_factors:1
msgid "Compute how many components the circuit can decompose into."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`op_nodes <qiskit.dagcircuit.DAGCircuit.op_nodes>`\\ \\(\\[op\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.op_nodes:1
msgid "Get the list of \"op\" nodes in the dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`predecessors <qiskit.dagcircuit.DAGCircuit.predecessors>`\\ "
"\\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.predecessors:1
msgid "Returns iterator of the predecessors of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`properties <qiskit.dagcircuit.DAGCircuit.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.properties:1
msgid "Return a dictionary of circuit properties."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`quantum_predecessors "
"<qiskit.dagcircuit.DAGCircuit.quantum_predecessors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.quantum_predecessors:1
msgid ""
"Returns iterator of the predecessors of a node that are connected by a "
"quantum edge as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`quantum_successors "
"<qiskit.dagcircuit.DAGCircuit.quantum_successors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.quantum_successors:1
msgid ""
"Returns iterator of the successors of a node that are connected by a "
"quantum edge as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`qubits <qiskit.dagcircuit.DAGCircuit.qubits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.qubits:1
msgid "Return a list of qubits (as a list of Qubit instances)."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`remove_all_ops_named "
"<qiskit.dagcircuit.DAGCircuit.remove_all_ops_named>`\\ \\(opname\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_all_ops_named:1
msgid "Remove all operation nodes with the given name."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`remove_ancestors_of "
"<qiskit.dagcircuit.DAGCircuit.remove_ancestors_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_ancestors_of:1
msgid "Remove all of the ancestor operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`remove_descendants_of "
"<qiskit.dagcircuit.DAGCircuit.remove_descendants_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_descendants_of:1
msgid "Remove all of the descendant operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`remove_nonancestors_of "
"<qiskit.dagcircuit.DAGCircuit.remove_nonancestors_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_nonancestors_of:1
msgid "Remove all of the non-ancestors operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`remove_nondescendants_of "
"<qiskit.dagcircuit.DAGCircuit.remove_nondescendants_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_nondescendants_of:1
msgid "Remove all of the non-descendants operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`remove_op_node <qiskit.dagcircuit.DAGCircuit.remove_op_node>`\\ "
"\\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_op_node:1
msgid "Remove an operation node n."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`serial_layers <qiskit.dagcircuit.DAGCircuit.serial_layers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.serial_layers:1
msgid "Yield a layer for all gates of this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`size <qiskit.dagcircuit.DAGCircuit.size>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.size:1
msgid "Return the number of operations."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`substitute_node_with_dag "
"<qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag>`\\ \\(node\\, "
"input\\_dag\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:1
msgid "Replace one node with dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`successors <qiskit.dagcircuit.DAGCircuit.successors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.successors:1
msgid "Returns iterator of the successors of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`threeQ_or_more_gates "
"<qiskit.dagcircuit.DAGCircuit.threeQ_or_more_gates>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.threeQ_or_more_gates:1
msgid "Get list of 3-or-more-qubit gates: (id, data)."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`to_networkx <qiskit.dagcircuit.DAGCircuit.to_networkx>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.to_networkx:1
msgid "Returns a copy of the DAGCircuit in networkx format."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`topological_nodes "
"<qiskit.dagcircuit.DAGCircuit.topological_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.topological_nodes:1
msgid "Yield nodes in topological order."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ""
":obj:`topological_op_nodes "
"<qiskit.dagcircuit.DAGCircuit.topological_op_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.topological_op_nodes:1
msgid "Yield op nodes in topological order."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`twoQ_gates <qiskit.dagcircuit.DAGCircuit.twoQ_gates>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid "Get list of 2-qubit gates."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid ":obj:`width <qiskit.dagcircuit.DAGCircuit.width>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:70:<autosummary>:1
msgid "Return the total number of qubits + clbits used by the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:72
msgid "Attributes Documentation"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:76
msgid "Methods Documentation"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.compose_back
#: qiskit.dagcircuit.DAGCircuit.compose_front qiskit.dagcircuit.DAGCircuit.draw
#: qiskit.dagcircuit.DAGCircuit.node qiskit.dagcircuit.DAGCircuit.nodes_on_wire
#: qiskit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag
msgid "パラメータ"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:3
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:3
msgid "the operation associated with the DAG node"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:5
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:5
msgid "qubits that op will be applied to"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:7
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:7
msgid "cbits that op will be applied to"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:9
msgid "optional condition (ClassicalRegister, int)"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.draw qiskit.dagcircuit.DAGCircuit.gate_nodes
#: qiskit.dagcircuit.DAGCircuit.node qiskit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_op_nodes
msgid "戻り値"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:12
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:12
msgid "the current max node"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.draw qiskit.dagcircuit.DAGCircuit.gate_nodes
#: qiskit.dagcircuit.DAGCircuit.node qiskit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_op_nodes
msgid "戻り値の型"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.compose_back
#: qiskit.dagcircuit.DAGCircuit.compose_front
#: qiskit.dagcircuit.DAGCircuit.depth
#: qiskit.dagcircuit.DAGCircuit.nodes_on_wire
#: qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag
msgid "例外"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:15
msgid "if a leaf node is connected to multiple outputs"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_front:9
msgid "optional condition (ClassicalRegister, value)"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_front:15
msgid "if initial nodes connected to multiple out edges"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.collect_runs:3
msgid ""
"For example, \"... h q[0]; cx q[0],q[1]; cx q[0],q[1]; h q[1]; ..\" would"
" produce the tuple of cx nodes as an element of the set returned from a "
"call to collect_runs([\"cx\"]). If instead the cx nodes were \"cx "
"q[0],q[1]; cx q[1],q[0];\", the method would still return the pair in a "
"tuple. The namelist can contain names that are not in the circuit's "
"basis."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.collect_runs:10
msgid "Nodes must have only one successor to continue the run."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:3
msgid ""
"The two bases must be \"compatible\" or an exception occurs. A subset of "
"input qubits of the input circuit are mapped to a subset of output qubits"
" of this circuit."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:7
#: qiskit.dagcircuit.DAGCircuit.compose_front:7
msgid "circuit to append"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:9
msgid ""
"map {Bit: Bit} from the output wires of input_circuit to input wires of "
"self. The key and value can either be of type Qubit or Clbit depending on"
" the type of the node."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:15
msgid "if missing, duplicate or inconsistent wire"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_front:3
msgid ""
"The two bases must be \"compatible\" or an exception occurs. A subset of "
"output qubits of the input circuit are mapped to a subset of input qubits"
" of this circuit."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_front:9
msgid ""
"map {(Register, int): (Register, int)} from the output wires of "
"input_circuit to input wires of self."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_front:14
msgid "missing, duplicate or inconsistent wire"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.count_ops:3
#: qiskit.dagcircuit.DAGCircuit.count_ops_longest_path:3
msgid "Returns a dictionary of counts keyed on the operation name."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.depth:1
msgid "Return the circuit depth. :returns: the circuit depth :rtype: int"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.depth:5
msgid "if not a directed acyclic graph"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.draw:3
msgid ""
"This function needs `pydot <https://github.com/erocarrera/pydot>`, which "
"in turn needs Graphviz <https://www.graphviz.org/>` to be installed."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.draw:6
msgid "scaling factor"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.draw:8
msgid "file path to save image to (format inferred from name)"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.draw:10
msgid "'plain': B&W graph 'color' (default): color input/output/op nodes"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.draw:14
msgid "if in Jupyter notebook and not saving to file,     otherwise None."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.draw:16
msgid "if in Jupyter notebook and not saving to file,"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.draw:17
msgid "otherwise None."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.edges
#: qiskit.dagcircuit.DAGCircuit.idle_wires qiskit.dagcircuit.DAGCircuit.nodes
#: qiskit.dagcircuit.DAGCircuit.nodes_on_wire
msgid "列挙"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.edges:3 qiskit.dagcircuit.DAGCircuit.nodes:3
msgid "*node* -- the node."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.gate_nodes:3
msgid "the list of DAGNodes that represent gates."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.idle_wires:3
msgid "*Bit* -- Bit in idle wire."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.layers:3
msgid ""
"A layer is a circuit whose gates act on disjoint qubits, i.e. a layer has"
" depth 1. The total number of layers equals the circuit depth d. The "
"layers are indexed from 0 to d-1 with the earliest layer at index 0. The "
"layers are constructed using a greedy algorithm. Each returned layer is a"
" dict containing {\"graph\": circuit graph, \"partition\": list of qubit "
"lists}."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.layers:10
msgid ""
"New but semantically equivalent DAGNodes will be included in the returned"
" layers, NOT the DAGNodes from the original DAG. The original vs new "
"nodes can be compared using DAGNode.semantic_eq(node1, node2)"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.layers:14
msgid ""
"TODO: Gates that use the same cbits will end up in different layers as "
"this is currently implemented. This may not be the desired behavior."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.node:3
msgid "Node identifier."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.node:6
msgid "the node."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:3
msgid "the wire to be looked at."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:5
msgid "True if only the ops nodes are wanted otherwise all nodes are returned."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:9
msgid "*DAGNode* -- the successive ops on the given wire"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:11
msgid "if the given wire doesn't exist in the DAG"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.num_qubits:1
msgid ""
"Return the total number of qubits used by the circuit. num_qubits() "
"replaces former use of width(). DAGCircuit.width() now returns qubits + "
"clbits for consistency with Circuit.width() [qiskit-terra #2564]."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.op_nodes:3
msgid "Instruction subclass op nodes to return. if op=None, return all op nodes."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.op_nodes:7
msgid "the list of node ids containing the given op."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.remove_op_node:3
msgid "Add edges from predecessors to successors."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.serial_layers:3
msgid ""
"A serial layer is a circuit with one gate. The layers have the same "
"structure as in layers()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:3
msgid "node to substitute"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:5
msgid "circuit that will substitute the node"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:7
msgid ""
"gives an order for (qu)bits in the input circuit. This order gets matched"
" to the node wires by qargs first, then cargs, then conditions."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:12
msgid "if met with unexpected predecessor/successors"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.topological_nodes:3
msgid "node in topological order"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.topological_op_nodes:3
msgid "op node in topological order"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.twoQ_gates:1
msgid "Get list of 2-qubit gates. Ignore snapshot, barriers, and the like."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.width:1
msgid ""
"Return the total number of qubits + clbits used by the circuit. This "
"function formerly returned the number of qubits by the calculation return"
" len(self.wires) - self.num_clbits() but was changed by issue #2564 to "
"return number of qubits + clbits with the new function "
"DAGCircuit.num_qubits replacing the former semantic of "
"DAGCircuit.width()."
msgstr ""

