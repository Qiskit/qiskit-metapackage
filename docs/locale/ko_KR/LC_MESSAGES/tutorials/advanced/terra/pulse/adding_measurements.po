msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-10 00:37+0000\n"
"PO-Revision-Date: 2020-04-10 00:53\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/advanced/terra/pulse/adding_measurements.po\n"
"Language: ko_KR\n"

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:9
msgid "Adding measurements to ``Schedule``\\ s"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:11
msgid "Measurement is clearly a very important part of building a Pulse schedule -- this is required to get the results of our program execution! The powerful low-level control we are granted by Pulse gives us more freedom than ``QuantumCircuit``\\ s in specifying how the measurement should be done, enabling you to explore readout error mitigation. This power of course comes with responsibility: we have to understand how measurement works, and accomodate certain hardware constraints."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:13
msgid "On this page, we will explore in depth how to create measurements, using several different approaches of increasing complexity."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:15
msgid "**Note: Pulse allows you to receive raw, kerneled, and disciminated readout data (whereas circuits will only return discriminated data). Documentation for these options can be found here-COMING SOON.**"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:18
msgid "Adding a backend-default measurement with ``measure``"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:20
msgid "To add measurements as easily to ``Schedule``\\ s as to ``QuantumCircuit``\\ s, you just have to know which qubits you want to measure (below, qubits 0 and 1) and have a OpenPulse-enabled ``backend``:"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:28
msgid "The ``backend`` contains a default definition for measurement, which is tailored to the qubits you are measuring."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:31
msgid "Basic measurement pattern and ``measure_all``"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:33
msgid "Let's use the default measurement feature to inspect a measurement and learn what each pulse does. Below, we use ``measure_all``, which measures all the qubits on the backend."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:72
msgid "Each qubit has two channels related to readout, as we see above. These are the readout transmit ``MeasureChannel``\\ s, and the readout receive ``AcquireChannel``\\ s. In superconducting qubit architectures, qubits are coupled to readout resonators. The ``MeasureChannel`` and ``AcquireChannel``\\ s label signal lines which connect to the readout resonator. The coupling between the qubit and the readout resonator hybridizes their state, so when a stimulus pulse is sent to the readout resonantor, the reflected pulse is dependent on the state of the qubit. The acquisition \"pulse\" is truly a trigger specifying to the analog-to-digital converter (ADC) to begin collecting data, and for how long. That data is used to classify the qubit state."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:76
msgid "Specifying classical memory slots"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:78
msgid "If you would like to specify where your measurement results go, there is an option for that in ``measure``, called ``qubit_mem_slots``. It takes a dictionary mapping qubit indices to classical memory slots. For example, if you want to measure qubit 0 into memory slot 1, you would do this:"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:95
msgid "This would be equivalent to the circuit measurement ``circuit.measure(qubit_reg[0], classical_reg[1])``."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:103
msgid "Build a measurement sequence from pulses"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:105
msgid "Rather than use the default measurements provided by the backend, we can also build the measurement sequence up as a basic Pulse schedule. The example below is similar to a typical measurement on IBM systems."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:107
msgid "First, we'll build the measurement stimulus pulses for each of the qubits we want to measure. Below, we use a Gaussian square parametric pulse."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:154
msgid "Before we build the acquisition pulses, we need to understand the measurement map."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:157
msgid "Acquiring qubits: the measurement map ``meas_map``"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:159
msgid "Due to control rack hardware constraints, some qubits may need to be acquired together. This can be the case for qubits whose readout channels are multiplexed. Any OpenPulse-enabled backend will provide a ``meas_map`` to notify the user of this."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:161
msgid "For instance, if we see this for a 5-qubit ``backend``"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:169
msgid "then we know that all the qubits on this device must be acquired together. On the other hand, this output"
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:175
msgid "tells us that qubits 0, 1 and 2 can be acquired independently, but qubits 3 and 4 must be acquired together."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:177
msgid "When building up a pulse schedule, be sure to add all the acquire pulses required by the backend you plan to run on. This is validated at assemble time."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:179
msgid "Getting back to our example, let's imagine we plan to run on a backend with this measurement map: ``[[0, 1, 2]]``. Now we can build the acquisition pulses. This is done with the ``Acquire`` command, which takes only a duration. We specify the channels and memory slots to acquire on."
msgstr ""

#: ../../tutorials/advanced/terra/pulse/adding_measurements.ipynb:226
msgid "Finally, we just combine the two parts together. Every instruction is on a different channel, so appending schedules the instructions at time 0. The ``measure_schedule`` can then be added to the end of any Pulse schedule to measure qubits 0 and 1 into classical memory slots 0 and 1."
msgstr ""

