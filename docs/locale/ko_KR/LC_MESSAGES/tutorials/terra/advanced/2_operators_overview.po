msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-09 12:18+0000\n"
"PO-Revision-Date: 2020-05-09 12:42\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/terra/advanced/2_operators_overview.po\n"
"Language: ko_KR\n"

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:9
msgid "Operators"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:39
msgid "Operator Class"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:41
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:44
msgid "Creating Operators"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:46
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:97
msgid "Operator Properties"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:99
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:101
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:102
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:181
msgid "Input and Output Dimensions"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:183
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:185
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:229
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:273
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:353
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:397
msgid "Converting classes to Operators"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:399
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:401
msgid "``Pauli`` objects"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:402
msgid "``Gate`` and ``Instruction`` objects"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:403
msgid "``QuantumCircuits`` objects"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:405
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:595
msgid "Using Operators in circuits"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:597
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:599
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:636
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:745
msgid "Combining Operators"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:747
msgid "Operators my be combined using several methods."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:750
msgid "Tensor Product"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:752
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:804
msgid "Tensor Expansion"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:806
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:858
msgid "Composition"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:860
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:907
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:955
msgid "Subsystem Composition"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:957
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:959
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:961
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1103
msgid "Linear combinations"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1105
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1159
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1201
msgid "Implicit Conversion to Operators"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1203
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1250
msgid "Comparison of Operators"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1252
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1293
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1335
msgid "Process Fidelity"
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1337
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr ""

#: ../../tutorials/terra/advanced/2_operators_overview.ipynb:1383
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr ""

