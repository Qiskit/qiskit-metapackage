msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-11 18:45+0000\n"
"PO-Revision-Date: 2020-05-11 19:09\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.po\n"
"Language: ko_KR\n"

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:9
msgid "Transpiler Passes and Pass Manager"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:21
msgid "Introduction"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:32
msgid "A central component of Qiskit Terra is the transpiler, which is designed for modularity and extensibility. The goal is to be able to easily write new circuit transformations (known as transpiler **passes**), and combine them with other existing passes. Which passes are chained together and in which order has a major effect on the final outcome. This pipeline is determined by a **pass manager**, which schedules the passes and also allows passes to communicate with each other by providing a shared space. In this way, the transpiler opens up the door for research into aggressive optimization of quantum circuits."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:35
msgid "In this notebook, we look at the built-in passes, how to use the pass manager, and develop a simple custom transpiler pass. In order to do the latter, we first need to introduce the internal representation of quantum circuits in Qiskit, in the form of a Directed Acyclic Graph, or **DAG**. Then, we illustrate a simple swap mapper pass, which transforms an input circuit to be compatible with a limited-connectivity quantum device."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:60
msgid "PassManager object"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:62
msgid "Lets you specify the set of passes you want."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:117
msgid "All of Qiskit's transpiler passes are accessible from ``qiskit.transpiler.passes``."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:244
msgid "Different Variants of the Same Pass"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:246
msgid "There can be passes that do the same job, but in different ways. For example, the ``TrivialLayout``, ``DenseLayout`` and ``NoiseAdaptiveLayout`` all choose a layout (binding of virtual qubits to physical qubits), but use different algorithms and objectives. Similarly, the ``BasicSwap``, ``LookaheadSwap`` and ``StochasticSwap`` all insert swaps to make the circuit compatible with the coupling map. The modularity of the transpiler allows plug-and-play replacements for each pass."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:248
msgid "Below, we show the swapper passes all applied to the same circuit, to transform it to match a linear chain topology. You can see differences in performance, where the ``StochasticSwap`` is clearly the best. However, this can vary depending on the input circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:465
msgid "Preset Pass Managers"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:467
msgid "Qiskit comes with several pre-defined pass managers, corresponding to various levels of optimization achieved through different pipelines of passes. Currently ``optimization_level`` 0 through 3 are supported; the higher the number, the more optimized it is, at the expense of more time. Choosing a good pass manager may take trial and error, as it depends heavily on the circuit being transpiled and the backend being targeted."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:469
msgid "Here we illustrate the different levels by looking at a state synthesis circuit. We initialize four qubits to an arbitrary state, and then try to optimize the circuit that achieves this."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:471
msgid "``optimization_level=0``: just maps the circuit to the backend, with no explicit optimization (except whatever optimizations the mapper does)."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:473
msgid "``optimization_level=1``: maps the circuit, but also does light-weight optimizations by collapsing adjacent gates."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:475
msgid "``optimization_level=2``: medium-weight optimization, including a noise-adaptive layout and a gate-cancellation procedure based on gate commutation relationships."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:477
msgid "``optimization_level=3``: heavy-weight optimization, which in addition to previous steps, does resynthesis of two-qubit blocks of gates in the circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:689
msgid "Now map this to the 20-qubit Tokyo device, with different optimization levels:"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1658
msgid "Introducing the DAG"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1669
msgid "In Qiskit, we represent circuits internally using a Directed Acyclic Graph (DAG). The advantage of this representation over a pure list of gates (i.e., *netlist*) is that the flow of information between operations are explicit, making it easier for passes to make transformation decisions without changing the semantics of the circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1671
msgid "Let's start by building a simple circuit, and examining its DAG."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1710
msgid "In the DAG, there are three kinds of graph nodes: qubit/clbit input nodes (green), operation nodes (blue), and output nodes (red). Each edge indicates data flow (or dependency) between two nodes."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1743
msgid "Therefore, writing a transpiler pass means using Qiskit's DAGCircuit API to analyze or transform the circuit. Let's see some examples of this."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1754
msgid "**a. Get all op nodes in the DAG:**"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1801
msgid "Each node is an instance of the ``DAGNode`` class. Let's examine the information stored in the second op node."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1854
msgid "**b. Add an operation to the back:**"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1886
msgid "**c. Add an operation to the front:**"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1941
msgid "**d. Substitute a node with a subcircuit:**"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:1981
msgid "Finally, after all transformations are complete, we can convert back to a regular QuantumCircuit object. This is what the transpiler does! It takes a circuit, operates on it in DAG form, and outputs a transformed circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2014
msgid "Implementing a BasicMapper Pass"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2025
msgid "Now that we are familiar with the DAG, let's use it to write a transpiler pass. Here we will implement a basic pass for mapping an arbitrary circuit to a device with limited qubit connectivity. We call this the BasicMapper. This pass is included in Qiskit Terra as well."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2027
msgid "The first thing to do when writing a transpiler pass is to decide whether the pass class derives from a ``TransformationPass`` or ``AnalysisPass``. Transformation passes modify the circuit, while analysis passes only collect information about a circuit (to be used by other passes). Then, the ``run(dag)`` method is implemented, which does the main task. Finally, the pass is registered inside the ``qiskit.transpiler.passes`` module."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2029
msgid "This pass functions as follows: it traverses the DAG layer-by-layer (each layer is a group of operations that does not act on independent qubits, so in theory all operations in a layer can be done independently). For each operation, if it does not already meet the coupling map constraints, the pass identifies a swap path and inserts swaps to bring the two qubits close to each other."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2031
msgid "Follow the comments in the code for more details."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2146
msgid "Let's test this pass on a small example circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2195
msgid "Now we construct a pass manager that contains our new pass. We pass the example circuit above to this pass manager, and obtain a new, transformed circuit."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2355
msgid "Note that this pass only inserts the swaps necessary to make every two-qubit interaction conform to the device coupling map. It does not, for example, care about the direction of interactions, or the native gate set supported by the device. This is a design philosophy of Qiskit's transpiler: every pass performs a small, well-defined action, and the aggressive circuit optimization is achieved by the pass manager through combining multiple passes."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2367
msgid "Transpiler Logging"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2369
msgid "Due to the complexity of the internal operations that the transpiler is performing it's likely that you'll end up in a situation where you'd like to debug an issue or just understand more of what is happening inside the transpiler when you call it. To facilitate this the transpiler emits log messages as part of its normal operation. This logging uses the Python standard library ``logging`` module to emit the log messages. Python's standard logging was used because it allows Qiskit-Terra's logging to integrate in a standard way with other applications and libraries."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2372
msgid "For a more thorough introduction to Python logging refer to the `official documentation <https://docs.python.org/3/library/logging.html>`__ and the tutorials and cookbook linked off of there."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2405
msgid "Configuring Python Standard Library Logging"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2407
msgid "By default Python Standard Logging only prints log messages at the ``WARNING``, ``ERROR``, or ``CRITICAL`` log levels. Since none of the logs emitted by the transpiler use these log levels (they're all informative) you need to configure logging."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2409
msgid "The simplest way to do this is to just run:"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2432
msgid "The ``basicConfig()`` function (see the docs here: https://docs.python.org/3/library/logging.html#logging.basicConfig) configures a root handler and formatter. We also specify the `log level <https://docs.python.org/3/library/logging.html#levels>`__ to display with the ``level`` kwarg. Setting it to a level will also include and higher levels. For example, if you set it to ``'INFO'`` in addition to the ``INFO`` level this will also include the ``WARNING``, ``ERROR``, and ``CRITICAL`` log levels."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2434
msgid "Now the python environment in this notebook is configured to emit log messages to stderr when you run the transpiler. For example:"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2557
msgid "As you can clearly see here when calling ``transpile()`` it now prints 2 types of log messages. The fist is at the ``INFO`` log level and come from the pass manager. These indicate each pass that was executed and how long that took. The second are at the ``DEBUG`` level and come from the StochasticSwap pass and describes the internal operation of that pass. It's useful for debugging issues in the pass's operation."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2569
msgid "Adjusting the log level for the transpiler"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2571
msgid "The qiskit transpiler uses a single namespace ``qiskit.transpiler``, as used by ``logging.getLogger('qiskit.transpiler')``). This makes it very easy to adjust the log level for just the transpiler. For example if you only wish to see log messages at the INFO level or above you can run:"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2662
msgid "Setting up logging to deal with parallel execution"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2664
msgid "When running the transpiler with multiple circuits by default these circuits are transpiled in parallel. If you want to do this with logging enabled and be able to understand the output some additional steps are required."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2666
msgid "If you were just to enable logging as above and then pass ``transpile()`` multiple circuits you'll get results that are difficult to decipher. For example:"
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2807
msgid "As you can see here we get log messages from all 3 circuits being transpiled together. There is no way to know which pass is part of which circuit's transpilation. Luckily Python logging provides tools to deal with this. The simplest one is to just change the `log formatter <https://docs.python.org/3/library/logging.html#logging.Formatter>`__ so that includes additional information so we can associate a log message with the process it came from."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2830
msgid "Then rerun the ``transpile()`` call and see the new log formatter."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2967
msgid "Now the format for the log messages has been changed and it includes a process name for each of the transpilation processes so it's at least clear which log messages go together."
msgstr ""

#: ../../tutorials/circuits_advanced/4_transpiler_passes_and_passmanager.ipynb:2969
msgid "There are many different options for how you can configure, this example is pretty limited. Refer to the documentation for more examples and options to build more sophisticated use cases that suit your specific use case or preferences."
msgstr ""

