msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-10 05:01+0000\n"
"PO-Revision-Date: 2019-12-10 05:08\n"
"Last-Translator: lzdanski\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/release_notes.po\n"
"Language: ja_JP\n"

#: ../../release_notes.rst:3
msgid "Release Notes"
msgstr ""

#: ../../release_notes.rst:8
msgid "Version History"
msgstr ""

#: ../../release_notes.rst:10
msgid "This table tracks the meta-package versions and the version of each Qiskit element installed:"
msgstr ""

#: ../../release_notes.rst:12
msgid "**Version History**"
msgstr ""

#: ../../release_notes.rst:16
msgid "For the ``0.7.0``, ``0.7.1``, and ``0.7.2`` meta-package releases the :ref:`versioning_strategy` policy was not formalized yet."
msgstr ""

#: ../../release_notes.rst:22
msgid "Notable Changes"
msgstr ""

#: ../../release_notes.rst:26
msgid "Qiskit 0.14.0"
msgstr ""

#: ../../release_notes.rst:29
msgid "Terra 0.11.0"
msgstr ""

#: ../../release_notes.rst:34 ../../release_notes.rst:580
#: ../../release_notes.rst:704 ../../release_notes.rst:1116
msgid "Prelude"
msgstr ""

#: ../../release_notes.rst:36
msgid "The 0.11.0 release includes several new features and bug fixes. The biggest change for this release is the addition of the pulse scheduler. This allows users to define their quantum program as a ``QuantumCircuit`` and then map it to the underlying pulse instructions that will control the quantum hardware to implement the circuit."
msgstr ""

#: ../../release_notes.rst:45 ../../release_notes.rst:593
#: ../../release_notes.rst:714 ../../release_notes.rst:1132
#: ../../release_notes.rst:1834 ../../release_notes.rst:2134
#: ../../release_notes.rst:2174 ../../release_notes.rst:2332
#: ../../release_notes.rst:2390 ../../release_notes.rst:2414
#: ../../release_notes.rst:2506 ../../release_notes.rst:2556
#: ../../release_notes.rst:2838 ../../release_notes.rst:2869
msgid "New Features"
msgstr ""

#: ../../release_notes.rst:47
msgid "Added 5 new commands to easily retrieve user-specific data from ``BackendProperties``: ``gate_property``, ``gate_error``, ``gate_length``, ``qubit_property``, ``t1``, ``t2``, ``readout_error`` and ``frequency``. They return the specific values of backend properties. For example::"
msgstr ""

#: ../../release_notes.rst:65
msgid "Added method ``Instruction.is_parameterized()`` to check if an instruction object is parameterized. This method returns ``True`` if and only if instruction has a ``ParameterExpression`` or ``Parameter`` object for one of its params."
msgstr ""

#: ../../release_notes.rst:70
msgid "Added a new analysis pass ``Layout2qDistance``. This pass allows to \"score\" a layout selection, once ``property_set['layout']`` is set.  The score will be the sum of distances for each two-qubit gate in the circuit, when they are not directly connected. This scoring does not consider direction in the coupling map. The lower the number, the better the layout selection is."
msgstr ""

#: ../../release_notes.rst:76
msgid "For example, consider a linear coupling map ``[0]--[2]--[1]`` and the following circuit::"
msgstr ""

#: ../../release_notes.rst:83
msgid "If the layout is ``{qr[0]:0, qr[1]:1}``, ``Layout2qDistance`` will set ``property_set['layout_score'] = 1``. If the layout is ``{qr[0]:0, qr[1]:2}``, then the result is ``property_set['layout_score'] = 0``. The lower the score, the better."
msgstr ""

#: ../../release_notes.rst:88
msgid "Added ``qiskit.QuantumCircuit.cnot`` as an alias for the ``cx`` method of ``QuantumCircuit``. The names ``cnot`` and ``cx`` are often used interchangeably now the `cx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:92
msgid "Added ``qiskit.QuantumCircuit.toffoli`` as an alias for the ``ccx`` method of ``QuantumCircuit``. The names ``toffoli`` and ``ccx`` are often used interchangeably now the `ccx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:96
msgid "Added ``qiskit.QuantumCircuit.fredkin`` as an alias for the ``cswap`` method of ``QuantumCircuit``. The names ``fredkin`` and ``cswap`` are often used interchangeably now the `cswap` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:101
msgid "The ``latex`` output mode for ``qiskit.visualization.circuit_drawer()`` and the ``qiskit.circuit.QuantumCircuit.draw()`` method now has a mode to passthrough raw latex from gate labels and parameters. The syntax for doing this mirrors matplotlib's `mathtext mode <https://matplotlib.org/tutorials/text/mathtext.html>`__ syntax. Any portion of a label string between a pair of '$' characters will be treated as raw latex and passed directly into the generated output latex. This can be leveraged to add more advanced formatting to circuit diagrams generated with the latex drawer."
msgstr ""

#: ../../release_notes.rst:111
msgid "Prior to this release all gate labels were run through a utf8 -> latex conversion to make sure that the output latex would compile the string as expected. This is still what happens for all portions of a label outside the '$' pair. Also if you want to use a dollar sign in your label make sure you escape it in the label string (ie ``'\\$'``)."
msgstr ""

#: ../../release_notes.rst:117
msgid "You can mix and match this passthrough with the utf8 -> latex conversion to create the exact label you want, for example::"
msgstr ""

#: ../../release_notes.rst:128
msgid "will now render the first custom gate's label as ``α_gate``, the second will be ``α_gate`` with a 2 subscript, and the last custom gate's label will be ``$α$_gate``."
msgstr ""

#: ../../release_notes.rst:132
msgid "Add ``ControlledGate`` class for representing controlled gates. Controlled gate instances are created with the ``control(n)`` method of ``Gate`` objects where ``n`` represents the number of controls. The control qubits come before the controlled qubits in the new gate. For example::"
msgstr ""

#: ../../release_notes.rst:145
msgid "generates::"
msgstr ""

#: ../../release_notes.rst:156
msgid "Allowed values of ``meas_level`` parameters and fields can now be a member from the `IntEnum` class ``qiskit.qobj.utils.MeasLevel``. This can be used when calling ``execute`` (or anywhere else ``meas_level`` is specified) with a pulse experiment. For example::"
msgstr ""

#: ../../release_notes.rst:173
msgid "In this above example, ``meas_level=MeasLevel.CLASSIFIED`` and ``meas_level=2`` can be used interchangably now."
msgstr ""

#: ../../release_notes.rst:176
msgid "A new layout selector based on constraint solving is included. `CSPLayout` models the problem of finding a layout as a constraint problem and uses recursive backtracking to solve it."
msgstr ""

#: ../../release_notes.rst:205
msgid "The parameter ``CSPLayout(...,strict_direction=True)`` is more restrictive but it will guarantee there is no need of running ``CXDirection`` after."
msgstr ""

#: ../../release_notes.rst:224
msgid "If the constraint system is not solvable, the `layout` property is not set."
msgstr ""

#: ../../release_notes.rst:237
msgid "PulseBackendConfiguration (accessed normally as backend.configuration()) has been extended with useful methods to explore its data and the functionality that exists in PulseChannelSpec. PulseChannelSpec will be deprecated in the future. For Example::"
msgstr ""

#: ../../release_notes.rst:250
msgid "``PulseDefaults`` (accessed normally as ``backend.defaults()``) has an attribute, ``circuit_instruction_map`` which has the methods of CmdDef. The new `circuit_instruction_map` is an ``InstructionScheduleMap`` object with three new functions beyond what CmdDef had:"
msgstr ""

#: ../../release_notes.rst:255
msgid "qubit_instructions(qubits) returns the operations defined for the qubits"
msgstr ""

#: ../../release_notes.rst:256
msgid "assert_has(instruction, qubits) raises an error if the op isn't defined"
msgstr ""

#: ../../release_notes.rst:257
msgid "remove(instruction, qubits) like pop, but doesn't require parameters"
msgstr ""

#: ../../release_notes.rst:259
msgid "There are some differences from the CmdDef:"
msgstr ""

#: ../../release_notes.rst:261
msgid "``__init__`` takes no arguments"
msgstr ""

#: ../../release_notes.rst:262
msgid "``cmds`` and ``cmd_qubits`` are deprecated and replaced with ``instructions`` and ``qubits_with_instruction``"
msgstr ""

#: ../../release_notes.rst:265
msgid "Example::"
msgstr ""

#: ../../release_notes.rst:273
msgid "A new kwarg parameter, ``show_framechange_channels`` to optionally disable displaying channels with only framechange instructions in pulse visualizations was added to the ``qiskit.visualization.pulse_drawer()`` function and ``qiskit.pulse.Schedule.draw()`` method. When this new kwarg is set to ``False`` the output pulse schedule visualization will not include any channels that only include frame changes."
msgstr ""

#: ../../release_notes.rst:280
msgid "For example:"
msgstr ""

#: ../../release_notes.rst:300
msgid "A new utility function ``qiskit.result.marginal_counts()`` is added which allows marginalization of the counts over some indices of interest. This is useful when more qubits are measured than needed, and one wishes to get the observation counts for some subset of them only."
msgstr ""

#: ../../release_notes.rst:305
msgid "When ``passmanager.run(...)`` is invoked with more than one circuit, the transpilation of these circuits will run in parallel."
msgstr ""

#: ../../release_notes.rst:308
msgid "PassManagers can now be sliced to create a new Passmanager containing a subset of passes using the square bracket operator. This allow running or drawing a portion of the Passmanager for easier testing and visualization. For example let's try to draw the first 3 passes of a PassManager pm, or run just the second pass on our circuit:"
msgstr ""

#: ../../release_notes.rst:319
msgid "Also now, PassManagers can be created by adding two PassManagers or by directly adding a pass/list of passes to a PassManager."
msgstr ""

#: ../../release_notes.rst:327
msgid "A basic ``scheduler`` module has now been added to Qiskit. The `scheduler` schedules an input transpiled ``QuantumCircuit`` into a pulse ``Schedule``. The scheduler accepts as input a ``Schedule`` and either a pulse ``Backend``, or a ``CmdDef`` which relates circuit ``Instruction`` objects on specific qubits to pulse Schedules and a ``meas_map`` which determines which measurements must occur together."
msgstr ""

#: ../../release_notes.rst:334
msgid "Scheduling example::"
msgstr ""

#: ../../release_notes.rst:346
msgid "The scheduler currently supports two scheduling policies, `as_late_as_possible` (``alap``) and `as_soon_as_possible` (``asap``), which respectively schedule pulse instructions to occur as late as possible or as soon as possible across qubits in a circuit. The scheduling policy may be selected with the input argument ``method``, for example::"
msgstr ""

#: ../../release_notes.rst:355
msgid "It is easy to use a pulse ``Schedule`` within a ``QuantumCircuit`` by mapping it to a custom circuit instruction such as a gate which may be used in a ``QuantumCircuit``. To do this, first, define the custom gate and then add an entry into the ``CmdDef`` for the gate, for each qubit that the gate will be applied to. The gate can then be used in the ``QuantumCircuit``. At scheduling time the gate will be mapped to the underlying pulse schedule. Using this technique allows easy integration with preexisting qiskit modules such as Ignis."
msgstr ""

#: ../../release_notes.rst:364
msgid "For example::"
msgstr ""

#: ../../release_notes.rst:392
msgid "Known Issues"
msgstr ""

#: ../../release_notes.rst:394
msgid "The feature for transpiling in parallel when ``passmanager.run(...)`` is invoked with more than one circuit is not supported under Windows. See `#2988 <https://github.com/Qiskit/qiskit-terra/issues/2988>`__ for more details."
msgstr ""

#: ../../release_notes.rst:403 ../../release_notes.rst:963
#: ../../release_notes.rst:1414
msgid "Upgrade Notes"
msgstr ""

#: ../../release_notes.rst:405
msgid "The ``qiskit.pulse.channels.SystemTopology`` class was used as a helper class for ``PulseChannelSpec``. It has been removed since with the deprecation of ``PulseChannelSpec`` and changes to ``BackendConfiguration`` make it unnecessary."
msgstr ""

#: ../../release_notes.rst:410
msgid "The previously deprecated representation of qubits and classical bits as tuple, which was deprecated in the 0.9 release, has been removed. The use of ``Qubit`` and ``Clbit`` objects is the new way to represent qubits and classical bits."
msgstr ""

#: ../../release_notes.rst:415
msgid "The previously deprecated representation of the basis set as single string has been removed. A list of strings is the new prefered way."
msgstr ""

#: ../../release_notes.rst:418
msgid "The method ``BaseModel.as_dict``, which was deprecated in the 0.9 release, has been removed in favor of the method ``BaseModel.to_dict``."
msgstr ""

#: ../../release_notes.rst:421
msgid "In PulseDefaults (accessed normally as backend.defaults()), ``qubit_freq_est`` and ``meas_freq_est`` are now returned in Hz rather than GHz. This means the new return values are 1e9 * their previous value."
msgstr ""

#: ../../release_notes.rst:425
msgid "`dill <https://pypi.org/project/dill/>`__ was added as a requirement. This is needed to enable running ``passmanager.run()`` in parallel for more than one circuit."
msgstr ""

#: ../../release_notes.rst:429
msgid "The previously deprecated gate ``UBase``, which was deprecated in the 0.9 release, has been removed. The gate ``U3Gate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:433
msgid "The previously deprecated gate ``CXBase``, which was deprecated in the 0.9 release, has been removed. The gate ``CnotGate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:437
msgid "The instruction ``snapshot`` used to implicitly convert the ``label`` parameter to string. That convertion has been removed and an error is raised if a string is not provided."
msgstr ""

#: ../../release_notes.rst:441
msgid "The previously deprecated gate ``U0Gate``, which was deprecated in the 0.9 release, has been removed. The gate ``IdGate`` should be used instead to insert delays."
msgstr ""

#: ../../release_notes.rst:449 ../../release_notes.rst:1005
#: ../../release_notes.rst:1680
msgid "Deprecation Notes"
msgstr ""

#: ../../release_notes.rst:451
msgid "The ``qiskit.pulse.CmdDef`` class has been deprecated. Instead you should use the ``qiskit.pulse.InstructionScheduleMap``. The ``InstructionScheduleMap`` object for a pulse enabled system can be accessed at ``backend.defaults().instruction_schedules``."
msgstr ""

#: ../../release_notes.rst:456
msgid "``PulseChannelSpec`` is being deprecated. Use ``BackendConfiguration`` instead. The backend configuration is accessed normally as ``backend.configuration()``. The config has been extended with most of the functionality of PulseChannelSpec, with some modifications as follows, where `0` is an exemplary qubit index::"
msgstr ""

#: ../../release_notes.rst:467
msgid "Now, if there is an attempt to get a channel for a qubit which does not exist for the device, a ``BackendConfigurationError`` will be raised with a helpful explanation."
msgstr ""

#: ../../release_notes.rst:471
msgid "The methods ``memoryslots`` and ``registerslots`` of the PulseChannelSpec have not been migrated to the backend configuration. These classical resources are not restrained by the physical configuration of a backend system. Please instantiate them directly::"
msgstr ""

#: ../../release_notes.rst:479
msgid "The ``qubits`` method is not migrated to backend configuration. The result of ``qubits`` can be built as such::"
msgstr ""

#: ../../release_notes.rst:484
msgid "``Qubit`` within ``pulse.channels`` has been deprecated. They should not be used. It is possible to obtain channel <=> qubit mappings through the BackendConfiguration (or backend.configuration())."
msgstr ""

#: ../../release_notes.rst:488
msgid "The function ``qiskit.visualization.circuit_drawer.qx_color_scheme()`` has been deprecated. This function is no longer used internally and doesn't reflect the current IBM QX style. If you were using this function to generate a style dict locally you must save the output from it and use that dictionary directly."
msgstr ""

#: ../../release_notes.rst:494
msgid "The Exception ``TranspilerAccessError`` has been deprecated. An alternative function ``TranspilerError`` can be used instead to provide the same functionality. This alternative function provides the exact same functionality but with greater generality."
msgstr ""

#: ../../release_notes.rst:499
msgid "Buffers in Pulse are deprecated. If a nonzero buffer is supplied, a warning will be issued with a reminder to use a Delay instead. Other options would include adding samples to a pulse instruction which are (0.+0.j) or setting the start time of the next pulse to ``schedule.duration + buffer``."
msgstr ""

#: ../../release_notes.rst:504
msgid "Passing in ``sympy.Basic``, ``sympy.Expr`` and ``sympy.Matrix`` types as instruction parameters are deprecated and will be removed in a future release. You'll need to convert the input to one of the supported types which are:"
msgstr ""

#: ../../release_notes.rst:509
msgid "``int``"
msgstr ""

#: ../../release_notes.rst:510
msgid "``float``"
msgstr ""

#: ../../release_notes.rst:511
msgid "``complex``"
msgstr ""

#: ../../release_notes.rst:512
msgid "``str``"
msgstr ""

#: ../../release_notes.rst:513
msgid "``np.ndarray``"
msgstr ""

#: ../../release_notes.rst:519 ../../release_notes.rst:1052
#: ../../release_notes.rst:1746 ../../release_notes.rst:1845
#: ../../release_notes.rst:1930 ../../release_notes.rst:2142
#: ../../release_notes.rst:2369 ../../release_notes.rst:2468
msgid "Bug Fixes"
msgstr ""

#: ../../release_notes.rst:521
msgid "The Collect2qBlocks and CommutationAnalyis passes in the transpiler had been unable to process circuits containing Parameterized gates, preventing Parameterized circuits from being transpiled at optimization_level 2 or above. These passes have been corrected to treat Parameterized gates as opaque."
msgstr ""

#: ../../release_notes.rst:527
msgid "The align_measures function had an issue where Measure stimulus pulses weren't properly aligned with Acquire pulses, resulting in an error. This has been fixed."
msgstr ""

#: ../../release_notes.rst:531
msgid "Uses of ``numpy.random.seed`` have been removed so that calls of qiskit functions do not affect results of future calls to ``numpy.random``"
msgstr ""

#: ../../release_notes.rst:534
msgid "Fixed race condition occuring in the job monitor when ``job.queue_position()`` returns ``None``. ``None`` is a valid return from ``job.queue_position()``."
msgstr ""

#: ../../release_notes.rst:538
msgid "Backend support for ``memory=True`` now checked when that kwarg is passed. ``QiskitError`` results if not supported."
msgstr ""

#: ../../release_notes.rst:541
msgid "When transpiling without a coupling map, there were no check in the amount of qubits of the circuit to transpile. Now the transpile process checks that the backend has enough qubits to allocate the circuit."
msgstr ""

#: ../../release_notes.rst:549 ../../release_notes.rst:1074
#: ../../release_notes.rst:1774 ../../release_notes.rst:1852
msgid "Other Notes"
msgstr ""

#: ../../release_notes.rst:551
msgid "The ``qiskit.result.marginal_counts()`` function replaces a similar utility function in qiskit-ignis ``qiskit.ignis.verification.tomography.marginal_counts()``, which will be deprecated in a future qiskit-ignis release."
msgstr ""

#: ../../release_notes.rst:556
msgid "All sympy parameter output type support have been been removed (or deprecated as noted) from qiskit-terra. This includes sympy type parameters in ``QuantumCircuit`` objects, qasm ast nodes, or ``Qobj`` objects."
msgstr ""

#: ../../release_notes.rst:562 ../../release_notes.rst:1085
#: ../../release_notes.rst:1812
msgid "Aer 0.3"
msgstr ""

#: ../../release_notes.rst:564 ../../release_notes.rst:569
#: ../../release_notes.rst:574 ../../release_notes.rst:1087
#: ../../release_notes.rst:1092 ../../release_notes.rst:1097
#: ../../release_notes.rst:1102 ../../release_notes.rst:1967
#: ../../release_notes.rst:1977 ../../release_notes.rst:2005
#: ../../release_notes.rst:2028 ../../release_notes.rst:2033
#: ../../release_notes.rst:2113 ../../release_notes.rst:2118
#: ../../release_notes.rst:2123 ../../release_notes.rst:2128
#: ../../release_notes.rst:2530 ../../release_notes.rst:2535
msgid "No Change"
msgstr ""

#: ../../release_notes.rst:567 ../../release_notes.rst:1090
#: ../../release_notes.rst:1831
msgid "Ignis 0.2"
msgstr ""

#: ../../release_notes.rst:572 ../../release_notes.rst:1095
#: ../../release_notes.rst:1859
msgid "Aqua 0.6"
msgstr ""

#: ../../release_notes.rst:577
msgid "IBM Q Provider 0.4"
msgstr ""

#: ../../release_notes.rst:582
msgid "The 0.4.0 release is the first release that makes use of all the features of the new IBM Q API. In particular, the ``IBMQJob`` class has been revamped in order to be able to retrieve more information from IBM Q, and a Job Manager class has been added for allowing a higher-level and more seamless usage of large or complex jobs. If you have not upgraded from the legacy IBM Q Experience or QConsole yet, please ensure to revisit the release notes for IBM Q Provider 0.3 (Qiskit 0.11) for more details on how to make the transition. The legacy accounts will no longer be supported as of this release."
msgstr ""

#: ../../release_notes.rst:596
msgid "Job modifications"
msgstr ""

#: ../../release_notes.rst:598
msgid "The ``IBMQJob`` class has been revised, and now mimics more closely to the contents of a remote job along with new features:"
msgstr ""

#: ../../release_notes.rst:601
msgid "You can now assign a name to a job, by specifying ``IBMQBackend.run(..., job_name='...')`` when submitting a job. This name can be retrieved via ``IBMQJob.name()`` and can be used for filtering."
msgstr ""

#: ../../release_notes.rst:604
msgid "Jobs can now be shared with other users at different levels (global, per hub, group or project) via an optional ``job_share_level`` parameter when submitting the job."
msgstr ""

#: ../../release_notes.rst:607
msgid "``IBMQJob`` instances now have more attributes, reflecting the contents of the remote IBM Q jobs. This implies that new attributes introduced by the IBM Q API will automatically and immediately be available for use (for example, ``job.new_api_attribute``). The new attributes will be promoted to methods when they are considered stable (for example, ``job.name()``)."
msgstr ""

#: ../../release_notes.rst:612
msgid "``.error_message()`` returns more information on why a job failed."
msgstr ""

#: ../../release_notes.rst:613
msgid "``.queue_position()`` accepts a ``refresh`` parameter for forcing an update."
msgstr ""

#: ../../release_notes.rst:614
msgid "``.result()`` accepts an optional ``partial`` parameter, for returning partial results, if any, of jobs that failed. Be aware that ``Result`` methods, such as ``get_counts()`` will raise an exception if applied on experiments that failed."
msgstr ""

#: ../../release_notes.rst:619
msgid "Please note that the changes include some low-level modifications of the class. If you were creating the instances manually, note that:"
msgstr ""

#: ../../release_notes.rst:622
msgid "the signature of the constructor has changed to account for the new features."
msgstr ""

#: ../../release_notes.rst:623
msgid "the ``.submit()`` method can no longer be called directly, and jobs are expected to be submitted either via the synchronous ``IBMQBackend.run()`` or via the Job Manager."
msgstr ""

#: ../../release_notes.rst:628
msgid "Job Manager"
msgstr ""

#: ../../release_notes.rst:630
msgid "A new Job Manager (``IBMQJobManager``) has been introduced, as a higher-level mechanism for handling jobs composed of multiple circuits or pulse schedules. The Job Manager aims to provide a transparent interface, intelligently splitting the input into efficient units of work and taking full advantage of the different components. It will be expanded on upcoming versions, and become the recommended entry point for job submission."
msgstr ""

#: ../../release_notes.rst:637
msgid "Its ``.run()`` method receives a list of circuits or pulse schedules, and returns a ``ManagedJobSet instance``, which can then be used to track the statuses and results of these jobs. For example::"
msgstr ""

#: ../../release_notes.rst:665
msgid "provider.backends modifications"
msgstr ""

#: ../../release_notes.rst:667
msgid "The ``provider.backends`` member, which was previously a function that returned a list of backends, has been promoted to a service. This implies that it can be used both in the previous way, as a ``.backends()`` method, and also as a ``.backends`` attribute with expanded capabilities:"
msgstr ""

#: ../../release_notes.rst:672
msgid "it contains the existing backends from that provider as attributes, which can be used for autocompletion. For example::"
msgstr ""

#: ../../release_notes.rst:677
msgid "is equivalent to::"
msgstr ""

#: ../../release_notes.rst:681
msgid "the ``provider.backends.jobs()`` and ``provider.backends.retrieve_job()`` methods can be used for retrieving provider-wide jobs."
msgstr ""

#: ../../release_notes.rst:686
msgid "Other changes"
msgstr ""

#: ../../release_notes.rst:688
msgid "The ``backend.properties()`` function now accepts an optional ``datetime`` parameter. If specified, the function returns the backend properties closest to, but older than, the specified datetime filter."
msgstr ""

#: ../../release_notes.rst:691
msgid "Some ``warnings`` have been toned down to ``logger.warning`` messages."
msgstr ""

#: ../../release_notes.rst:696
msgid "Qiskit 0.13.0"
msgstr ""

#: ../../release_notes.rst:699
msgid "Terra 0.10.0"
msgstr ""

#: ../../release_notes.rst:706
msgid "The 0.10.0 release includes several new features and bug fixes. The biggest change for this release is the addition of initial support for using Qiskit with trapped ion trap backends."
msgstr ""

#: ../../release_notes.rst:716
msgid "Introduced new methods in ``QuantumCircuit`` which allows the seamless adding or removing of measurements at the end of a circuit."
msgstr ""

#: ../../release_notes.rst:722
msgid "``measure_all()``"
msgstr ""

#: ../../release_notes.rst:720
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all qubits in the circuit. Creates a ``ClassicalRegister`` of size equal to the number of qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:728
msgid "``measure_active()``"
msgstr ""

#: ../../release_notes.rst:725
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all active qubits in the circuit. A qubit is active if it has at least one other operation acting upon it. Creates a ``ClassicalRegister`` of size equal to the number of active qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:735
msgid "``remove_final_measurements()``"
msgstr ""

#: ../../release_notes.rst:731
msgid "Removes all final measurements and preceeding ``barrier`` from a circuit. A measurement is considered \"final\" if it is not followed by any other operation, excluding barriers and other measurements. After the measurements are removed, if all of the classical bits in the ``ClassicalRegister`` are idle (have no operations attached to them), then the ``ClassicalRegister`` is removed."
msgstr ""

#: ../../release_notes.rst:737
msgid "Examples::"
msgstr ""

#: ../../release_notes.rst:798
msgid "Initial support for executing experiments on ion trap backends has been added."
msgstr ""

#: ../../release_notes.rst:801
msgid "An Rxx gate (rxx) and a global Mølmer–Sørensen gate (ms) have been added to the standard gate set."
msgstr ""

#: ../../release_notes.rst:804
msgid "A Cnot to Rxx/Rx/Ry decomposer ``cnot_rxx_decompose`` and a single qubit Euler angle decomposer ``OneQubitEulerDecomposer`` have been added to the ``quantum_info.synthesis`` module."
msgstr ""

#: ../../release_notes.rst:808
msgid "A transpiler pass ``MSBasisDecomposer`` has been added to unroll circuits defined over U3 and Cnot gates into a circuit defined over Rxx,Ry and Rx. This pass will be included in preset pass managers for backends which include the 'rxx' gate in their supported basis gates."
msgstr ""

#: ../../release_notes.rst:813
msgid "The backends in ``qiskit.test.mock`` now contain a snapshot of real device calibration data. This is accessible via the ``properties()`` method for each backend. This can be used to test any code that depends on backend properties, such as noise-adaptive transpiler passes or device noise models for simulation. This will create a faster testing and development cycle without the need to go to live backends."
msgstr ""

#: ../../release_notes.rst:820
msgid "Allows the Result class to return partial results. If a valid result schema is loaded that contains some experiments which succeeded and some which failed, this allows accessing the data from experiments that succeeded, while raising an exception for experiments that failed and displaying the appropriate error message for the failed results."
msgstr ""

#: ../../release_notes.rst:826
msgid "An ``ax`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:828
msgid "``qiskit.visualization.plot_histogram``"
msgstr ""

#: ../../release_notes.rst:829
msgid "``qiskit.visualization.plot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:830
msgid "``qiskit.visualization.plot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:831
msgid "``qiskit.visualization.circuit_drawer`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:832
msgid "``qiskit.QuantumCircuit.draw`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:834
msgid "This kwarg is used to pass in a ``matplotlib.axes.Axes`` object to the visualization functions. This enables integrating these visualization functions into a larger visualization workflow. Also, if an `ax` kwarg is specified then there is no return from the visualization functions."
msgstr ""

#: ../../release_notes.rst:839
msgid "An ``ax_real`` and ``ax_imag`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:842
msgid "``qiskit.visualization.plot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:843
msgid "``qiskit.visualization.plot_state_city``"
msgstr ""

#: ../../release_notes.rst:845
msgid "These new kargs work the same as the newly added ``ax`` kwargs for other visualization functions. However because these plots use two axes (one for the real component, the other for the imaginary component). Having two kwargs also provides the flexibility to only generate a visualization for one of the components instead of always doing both. For example::"
msgstr ""

#: ../../release_notes.rst:858
msgid "will only generate a plot of the real component."
msgstr ""

#: ../../release_notes.rst:860
msgid "A given pass manager now can be edited with the new method `replace`. This method allows to replace a particular stage in a pass manager, which can be handy when dealing with preset pass managers. For example, let's edit the layout selector of the pass manager used at optimization level 0:"
msgstr ""

#: ../../release_notes.rst:881
msgid "The layout selection is set in the stage `[1]`. Let's replace it with `DenseLayout`:"
msgstr ""

#: ../../release_notes.rst:897
msgid "If you want to replace it without any condition, you can use set-item shortcut:"
msgstr ""

#: ../../release_notes.rst:911 ../../release_notes.rst:1396
msgid "Introduced a new pulse command ``Delay`` which may be inserted into a pulse ``Schedule``. This command accepts a ``duration`` and may be added to any ``Channel``. Other commands may not be scheduled on a channel during a delay."
msgstr ""

#: ../../release_notes.rst:915 ../../release_notes.rst:1400
msgid "The delay can be added just like any other pulse command. For example::"
msgstr ""

#: ../../release_notes.rst:936
msgid "One may also pass additional channels to be padded and a time to pad until, for example::"
msgstr ""

#: ../../release_notes.rst:965
msgid "Assignments and modifications to the ``data`` attribute of ``qiskit.QuantumCircuit`` objects are now validated following the same rules used throughout the ``QuantumCircuit`` API. This was done to improve the performance of the circuits API since we can now assume the ``data`` attribute is in a known format. If you were manually modifying the ``data`` attribute of a circuit object before this may no longer work if your modifications resulted in an data structure other than the list of instructions with context in the format ``[(instruction, qargs, cargs)]``"
msgstr ""

#: ../../release_notes.rst:974
msgid "The transpiler default passmanager for optimization level 2 now uses the ``DenseLayout`` layout selection mechanism by default instead of ``NoiseAdaptiveLayout``. The ``Denselayout`` pass has also been modified to be made noise-aware."
msgstr ""

#: ../../release_notes.rst:979
msgid "The deprecated ``DeviceSpecification`` class has been removed. Instead you should use the ``PulseChannelSpec``. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:986
msgid "The deprecated module ``qiskit.pulse.ops`` has been removed. Use ``Schedule`` and ``Instruction`` methods directly. For example, rather than::"
msgstr ""

#: ../../release_notes.rst:993
msgid "Instead please use::"
msgstr ""

#: ../../release_notes.rst:998
msgid "This same pattern applies to other ``ops`` functions: ``insert``, ``shift``, ``append``, and ``flatten``."
msgstr ""

#: ../../release_notes.rst:1007
msgid "Using the ``control`` property of ``qiskit.circuit.Instruction`` for classical control is now deprecated. In the future this property will be used for quantum control. Classically conditioned operations will instead be handled by the ``condition`` property of ``qiskit.circuit.Instruction``."
msgstr ""

#: ../../release_notes.rst:1012
msgid "Support for setting ``qiskit.circuit.Instruction`` parameters with an object of type ``qiskit.qasm.node.Node`` has been deprecated. ``Node`` objects that were previously used as parameters should be converted to a supported type prior to initializing a new ``Instruction`` object or calling the ``Instruction.params`` setter. Supported types are ``int``, ``float``, ``complex``, ``str``, ``qiskit.circuit.ParameterExpression``, or ``numpy.ndarray``."
msgstr ""

#: ../../release_notes.rst:1020
msgid "In the qiskit 0.9.0 release the representation of bits (both qubits and classical bits) changed from tuples of the form ``(register, index)`` to be instances of the classes ``qiskit.circuit.Qubit`` and ``qiskit.circuit.Clbit``. For backwards compatibility comparing the equality between a legacy tuple and the bit classes was supported as everything transitioned from tuples to being objects. This support is now deprecated and will be removed in the future. Everything should use the bit classes instead of tuples moving forward."
msgstr ""

#: ../../release_notes.rst:1029
msgid "When the ``mpl`` output is used for either ``qiskit.QuantumCircuit.draw()`` or ``qiskit.visualization.circuit_drawer()`` and the ``style`` kwarg is used, passing in unsupported dictionary keys as part of the ``style``` dictionary is now deprecated. Where these unknown arguments were previously silently ignored, in the future, unsupported keys will raise an exception."
msgstr ""

#: ../../release_notes.rst:1035
msgid "The ``line length`` kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function with the text output mode is deprecated. It has been replaced by the ``fold`` kwarg which will behave identically for the text output mode (but also now supports the mpl output mode too). ``line_length`` will be removed in a future release so calls should be updated to use ``fold`` instead."
msgstr ""

#: ../../release_notes.rst:1042
msgid "The ``fold`` field in the ``style`` dict kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function has been deprecated. It has been replaced by the ``fold`` kwarg on both functions. This kwarg behaves identically to the field in the style dict."
msgstr ""

#: ../../release_notes.rst:1054
msgid "Instructions layering which underlies all types of circuit drawing has changed to address right/left justification. This sometimes results in output which is topologically equivalent to the rendering in prior versions but visually different than previously rendered. Fixes `issue #2802 <https://github.com/Qiskit/qiskit-terra/issues/2802>`_"
msgstr ""

#: ../../release_notes.rst:1060
msgid "Add ``memory_slots`` to ``QobjExperimentHeader`` of pulse Qobj. This fixes a bug in the data format of ``meas_level=2`` results of pulse experiments. Measured quantum states are returned as a bit string with zero padding based on the number set for ``memory_slots``."
msgstr ""

#: ../../release_notes.rst:1065
msgid "Fixed the visualization of the rzz gate in the latex circuit drawer to match the cu1 gate to reflect the symmetry in the rzz gate. The fix is based on the cds command of the qcircuit latex package. Fixes `issue #1957 <https://github.com/Qiskit/qiskit-terra/issues/1957>`_"
msgstr ""

#: ../../release_notes.rst:1076
msgid "``matplotlib.figure.Figure`` objects returned by visualization functions are no longer always closed by default. Instead the returned figure objects are only closed if the configured matplotlib backend is an inline jupyter backend(either set with ``%matplotlib inline`` or ``%matplotlib notebook``). Output figure objects are still closed with these backends to avoid duplicate outputs in jupyter notebooks (which is why the ``Figure.close()`` were originally added)."
msgstr ""

#: ../../release_notes.rst:1100 ../../release_notes.rst:1952
#: ../../release_notes.rst:1986 ../../release_notes.rst:2036
msgid "IBM Q Provider 0.3"
msgstr ""

#: ../../release_notes.rst:1106
msgid "Qiskit 0.12.0"
msgstr ""

#: ../../release_notes.rst:1111
msgid "Terra 0.9"
msgstr ""

#: ../../release_notes.rst:1118
msgid "The 0.9 release includes many new features and many bug fixes. The biggest changes for this release are new debugging capabilities for PassManagers. This includes a function to visualize a PassManager, the ability to add a callback function to a PassManager, and logging of passes run in the PassManager. Additionally, this release standardizes the way that you can set an initial layout for your circuit. So now you can leverage ``initial_layout`` the kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` and the qubits in the circuit will get laid out on the desire qubits on the device. Visualization of circuits will now also show this clearly when visualizing a circuit that has been transpiled with a layout."
msgstr ""

#: ../../release_notes.rst:1134
msgid "A ``DAGCircuit`` object (i.e. the graph representation of a QuantumCircuit where operation dependencies are explicit) can now be visualized with the ``.draw()`` method. This is in line with Qiskit's philosophy of easy visualization. Other objects which support a ``.draw()`` method are ``QuantumCircuit``, ``PassManager``, and ``Schedule``."
msgstr ""

#: ../../release_notes.rst:1140
msgid "Added a new visualization function ``qiskit.visualization.plot_error_map()`` to plot the error map for a given backend. It takes in a backend object from the qiskit-ibmq-provider and will plot the current error map for that device."
msgstr ""

#: ../../release_notes.rst:1145
msgid "Both ``qiskit.QuantumCircuit.draw()`` and ``qiskit.visualization.circuit_drawer()`` now support annotating the qubits in the visualization with layout information. If the ``QuantumCircuit`` object being drawn includes layout metadata (which is normally only set on the circuit output from ``transpile()`` calls) then by default that layout will be shown on the diagram. This is done for all circuit drawer backends. For example::"
msgstr ""

#: ../../release_notes.rst:1174
msgid "will yield a diagram like::"
msgstr ""

#: ../../release_notes.rst:1209
msgid "If you do not want the layout to be shown on transpiled circuits (or any other circuits with a layout set) there is a new boolean kwarg for both functions, ``with_layout`` (which defaults ``True``), which when set ``False`` will disable the layout annotation in the output circuits."
msgstr ""

#: ../../release_notes.rst:1214
msgid "A new analysis pass ``CountOpsLongest`` was added to retrieve the number of operations on the longest path of the DAGCircuit. When used it will add a ``count_ops_longest_path`` key to the property set dictionary. You can add it to your a passmanager with something like::"
msgstr ""

#: ../../release_notes.rst:1226
msgid "and then access the longest path via the property set value with something like::"
msgstr ""

#: ../../release_notes.rst:1234
msgid "which will set a condition on that pass based on the longest path."
msgstr ""

#: ../../release_notes.rst:1236
msgid "Two new functions, ``sech()`` and ``sech_deriv()`` were added to the pulse library module ``qiskit.pulse.pulse_lib`` for creating an unnormalized hyperbolic secant ``SamplePulse`` object and an unnormalized hyperbolic secant derviative ``SamplePulse`` object resepctively."
msgstr ""

#: ../../release_notes.rst:1241
msgid "A new kwarg option ``vertical_compression`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. This option only works with the ``text`` backend. This option can be set to either ``high``, ``medium`` (the default), or ``low`` to adjust how much vertical space is used by the output visualization."
msgstr ""

#: ../../release_notes.rst:1248
msgid "A new kwarg boolean option ``idle_wires`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. It works for all drawer backends. When ``idle_wires`` is set False in a drawer call the drawer will not draw any bits that do not have any circuit elements in the output quantum circuit visualization."
msgstr ""

#: ../../release_notes.rst:1255
msgid "A new PassManager visualizer function ``qiskit.visualization.pass_mamanger_drawer()`` was added. This function takes in a PassManager object and will generate a flow control diagram of all the passes run in the PassManager."
msgstr ""

#: ../../release_notes.rst:1260
msgid "When creating a PassManager you can now specify a callback function that if specified will be run after each pass is executed. This function gets passed a set of kwargs on each call with the state of the pass maanger after each pass execution. Currently these kwargs are:"
msgstr ""

#: ../../release_notes.rst:1265
msgid "``pass_`` (``Pass``): the pass being run"
msgstr ""

#: ../../release_notes.rst:1266
msgid "``dag`` (``DAGCircuit``): the dag output of the pass"
msgstr ""

#: ../../release_notes.rst:1267
msgid "``time`` (``float``): the time to execute the pass"
msgstr ""

#: ../../release_notes.rst:1268
msgid "``property_set`` (``PropertySet``): the property set"
msgstr ""

#: ../../release_notes.rst:1269
msgid "``count`` (``int``): the index for the pass execution"
msgstr ""

#: ../../release_notes.rst:1271
msgid "However, it's worth noting that while these arguments are set for the 0.9 release they expose the internals of the pass manager and are subject to change in future release."
msgstr ""

#: ../../release_notes.rst:1275
msgid "For example you can use this to create a callback function that will visualize the circuit output after each pass is executed::"
msgstr ""

#: ../../release_notes.rst:1285
msgid "Additionally you can specify the callback function when using ``qiskit.compiler.transpile()``::"
msgstr ""

#: ../../release_notes.rst:1295
msgid "A new method ``filter()`` was added to the ``qiskit.pulse.Schedule`` class. This enables filtering the instructions in a schedule. For example, filtering by instruction type::"
msgstr ""

#: ../../release_notes.rst:1309
msgid "Additonal decomposition methods for several types of gates. These methods will use different decomposition techniques to break down a gate into a squence of CNOTs and single qubit gates. The following methods are added:"
msgstr ""

#: ../../release_notes.rst:1315
msgid "Method"
msgstr ""

#: ../../release_notes.rst:1315
msgid "Description"
msgstr ""

#: ../../release_notes.rst:1317
msgid "``QuantumCircuit.iso()``"
msgstr ""

#: ../../release_notes.rst:1317
msgid "Add an arbitrary isometry from m to n qubits to a circuit. This allows for attaching arbitrary unitaries on n qubits (m=n) or to prepare any state of n qubits (m=0)"
msgstr ""

#: ../../release_notes.rst:1323
msgid "``QuantumCircuit.diag_gate()``"
msgstr ""

#: ../../release_notes.rst:1323
msgid "Add a diagonal gate to the circuit"
msgstr ""

#: ../../release_notes.rst:1325
msgid "``QuantumCircuit.squ()``"
msgstr ""

#: ../../release_notes.rst:1325
msgid "Decompose an arbitrary 2x2 unitary into three rotation gates and add to a circuit"
msgstr ""

#: ../../release_notes.rst:1329
msgid "``QuantumCircuit.ucg()``"
msgstr ""

#: ../../release_notes.rst:1329
msgid "Attach an uniformly controlled gate (also called a multiplexed gate) to a circuit"
msgstr ""

#: ../../release_notes.rst:1333
msgid "``QuantumCircuit.ucx()``"
msgstr ""

#: ../../release_notes.rst:1333
msgid "Attach a uniformly controlled (also called multiplexed) Rx rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:1337
msgid "``QuantumCircuit.ucy()``"
msgstr ""

#: ../../release_notes.rst:1337
msgid "Attach a uniformly controlled (also called multiplexed) Ry rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:1341
msgid "``QuantumCircuit.ucz()``"
msgstr ""

#: ../../release_notes.rst:1341
msgid "Attach a uniformly controlled (also called multiplexed) Rz rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:1346
msgid "Addition of Gray-Synth and Patel–Markov–Hayes algorithms for synthesis of CNOT-Phase and CNOT-only linear circuits. These functions allow the synthesis of circuits that consist of only CNOT gates given a linear function or a circuit that consists of only CNOT and phase gates given a matrix description."
msgstr ""

#: ../../release_notes.rst:1352
msgid "A new function ``random_circuit`` was added to the ``qiskit.circuit.random`` module. This function will generate a random circuit of a specified size by randomly selecting different gates and adding them to the circuit. For example, you can use this to generate a 5 qubit circuit with a depth of 10 using::"
msgstr ""

#: ../../release_notes.rst:1362
msgid "A new kwarg ``output_names`` was added to the ``qiskit.compiler.transpile()`` function. This kwarg takes in a string or a list of strings and uses those as the value of the circuit name for the output circuits that get returned by the ``transpile()`` call. For example::"
msgstr ""

#: ../../release_notes.rst:1373
msgid "the ``name`` attribute on tcirc_a and tcirc_b will be ``'Circuit A'`` and ``'Circuit B'`` respectively."
msgstr ""

#: ../../release_notes.rst:1376
msgid "A new method ``equiv()`` was added to the ``qiskit.quantum_info.Operator`` and ``qiskit.quantum_info.Statevector`` classes. These methods are used to check whether a second ``Operator`` object or ``Statevector`` is equivalent up to global phase."
msgstr ""

#: ../../release_notes.rst:1381
msgid "The user config file has several new options:"
msgstr ""

#: ../../release_notes.rst:1383
msgid "The ``circuit_drawer`` field now accepts an `auto` value. When set as the value for the ``circuit_drawer`` field the default drawer backend will be `mpl` if it is available, otherwise the `text` backend will be used."
msgstr ""

#: ../../release_notes.rst:1387
msgid "A new field ``circuit_mpl_style`` can be used to set the default style used by the matplotlib circuit drawer. Valid values for this field are ``bw`` and ``default`` to set the default to a black and white or the default color style respectively."
msgstr ""

#: ../../release_notes.rst:1391
msgid "A new field ``transpile_optimization_level`` can be used to set the default transpiler optimization level to use for calls to ``qiskit.compiler.transpile()``. The value can be set to either 0, 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:1416
msgid "The previously deprecated ``qiskit._util`` module has been removed. ``qiskit.util`` should be used instead."
msgstr ""

#: ../../release_notes.rst:1419
msgid "The ``QuantumCircuit.count_ops()`` method now returns an ``OrderedDict`` object instead of a ``dict``. This should be compatible for most use cases since ``OrderedDict`` is a ``dict`` subclass. However type checks and other class checks might need to be updated."
msgstr ""

#: ../../release_notes.rst:1424
msgid "The ``DAGCircuit.width()`` method now returns the total number quantum bits and classical bits. Before it would only return the number of quantum bits. If you require just the number of quantum bits you can use ``DAGCircuit.num_qubits()`` instead."
msgstr ""

#: ../../release_notes.rst:1429
msgid "The function ``DAGCircuit.num_cbits()`` has been removed. Instead you can use ``DAGCircuit.num_clbits()``."
msgstr ""

#: ../../release_notes.rst:1432
msgid "Individual quantum bits and classical bits are no longer represented as ``(register, index)`` tuples. They are now instances of `Qubit` and `Clbit` classes. If you're dealing with individual bits make sure that you update any usage or type checks to look for these new classes instead of tuples."
msgstr ""

#: ../../release_notes.rst:1438
msgid "The preset passmanager classes ``qiskit.transpiler.preset_passmanagers.default_pass_manager`` and ``qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator`` (which were the previous default pass managers for ``qiskit.compiler.transpile()`` calls) have been removed. If you were manually using this pass managers switch to the new default, ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:1446
msgid "The ``LegacySwap`` pass has been removed. If you were using it in a custom pass manager, it's usage can be replaced by the ``StochasticSwap`` pass, which is a faster more stable version. All the preset passmanagers have been updated to use ``StochasticSwap`` pass instead of the ``LegacySwap``."
msgstr ""

#: ../../release_notes.rst:1451
msgid "The following deprecated ``qiskit.dagcircuit.DAGCircuit`` methods have been removed:"
msgstr ""

#: ../../release_notes.rst:1454
msgid "``DAGCircuit.get_qubits()`` - Use ``DAGCircuit.qubits()`` instead"
msgstr ""

#: ../../release_notes.rst:1455
msgid "``DAGCircuit.get_bits()`` - Use ``DAGCircuit.clbits()`` instead"
msgstr ""

#: ../../release_notes.rst:1456
msgid "``DAGCircuit.qasm()`` - Use a combination of ``qiskit.converters.dag_to_circuit()`` and ``QuantumCircuit.qasm()``. For example::"
msgstr ""

#: ../../release_notes.rst:1465
msgid "``DAGCircuit.get_op_nodes()`` - Use ``DAGCircuit.op_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``op_nodes()`` instead of the list of tuples previously returned by ``get_op_nodes()``."
msgstr ""

#: ../../release_notes.rst:1469
msgid "``DAGCircuit.get_gate_nodes()`` - Use ``DAGCircuit.gate_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``gate_nodes()`` instead of the list of tuples previously returned by ``get_gate_nodes()``."
msgstr ""

#: ../../release_notes.rst:1473
msgid "``DAGCircuit.get_named_nodes()`` - Use ``DAGCircuit.named_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``named_nodes()`` instead of the list of node_ids previously returned by ``get_named_nodes()``."
msgstr ""

#: ../../release_notes.rst:1477
msgid "``DAGCircuit.get_2q_nodes()`` - Use ``DAGCircuit.twoQ_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``twoQ_gates()`` instead of the list of data_dicts previously returned by ``get_2q_nodes()``."
msgstr ""

#: ../../release_notes.rst:1481
msgid "``DAGCircuit.get_3q_or_more_nodes()`` - Use ``DAGCircuit.threeQ_or_more_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``threeQ_or_more_gates()`` instead of the list of tuples previously returned by ``get_3q_or_more_nodes()``."
msgstr ""

#: ../../release_notes.rst:1486
msgid "The following ``qiskit.dagcircuit.DAGCircuit`` methods had deprecated support for accepting a ``node_id`` as a parameter. This has been removed and now only ``DAGNode`` objects are accepted as input:"
msgstr ""

#: ../../release_notes.rst:1490
msgid "``successors()``"
msgstr ""

#: ../../release_notes.rst:1491
msgid "``predecessors()``"
msgstr ""

#: ../../release_notes.rst:1492
msgid "``ancestors()``"
msgstr ""

#: ../../release_notes.rst:1493
msgid "``descendants()``"
msgstr ""

#: ../../release_notes.rst:1494
msgid "``bfs_successors()``"
msgstr ""

#: ../../release_notes.rst:1495
msgid "``quantum_successors()``"
msgstr ""

#: ../../release_notes.rst:1496
msgid "``remove_op_node()``"
msgstr ""

#: ../../release_notes.rst:1497
msgid "``remove_ancestors_of()``"
msgstr ""

#: ../../release_notes.rst:1498
msgid "``remove_descendants_of()``"
msgstr ""

#: ../../release_notes.rst:1499
msgid "``remove_nonancestors_of()``"
msgstr ""

#: ../../release_notes.rst:1500
msgid "``remove_nondescendants_of()``"
msgstr ""

#: ../../release_notes.rst:1501
msgid "``substitute_node_with_dag()``"
msgstr ""

#: ../../release_notes.rst:1503
msgid "The ``qiskit.dagcircuit.DAGCircuit`` method ``rename_register()`` has been removed. This was unused by all the qiskit code. If you were relying on it externally you'll have to re-implement is an external function."
msgstr ""

#: ../../release_notes.rst:1507
msgid "The ``qiskit.dagcircuit.DAGCircuit`` property ``multi_graph`` has been removed. Direct access to the underlying ``networkx`` ``multi_graph`` object isn't supported anymore. The API provided by the ``DAGCircuit`` class should be used instead."
msgstr ""

#: ../../release_notes.rst:1512
msgid "The deprecated exception class ``qiskit.qiskiterror.QiskitError`` has been removed. Instead you should use ``qiskit.exceptions.QiskitError``."
msgstr ""

#: ../../release_notes.rst:1515
msgid "The boolean kwargs, ``ignore_requires`` and ``ignore_preserves`` from the ``qiskit.transpiler.PassManager`` constructor have been removed. These are no longer valid options."
msgstr ""

#: ../../release_notes.rst:1519
msgid "The module ``qiskit.tools.logging`` has been removed. This module was not used by anything and added nothing over the interfaces that Python's standard library ``logging`` module provides. If you want to set a custom formatter for logging use the standard library ``logging`` module instead."
msgstr ""

#: ../../release_notes.rst:1524
msgid "The ``CompositeGate`` class has been removed. Instead you should directly create a instruction object from a circuit and append that to your circuit. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:1534
msgid "The previously deprecated kwargs, ``seed`` and ``config`` for ``qiskit.compiler.assemble()`` have been removed use ``seed_simulator`` and ``run_config`` respectively instead."
msgstr ""

#: ../../release_notes.rst:1538
msgid "The previously deprecated converters ``qiskit.converters.qobj_to_circuits()`` and ``qiskit.converters.circuits_to_qobj()`` have been removed. Use ``qiskit.assembler.disassemble()`` and ``qiskit.compiler.assemble()`` respectively instead."
msgstr ""

#: ../../release_notes.rst:1544
msgid "The previously deprecated kwarg ``seed_mapper`` for ``qiskit.compiler.transpile()`` has been removed. Instead you should use ``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:1548
msgid "The previously deprecated kwargs ``seed``, ``seed_mapper``, ``config``, and ``circuits`` for the ``qiskit.execute()`` function have been removed. Use ``seed_simulator``, ``seed_transpiler``, ``run_config``, and ``experiments`` arguments respectively instead."
msgstr ""

#: ../../release_notes.rst:1553
msgid "The previously deprecated ``qiskit.tools.qcvv`` module has been removed use qiskit-ignis instead."
msgstr ""

#: ../../release_notes.rst:1556
msgid "The previously deprecated functions ``qiskit.transpiler.transpile()`` and ``qiskit.transpiler.transpile_dag()`` have been removed. Instead you should use ``qiskit.compiler.transpile``. If you were using ``transpile_dag()`` this can be replaced by running::"
msgstr ""

#: ../../release_notes.rst:1565
msgid "The previously deprecated function ``qiskit.compile()`` has been removed instead you should use ``qiskit.compiler.transpile()`` and ``qiskit.compiler.assemble()``."
msgstr ""

#: ../../release_notes.rst:1569
#, python-format
msgid "The jupyter cell magic ``%%qiskit_progress_bar`` from ``qiskit.tools.jupyter`` has been changed to a line magic. This was done to better reflect how the magic is used and how it works. If you were using the ``%%qiskit_progress_bar`` cell magic in an existing notebook, you will have to update this to be a line magic by changing it to be ``%qiskit_progress_bar`` instead. Everything else should behave identically."
msgstr ""

#: ../../release_notes.rst:1577
msgid "The deprecated function ``qiskit.tools.qi.qi.random_unitary_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_unitary()`` function instead."
msgstr ""

#: ../../release_notes.rst:1581
msgid "The deprecated function ``qiskit.tools.qi.qi.random_density_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_density_matrix()`` function instead."
msgstr ""

#: ../../release_notes.rst:1586
msgid "The deprecated function ``qiskit.tools.qi.qi.purity()`` has been removed. You should the ``qiskit.quantum_info.purity()`` function instead."
msgstr ""

#: ../../release_notes.rst:1589
msgid "The deprecated ``QuantumCircuit._attach()`` method has been removed. You should use ``QuantumCircuit.append()`` instead."
msgstr ""

#: ../../release_notes.rst:1592
msgid "The ``qiskit.qasm.Qasm`` method ``get_filename()`` has been removed. You can use the ``return_filename()`` method instead."
msgstr ""

#: ../../release_notes.rst:1595
msgid "The deprecated ``qiskit.mapper`` module has been removed. The list of functions and classes with their alternatives are:"
msgstr ""

#: ../../release_notes.rst:1598
msgid "``qiskit.mapper.CouplingMap``: ``qiskit.transpiler.CouplingMap`` should be used instead."
msgstr ""

#: ../../release_notes.rst:1600
msgid "``qiskit.mapper.Layout``: ``qiskit.transpiler.Layout`` should be used instead"
msgstr ""

#: ../../release_notes.rst:1602
msgid "``qiskit.mapper.compiling.euler_angles_1q()``: ``qiskit.quantum_info.synthesis.euler_angles_1q()`` should be used instead"
msgstr ""

#: ../../release_notes.rst:1605
msgid "``qiskit.mapper.compiling.two_qubit_kak()``: ``qiskit.quantum_info.synthesis.two_qubit_cnot_decompose()`` should be used instead."
msgstr ""

#: ../../release_notes.rst:1609
msgid "The deprecated exception classes ``qiskit.mapper.exceptions.CouplingError`` and ``qiskit.mapper.exceptions.LayoutError`` don't have an alternative since they serve no purpose without a ``qiskit.mapper`` module."
msgstr ""

#: ../../release_notes.rst:1613
msgid "The ``qiskit.pulse.samplers`` module has been moved to ``qiskit.pulse.pulse_lib.samplers``. You will need to update imports of ``qiskit.pulse.samplers`` to ``qiskit.pulse.pulse_lib.samplers``."
msgstr ""

#: ../../release_notes.rst:1617
msgid "`seaborn`_ is now a dependency for the function ``qiskit.visualization.plot_state_qsphere()``. It is needed to generate proper angular color maps for the visualization. The ``qiskit-terra[visualization]`` extras install target has been updated to install ``seaborn>=0.9.0`` If you are using visualizations and specifically the ``plot_state_qsphere()`` function you can use that to install ``seaborn`` or just manually run ``pip install seaborn>=0.9.0``"
msgstr ""

#: ../../release_notes.rst:1627
msgid "The previously deprecated functions ``qiksit.visualization.plot_state`` and ``qiskit.visualization.iplot_state`` have been removed. Instead you should use the specific function for each plot type. You can refer to the following tables to map the deprecated functions to their equivalent new ones:"
msgstr ""

#: ../../release_notes.rst:1634 ../../release_notes.rst:2776
#: ../../release_notes.rst:3056 ../../release_notes.rst:3093
msgid "Qiskit Terra 0.6"
msgstr ""

#: ../../release_notes.rst:1634 ../../release_notes.rst:2776
msgid "Qiskit Terra 0.7+"
msgstr ""

#: ../../release_notes.rst:1636 ../../release_notes.rst:2778
msgid "plot_state(rho)"
msgstr ""

#: ../../release_notes.rst:1636 ../../release_notes.rst:1637
#: ../../release_notes.rst:2778 ../../release_notes.rst:2779
msgid "plot_state_city(rho)"
msgstr ""

#: ../../release_notes.rst:1637 ../../release_notes.rst:2779
msgid "plot_state(rho, method='city')"
msgstr ""

#: ../../release_notes.rst:1638 ../../release_notes.rst:2780
msgid "plot_state(rho, method='paulivec')"
msgstr ""

#: ../../release_notes.rst:1638 ../../release_notes.rst:2780
msgid "plot_state_paulivec(rho)"
msgstr ""

#: ../../release_notes.rst:1639 ../../release_notes.rst:2781
msgid "plot_state(rho, method='qsphere')"
msgstr ""

#: ../../release_notes.rst:1639 ../../release_notes.rst:2781
msgid "plot_state_qsphere(rho)"
msgstr ""

#: ../../release_notes.rst:1640 ../../release_notes.rst:2782
msgid "plot_state(rho, method='bloch')"
msgstr ""

#: ../../release_notes.rst:1640 ../../release_notes.rst:2782
msgid "plot_bloch_multivector(rho)"
msgstr ""

#: ../../release_notes.rst:1641 ../../release_notes.rst:2783
msgid "plot_state(rho, method='hinton')"
msgstr ""

#: ../../release_notes.rst:1641 ../../release_notes.rst:2783
msgid "plot_state_hinton(rho)"
msgstr ""

#: ../../release_notes.rst:1644
msgid "The ``pylatexenc`` and ``pillow`` dependencies for the ``latex`` and ``latex_source`` circuit drawer backends are no longer listed as requirements. If you are going to use the latex circuit drawers ensure you have both packages installed or use the setuptools extras to install it along with qiskit-terra::"
msgstr ""

#: ../../release_notes.rst:1652
msgid "The root of the ``qiskit`` namespace will now emit a warning on import if either ``qiskit.IBMQ`` or ``qiskit.Aer`` could not be setup. This will occur whenever anything in the ``qiskit`` namespace is imported. These warnings were added to make it clear for users up front if they're running qiskit and the qiskit-aer and qiskit-ibmq-provider packages could not be found. It's not always clear if the packages are missing or python packaging/pip installed an element incorrectly until you go to use them and get an empty ``ImportError``. These warnings should make it clear up front if there these commonly used aliases are missing."
msgstr ""

#: ../../release_notes.rst:1662
msgid "However, for users that choose not to use either qiskit-aer or qiskit-ibmq-provider this might cause additional noise. For these users these warnings are easily suppressable using Python's standard library ``warnings``. Users can suppress the warnings by putting thse two lines before any imports from qiskit::"
msgstr ""

#: ../../release_notes.rst:1672
msgid "This will suppress the warnings emitted by not having qiskit-aer or qiskit-ibmq-provider installed, but still preserve any other warnings emitted by qiskit or any other package."
msgstr ""

#: ../../release_notes.rst:1682
msgid "The ``U`` and ``CX`` gates have been deprecated. If you're using these gates in your code you should update them to use ``u3`` and ``cx`` instead. For example, if you're using the circuit gate functions ``circuit.u_base()`` and ``circuit.cx_base()`` you should update these to be ``circuit.u3()`` and ``circuit.cx()`` respectively."
msgstr ""

#: ../../release_notes.rst:1688
msgid "The ``u0`` gate has been deprecated in favor of using multiple ``iden`` gates and it will be removed in the future. If you're using the ``u0`` gate in your circuit you should update your calls to use ``iden``. For example, f you were using ``circuit.u0(2)`` in your circuit before that should be updated to be::"
msgstr ""

#: ../../release_notes.rst:1697
msgid "instead."
msgstr ""

#: ../../release_notes.rst:1699
msgid "The ``qiskit.pulse.DeviceSpecification`` class is deprecated now. Instead you should use ``qiskit.pulse.PulseChannelSpec``."
msgstr ""

#: ../../release_notes.rst:1702
msgid "Accessing a ``qiskit.circuit.Qubit``, ``qiskit.circuit.Clbit``, or ``qiskit.circuit.Bit`` class by index is deprecated (for compatibility with the ``(register, index)`` tuples that these classes replaced). Instead you should use the ``register`` and ``index`` attributes."
msgstr ""

#: ../../release_notes.rst:1707
msgid "Passing in a bit to the ``qiskit.QuantumCircuit`` method ``append`` as a tuple ``(register, index)`` is deprecated. Instead bit objects should be used directly."
msgstr ""

#: ../../release_notes.rst:1711
msgid "Accessing the elements of a ``qiskit.transpiler.Layout`` object with a tuple ``(register, index)`` is deprecated. Instead a bit object should be used directly."
msgstr ""

#: ../../release_notes.rst:1715
msgid "The ``qiskit.transpiler.Layout`` constructor method ``qiskit.transpiler.Layout.from_tuplelist()`` is deprecated. Instead the constructor ``qiskit.transpiler.Layout.from_qubit_list()`` should be used."
msgstr ""

#: ../../release_notes.rst:1719
msgid "The module ``qiskit.pulse.ops`` has been deprecated. All the functions it provided:"
msgstr ""

#: ../../release_notes.rst:1722
msgid "``union``"
msgstr ""

#: ../../release_notes.rst:1723
msgid "``flatten``"
msgstr ""

#: ../../release_notes.rst:1724
msgid "``shift``"
msgstr ""

#: ../../release_notes.rst:1725
msgid "``insert``"
msgstr ""

#: ../../release_notes.rst:1726
msgid "``append``"
msgstr ""

#: ../../release_notes.rst:1728
msgid "have equivalent methods available directly on the ``qiskit.pulse.Schedule`` and ``qiskit.pulse.Instruction`` classes. Those methods should be used instead."
msgstr ""

#: ../../release_notes.rst:1732
msgid "The ``qiskit.qasm.Qasm`` method ``get_tokens()`` is deprecated. Instead you should use the ``generate_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:1735
msgid "The ``qiskit.qasm.qasmparser.QasmParser`` method ``get_tokens()`` is deprecated. Instead you should use the ``read_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:1738
msgid "The ``as_dict()`` method for the Qobj class has been deprecated and will be removed in the future. You should replace calls to it with ``to_dict()`` instead."
msgstr ""

#: ../../release_notes.rst:1748
msgid "The definition of the ``CU3Gate`` has been changed to be equivalent to the canonical definition of a controlled ``U3Gate``."
msgstr ""

#: ../../release_notes.rst:1751
msgid "The handling of layout in the pass manager has been standardized. This fixes several reported issues with handling layout. The ``initial_layout`` kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` will now lay out your qubits from the circuit onto the desired qubits on the device when transpiling circuits."
msgstr ""

#: ../../release_notes.rst:1757
msgid "Support for n-qubit unitaries was added to the BasicAer simulator and ``unitary`` (arbitrary unitary gates) was added to the set of basis gates for the simulators"
msgstr ""

#: ../../release_notes.rst:1761
msgid "The ``qiskit.visualization.plost_state_qsphere()`` has been updated to fix several issues with it. Now output Q Sphere visualization will be correctly generated and the following aspects have been updated:"
msgstr ""

#: ../../release_notes.rst:1765
msgid "All complementary basis states are antipodal"
msgstr ""

#: ../../release_notes.rst:1766
msgid "Phase is indicated by color of line and marker on sphere's surface"
msgstr ""

#: ../../release_notes.rst:1769
msgid "Probability is indicated by translucency of line and volume of marker on"
msgstr ""

#: ../../release_notes.rst:1768
msgid "sphere's surface"
msgstr ""

#: ../../release_notes.rst:1776
msgid "The default PassManager for ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` has been changed to optimization level 1 pass manager defined at ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:1780
msgid "All the circuit drawer backends now willl express gate parameters in a circuit as common fractions of pi in the output visualization. If the value of a parameter can be expressed as a fraction of pi that will be used instead of the numeric equivalent."
msgstr ""

#: ../../release_notes.rst:1785
msgid "When using ``qiskit.assembler.assemble_schedules()`` if you do not provide the number of memory_slots to use the number will be infered based on the number of acquisitions in the input schedules."
msgstr ""

#: ../../release_notes.rst:1789
msgid "The deprecation warning on the ``qiskit.dagcircuit.DAGCircuit`` property ``node_counter`` has been removed. The behavior change being warned about was put into effect when the warning was added, so warning that it had changed served no purpose."
msgstr ""

#: ../../release_notes.rst:1794
msgid "Calls to ``PassManager.run()`` now will emit python logging messages at the INFO level for each pass execution. These messages will include the Pass name and the total execution time of the pass. Python's standard logging was used because it allows Qiskit-Terra's logging to integrate in a standard way with other applications and libraries. All logging for the transpiler occurs under the ``qiskit.transpiler`` namespace, as used by ``logging.getLogger('qiskit.transpiler``). For example, to turn on DEBUG level logging for the transpiler you can run::"
msgstr ""

#: ../../release_notes.rst:1808
msgid "which will set the log level for the transpiler to DEBUG and configure those messages to be printed to stderr."
msgstr ""

#: ../../release_notes.rst:1813
msgid "There's a new high-performance Density Matrix Simulator that can be used in conjunction with our noise models, to better simulate real world scenarios."
msgstr ""

#: ../../release_notes.rst:1815
msgid "We have added a Matrix Product State (MPS) simulator. MPS allows for efficient simulation of several classes of quantum circuits, even under presence of strong correlations and highly entangled states. For cases amenable to MPS, circuits with several hundred qubits and more can be exactly simulated, e.g., for the purpose of obtaining expectation values of observables."
msgstr ""

#: ../../release_notes.rst:1820
msgid "Snapshots can be performed in all of our simulators."
msgstr ""

#: ../../release_notes.rst:1821
msgid "Now we can measure sampling circuits with read-out errors too, not only ideal circuits."
msgstr ""

#: ../../release_notes.rst:1823
msgid "We have increased some circuit optimizations with noise presence."
msgstr ""

#: ../../release_notes.rst:1824
msgid "A better 2-qubit error aproximations have been included."
msgstr ""

#: ../../release_notes.rst:1825
msgid "Included some tools for making certain noisy simulations easier to craft and faster to simulate."
msgstr ""

#: ../../release_notes.rst:1827
msgid "Increased performance with simulations that require less floating point numerical precision."
msgstr ""

#: ../../release_notes.rst:1836
msgid "`Logging Module <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/9_ignis_logging.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:1837
msgid "`Purity RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5c_purity_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:1838
msgid "`Interleaved RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5b_interleaved_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:1839
msgid "`Repetition Code for Verification <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/8_repetition_code.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:1840
msgid "Seed values can now be aribtrarily added to RB (not just in order)"
msgstr ""

#: ../../release_notes.rst:1841
msgid "Support for adding multiple results to measurement mitigation"
msgstr ""

#: ../../release_notes.rst:1842
msgid "RB Fitters now support providing guess values"
msgstr ""

#: ../../release_notes.rst:1847
msgid "Fixed a bug in RB fit error"
msgstr ""

#: ../../release_notes.rst:1848
msgid "Fixed a bug in the characterization fitter when selecting a qubit index to fit"
msgstr ""

#: ../../release_notes.rst:1854
msgid "Measurement mitigation now operates in parallel when applied to multiple results"
msgstr ""

#: ../../release_notes.rst:1856
msgid "Guess values for RB fitters are improved"
msgstr ""

#: ../../release_notes.rst:1862
msgid "Added"
msgstr ""

#: ../../release_notes.rst:1864
msgid "Relative-Phase Toffoli gates ``rccx`` (with 2 controls) and ``rcccx`` (with 3 controls)."
msgstr ""

#: ../../release_notes.rst:1866
msgid "Variational form ``RYCRX``"
msgstr ""

#: ../../release_notes.rst:1867
msgid "A new ``'basic-no-ancilla'`` mode to ``mct``."
msgstr ""

#: ../../release_notes.rst:1868
msgid "Multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz`` as a general ``u3`` gate is not supported by graycode implementation"
msgstr ""

#: ../../release_notes.rst:1870
msgid "Chemistry: ROHF open-shell support"
msgstr ""

#: ../../release_notes.rst:1872 ../../release_notes.rst:1879
#: ../../release_notes.rst:1885
msgid "Supported for all drivers: Gaussian16, PyQuante, PySCF and PSI4"
msgstr ""

#: ../../release_notes.rst:1873
msgid "HartreeFock initial state, UCCSD variational form and two qubit reduction for parity mapping now support different alpha and beta particle numbers for open shell support"
msgstr ""

#: ../../release_notes.rst:1877
msgid "Chemistry: UHF open-shell support"
msgstr ""

#: ../../release_notes.rst:1880
msgid "QMolecule extended to include integrals, coeffiecients etc for separate beta"
msgstr ""

#: ../../release_notes.rst:1882
msgid "Chemistry: QMolecule extended with integrals in atomic orbital basis to facilitate common access to these for experimentation"
msgstr ""

#: ../../release_notes.rst:1887
msgid "Chemistry: Additional PyQuante and PySCF driver configuration"
msgstr ""

#: ../../release_notes.rst:1889
msgid "Convergence tolerance and max convergence iteration controls."
msgstr ""

#: ../../release_notes.rst:1890
msgid "For PySCF initial guess choice"
msgstr ""

#: ../../release_notes.rst:1892
msgid "Chemistry: Processing output added to debug log from PyQuante and PySCF computations (Gaussian16 and PSI4 outputs were already added to debug log)"
msgstr ""

#: ../../release_notes.rst:1894
msgid "Chemistry: Merged qiskit-chemistry into qiskit-aqua"
msgstr ""

#: ../../release_notes.rst:1895
msgid "Add ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator`` class."
msgstr ""

#: ../../release_notes.rst:1897
msgid "Add ``evolution_instruction`` function to get registerless instruction of time evolution."
msgstr ""

#: ../../release_notes.rst:1899
msgid "Add ``op_converter`` module to unified the place in charge of converting different types of operators."
msgstr ""

#: ../../release_notes.rst:1901
msgid "Add ``Z2Symmetries`` class to encapsulate the Z2 symmetries info and has helper methods for tapering an Operator."
msgstr ""

#: ../../release_notes.rst:1903
msgid "Amplitude Estimation: added maximum likelihood postprocessing and confidence interval computation."
msgstr ""

#: ../../release_notes.rst:1905
msgid "Maximum Likelihood Amplitude Estimation (MLAE): Implemented new algorithm for amplitude estimation based on maximum likelihood estimation, which reduces number of required qubits and circuit depth."
msgstr ""

#: ../../release_notes.rst:1908
msgid "Added (piecewise) linearly and polynomially controlled Pauli-rotation circuits."
msgstr ""

#: ../../release_notes.rst:1910
msgid "Add ``q_equation_of_motion`` to study excited state of a molecule, and add two algorithms to prepare the reference state."
msgstr ""

#: ../../release_notes.rst:1914
msgid "Changed"
msgstr ""

#: ../../release_notes.rst:1916
msgid "Improve ``mct``'s ``'basic'`` mode by using relative-phase Toffoli gates to build intermediate results."
msgstr ""

#: ../../release_notes.rst:1918
msgid "Adapt to Qiskit Terra's newly introduced ``Qubit`` class."
msgstr ""

#: ../../release_notes.rst:1919
msgid "Prevent ``QPE/IQPE`` from modifying input ``Operator`` objects."
msgstr ""

#: ../../release_notes.rst:1920
msgid "The PyEDA dependency was removed; corresponding oracles' underlying logic operations are now handled by SymPy."
msgstr ""

#: ../../release_notes.rst:1922
msgid "Refactor the ``Operator`` class, each representation has its own class ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:1924
msgid "The ``power`` in ``evolution_instruction`` was applied on the theta on the CRZ gate directly, the new version repeats the circuits to implement power."
msgstr ""

#: ../../release_notes.rst:1926
msgid "CircuitCache is OFF by default, and it can be set via environment variable now ``QISKIT_AQUA_CIRCUIT_CACHE``."
msgstr ""

#: ../../release_notes.rst:1932
msgid "A bug where ``TruthTableOracle`` would build incorrect circuits for truth tables with only a single ``1`` value."
msgstr ""

#: ../../release_notes.rst:1934
msgid "A bug caused by ``PyEDA``'s indeterminism."
msgstr ""

#: ../../release_notes.rst:1935
msgid "A bug with ``QPE/IQPE``'s translation and stretch computation."
msgstr ""

#: ../../release_notes.rst:1936
msgid "Chemistry: Bravyi-Kitaev mapping fixed when num qubits was not a power of 2"
msgstr ""

#: ../../release_notes.rst:1937
msgid "Setup ``initial_layout`` in ``QuantumInstance`` via a list."
msgstr ""

#: ../../release_notes.rst:1940
msgid "Removed"
msgstr ""

#: ../../release_notes.rst:1942
msgid "General multi-controlled rotation gate ``mcu3`` is removed and replaced by multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz``"
msgstr ""

#: ../../release_notes.rst:1946
msgid "Deprecated"
msgstr ""

#: ../../release_notes.rst:1947
msgid "The ``Operator`` class is deprecated, in favor of using ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:1954 ../../release_notes.rst:1972
msgid "No change"
msgstr ""

#: ../../release_notes.rst:1959
msgid "Qiskit 0.11.1"
msgstr ""

#: ../../release_notes.rst:1961
msgid "We have bumped up Qiskit micro version to 0.11.1 because IBM Q Provider has bumped its micro version as well."
msgstr ""

#: ../../release_notes.rst:1965 ../../release_notes.rst:2003
#: ../../release_notes.rst:2111 ../../release_notes.rst:2153
msgid "Terra 0.8"
msgstr ""

#: ../../release_notes.rst:1970 ../../release_notes.rst:2008
#: ../../release_notes.rst:2116 ../../release_notes.rst:2329
msgid "Aer 0.2"
msgstr ""

#: ../../release_notes.rst:1975 ../../release_notes.rst:2026
#: ../../release_notes.rst:2121 ../../release_notes.rst:2387
#: ../../release_notes.rst:2538
msgid "Ignis 0.1"
msgstr ""

#: ../../release_notes.rst:1980 ../../release_notes.rst:2031
#: ../../release_notes.rst:2126 ../../release_notes.rst:2411
msgid "Aqua 0.5"
msgstr ""

#: ../../release_notes.rst:1982
msgid "``qiskit-aqua`` has been updated to ``0.5.3`` to fix code related to changes in how gates inverses are done."
msgstr ""

#: ../../release_notes.rst:1988
msgid "The ``IBMQProvider`` has been updated to version ``0.3.1`` to fix backward compatibility issues and work with the default 10 job limit in single calls to the IBM Q API v2."
msgstr ""

#: ../../release_notes.rst:1995
msgid "Qiskit 0.11"
msgstr ""

#: ../../release_notes.rst:1997
msgid "We have bumped up Qiskit minor version to 0.11 because IBM Q Provider has bumped up its minor version too. On Aer, we have jumped from 0.2.1 to 0.2.3 because there was an issue detected right after releasing 0.2.2 and before Qiskit 0.11 went online."
msgstr ""

#: ../../release_notes.rst:2011
msgid "New features"
msgstr ""

#: ../../release_notes.rst:2013
msgid "Added support for multi-controlled phase gates"
msgstr ""

#: ../../release_notes.rst:2014
msgid "Added optimized anti-diagonal single-qubit gates"
msgstr ""

#: ../../release_notes.rst:2017
msgid "Improvements"
msgstr ""

#: ../../release_notes.rst:2019
msgid "Introduced a technique called Fusion that increments performance of circuit execution Tuned threading strategy to gain performance in most common scenarios."
msgstr ""

#: ../../release_notes.rst:2021
msgid "Some of the already implemented error models have been polished."
msgstr ""

#: ../../release_notes.rst:2038
msgid "The ``IBMQProvider`` has been updated in order to default to using the new `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__. Accessing the legacy IBM Q Experience v1 and QConsole will still be supported during the 0.3.x line until its final deprecation one month from the release. It is encouraged to update to the new IBM Q Experience to take advantage of the new functionality and features."
msgstr ""

#: ../../release_notes.rst:2045
msgid "Updating to the new IBM Q Experience v2"
msgstr ""

#: ../../release_notes.rst:2047
msgid "If you have credentials for the legacy IBM Q Experience stored on disk, you can make use of the interactive helper::"
msgstr ""

#: ../../release_notes.rst:2055
msgid "For more complex cases or fine tuning your configuration, the following methods are available:"
msgstr ""

#: ../../release_notes.rst:2058
msgid "the ``IBMQ.delete_accounts()`` can be used for resetting your configuration file."
msgstr ""

#: ../../release_notes.rst:2060
msgid "the ``IBMQ.save_account('MY_TOKEN')`` method can be used for saving your credentials, following the instructions in the `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__ account page."
msgstr ""

#: ../../release_notes.rst:2065
msgid "Updating your programs"
msgstr ""

#: ../../release_notes.rst:2067
msgid "When using the new IBM Q Experience v2 through the provider, access to backends is done via individual ``provider`` instances (as opposed to accessing them directly through the ``qiskit.IBMQ`` object as in previous versions), which allows for more granular control over the project you are using."
msgstr ""

#: ../../release_notes.rst:2072
msgid "You can get a reference to the ``providers`` that you have access to using the ``IBMQ.providers()`` and ``IBMQ.get_provider()`` methods::"
msgstr ""

#: ../../release_notes.rst:2082
msgid "For convenience, ``IBMQ.load_account()`` and ``IBMQ.enable_account()`` will return a provider for the open access project, which is the default in the new IBM Q Experience v2."
msgstr ""

#: ../../release_notes.rst:2086
msgid "For example, the following program in previous versions::"
msgstr ""

#: ../../release_notes.rst:2094
msgid "Would be equivalent to the following program in the current version::"
msgstr ""

#: ../../release_notes.rst:2103
msgid "You can find more information and details in the `IBM Q Provider documentation <https://github.com/Qiskit/qiskit-ibmq-provider>`__."
msgstr ""

#: ../../release_notes.rst:2108
msgid "Qiskit 0.10"
msgstr ""

#: ../../release_notes.rst:2131
msgid "IBM Q Provider 0.2"
msgstr ""

#: ../../release_notes.rst:2136
msgid "The ``IBMQProvider`` supports connecting to the new version of the IBM Q API. Please note support for this version is still experimental :pull_ibmq-provider:`78`."
msgstr ""

#: ../../release_notes.rst:2138
msgid "Added support for Circuits through the new API :pull_ibmq-provider:`79`."
msgstr ""

#: ../../release_notes.rst:2144
msgid "Fixed incorrect parsing of some API hub URLs :pull_ibmq-provider:`77`."
msgstr ""

#: ../../release_notes.rst:2145
msgid "Fixed noise model handling for remote simulators :pull_ibmq-provider:`84`."
msgstr ""

#: ../../release_notes.rst:2150
msgid "Qiskit 0.9"
msgstr ""

#: ../../release_notes.rst:2158 ../../release_notes.rst:2929
#: ../../release_notes.rst:3137
msgid "Highlights"
msgstr ""

#: ../../release_notes.rst:2160
msgid "Introduction of the Pulse module under ``qiskit.pulse``, which includes tools for building pulse commands, scheduling them on pulse channels, visualization, and running them on IBM Q devices."
msgstr ""

#: ../../release_notes.rst:2163
msgid "Improved QuantumCircuit and Instruction classes, allowing for the composition of arbitrary sub-circuits into larger circuits, and also for creating parametrized circuits."
msgstr ""

#: ../../release_notes.rst:2166
msgid "A powerful Quantum Info module under ``qiskit.quantum_info``, providing tools to work with operators and channels and to use them inside circuits."
msgstr ""

#: ../../release_notes.rst:2168
msgid "New transpiler optimization passes and access to predefined transpiling routines."
msgstr ""

#: ../../release_notes.rst:2176
msgid "The core ``StochasticSwap`` routine is implemented in `Cython <https://cython.org/>`__."
msgstr ""

#: ../../release_notes.rst:2177
msgid "Added ``QuantumChannel`` classes for manipulating quantum channels and CPTP maps."
msgstr ""

#: ../../release_notes.rst:2179
msgid "Support for parameterized circuits."
msgstr ""

#: ../../release_notes.rst:2180
msgid "The ``PassManager`` interface has been improved and new functions added for easier interaction and usage with custom pass managers."
msgstr ""

#: ../../release_notes.rst:2182
msgid "Preset ``PassManager``\\s are now included which offer a predetermined pipeline of transpiler passes."
msgstr ""

#: ../../release_notes.rst:2184
msgid "User configuration files to let local environments override default values for some functions."
msgstr ""

#: ../../release_notes.rst:2186
msgid "New transpiler passes: ``EnlargeWithAncilla``, ``Unroll2Q``, ``NoiseAdaptiveLayout``, ``OptimizeSwapBeforeMeasure``, ``RemoveDiagonalGatesBeforeMeasure``, ``CommutativeCancellation``, ``Collect2qBlocks``, and ``ConsolidateBlocks``."
msgstr ""

#: ../../release_notes.rst:2193 ../../release_notes.rst:2377
#: ../../release_notes.rst:2400 ../../release_notes.rst:2477
#: ../../release_notes.rst:2599 ../../release_notes.rst:2913
#: ../../release_notes.rst:2951 ../../release_notes.rst:3155
msgid "Compatibility Considerations"
msgstr ""

#: ../../release_notes.rst:2195
msgid "As part of the 0.8 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the 0.9 (unless otherwise noted) release to avoid a breaking change in the future."
msgstr ""

#: ../../release_notes.rst:2200
msgid "The methods prefixed by ``_get`` in the ``DAGCircuit`` object are being renamed without that prefix."
msgstr ""

#: ../../release_notes.rst:2202
msgid "Changed elements in ``couplinglist`` of ``CouplingMap`` from tuples to lists."
msgstr ""

#: ../../release_notes.rst:2203
msgid "Unroller bases must now be explicit, and violation raises an informative ``QiskitError``."
msgstr ""

#: ../../release_notes.rst:2205
msgid "The ``qiskit.tools.qcvv`` package is deprecated and will be removed in the in the future. You should migrate to using the Qiskit Ignis which replaces this module."
msgstr ""

#: ../../release_notes.rst:2208
msgid "The ``qiskit.compile()`` function is now deprecated in favor of explicitly using the ``qiskit.compiler.transpile()`` function to transform a circuit, followed by ``qiskit.compiler.assemble()`` to make a Qobj out of it. Instead of ``compile(...)``, use ``assemble(transpile(...), ...)``."
msgstr ""

#: ../../release_notes.rst:2212
msgid "``qiskit.converters.qobj_to_circuits()`` has been deprecated and will be removed in a future release. Instead ``qiskit.assembler.disassemble()`` should be used to extract ``QuantumCircuit`` objects from a compiled Qobj."
msgstr ""

#: ../../release_notes.rst:2216
msgid "The ``qiskit.mapper`` namespace has been deprecated. The ``Layout`` and ``CouplingMap`` classes can be accessed via ``qiskit.transpiler``."
msgstr ""

#: ../../release_notes.rst:2218
msgid "A few functions in ``qiskit.tools.qi.qi`` have been deprecated and moved to ``qiskit.quantum_info``."
msgstr ""

#: ../../release_notes.rst:2221
msgid "Please note that some backwards incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:2226
msgid "IBM Q Provider"
msgstr ""

#: ../../release_notes.rst:2228
msgid "The IBM Q provider was previously included in Terra, but it has been split out into a separate package ``qiskit-ibmq-provider``. This will need to be installed, either via pypi with ``pip install qiskit-ibmq-provider`` or from source in order to access ``qiskit.IBMQ`` or ``qiskit.providers.ibmq``. If you install qiskit with ``pip install qiskit``, that will automatically install all subpackages of the Qiskit project."
msgstr ""

#: ../../release_notes.rst:2238
msgid "Cython Components"
msgstr ""

#: ../../release_notes.rst:2240
msgid "Starting in the 0.8 release the core stochastic swap routine is now implemented in `Cython <https://cython.org/>`__. This was done to significantly improve the performance of the swapper, however if you build Terra from source or run on a non-x86 or other platform without prebuilt wheels and install from source distribution you'll need to make sure that you have Cython installed prior to installing/building Qiskit Terra. This can easily be done with pip/pypi: ``pip install Cython``."
msgstr ""

#: ../../release_notes.rst:2251
msgid "Compiler Workflow"
msgstr ""

#: ../../release_notes.rst:2253
msgid "The ``qiskit.compile()`` function has been deprecated and replaced by first calling ``qiskit.compiler.transpile()`` to run optimization and mapping on a circuit, and then ``qiskit.compiler.assemble()`` to build a Qobj from that optimized circuit to send to a backend. While this is only a deprecation it will emit a warning if you use the old ``qiskit.compile()`` call."
msgstr ""

#: ../../release_notes.rst:2259
msgid "**transpile(), assemble(), execute() parameters**"
msgstr ""

#: ../../release_notes.rst:2261
msgid "These functions are heavily overloaded and accept a wide range of inputs. They can handle circuit and pulse inputs. All kwargs except for ``backend`` for these functions now also accept lists of the previously accepted types. The ``initial_layout`` kwarg can now be supplied as a both a list and dictionary, e.g. to map a Bell experiment on qubits 13 and 14, you can supply: ``initial_layout=[13, 14]`` or ``initial_layout={qr[0]: 13, qr[1]: 14}``"
msgstr ""

#: ../../release_notes.rst:2271
msgid "Qobj"
msgstr ""

#: ../../release_notes.rst:2273
msgid "The Qobj class has been split into two separate subclasses depending on the use case, either ``PulseQobj`` or ``QasmQobj`` for pulse and circuit jobs respectively. If you're interacting with Qobj directly you may need to adjust your usage accordingly."
msgstr ""

#: ../../release_notes.rst:2278
msgid "The ``qiskit.qobj.qobj_to_dict()`` is removed. Instead use the ``to_dict()`` method of a Qobj object."
msgstr ""

#: ../../release_notes.rst:2284
msgid "Visualization"
msgstr ""

#: ../../release_notes.rst:2286
msgid "The largest change to the visualization module is it has moved from ``qiskit.tools.visualization`` to ``qiskit.visualization``. This was done to indicate that the visualization module is more than just a tool. However, since this interface was declared stable in the 0.7 release the public interface off of ``qiskit.tools.visualization`` will continue to work. That may change in a future release, but it will be deprecated prior to removal if that happens."
msgstr ""

#: ../../release_notes.rst:2293
msgid "The previously deprecated functions, ``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from ``qiskit.tools.visualization`` have been removed. Instead of these functions, calling ``qiskit.visualization.circuit_drawer()`` with the appropriate arguments should be used."
msgstr ""

#: ../../release_notes.rst:2300
msgid "The previously deprecated ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used."
msgstr ""

#: ../../release_notes.rst:2305
msgid "The Wigner plotting functions ``plot_wigner_function``, ``plot_wigner_curve``, ``plot_wigner_plaquette``, and ``plot_wigner_data`` previously in the ``qiskit.tools.visualization._state_visualization`` module have been removed. They were never exposed through the public stable interface and were not well documented. The code to use this feature can still be accessed through the qiskit-tutorials repository."
msgstr ""

#: ../../release_notes.rst:2315
msgid "Mapper"
msgstr ""

#: ../../release_notes.rst:2317
msgid "The public api from ``qiskit.mapper`` has been moved into ``qiskit.transpiler``. While it has only been deprecated in this release, it will be removed in the 0.9 release so updating your usage of ``Layout`` and ``CouplingMap`` to import from ``qiskit.transpiler`` instead of ``qiskit.mapper`` before that takes place will avoid any surprises in the future."
msgstr ""

#: ../../release_notes.rst:2334
msgid "Added multiplexer gate :pull_aer:`192`"
msgstr ""

#: ../../release_notes.rst:2335
msgid "Added ``remap_noise_model`` function to ``noise.utils`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:2336
msgid "Added ``__eq__`` method to ``NoiseModel``, ``QuantumError``, ``ReadoutError`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:2338
msgid "Added support for labelled gates in noise models :pull_aer:`175`"
msgstr ""

#: ../../release_notes.rst:2339
msgid "Added optimized ``mcx``, ``mcy``, ``mcz``, ``mcu1``, ``mcu2``, ``mcu3``, gates to ``QubitVector`` :pull_aer:`124`"
msgstr ""

#: ../../release_notes.rst:2341
msgid "Added optimized controlled-swap gate to ``QubitVector`` :pull_aer:`142`"
msgstr ""

#: ../../release_notes.rst:2342
msgid "Added gate-fusion optimization for ``QasmContoroller``, which is enabled by setting ``fusion_enable=true`` :pull_aer:`136`"
msgstr ""

#: ../../release_notes.rst:2344
msgid "Added better management of failed simulations :pull_aer:`167`"
msgstr ""

#: ../../release_notes.rst:2345
msgid "Added qubits truncate optimization for unused qubits :pull_aer:`164`"
msgstr ""

#: ../../release_notes.rst:2346
msgid "Added ability to disable depolarizing error on device noise model :pull_aer:`131`"
msgstr ""

#: ../../release_notes.rst:2348
msgid "Added initialize simulator instruction to ``statevector_state`` :pull_aer:`117`, :pull_aer:`137`"
msgstr ""

#: ../../release_notes.rst:2350
msgid "Added coupling maps to simulators :pull_aer:`93`"
msgstr ""

#: ../../release_notes.rst:2351
msgid "Added circuit optimization framework :pull_aer:`83`"
msgstr ""

#: ../../release_notes.rst:2352
msgid "Added benchmarking :pull_aer:`71`, :pull_aer:`177`"
msgstr ""

#: ../../release_notes.rst:2353
msgid "Added wheels support for Debian-like distributions :pull_aer:`69`"
msgstr ""

#: ../../release_notes.rst:2354
msgid "Added autoconfiguration of threads for qasm simulator :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:2355
msgid "Added Simulation method based on Stabilizer Rank Decompositions :pull_aer:`51`"
msgstr ""

#: ../../release_notes.rst:2356
msgid "Added ``basis_gates`` kwarg to ``NoiseModel`` init :pull_aer:`175`."
msgstr ""

#: ../../release_notes.rst:2357
msgid "Added an optional parameter to ``NoiseModel.as_dict()`` for returning dictionaries that can be serialized using the standard json library directly :pull_aer:`165`"
msgstr ""

#: ../../release_notes.rst:2360
msgid "Refactor thread management :pull_aer:`50`"
msgstr ""

#: ../../release_notes.rst:2361
msgid "Improve noise transformations :pull_aer:`162`"
msgstr ""

#: ../../release_notes.rst:2362
msgid "Improve error reporting :pull_aer:`160`"
msgstr ""

#: ../../release_notes.rst:2363
msgid "Improve efficiency of parallelization with ``max_memory_mb`` a new parameter of ``backend_opts`` :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:2365
msgid "Improve u1 performance in ``statevector`` :pull_aer:`123`"
msgstr ""

#: ../../release_notes.rst:2371
msgid "Fixed OpenMP clashing problems on macOS for the Terra add-on :pull_aer:`46`"
msgstr ""

#: ../../release_notes.rst:2379
msgid "Deprecated ``\"initial_statevector\"`` backend option for ``QasmSimulator`` and ``StatevectorSimulator`` :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:2381
msgid "Renamed ``\"chop_threshold\"`` backend option to ``\"zero_threshold\"`` and changed default value to 1e-10 :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:2392
msgid "Quantum volume"
msgstr ""

#: ../../release_notes.rst:2393
msgid "Measurement mitigation using tensored calibrations"
msgstr ""

#: ../../release_notes.rst:2394
msgid "Simultaneous RB has the option to align Clifford gates across subsets"
msgstr ""

#: ../../release_notes.rst:2395
msgid "Measurement correction can produce a new calibration for a subset of qubits"
msgstr ""

#: ../../release_notes.rst:2402
msgid "RB writes to the minimal set of classical registers (it used to be Q[i]->C[i]). This change enables measurement correction with RB. Unless users had external analysis code, this will not change outcomes. RB circuits from 0.1 are not compatible with 0.1.1 fitters."
msgstr ""

#: ../../release_notes.rst:2416
msgid "Implementation of the HHL algorithm supporting ``LinearSystemInput``"
msgstr ""

#: ../../release_notes.rst:2417
msgid "Pluggable component ``Eigenvalues`` with variant ``EigQPE``"
msgstr ""

#: ../../release_notes.rst:2418
msgid "Pluggable component ``Reciprocal`` with variants ``LookupRotation`` and ``LongDivision``"
msgstr ""

#: ../../release_notes.rst:2420
msgid "Multiple-Controlled U1 and U3 operations ``mcu1`` and ``mcu3``"
msgstr ""

#: ../../release_notes.rst:2421
msgid "Pluggable component ``QFT`` derived from component ``IQFT``"
msgstr ""

#: ../../release_notes.rst:2422
msgid "Summarized the transpiled circuits at the DEBUG logging level"
msgstr ""

#: ../../release_notes.rst:2423
msgid "``QuantumInstance`` accepts ``basis_gates`` and ``coupling_map`` again."
msgstr ""

#: ../../release_notes.rst:2424
msgid "Support to use ``cx`` gate for the entanglement in ``RY`` and ``RYRZ`` variational form (``cz`` is the default choice)"
msgstr ""

#: ../../release_notes.rst:2426
msgid "Support to use arbitrary mixer Hamiltonian in QAOA, allowing use of QAOA in constrained optimization problems [arXiv:1709.03489]"
msgstr ""

#: ../../release_notes.rst:2428
msgid "Added variational algorithm base class ``VQAlgorithm``, implemented by ``VQE`` and ``QSVMVariational``"
msgstr ""

#: ../../release_notes.rst:2430
msgid "Added ``ising/docplex.py`` for automatically generating Ising Hamiltonian from optimization models of DOcplex"
msgstr ""

#: ../../release_notes.rst:2432
msgid "Added ``'basic-dirty-ancilla``' mode for ``mct``"
msgstr ""

#: ../../release_notes.rst:2433
msgid "Added ``mcmt`` for Multi-Controlled, Multi-Target gate"
msgstr ""

#: ../../release_notes.rst:2434
msgid "Exposed capabilities to generate circuits from logical AND, OR, DNF (disjunctive normal forms), and CNF (conjunctive normal forms) formulae"
msgstr ""

#: ../../release_notes.rst:2436
msgid "Added the capability to generate circuits from ESOP (exclusive sum of products) formulae with optional optimization based on Quine-McCluskey and ExactCover"
msgstr ""

#: ../../release_notes.rst:2438
msgid "Added ``LogicalExpressionOracle`` for generating oracle circuits from arbitrary Boolean logic expressions (including DIMACS support) with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:2441
msgid "Added ``TruthTableOracle`` for generating oracle circuits from truth-tables with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:2443
msgid "Added ``CustomCircuitOracle`` for generating oracle from user specified circuits"
msgstr ""

#: ../../release_notes.rst:2445
msgid "Added implementation of the Deutsch-Jozsa algorithm"
msgstr ""

#: ../../release_notes.rst:2446
msgid "Added implementation of the Bernstein-Vazirani algorithm"
msgstr ""

#: ../../release_notes.rst:2447
msgid "Added implementation of the Simon's algorithm"
msgstr ""

#: ../../release_notes.rst:2448
msgid "Added implementation of the Shor's algorithm"
msgstr ""

#: ../../release_notes.rst:2449
msgid "Added optional capability for Grover's algorithm to take a custom initial state (as opposed to the default uniform superposition)"
msgstr ""

#: ../../release_notes.rst:2451
msgid "Added capability to create a ``Custom`` initial state using existing circuit"
msgstr ""

#: ../../release_notes.rst:2453
msgid "Added the ADAM (and AMSGRAD) optimization algorithm"
msgstr ""

#: ../../release_notes.rst:2454
msgid "Multivariate distributions added, so uncertainty models now have univariate and multivariate distribution components"
msgstr ""

#: ../../release_notes.rst:2456
msgid "Added option to include or skip the swaps operations for qft and iqft circuit constructions"
msgstr ""

#: ../../release_notes.rst:2458
msgid "Added classical linear system solver ``ExactLSsolver``"
msgstr ""

#: ../../release_notes.rst:2459
msgid "Added parameters ``auto_hermitian`` and ``auto_resize`` to ``HHL`` algorithm to support non-Hermitian and non :math:`2^n` sized matrices by default"
msgstr ""

#: ../../release_notes.rst:2461
msgid "Added another feature map, ``RawFeatureVector``, that directly maps feature vectors to qubits' states for classification"
msgstr ""

#: ../../release_notes.rst:2463
msgid "``SVM_Classical`` can now load models trained by ``QSVM``"
msgstr ""

#: ../../release_notes.rst:2470
msgid "Fixed ``ising/docplex.py`` to correctly multiply constant values in constraints"
msgstr ""

#: ../../release_notes.rst:2471
msgid "Fixed package setup to correctly identify namespace packages using ``setuptools.find_namespace_packages``"
msgstr ""

#: ../../release_notes.rst:2479
msgid "``QuantumInstance`` does not take ``memory`` anymore."
msgstr ""

#: ../../release_notes.rst:2480
msgid "Moved command line and GUI to separate repo (``qiskit_aqua_uis``)"
msgstr ""

#: ../../release_notes.rst:2482
msgid "Removed the ``SAT``-specific oracle (now supported by ``LogicalExpressionOracle``)"
msgstr ""

#: ../../release_notes.rst:2484
msgid "Changed ``advanced`` mode implementation of ``mct``: using simple ``h`` gates instead of ``ch``, and fixing the old recursion step in ``_multicx``"
msgstr ""

#: ../../release_notes.rst:2486
msgid "Components ``random_distributions`` renamed to ``uncertainty_models``"
msgstr ""

#: ../../release_notes.rst:2487
msgid "Reorganized the constructions of various common gates (``ch``, ``cry``, ``mcry``, ``mct``, ``mcu1``, ``mcu3``, ``mcmt``, ``logic_and``, and ``logic_or``) and circuits (``PhaseEstimationCircuit``, ``BooleanLogicCircuits``, ``FourierTransformCircuits``, and ``StateVectorCircuits``) under the ``circuits`` directory"
msgstr ""

#: ../../release_notes.rst:2492
msgid "Renamed the algorithm ``QSVMVariational`` to ``VQC``, which stands for Variational Quantum Classifier"
msgstr ""

#: ../../release_notes.rst:2494
msgid "Renamed the algorithm ``QSVMKernel`` to ``QSVM``"
msgstr ""

#: ../../release_notes.rst:2495
msgid "Renamed the class ``SVMInput`` to ``ClassificationInput``"
msgstr ""

#: ../../release_notes.rst:2496
msgid "Renamed problem type ``'svm_classification'`` to ``'classification'``"
msgstr ""

#: ../../release_notes.rst:2497
msgid "Changed the type of ``entangler_map`` used in ``FeatureMap`` and ``VariationalForm`` to list of lists"
msgstr ""

#: ../../release_notes.rst:2503
msgid "IBM Q Provider 0.1"
msgstr ""

#: ../../release_notes.rst:2508
msgid "This is the first release as a standalone package. If you are installing Terra standalone you'll also need to install the ``qiskit-ibmq-provider`` package with ``pip install qiskit-ibmq-provider`` if you want to use the IBM Q backends."
msgstr ""

#: ../../release_notes.rst:2513
msgid "Support for non-Qobj format jobs has been removed from the provider. You'll have to convert submissions in an older format to Qobj before you can submit."
msgstr ""

#: ../../release_notes.rst:2521
msgid "Qiskit 0.8"
msgstr ""

#: ../../release_notes.rst:2523
msgid "In Qiskit 0.8 we introduced the Qiskit Ignis element. It also includes the Qiskit Terra element 0.7.1 release which contains a bug fix for the BasicAer Python simulator."
msgstr ""

#: ../../release_notes.rst:2528 ../../release_notes.rst:2553
msgid "Terra 0.7"
msgstr ""

#: ../../release_notes.rst:2533 ../../release_notes.rst:2835
msgid "Aer 0.1"
msgstr ""

#: ../../release_notes.rst:2540
msgid "This is the first release of Qiskit Ignis."
msgstr ""

#: ../../release_notes.rst:2546
msgid "Qiskit 0.7"
msgstr ""

#: ../../release_notes.rst:2548
msgid "In Qiskit 0.7 we introduced Qiskit Aer and combined it with Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:2558
msgid "This release includes several new features and many bug fixes. With this release the interfaces for circuit diagram, histogram, bloch vectors, and state visualizations are declared stable. Additionally, this release includes a defined and standardized bit order/endianness throughout all aspects of Qiskit. These are all declared as stable interfaces in this release which won't have breaking changes made moving forward, unless there is appropriate and lengthy deprecation periods warning of any coming changes."
msgstr ""

#: ../../release_notes.rst:2566
msgid "There is also the introduction of the following new features:"
msgstr ""

#: ../../release_notes.rst:2568
msgid "A new ASCII art circuit drawing output mode"
msgstr ""

#: ../../release_notes.rst:2569
msgid "A new circuit drawing interface off of ``QuantumCircuit`` objects that enables calls of ``circuit.draw()`` or ``print(circuit)`` to render a drawing of circuits"
msgstr ""

#: ../../release_notes.rst:2572
msgid "A visualizer for drawing the DAG representation of a circuit"
msgstr ""

#: ../../release_notes.rst:2573
msgid "A new quantum state plot type for hinton diagrams in the local matplotlib based state plots"
msgstr ""

#: ../../release_notes.rst:2575
msgid "2 new constructor methods off the ``QuantumCircuit`` class ``from_qasm_str()`` and ``from_qasm_file()`` which let you easily create a circuit object from OpenQASM"
msgstr ""

#: ../../release_notes.rst:2578
msgid "A new function ``plot_bloch_multivector()`` to plot Bloch vectors from a tensored state vector or density matrix"
msgstr ""

#: ../../release_notes.rst:2580
msgid "Per-shot measurement results are available in simulators and select devices. These can be accessed by setting the ``memory`` kwarg to ``True`` when calling ``compile()`` or ``execute()`` and then accessed using the ``get_memory()`` method on the ``Result`` object."
msgstr ""

#: ../../release_notes.rst:2584
msgid "A ``qiskit.quantum_info`` module with revamped Pauli objects and methods for working with quantum states"
msgstr ""

#: ../../release_notes.rst:2586
msgid "New transpile passes for circuit analysis and transformation: ``CommutationAnalysis``, ``CommutationTransformation``, ``CXCancellation``, ``Decompose``, ``Unroll``, ``Optimize1QGates``, ``CheckMap``, ``CXDirection``, ``BarrierBeforeFinalMeasurements``"
msgstr ""

#: ../../release_notes.rst:2590
msgid "New alternative swap mapper passes in the transpiler: ``BasicSwap``, ``LookaheadSwap``, ``StochasticSwap``"
msgstr ""

#: ../../release_notes.rst:2592
msgid "More advanced transpiler infrastructure with support for analysis passes, transformation passes, a global ``property_set`` for the pass manager, and repeat-until control of passes"
msgstr ""

#: ../../release_notes.rst:2601
msgid "As part of the 0.7 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the next release to avoid a breaking change."
msgstr ""

#: ../../release_notes.rst:2606
msgid "``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from qiskit.tools.visualization are deprecated. Instead the ``circuit_drawer()`` function from the same module should be used, there are kwarg options to mirror the functionality of all the deprecated functions."
msgstr ""

#: ../../release_notes.rst:2611
msgid "The current default output of ``circuit_drawer()`` (using latex and falling back on python) is deprecated and will be changed to just use the ``text`` output by default in future releases."
msgstr ""

#: ../../release_notes.rst:2614
msgid "The ``qiskit.wrapper.load_qasm_string()`` and ``qiskit.wrapper.load_qasm_file()`` functions are deprecated and the ``QuantumCircuit.from_qasm_str()`` and ``QuantumCircuit.from_qasm_file()`` constructor methods should be used instead."
msgstr ""

#: ../../release_notes.rst:2619
msgid "The ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.tools.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used instead."
msgstr ""

#: ../../release_notes.rst:2623
msgid "The functions ``plot_state()`` and ``iplot_state()`` have been depreciated. Instead the functions ``plot_state_*()`` and ``iplot_state_*()`` should be called for the visualization method required."
msgstr ""

#: ../../release_notes.rst:2626
msgid "The ``skip_transpiler`` argumentt has been deprecated from ``compile()`` and ``execute()``. Instead you can use the ``PassManager`` directly, just set the ``pass_manager`` to a blank ``PassManager`` object with ``PassManager()``"
msgstr ""

#: ../../release_notes.rst:2629
msgid "The ``transpile_dag()`` function ``format`` kwarg for emitting different output formats is deprecated, instead you should convert the default output ``DAGCircuit`` object to the desired format."
msgstr ""

#: ../../release_notes.rst:2632
msgid "The unrollers have been deprecated, moving forward only DAG to DAG unrolling will be supported."
msgstr ""

#: ../../release_notes.rst:2635
msgid "Please note that some backwards-incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:2640
msgid "Changes to Result objects"
msgstr ""

#: ../../release_notes.rst:2642
msgid "As part of the rewrite of the Results object to be more consistent and a stable interface moving forward a few changes have been made to how you access the data stored in the result object. First the ``get_data()`` method has been renamed to just ``data()``. Accompanying that change is a change in the data format returned by the function. It is now returning the raw data from the backends instead of doing any post-processing. For example, in previous versions you could call::"
msgstr ""

#: ../../release_notes.rst:2654
msgid "and that would return the unitary matrix like::"
msgstr ""

#: ../../release_notes.rst:2658
msgid "But now if you call (with the renamed method)::"
msgstr ""

#: ../../release_notes.rst:2662
msgid "it will return something like::"
msgstr ""

#: ../../release_notes.rst:2666
msgid "To get the post processed results in the same format as before the 0.7 release you must use the ``get_counts()``, ``get_statevector()``, and ``get_unitary()`` methods on the result object instead of ``get_data()['counts']``, ``get_data()['statevector']``, and ``get_data()['unitary']`` respectively."
msgstr ""

#: ../../release_notes.rst:2671
msgid "Additionally, support for ``len()`` and indexing on a ``Result`` object has been removed. Instead you should deal with the output from the post processed methods on the Result objects."
msgstr ""

#: ../../release_notes.rst:2675
msgid "Also, the ``get_snapshot()`` and ``get_snapshots()`` methods from the ``Result`` class have been removed. Instead you can access the snapshots using ``Result.data()['snapshots']``."
msgstr ""

#: ../../release_notes.rst:2681
msgid "Changes to Visualization"
msgstr ""

#: ../../release_notes.rst:2683
msgid "The largest change made to visualization in the 0.7 release is the removal of Matplotlib and other visualization dependencies from the project requirements. This was done to simplify the requirements and configuration required for installing Qiskit. If you plan to use any visualizations (including all the jupyter magics) except for the ``text``, ``latex``, and ``latex_source`` output for the circuit drawer you'll you must manually ensure that the visualization dependencies are installed. You can leverage the optional requirements to the Qiskit Terra package to do this::"
msgstr ""

#: ../../release_notes.rst:2694
msgid "Aside from this there have been changes made to several of the interfaces as part of the stabilization which may have an impact on existing code. The first is the the ``basis`` kwarg in the ``circuit_drawer()`` function is no longer accepted. If you were relying on the ``circuit_drawer()`` to adjust the basis gates used in drawing a circuit diagram you will have to do this priort to calling ``circuit_drawer()``. For example::"
msgstr ""

#: ../../release_notes.rst:2704
msgid "will have to be adjust to be::"
msgstr ""

#: ../../release_notes.rst:2713
msgid "Moving forward the ``circuit_drawer()`` function will be the sole interface for circuit drawing in the visualization module. Prior to the 0.7 release there were several other functions which either used different output backends or changed the output for drawing circuits. However, all those other functions have been deprecated and that functionality has been integrated as options on ``circuit_drawer()``."
msgstr ""

#: ../../release_notes.rst:2720
msgid "For the other visualization functions, ``plot_histogram()`` and ``plot_state()`` there are also a few changes to check when upgrading. First is the output from these functions has changed, in prior releases these would interactively show the output visualization. However that has changed to instead return a ``matplotlib.Figure`` object. This provides much more flexibility and options to interact with the visualization prior to saving or showing it. This will require adjustment to how these functions are consumed. For example, prior to this release when calling::"
msgstr ""

#: ../../release_notes.rst:2732
msgid "would open up new windows (depending on matplotlib backend) to display the visualization. However starting in the 0.7 you'll have to call ``show()`` on the output to mirror this behavior. For example::"
msgstr ""

#: ../../release_notes.rst:2739
msgid "or::"
msgstr ""

#: ../../release_notes.rst:2746
msgid "Note that this is only for when running outside of Jupyter. No adjustment is required inside a Jupyter environment because Jupyter notebooks natively understand how to render ``matplotlib.Figure`` objects."
msgstr ""

#: ../../release_notes.rst:2750
msgid "However, returning the Figure object provides additional flexibility for dealing with the output. For example instead of just showing the figure you can now directly save it to a file by leveraging the ``savefig()`` method. For example::"
msgstr ""

#: ../../release_notes.rst:2760
msgid "The other key aspect which has changed with these functions is when running under jupyter. In the 0.6 release ``plot_state()`` and ``plot_histogram()`` when running under jupyter the default behavior was to use the interactive Javascript plots if the externally hosted Javascript library for rendering the visualization was reachable over the network. If not it would just use the matplotlib version. However in the 0.7 release this no longer the case, and separate functions for the interactive plots, ``iplot_state()`` and ``iplot_histogram()`` are to be used instead. ``plot_state()`` and ``plot_histogram()`` always use the matplotlib versions."
msgstr ""

#: ../../release_notes.rst:2770
msgid "Additionally, starting in this release the ``plot_state()`` function is deprecated in favor of calling individual methods for each method of plotting a quantum state. While the ``plot_state()`` function will continue to work until the 0.9 release, it will emit a warning each time it is used. The"
msgstr ""

#: ../../release_notes.rst:2786
msgid "The same is true for the interactive JS equivalent, ``iplot_state()``. The function names are all the same, just with a prepended `i` for each function. For example, ``iplot_state(rho, method='paulivec')`` is ``iplot_state_paulivec(rho)``."
msgstr ""

#: ../../release_notes.rst:2792
msgid "Changes to Backends"
msgstr ""

#: ../../release_notes.rst:2794
msgid "With the improvements made in the 0.7 release there are a few things related to backends to keep in mind when upgrading. The biggest change is the restructuring of the provider instances in the root  ``qiskit``` namespace. The ``Aer`` provider is not installed by default and requires the installation of the ``qiskit-aer`` package. This package contains the new high performance fully featured simulator. If you installed via ``pip install qiskit`` you'll already have this installed. The python simulators are now available under ``qiskit.BasicAer`` and the old C++ simulators are available with ``qiskit.LegacySimulators``. This also means that the implicit fallback to python based simulators when the C++ simulators are not found doesn't exist anymore. If you ask for a local C++ based simulator backend, and it can't be found an exception will be raised instead of just using the python simulator instead."
msgstr ""

#: ../../release_notes.rst:2808
msgid "Additionally the previously deprecation top level functions ``register()`` and ``available_backends()`` have been removed. Also, the deprecated ``backend.parameters()`` and ``backend.calibration()`` methods have been removed in favor of ``backend.properties()``. You can refer to the 0.6 release notes section :ref:`backends` for more details on these changes."
msgstr ""

#: ../../release_notes.rst:2814
msgid "The ``backend.jobs()`` and ``backend.retrieve_jobs()`` calls no longer return results from those jobs. Instead you must call the ``result()`` method on the returned jobs objects."
msgstr ""

#: ../../release_notes.rst:2819
msgid "Changes to the compiler, transpiler, and unrollers"
msgstr ""

#: ../../release_notes.rst:2821
msgid "As part of an effort to stabilize the compiler interfaces there have been several changes to be aware of when leveraging the compiler functions. First it is important to note that the ``qiskit.transpiler.transpile()`` function now takes a QuantumCircuit object (or a list of them) and returns a QuantumCircuit object (or a list of them). The DAG processing is done internally now."
msgstr ""

#: ../../release_notes.rst:2828
msgid "You can also easily switch between circuits, DAGs, and Qobj now using the functions in ``qiskit.converters``."
msgstr ""

#: ../../release_notes.rst:2840
msgid "Aer provides three simulator backends:"
msgstr ""

#: ../../release_notes.rst:2842
msgid "``QasmSimulator``: simulate experiments and return measurement outcomes"
msgstr ""

#: ../../release_notes.rst:2843
msgid "``StatevectorSimulator``: return the final statevector for a quantum circuit acting on the all zero state"
msgstr ""

#: ../../release_notes.rst:2845
msgid "``UnitarySimulator``: return the unitary matrix for a quantum circuit"
msgstr ""

#: ../../release_notes.rst:2847
msgid "``noise`` module: contains advanced noise modeling features for the ``QasmSimulator``"
msgstr ""

#: ../../release_notes.rst:2850
msgid "``NoiseModel``, ``QuantumError``, ``ReadoutError`` classes for simulating a Qiskit quantum circuit in the presence of errors"
msgstr ""

#: ../../release_notes.rst:2852
msgid "``errors`` submodule including functions for generating ``QuantumError`` objects for the following types of quantum errors: Kraus, mixed unitary, coherent unitary, Pauli, depolarizing, thermal relaxation, amplitude damping, phase damping, combined phase and amplitude damping"
msgstr ""

#: ../../release_notes.rst:2856
msgid "``device`` submodule for automatically generating a noise model based on the ``BackendProperties`` of a device"
msgstr ""

#: ../../release_notes.rst:2859
msgid "``utils`` module:"
msgstr ""

#: ../../release_notes.rst:2861
msgid "``qobj_utils`` provides functions for directly modifying a Qobj to insert special simulator instructions not yet supported through the Qiskit Terra API."
msgstr ""

#: ../../release_notes.rst:2866
msgid "Aqua 0.4"
msgstr ""

#: ../../release_notes.rst:2871
msgid "Programmatic APIs for algorithms and components -- each component can now be instantiated and initialized via a single (non-emptY) constructot call"
msgstr ""

#: ../../release_notes.rst:2873
msgid "``QuantumInstance`` API for algorithm/backend decoupling -- ``QuantumInstance`` encapsulates a backend and its settings"
msgstr ""

#: ../../release_notes.rst:2875
msgid "Updated documentation and Jupyter Notebooks illustrating the new programmatic APIs"
msgstr ""

#: ../../release_notes.rst:2877
msgid "Transparent parallelization for gradient-based optimizers"
msgstr ""

#: ../../release_notes.rst:2878
msgid "Multiple-Controlled-NOT (cnx) operation"
msgstr ""

#: ../../release_notes.rst:2879
msgid "Pluggable algorithmic component ``RandomDistribution``"
msgstr ""

#: ../../release_notes.rst:2880
msgid "Concrete implementations of ``RandomDistribution``: ``BernoulliDistribution``, ``LogNormalDistribution``, ``MultivariateDistribution``, ``MultivariateNormalDistribution``, ``MultivariateUniformDistribution``, ``NormalDistribution``, ``UniformDistribution``, and ``UnivariateDistribution``"
msgstr ""

#: ../../release_notes.rst:2885
msgid "Concrete implementations of ``UncertaintyProblem``: ``FixedIncomeExpectedValue``, ``EuropeanCallExpectedValue``, and ``EuropeanCallDelta``"
msgstr ""

#: ../../release_notes.rst:2888
msgid "Amplitude Estimation algorithm"
msgstr ""

#: ../../release_notes.rst:2889
msgid "Qiskit Optimization: New Ising models for optimization problems exact cover, set packing, vertex cover, clique, and graph partition"
msgstr ""

#: ../../release_notes.rst:2891
msgid "Qiskit AI:"
msgstr ""

#: ../../release_notes.rst:2893
msgid "New feature maps extending the ``FeatureMap`` pluggable interface: ``PauliExpansion`` and ``PauliZExpansion``"
msgstr ""

#: ../../release_notes.rst:2895
msgid "Training model serialization/deserialization mechanism"
msgstr ""

#: ../../release_notes.rst:2897
msgid "Qiskit Finance:"
msgstr ""

#: ../../release_notes.rst:2899
msgid "Amplitude estimation for Bernoulli random variable: illustration of amplitude estimation on a single qubit problem"
msgstr ""

#: ../../release_notes.rst:2901
msgid "Loading of multiple univariate and multivariate random distributions"
msgstr ""

#: ../../release_notes.rst:2902
msgid "European call option: expected value and delta (using univariate distributions)"
msgstr ""

#: ../../release_notes.rst:2904
msgid "Fixed income asset pricing: expected value (using multivariate distributions)"
msgstr ""

#: ../../release_notes.rst:2907
msgid "The Pauli string in ``Operator`` class is aligned with Terra 0.7. Now the order of a n-qubit pauli string is ``q_{n-1}...q{0}`` Thus, the (de)serialier (``save_to_dict`` and ``load_from_dict``) in the ``Operator`` class are also changed to adopt the changes of ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:2915
msgid "``HartreeFock`` component of pluggable type ``InitialState`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:2917
msgid "``UCCSD`` component of pluggable type ``VariationalForm`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:2923
msgid "Qiskit 0.6"
msgstr ""

#: ../../release_notes.rst:2926
msgid "Terra 0.6"
msgstr ""

#: ../../release_notes.rst:2931
msgid "This release includes a redesign of internal components centered around a new, formal communication format (Qobj), along with long awaited features to improve the user experience as a whole. The highlights, compared to the 0.5 release, are:"
msgstr ""

#: ../../release_notes.rst:2936
msgid "Improvements for inter-operability (based on the Qobj specification) and extensibility (facilities for extending Qiskit with new backends in a seamless way)"
msgstr ""

#: ../../release_notes.rst:2939
msgid "New options for handling credentials and authentication for the IBM Q backends, aimed at simplifying the process and supporting automatic loading of user credentials"
msgstr ""

#: ../../release_notes.rst:2942
msgid "A revamp of the visualization utilities: stylish interactive visualizations are now available for Jupyter users, along with refinements for the circuit drawer (including a matplotlib-based version)"
msgstr ""

#: ../../release_notes.rst:2945
msgid "Performance improvements centered around circuit transpilation: the basis for a more flexible and modular architecture have been set, including parallelization of the circuit compilation and numerous optimizations"
msgstr ""

#: ../../release_notes.rst:2953
msgid "Please note that some backwards-incompatible changes have been introduced during this release -- the following notes contain information on how to adapt to the new changes."
msgstr ""

#: ../../release_notes.rst:2958
msgid "Removal of ``QuantumProgram``"
msgstr ""

#: ../../release_notes.rst:2960
msgid "As hinted during the 0.5 release, the deprecation of the  ``QuantumProgram`` class has now been completed and is no longer available, in favor of working with the individual components (:class:`~qiskit.backends.basejob.BaseJob`, :class:`~qiskit._quantumcircuit.QuantumCircuit`, :class:`~qiskit._classicalregister.ClassicalRegister`, :class:`~qiskit._quantumregister.QuantumRegister`, :mod:`~qiskit`) directly."
msgstr ""

#: ../../release_notes.rst:2968
msgid "Please check the :ref:`0.5 release notes <quantum-program-0-5>` and the examples for details about the transition::"
msgstr ""

#: ../../release_notes.rst:2993
msgid "IBM Q Authentication and ``Qconfig.py``"
msgstr ""

#: ../../release_notes.rst:2995
msgid "The managing of credentials for authenticating when using the IBM Q backends has been expanded, and there are new options that can be used for convenience:"
msgstr ""

#: ../../release_notes.rst:2998
msgid "save your credentials in disk once, and automatically load them in future sessions. This provides a one-off mechanism::"
msgstr ""

#: ../../release_notes.rst:3004
msgid "afterwards, your credentials can be automatically loaded from disk by invoking :meth:`~qiskit.backends.ibmq.ibmqprovider.IBMQ.load_accounts`::"
msgstr ""

#: ../../release_notes.rst:3010
msgid "or you can load only specific accounts if you only want to use those in a session::"
msgstr ""

#: ../../release_notes.rst:3014
msgid "use environment variables. If ``QE_TOKEN`` and ``QE_URL`` is set, the ``IBMQ.load_accounts()`` call will automatically load the credentials from them."
msgstr ""

#: ../../release_notes.rst:3018
msgid "Additionally, the previous method of having a ``Qconfig.py`` file in the program folder and passing the credentials explicitly is still supported."
msgstr ""

#: ../../release_notes.rst:3025
msgid "Working with backends"
msgstr ""

#: ../../release_notes.rst:3027
msgid "A new mechanism has been introduced in Terra 0.6 as the recommended way for obtaining a backend, allowing for more powerful and unified filtering and integrated with the new credentials system. The previous top-level methods :meth:`~qiskit.wrapper._wrapper.register`, :meth:`~qiskit.wrapper._wrapper.available_backends` and :meth:`~qiskit.wrapper._wrapper.get_backend` are still supported, but will deprecated in upcoming versions in favor of using the `qiskit.IBMQ` and `qiskit.Aer` objects directly, which allow for more complex filtering."
msgstr ""

#: ../../release_notes.rst:3036
msgid "For example, to list and use a local backend::"
msgstr ""

#: ../../release_notes.rst:3043
msgid "And for listing and using remote backends::"
msgstr ""

#: ../../release_notes.rst:3051
msgid "Please note as well that the names of the local simulators have been simplified. The previous names can still be used, but it is encouraged to use the new, shorter names:"
msgstr ""

#: ../../release_notes.rst:3056 ../../release_notes.rst:3093
msgid "Qiskit Terra 0.5"
msgstr ""

#: ../../release_notes.rst:3058
msgid "'local_qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:3058
msgid "'qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:3059
msgid "'local_statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:3059
msgid "'statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:3060
msgid "'local_unitary_simulator_py'"
msgstr ""

#: ../../release_notes.rst:3060
msgid "'unitary_simulator'"
msgstr ""

#: ../../release_notes.rst:3065
msgid "Backend and Job API changes"
msgstr ""

#: ../../release_notes.rst:3067
msgid "Jobs submitted to IBM Q backends have improved capabilities. It is possible to cancel them and replenish credits (``job.cancel()``), and to retrieve previous jobs executed on a specific backend either by job id (``backend.retrieve_job(job_id)``) or in batch of latest jobs (``backend.jobs(limit)``)"
msgstr ""

#: ../../release_notes.rst:3073
msgid "Properties for checking each individual job status (``queued``, ``running``, ``validating``, ``done`` and ``cancelled``) no longer exist. If you want to check the job status, use the identity comparison against ``job.status``::"
msgstr ""

#: ../../release_notes.rst:3084
msgid "Please consult the new documentation of the :class:`~qiskit.backends.ibmq.ibmqjob.IBMQJob` class to get further insight in how to use the simplified API."
msgstr ""

#: ../../release_notes.rst:3088
msgid "A number of members of :class:`~qiskit.backends.basebackend.BaseBackend` and :class:`~qiskit.backends.basejob.BaseJob` are no longer properties, but methods, and as a result they need to be invoked as functions."
msgstr ""

#: ../../release_notes.rst:3095
msgid "backend.name"
msgstr ""

#: ../../release_notes.rst:3095
msgid "backend.name()"
msgstr ""

#: ../../release_notes.rst:3096
msgid "backend.status"
msgstr ""

#: ../../release_notes.rst:3096
msgid "backend.status()"
msgstr ""

#: ../../release_notes.rst:3097
msgid "backend.configuration"
msgstr ""

#: ../../release_notes.rst:3097
msgid "backend.configuration()"
msgstr ""

#: ../../release_notes.rst:3098
msgid "backend.calibration"
msgstr ""

#: ../../release_notes.rst:3098
msgid "backend.properties()"
msgstr ""

#: ../../release_notes.rst:3099
msgid "backend.parameters"
msgstr ""

#: ../../release_notes.rst:3099
msgid "backend.jobs() backend.retrieve_job(job_id)"
msgstr ""

#: ../../release_notes.rst:3101
msgid "job.status"
msgstr ""

#: ../../release_notes.rst:3101
msgid "job.status()"
msgstr ""

#: ../../release_notes.rst:3102
msgid "job.cancelled"
msgstr ""

#: ../../release_notes.rst:3102
msgid "job.queue_position()"
msgstr ""

#: ../../release_notes.rst:3103
msgid "job.running"
msgstr ""

#: ../../release_notes.rst:3103
msgid "job.cancel()"
msgstr ""

#: ../../release_notes.rst:3104
msgid "job.queued"
msgstr ""

#: ../../release_notes.rst:3105
msgid "job.done"
msgstr ""

#: ../../release_notes.rst:3110
msgid "Better Jupyter tools"
msgstr ""

#: ../../release_notes.rst:3112
msgid "The new release contains improvements to the user experience while using Jupyter notebooks."
msgstr ""

#: ../../release_notes.rst:3115
msgid "First, new interactive visualizations of counts histograms and quantum states are provided: :meth:`~qiskit.tools.visualization.plot_histogram` and :meth:`~qiskit.tools.visualization.plot_state`. These methods will default to the new interactive kind when the environment is Jupyter and internet connection exists."
msgstr ""

#: ../../release_notes.rst:3122
#, python-format
msgid "Secondly, the new release provides Jupyter cell magics for keeping track of the progress of your code. Use ``%%qiskit_job_status`` to keep track of the status of submitted jobs to IBM Q backends. Use ``%%qiskit_progress_bar`` to keep track of the progress of compilation/execution."
msgstr ""

#: ../../release_notes.rst:3131
msgid "Qiskit 0.5"
msgstr ""

#: ../../release_notes.rst:3134
msgid "Terra 0.5"
msgstr ""

#: ../../release_notes.rst:3139
msgid "This release brings a number of improvements to Qiskit, both for the user experience and under the hood. Please refer to the full changelog for a detailed description of the changes - the highlights are:"
msgstr ""

#: ../../release_notes.rst:3143
msgid "new ``statevector`` :mod:`simulators <qiskit.backends.local>` and feature and performance improvements to the existing ones (in particular to the C++ simulator), along with a reorganization of how to work with backends focused on extensibility and flexibility (using aliases and backend providers)"
msgstr ""

#: ../../release_notes.rst:3147
msgid "reorganization of the asynchronous features, providing a friendlier interface for running jobs asynchronously via :class:`Job` instances"
msgstr ""

#: ../../release_notes.rst:3149
msgid "numerous improvements and fixes throughout the Terra as a whole, both for convenience of the users (such as allowing anonymous registers) and for enhanced functionality (such as improved plotting of circuits)"
msgstr ""

#: ../../release_notes.rst:3157
msgid "Please note that several backwards-incompatible changes have been introduced during this release as a result of the ongoing development. While some of these features will continue to be supported during a period of time before being fully deprecated, it is recommended to update your programs in order to prepare for the new versions and take advantage of the new functionality."
msgstr ""

#: ../../release_notes.rst:3167
msgid "``QuantumProgram`` changes"
msgstr ""

#: ../../release_notes.rst:3169
msgid "Several methods of the :class:`~qiskit.QuantumProgram` class are on their way to being deprecated:"
msgstr ""

#: ../../release_notes.rst:3172
msgid "methods for interacting **with the backends and the API**:"
msgstr ""

#: ../../release_notes.rst:3174
msgid "The recommended way for opening a connection to the IBM Q API and for using the backends is through the top-level functions directly instead of the ``QuantumProgram`` methods. In particular, the :func:`qiskit.register` method provides the equivalent of the previous :func:`qiskit.QuantumProgram.set_api` call. In a similar vein, there is a new :func:`qiskit.available_backends`, :func:`qiskit.get_backend` and related functions for querying the available backends directly. For example, the following snippet for version 0.4::"
msgstr ""

#: ../../release_notes.rst:3191 ../../release_notes.rst:3209
msgid "would be equivalent to the following snippet for version 0.5::"
msgstr ""

#: ../../release_notes.rst:3200
msgid "methods for **compiling and executing programs**:"
msgstr ""

#: ../../release_notes.rst:3202
msgid "The top-level functions now also provide equivalents for the :func:`qiskit.QuantumProgram.compile` and :func:`qiskit.QuantumProgram.execute` methods. For example, the following snippet from version 0.4::"
msgstr ""

#: ../../release_notes.rst:3215
msgid "In general, from version 0.5 onwards we encourage to try to make use of the individual objects and classes directly instead of relying on ``QuantumProgram``. For example, a :class:`~qiskit.QuantumCircuit` can be instantiated and constructed by appending :class:`~qiskit.QuantumRegister`, :class:`~qiskit.ClassicalRegister`, and gates directly. Please check the update example in the Quickstart section, or the ``using_qiskit_core_level_0.py`` and ``using_qiskit_core_level_1.py`` examples on the main repository."
msgstr ""

#: ../../release_notes.rst:3225
msgid "Backend name changes"
msgstr ""

#: ../../release_notes.rst:3227
msgid "In order to provide a more extensible framework for backends, there have been some design changes accordingly:"
msgstr ""

#: ../../release_notes.rst:3230
msgid "**local simulator names**"
msgstr ""

#: ../../release_notes.rst:3232
msgid "The names of the local simulators have been homogenized in order to follow the same pattern: ``PROVIDERNAME_TYPE_simulator_LANGUAGEORPROJECT`` - for example, the C++ simulator previously named ``local_qiskit_simulator`` is now ``local_qasm_simulator_cpp``. An overview of the current simulators:"
msgstr ""

#: ../../release_notes.rst:3238
msgid "``QASM`` simulator is supposed to be like an experiment. You apply a circuit on some qubits, and observe measurement results - and you repeat for many shots to get a histogram of counts via ``result.get_counts()``."
msgstr ""

#: ../../release_notes.rst:3241
msgid "``Statevector`` simulator is to get the full statevector (:math:`2^n` amplitudes) after evolving the zero state through the circuit, and can be obtained via ``result.get_statevector()``."
msgstr ""

#: ../../release_notes.rst:3244
msgid "``Unitary`` simulator is to get the unitary matrix equivalent of the circuit, returned via ``result.get_unitary()``."
msgstr ""

#: ../../release_notes.rst:3246
msgid "In addition, you can get intermediate states from a simulator by applying a ``snapshot(slot)`` instruction at various spots in the circuit. This will save the current state of the simulator in a given slot, which can later be retrieved via ``result.get_snapshot(slot)``."
msgstr ""

#: ../../release_notes.rst:3251
msgid "**backend aliases**:"
msgstr ""

#: ../../release_notes.rst:3253
msgid "The SDK now provides an \"alias\" system that allows for automatically using the most performant simulator of a specific type, if it is available in your system. For example, with the following snippet::"
msgstr ""

#: ../../release_notes.rst:3261
msgid "the backend will be the C++ statevector simulator if available, falling back to the Python statevector simulator if not present."
msgstr ""

#: ../../release_notes.rst:3265
msgid "More flexible names and parameters"
msgstr ""

#: ../../release_notes.rst:3267
msgid "Several functions of the SDK have been made more flexible and user-friendly:"
msgstr ""

#: ../../release_notes.rst:3269
msgid "**automatic circuit and register names**"
msgstr ""

#: ../../release_notes.rst:3271
msgid ":class:`qiskit.ClassicalRegister`, :class:`qiskit.QuantumRegister` and :class:`qiskit.QuantumCircuit` can now be instantiated without explicitly giving them a name - a new autonaming feature will automatically assign them an identifier::"
msgstr ""

#: ../../release_notes.rst:3278
msgid "Please note as well that the order of the parameters have been swapped ``QuantumRegister(size, name)``."
msgstr ""

#: ../../release_notes.rst:3281
msgid "**methods accepting names or instances**"
msgstr ""

#: ../../release_notes.rst:3283
msgid "In combination with the autonaming changes, several methods such as :func:`qiskit.Result.get_data` now accept both names and instances for convenience. For example, when retrieving the results for a job that has a single circuit such as::"
msgstr ""

#: ../../release_notes.rst:3292
msgid "The following calls are equivalent::"
msgstr ""

