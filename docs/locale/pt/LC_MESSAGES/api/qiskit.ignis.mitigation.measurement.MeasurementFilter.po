msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-13 16:11+0000\n"
"PO-Revision-Date: 2019-09-16 15:10\n"
"Last-Translator: lzdanski\n"
"Language-Team: Portuguese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: pt-PT\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/api/qiskit.ignis.mitigation.measurement.MeasurementFilter.po\n"
"Language: pt_PT\n"

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:2
msgid "MeasurementFilter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter:1
msgid "Bases: :class:`object`"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter:1
msgid "Measurement error mitigation filter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter:3
msgid "Produced from a measurement calibration fitter and can be applied to data"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:10
msgid "Attributes Summary"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
msgid ":obj:`cal_matrix <qiskit.ignis.mitigation.measurement.MeasurementFilter.cal_matrix>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.cal_matrix:1
msgid "Return cal_matrix."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
msgid ":obj:`state_labels <qiskit.ignis.mitigation.measurement.MeasurementFilter.state_labels>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.state_labels:1
msgid "return the state label ordering of the cal matrix"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:17
msgid "Methods Summary"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:21:<autosummary>:1
msgid ":obj:`apply <qiskit.ignis.mitigation.measurement.MeasurementFilter.apply>`\\ \\(raw\\_data\\[\\, method\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:21:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:1
msgid "Apply the calibration matrix to results"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:23
msgid "Attributes Documentation"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:28
msgid "Methods Documentation"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply
msgid "Parameters"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:3
msgid "The data to be corrected. Can be in a number of forms. Form1: a counts dictionary from results.get_counts Form2: a list of counts of length==len(state_labels) Form3: a list of counts of length==M*len(state_labels) where M     is an integer (e.g. for use with the tomography data) Form4: a qiskit Result"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:3
msgid "The data to be corrected. Can be in a number of forms. Form1: a counts dictionary from results.get_counts Form2: a list of counts of length==len(state_labels) Form3: a list of counts of length==M*len(state_labels) where M"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:7
msgid "is an integer (e.g. for use with the tomography data)"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:8
msgid "Form4: a qiskit Result"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:9
msgid "fitting method. If None, then least_squares is used. 'pseudo_inverse': direct inversion of the A matrix 'least_squares': constrained to have physical probabilities"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply
msgid "Returns"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:14
msgid "The corrected data in the same form as raw_data"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:16
msgid "Additional Information:"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:18
msgid "e.g. calcircuits, state_labels = complete_measurement_calibration("
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:20
msgid "qiskit.QuantumRegister(5))"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:21
msgid "job = qiskit.execute(calcircuits) meas_fitter = CompleteMeasFitter(job.results(),"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:23
msgid "state_labels)"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:24
msgid "meas_filter = MeasurementFilter(meas_fitter.cal_matrix)"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:26
msgid "job2 = qiskit.execute(my_circuits) result2 = job2.results()"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:29
msgid "error_mitigated_counts = meas_filter.apply("
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:30
msgid "result2.get_counts('circ1'))"
msgstr ""

