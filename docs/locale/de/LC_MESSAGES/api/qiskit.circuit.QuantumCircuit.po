msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-13 16:11+0000\n"
"PO-Revision-Date: 2019-09-16 14:44\n"
"Last-Translator: lzdanski\n"
"Language-Team: German\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/api/qiskit.circuit.QuantumCircuit.po\n"
"Language: de_DE\n"

#: ../../api/qiskit.circuit.QuantumCircuit.rst:2
msgid "QuantumCircuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit:1
msgid "Bases: :class:`object`"
msgstr ""

#: of qiskit.circuit.QuantumCircuit:1
msgid "Quantum circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:10
msgid "Attributes Summary"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`clbits <qiskit.circuit.QuantumCircuit.clbits>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.clbits:1
msgid "Returns a list of classical bits in the order that the registers had been added."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`extension_lib <qiskit.circuit.QuantumCircuit.extension_lib>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`header <qiskit.circuit.QuantumCircuit.header>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`instances <qiskit.circuit.QuantumCircuit.instances>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`n_qubits <qiskit.circuit.QuantumCircuit.n_qubits>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.n_qubits:1
msgid "Return number of qubits."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`parameters <qiskit.circuit.QuantumCircuit.parameters>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.parameters:1
msgid "convenience function to get the parameters defined in the parameter table"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`prefix <qiskit.circuit.QuantumCircuit.prefix>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1
msgid ":obj:`qubits <qiskit.circuit.QuantumCircuit.qubits>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:21:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.qubits:1
msgid "Returns a list of quantum bits in the order that the registers had been added."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:23
msgid "Methods Summary"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`AND <qiskit.circuit.QuantumCircuit.AND>`\\ \\(qr\\_variables\\, qb\\_target\\, qr\\_ancillae\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.AND:1
msgid "Build a collective conjunction (AND) circuit in place using mct."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`OR <qiskit.circuit.QuantumCircuit.OR>`\\ \\(qr\\_variables\\, qb\\_target\\, qr\\_ancillae\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.OR:1
msgid "Build a collective disjunction (OR) circuit in place using mct."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`add_register <qiskit.circuit.QuantumCircuit.add_register>`\\ \\(\\*regs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.add_register:1
msgid "Add registers."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`append <qiskit.circuit.QuantumCircuit.append>`\\ \\(instruction\\[\\, qargs\\, cargs\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Append one or more instructions to the end of the circuit, modifying the circuit in place."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`barrier <qiskit.circuit.QuantumCircuit.barrier>`\\ \\(\\*qargs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Apply barrier to circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`bind_parameters <qiskit.circuit.QuantumCircuit.bind_parameters>`\\ \\(value\\_dict\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.bind_parameters:1
msgid "Assign parameters to values yielding a new circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cast <qiskit.circuit.QuantumCircuit.cast>`\\ \\(value\\, \\_type\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Best effort to cast value to type."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cbit_argument_conversion <qiskit.circuit.QuantumCircuit.cbit_argument_conversion>`\\ \\(clbit\\_representation\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cbit_argument_conversion:1
msgid "Converts several classical bit representations (such as indexes, range, etc) into a list of classical bits."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`ccx <qiskit.circuit.QuantumCircuit.ccx>`\\ \\(ctl1\\, ctl2\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.ccx:1
msgid "Apply Toffoli to from ctl1 and ctl2 to tgt."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`ch <qiskit.circuit.QuantumCircuit.ch>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.ch:1
msgid "Apply CH from ctl to tgt."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cls_instances <qiskit.circuit.QuantumCircuit.cls_instances>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cls_instances:1
msgid "Return the current number of instances of this class, useful for auto naming."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cls_prefix <qiskit.circuit.QuantumCircuit.cls_prefix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cls_prefix:1
msgid "Return the prefix to use for auto naming."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`combine <qiskit.circuit.QuantumCircuit.combine>`\\ \\(rhs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.combine:1
#: qiskit.circuit.QuantumCircuit.extend:1
msgid "Append rhs to self if self contains compatible registers."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`copy <qiskit.circuit.QuantumCircuit.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>
msgid "param name"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.copy:1
msgid "name to be given to the copied circuit, if None then the name stays the same"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`count_ops <qiskit.circuit.QuantumCircuit.count_ops>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.count_ops:1
msgid "Count each operation kind in the circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cry <qiskit.circuit.QuantumCircuit.cry>`\\ \\(theta\\, q\\_control\\, q\\_target\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cry:1
msgid "Apply Controlled-RY (cry) Gate."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`crz <qiskit.circuit.QuantumCircuit.crz>`\\ \\(theta\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.crz:1
msgid "Apply crz from ctl to tgt with angle theta."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cswap <qiskit.circuit.QuantumCircuit.cswap>`\\ \\(ctl\\, tgt1\\, tgt2\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cswap:1
msgid "Apply Fredkin to circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cu1 <qiskit.circuit.QuantumCircuit.cu1>`\\ \\(theta\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cu1:1
msgid "Apply cu1 from ctl to tgt with angle theta."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cu3 <qiskit.circuit.QuantumCircuit.cu3>`\\ \\(theta\\, phi\\, lam\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cu3:1
msgid "Apply cu3 from ctl to tgt with angle theta, phi, lam."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cx <qiskit.circuit.QuantumCircuit.cx>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cx:1
msgid "Apply CX from ctl to tgt."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cx_base <qiskit.circuit.QuantumCircuit.cx_base>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cx_base:1
msgid "Apply CX ctl, tgt."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cy <qiskit.circuit.QuantumCircuit.cy>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cy:1
msgid "Apply CY to circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`cz <qiskit.circuit.QuantumCircuit.cz>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cz:1
msgid "Apply CZ to circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`decompose <qiskit.circuit.QuantumCircuit.decompose>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.decompose:1
msgid "Call a decomposition pass on this circuit, to decompose one level (shallow decompose)."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`depth <qiskit.circuit.QuantumCircuit.depth>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Return circuit depth (i.e."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`diag_gate <qiskit.circuit.QuantumCircuit.diag_gate>`\\ \\(diag\\, qubit\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Attach a diagonal gate to a circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`draw <qiskit.circuit.QuantumCircuit.draw>`\\ \\(\\[scale\\, filename\\, style\\, output\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.draw:1
msgid "Draw the quantum circuit"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`extend <qiskit.circuit.QuantumCircuit.extend>`\\ \\(rhs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`from_qasm_file <qiskit.circuit.QuantumCircuit.from_qasm_file>`\\ \\(path\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.from_qasm_file:1
msgid "Take in a QASM file and generate a QuantumCircuit object."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`from_qasm_str <qiskit.circuit.QuantumCircuit.from_qasm_str>`\\ \\(qasm\\_str\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.from_qasm_str:1
msgid "Take in a QASM string and generate a QuantumCircuit object."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`h <qiskit.circuit.QuantumCircuit.h>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.h:1
msgid "Apply H to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`has_register <qiskit.circuit.QuantumCircuit.has_register>`\\ \\(register\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.has_register:1
msgid "Test if this circuit has the register r."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`iden <qiskit.circuit.QuantumCircuit.iden>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.iden:1
msgid "Apply Identity to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`initialize <qiskit.circuit.QuantumCircuit.initialize>`\\ \\(params\\, qubits\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.initialize:1
msgid "Apply initialize to circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.QuantumCircuit.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.inverse:1
msgid "Invert this circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`iso <qiskit.circuit.QuantumCircuit.iso>`\\ \\(isometry\\, q\\_input\\, q\\_ancillas\\_for\\_output\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Attach an arbitrary isometry from m to n qubits to a circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`mcmt <qiskit.circuit.QuantumCircuit.mcmt>`\\ \\(q\\_controls\\, q\\_ancillae\\, ...\\[\\, mode\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Apply a Multi-Control, Multi-Target using a generic gate."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`mcrx <qiskit.circuit.QuantumCircuit.mcrx>`\\ \\(theta\\, q\\_controls\\, q\\_target\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.mcrx:1
msgid "Apply Multiple-Controlled X rotation gate"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`mcry <qiskit.circuit.QuantumCircuit.mcry>`\\ \\(theta\\, q\\_controls\\, q\\_target\\, q\\_ancillae\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.mcry:1
msgid "Apply Multiple-Controlled Y rotation gate"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`mcrz <qiskit.circuit.QuantumCircuit.mcrz>`\\ \\(lam\\, q\\_controls\\, q\\_target\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.mcrz:1
msgid "Apply Multiple-Controlled Z rotation gate"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`mct <qiskit.circuit.QuantumCircuit.mct>`\\ \\(q\\_controls\\, q\\_target\\, q\\_ancilla\\[\\, mode\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.mct:1
msgid "Apply Multiple-Control Toffoli operation"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`mcu1 <qiskit.circuit.QuantumCircuit.mcu1>`\\ \\(lam\\, control\\_qubits\\, target\\_qubit\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.mcu1:1
msgid "Apply Multiple-Controlled U1 gate"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`measure <qiskit.circuit.QuantumCircuit.measure>`\\ \\(qubit\\, cbit\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.measure:1
msgid "Measure quantum bit into classical bit (tuples)."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`mirror <qiskit.circuit.QuantumCircuit.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.mirror:1
msgid "Mirror the circuit by reversing the instructions."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`num_connected_components <qiskit.circuit.QuantumCircuit.num_connected_components>`\\ \\(\\[unitary\\_only\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.num_connected_components:1
msgid "How many non-entangled subcircuits can the circuit be factored to."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`num_tensor_factors <qiskit.circuit.QuantumCircuit.num_tensor_factors>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.num_tensor_factors:1
#: qiskit.circuit.QuantumCircuit.num_unitary_factors:1
msgid "Computes the number of tensor factors in the unitary (quantum) part of the circuit only."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`num_unitary_factors <qiskit.circuit.QuantumCircuit.num_unitary_factors>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.QuantumCircuit.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.qasm:1
msgid "Return OpenQASM string."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`qbit_argument_conversion <qiskit.circuit.QuantumCircuit.qbit_argument_conversion>`\\ \\(qubit\\_representation\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.qbit_argument_conversion:1
msgid "Converts several qubit representations (such as indexes, range, etc) into a list of qubits."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`rcccx <qiskit.circuit.QuantumCircuit.rcccx>`\\ \\(q\\_control\\_1\\, q\\_control\\_2\\, q\\_control\\_3\\, ...\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.rcccx:1
msgid "Apply 3-Control Relative-Phase Toffoli gate from q_control_1, q_control_2, and q_control_3 to q_target."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`rccx <qiskit.circuit.QuantumCircuit.rccx>`\\ \\(q\\_control\\_1\\, q\\_control\\_2\\, q\\_target\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.rccx:1
msgid "Apply 2-Control Relative-Phase Toffoli gate from q_control_1 and q_control_2 to q_target."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`reset <qiskit.circuit.QuantumCircuit.reset>`\\ \\(qubit\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.reset:1
msgid "Reset q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`rx <qiskit.circuit.QuantumCircuit.rx>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.rx:1
msgid "Apply Rx to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`ry <qiskit.circuit.QuantumCircuit.ry>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.ry:1
msgid "Apply Ry to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`rz <qiskit.circuit.QuantumCircuit.rz>`\\ \\(phi\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.rz:1
msgid "Apply Rz to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`rzz <qiskit.circuit.QuantumCircuit.rzz>`\\ \\(theta\\, qubit1\\, qubit2\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.rzz:1
msgid "Apply RZZ to circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`s <qiskit.circuit.QuantumCircuit.s>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.s:1
msgid "Apply S to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`sdg <qiskit.circuit.QuantumCircuit.sdg>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.sdg:1
msgid "Apply Sdg to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`size <qiskit.circuit.QuantumCircuit.size>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.size:1
msgid "Returns total number of gate operations in circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`snapshot <qiskit.circuit.QuantumCircuit.snapshot>`\\ \\(label\\[\\, snapshot\\_type\\, qubits\\, params\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Take a statevector snapshot of the internal simulator representation."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`squ <qiskit.circuit.QuantumCircuit.squ>`\\ \\(u\\, qubit\\[\\, mode\\, up\\_to\\_diagonal\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Decompose an arbitrary 2*2 unitary into three rotation gates: U=R_zR_yR_z."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`swap <qiskit.circuit.QuantumCircuit.swap>`\\ \\(qubit1\\, qubit2\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.swap:1
msgid "Apply SWAP from qubit1 to qubit2."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`t <qiskit.circuit.QuantumCircuit.t>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.t:1
msgid "Apply T to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`tdg <qiskit.circuit.QuantumCircuit.tdg>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.tdg:1
msgid "Apply Tdg to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`to_instruction <qiskit.circuit.QuantumCircuit.to_instruction>`\\ \\(\\[parameter\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.to_instruction:1
msgid "Create an Instruction out of this circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`u0 <qiskit.circuit.QuantumCircuit.u0>`\\ \\(m\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.u0:1
msgid "Apply u0 with length m to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`u1 <qiskit.circuit.QuantumCircuit.u1>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.u1:1
msgid "Apply u1 with angle theta to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`u2 <qiskit.circuit.QuantumCircuit.u2>`\\ \\(phi\\, lam\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.u2:1 qiskit.circuit.QuantumCircuit.unitary:1
msgid "Apply u2 to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`u3 <qiskit.circuit.QuantumCircuit.u3>`\\ \\(theta\\, phi\\, lam\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.u3:1
msgid "Apply u3 to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`u_base <qiskit.circuit.QuantumCircuit.u_base>`\\ \\(theta\\, phi\\, lam\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.u_base:1
msgid "Apply U to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`ucg <qiskit.circuit.QuantumCircuit.ucg>`\\ \\(gate\\_list\\, q\\_controls\\, q\\_target\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Attach a uniformly controlled gates (also called multiplexed gates) to a circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`ucx <qiskit.circuit.QuantumCircuit.ucx>`\\ \\(angle\\_list\\, q\\_controls\\, q\\_target\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Attach a uniformly controlled (also called multiplexed) Rx rotation gate to a circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`ucy <qiskit.circuit.QuantumCircuit.ucy>`\\ \\(angle\\_list\\, q\\_controls\\, q\\_target\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Attach a uniformly controlled (also called multiplexed) Ry rotation gate to a circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`ucz <qiskit.circuit.QuantumCircuit.ucz>`\\ \\(angle\\_list\\, q\\_controls\\, q\\_target\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid "Attach a uniformly controlled (also called multiplexed gates) Rz rotation gate to a circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`unitary <qiskit.circuit.QuantumCircuit.unitary>`\\ \\(obj\\, qubits\\[\\, label\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`width <qiskit.circuit.QuantumCircuit.width>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.width:1
msgid "Return number of qubits plus clbits in circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`x <qiskit.circuit.QuantumCircuit.x>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.x:1
msgid "Apply X to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`y <qiskit.circuit.QuantumCircuit.y>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.y:1
msgid "Apply Y to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1
msgid ":obj:`z <qiskit.circuit.QuantumCircuit.z>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:106:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.z:1
msgid "Apply Z to q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:108
msgid "Attributes Documentation"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:119
msgid "Methods Documentation"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.AND qiskit.circuit.QuantumCircuit.OR
#: qiskit.circuit.QuantumCircuit.append
#: qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.cbit_argument_conversion
#: qiskit.circuit.QuantumCircuit.copy qiskit.circuit.QuantumCircuit.cry
#: qiskit.circuit.QuantumCircuit.draw
#: qiskit.circuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.QuantumCircuit.has_register qiskit.circuit.QuantumCircuit.iso
#: qiskit.circuit.QuantumCircuit.mcmt qiskit.circuit.QuantumCircuit.mcrx
#: qiskit.circuit.QuantumCircuit.mcry qiskit.circuit.QuantumCircuit.mcrz
#: qiskit.circuit.QuantumCircuit.mct qiskit.circuit.QuantumCircuit.mcu1
#: qiskit.circuit.QuantumCircuit.measure
#: qiskit.circuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.QuantumCircuit.qbit_argument_conversion
#: qiskit.circuit.QuantumCircuit.rcccx qiskit.circuit.QuantumCircuit.rccx
#: qiskit.circuit.QuantumCircuit.snapshot
#: qiskit.circuit.QuantumCircuit.to_instruction
msgid "Parameters"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.AND:3
msgid "The QuantumCircuit object to build the conjunction on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.AND:5 qiskit.circuit.QuantumCircuit.OR:5
msgid "The QuantumRegister holding the variable qubits."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.AND:7 qiskit.circuit.QuantumCircuit.OR:7
msgid "A list of +1/-1/0 to mark negations or omissions of qubits."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.AND:9
msgid "The target qubit to hold the conjunction result."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.AND:11 qiskit.circuit.QuantumCircuit.OR:11
msgid "The ancillary QuantumRegister for building the mct."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.AND:13 qiskit.circuit.QuantumCircuit.OR:13
msgid "The mct building mode."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.OR:3
msgid "The QuantumCircuit object to build the disjunction on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.OR:9
msgid "The target qubit to hold the disjunction result."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:1
msgid "Append one or more instructions to the end of the circuit, modifying the circuit in place. Expands qargs and cargs."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:4
msgid "Instruction instance to append"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:6
msgid "qubits to attach instruction to"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:8
msgid "clbits to attach instruction to"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append
#: qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.cbit_argument_conversion
#: qiskit.circuit.QuantumCircuit.copy qiskit.circuit.QuantumCircuit.count_ops
#: qiskit.circuit.QuantumCircuit.decompose qiskit.circuit.QuantumCircuit.depth
#: qiskit.circuit.QuantumCircuit.draw
#: qiskit.circuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.QuantumCircuit.has_register
#: qiskit.circuit.QuantumCircuit.inverse qiskit.circuit.QuantumCircuit.iso
#: qiskit.circuit.QuantumCircuit.measure qiskit.circuit.QuantumCircuit.mirror
#: qiskit.circuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.QuantumCircuit.qbit_argument_conversion
#: qiskit.circuit.QuantumCircuit.size qiskit.circuit.QuantumCircuit.snapshot
#: qiskit.circuit.QuantumCircuit.to_instruction
#: qiskit.circuit.QuantumCircuit.width
msgid "Returns"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:11
msgid "a handle to the instruction that was just added"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append
#: qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.cbit_argument_conversion
#: qiskit.circuit.QuantumCircuit.copy qiskit.circuit.QuantumCircuit.count_ops
#: qiskit.circuit.QuantumCircuit.decompose qiskit.circuit.QuantumCircuit.depth
#: qiskit.circuit.QuantumCircuit.draw
#: qiskit.circuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.QuantumCircuit.has_register
#: qiskit.circuit.QuantumCircuit.inverse qiskit.circuit.QuantumCircuit.iso
#: qiskit.circuit.QuantumCircuit.measure qiskit.circuit.QuantumCircuit.mirror
#: qiskit.circuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.QuantumCircuit.qbit_argument_conversion
#: qiskit.circuit.QuantumCircuit.size qiskit.circuit.QuantumCircuit.snapshot
#: qiskit.circuit.QuantumCircuit.to_instruction
#: qiskit.circuit.QuantumCircuit.width
msgid "Return type"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.barrier:1
msgid "Apply barrier to circuit. If qargs is None, applies to all the qbits. Args is a list of QuantumRegister or single qubits. For QuantumRegister, applies barrier to all the qubits in that register."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.bind_parameters:3
msgid "{parameter: value, ...}"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.draw qiskit.circuit.QuantumCircuit.inverse
#: qiskit.circuit.QuantumCircuit.iso qiskit.circuit.QuantumCircuit.measure
#: qiskit.circuit.QuantumCircuit.snapshot
msgid "Raises"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.bind_parameters:6
msgid "If value_dict contains parameters not present in the circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.bind_parameters:8
msgid "copy of self with assignment substitution."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.cast:1
msgid "Best effort to cast value to type. Otherwise, returns the value."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.cbit_argument_conversion:4
#: qiskit.circuit.QuantumCircuit.qbit_argument_conversion:4
msgid "representation to expand"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.cbit_argument_conversion:7
msgid "Where each tuple is a classical bit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.combine:3
#: qiskit.circuit.QuantumCircuit.extend:3
msgid "Two circuits are compatible if they contain the same registers or if they contain different registers with unique names. The returned circuit will contain all unique registers between both circuits."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.combine:8
msgid "Return self + rhs as a new object."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.copy:4
msgid "a deepcopy of the current circuit, with the name updated if                 it was provided"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.copy:6
msgid "a deepcopy of the current circuit, with the name updated if"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.copy:7
msgid "it was provided"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.count_ops:3
msgid "a breakdown of how many operations of each kind, sorted by amount."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.cry:3
msgid "The circuit to apply the cry gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.cry:5
msgid "The rotation angle."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.cry:7
msgid "The control qubit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.cry:9
#: qiskit.circuit.QuantumCircuit.rcccx:13 qiskit.circuit.QuantumCircuit.rccx:11
msgid "The target qubit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.decompose:4
msgid "a circuit one level decomposed"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:1
msgid "Return circuit depth (i.e. length of critical path). This does not include compiler or simulator directives such as 'barrier' or 'snapshot'."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:5
msgid "Depth of circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:9
#: qiskit.circuit.QuantumCircuit.num_tensor_factors:5
msgid "Notes"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:10
msgid "The circuit depth and the DAG depth need not bt the same."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:1
msgid "Attach a diagonal gate to a circuit. The decomposition is based on Theorem 7 given in \"Synthesis of Quantum Logic Circuits\" by Shende et al. (https://arxiv.org/pdf/quant-ph/0406176.pdf)."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:13
#: qiskit.circuit.QuantumCircuit.squ:12 qiskit.circuit.QuantumCircuit.ucg:18
#: qiskit.circuit.QuantumCircuit.ucx:13 qiskit.circuit.QuantumCircuit.ucy:13
#: qiskit.circuit.QuantumCircuit.ucz:13
msgid "Args:"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:6
msgid "diag (list): list of the 2^k diagonal entries (for a diagonal gate on k qubits)."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:7
msgid "Must contain at least two entries"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:13
msgid "qubit (QuantumRegister|list): list of k qubits the diagonal is"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:9
msgid "acting on (the order of the qubits specifies the computational basis in which the diagonal gate is provided: the first element in diag acts on the state where all the qubits in q are in the state 0, the second entry acts on the state where all the qubits q[1],...,q[k-1] are in the state zero and q[0] is in the state 1, and so on"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:16
#: qiskit.circuit.QuantumCircuit.squ:16 qiskit.circuit.QuantumCircuit.ucg:21
#: qiskit.circuit.QuantumCircuit.ucx:16 qiskit.circuit.QuantumCircuit.ucy:16
#: qiskit.circuit.QuantumCircuit.ucz:16
msgid "Returns:"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:16
msgid "QuantumCircuit: the diagonal gate is attached to the circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:19
#: qiskit.circuit.QuantumCircuit.squ:18 qiskit.circuit.QuantumCircuit.ucg:24
#: qiskit.circuit.QuantumCircuit.ucx:19 qiskit.circuit.QuantumCircuit.ucy:19
#: qiskit.circuit.QuantumCircuit.ucz:19
msgid "Raises:"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:19
msgid "QiskitError: if the list of the diagonal entries or the qubit list is in bad format;"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.diag_gate:20
msgid "if the number of diagonal entries is not 2^k, where k denotes the number of qubits"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:3
msgid "Using the output parameter you can specify the format. The choices are: 0. text: ASCII art string 1. latex: high-quality images, but heavy external software dependencies 2. matplotlib: purely in Python with no external dependencies"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:8
msgid "Defaults to an overcomplete basis, in order to not alter gates."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:10
msgid "scale of image to draw (shrink if < 1)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:12
msgid "file path to save image to"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:14
msgid "dictionary of style or file name of style file. You can refer to the :ref:`Style Dict Doc <style-dict-doc>` for more information on the contents."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:19
msgid "Select the output method to use for drawing the circuit. Valid choices are `text`, `latex`, `latex_source`, `mpl`. By default the 'text' drawer is used unless a user config file has an alternative backend set as the default. If the output is passed in that backend will always be used."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:25
msgid "when set true show the circuit in a new window (for `mpl` this depends on the matplotlib backend being used supporting this). Note when used with either the `text` or the `latex_source` output type this has no effect and will be silently ignored."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:31
msgid "sets the length of the lines generated by `text`"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:33
msgid "When set to True reverse the bit order inside registers for the output visualization."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:36
msgid "Enable/disable drawing barriers in the output circuit. Defaults to True."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:39
msgid "Options are `left`, `right` or `none`, if anything else is supplied it defaults to left justified. It refers to where gates should be placed in the output circuit if there is an option. `none` results in each gate being placed in its own column. Currently only supported by text drawer."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:45
msgid "`high`, `medium` or `low`. It merges the lines generated by `text` so the drawing will take less vertical room. Default is `medium`. It is ignored if output is not `text`."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:49
msgid "Include idle wires. Default is True."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:51
msgid "Include layout information, with labels on the physical layout. Default is True."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:55
msgid "* PIL.Image: (output `latex`) an in-memory representation of the   image of the circuit diagram. * matplotlib.figure: (output `mpl`) a matplotlib figure object   for the circuit diagram. * str: (output `latex_source`). The LaTeX source code. * TextDrawing: (output `text`). A drawing that can be printed as   ascii art"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:57
msgid "PIL.Image: (output `latex`) an in-memory representation of the image of the circuit diagram."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:59
msgid "matplotlib.figure: (output `mpl`) a matplotlib figure object for the circuit diagram."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:61
msgid "str: (output `latex_source`). The LaTeX source code."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:62
msgid "TextDrawing: (output `text`). A drawing that can be printed as ascii art"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:66
msgid "when an invalid output method is selected"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.extend:8
msgid "Modify and return self."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.from_qasm_file:3
msgid "Path to the file for a QASM program"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.from_qasm_file:6
#: qiskit.circuit.QuantumCircuit.from_qasm_str:6
msgid "The QuantumCircuit object for the input QASM"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.from_qasm_str:3
msgid "A QASM program string"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.has_register:3
msgid "a quantum or classical register."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.has_register:6
msgid "True if the register is contained in this circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iden:3
msgid "Identity gate corresponds to a single-qubit gate wait cycle, and should not be optimized or unrolled (it is an opaque gate)."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.inverse:3
msgid "This is done by recursively inverting all gates."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.inverse:5
msgid "the inverted circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.inverse:8
msgid "if the circuit cannot be inverted."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:1
msgid "Attach an arbitrary isometry from m to n qubits to a circuit. In particular, this allows to attach arbitrary unitaries on n qubits (m=n) or to prepare any state on n qubits (m=0). The decomposition used here was introduced by Iten et al. in https://arxiv.org/abs/1501.06911."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:6
msgid "an isometry from m to n qubits, i.e., a (complex) ndarray of dimension 2^n×2^m with orthonormal columns (given in the computational basis specified by the order of the ancillas and the input qubits, where the ancillas are considered to be more significant than the input qubits.)."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:11
msgid "list of m qubits where the input to the isometry is fed in (empty list for state preparation)."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:14
msgid "list of n-m ancilla qubits that are used for the output of the isometry and which are assumed to start in the zero state. The qubits are listed with increasing significance."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:18
msgid "list of ancilla qubits which are assumed to start in the zero state. Default is q_ancillas_zero = None."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:21
msgid "list of ancilla qubits which can start in an arbitrary state. Default is q_ancillas_dirty = None."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:25
msgid "the isometry is attached to the quantum circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.iso:28
msgid "if the array is not an isometry of the correct size corresponding to     the provided number of qubits."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcmt:1
msgid "Apply a Multi-Control, Multi-Target using a generic gate. It can also be used to implement a generic Multi-Control gate, as the target could also be of length 1."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcmt:4
msgid "The QuantumCircuit object to apply the mcmt gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcmt:6 qiskit.circuit.QuantumCircuit.mcrx:7
#: qiskit.circuit.QuantumCircuit.mcry:7 qiskit.circuit.QuantumCircuit.mcrz:7
#: qiskit.circuit.QuantumCircuit.mct:5 qiskit.circuit.QuantumCircuit.mcu1:7
msgid "The list of control qubits"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcmt:8 qiskit.circuit.QuantumCircuit.mct:9
msgid "The list of ancillary qubits"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcmt:10
msgid "The single control gate function (e.g QuantumCircuit.cz or QuantumCircuit.ch)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcmt:12
msgid "A list of qubits or a QuantumRegister to which the gate function should be applied."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcmt:15
msgid "The implementation mode to use (at the moment, only the basic mode is supported)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcrx:3
msgid "The QuantumCircuit object to apply the mcrx gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcrx:5 qiskit.circuit.QuantumCircuit.mcry:5
msgid "angle theta"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcrx:9 qiskit.circuit.QuantumCircuit.mcry:9
#: qiskit.circuit.QuantumCircuit.mcrz:9 qiskit.circuit.QuantumCircuit.mct:7
#: qiskit.circuit.QuantumCircuit.mcu1:9
msgid "The target qubit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcry:3
msgid "The QuantumCircuit object to apply the mcry gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcry:11
msgid "The list of ancillary qubits."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcry:13
#: qiskit.circuit.QuantumCircuit.mct:11
msgid "The implementation mode to use"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcrz:3
msgid "The QuantumCircuit object to apply the mcrz gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcrz:5
msgid "angle phi"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mct:3
msgid "The QuantumCircuit object to apply the mct gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcu1:3
msgid "The QuantumCircuit object to apply the mcu1 gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mcu1:5
msgid "angle lambda"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:3
msgid "quantum register"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:5
msgid "classical register"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:8
msgid "the attached measure instruction."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:11
msgid "if qubit is not in this circuit or bad format;     if cbit is not in this circuit or not creg."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mirror:3
msgid "This is done by recursively mirroring all instructions. It does not invert any gate."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mirror:6
msgid "the mirrored circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.num_connected_components:3
msgid "Compute only unitary part of graph."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.num_connected_components:6
msgid "Number of connected components in circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.num_tensor_factors:6
msgid "This is here for backwards compatibility, and will be removed in a future release of qiskit. You should call `num_unitary_factors` instead."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.qbit_argument_conversion:7
msgid "Where each tuple is a qubit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.rcccx:3
msgid "The implementation is based on https://arxiv.org/pdf/1508.03273.pdf Figure 4"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.rcccx:5
msgid "The QuantumCircuit object to apply the rcccx gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.rcccx:7
#: qiskit.circuit.QuantumCircuit.rccx:7
msgid "The 1st control qubit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.rcccx:9
#: qiskit.circuit.QuantumCircuit.rccx:9
msgid "The 2nd control qubit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.rcccx:11
msgid "The 3rd control qubit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.rccx:3
msgid "The implementation is based on https://arxiv.org/pdf/1508.03273.pdf Figure 3"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.rccx:5
msgid "The QuantumCircuit object to apply the rccx gate on."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.size:3
msgid "Total number of gate operations."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:1
msgid "Take a statevector snapshot of the internal simulator representation. Works on all qubits, and prevents reordering (like barrier)."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:4
msgid "For other types of snapshots use the Snapshot extension directly."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:6
msgid "a snapshot label to report the result"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:8
msgid "the type of the snapshot."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:10
msgid "the qubits to apply snapshot to [Default: None]."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:12
msgid "the parameters for snapshot_type [Default: None]."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:15
msgid "with attached command"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.snapshot:18
msgid "malformed command"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.squ:1
msgid "Decompose an arbitrary 2*2 unitary into three rotation gates: U=R_zR_yR_z. Note that the decomposition is up to a global phase shift. (This is a well known decomposition, which can be found for example in Nielsen and Chuang's book \"Quantum computation and quantum information\".)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.squ:7
msgid "u (ndarray): 2*2 unitary (given as a (complex) ndarray) qubit (QuantumRegister|Qubit): the qubit, on which the gate is acting on mode (string): determines the used decomposition by providing the rotation axes."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.squ:10
msgid "The allowed modes are: \"ZYZ\" (default)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.squ:12
msgid "up_to_diagonal (bool):  if set to True, the single-qubit unitary is decomposed up to"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.squ:12
msgid "a diagonal matrix, i.e. a unitary u' is implemented such that there exists a 2*2 diagonal gate d with u = d.dot(u')"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.squ:15
msgid "QuantumCircuit: the single-qubit unitary (up to a diagonal gate if up_to_diagonal = True) is attached to the circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.squ:19
msgid "QiskitError: if the format is wrong; if the array u is not unitary"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:3
msgid "For parameterized circuits, a mapping from parameters in the circuit to parameters to be used in the instruction. If None, existing circuit parameters will also parameterize the instruction."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:9
msgid "a composite instruction encapsulating this circuit     (can be decomposed back)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:11
msgid "a composite instruction encapsulating this circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:12
msgid "(can be decomposed back)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:1
msgid "Attach a uniformly controlled gates (also called multiplexed gates) to a circuit. The decomposition was introduced by Bergholm et al. in https://arxiv.org/pdf/quant-ph/0410066.pdf."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:6
msgid "gate_list (list[ndarray]): list of two qubit unitaries [U_0,...,U_{2^k-1}],"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:7
msgid "where each single-qubit unitary U_i is a given as a 2*2 array"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:11
msgid "q_controls (QuantumRegister|list[(QuantumRegister,int)]): list of k control qubits."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:9
msgid "The qubits are ordered according to their significance in the computational basis. For example if q_controls=[q[1],q[2]] (with q = QuantumRegister(2)), the unitary U_0 is performed if q[1] and q[2] are in the state zero, U_1 is performed if q[2] is in the state zero and q[1] is in the state one, and so on"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:13
msgid "q_target (QuantumRegister|(QuantumRegister,int)):  target qubit, where we act on with"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:14
msgid "the single-qubit gates."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:18
msgid "up_to_diagonal (bool): If set to True, the uniformly controlled gate is decomposed up"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:16
msgid "to a diagonal gate, i.e. a unitary u' is implemented such that there exists a diagonal gate d with u = d.dot(u'), where the unitary u describes the uniformly controlled gate"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:21
msgid "QuantumCircuit: the uniformly controlled gate is attached to the circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:24 qiskit.circuit.QuantumCircuit.ucx:19
#: qiskit.circuit.QuantumCircuit.ucy:19 qiskit.circuit.QuantumCircuit.ucz:19
msgid "QiskitError: if the list number of control qubits does not correspond to the provided"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucg:25 qiskit.circuit.QuantumCircuit.ucx:20
#: qiskit.circuit.QuantumCircuit.ucy:20 qiskit.circuit.QuantumCircuit.ucz:20
msgid "number of single-qubit unitaries; if an input is of the wrong type"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucx:1
msgid "Attach a uniformly controlled (also called multiplexed) Rx rotation gate to a circuit. The decomposition is base on https://arxiv.org/pdf/quant-ph/0406176.pdf by Shende et al."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucx:5
msgid "angle_list (list): list of (real) rotation angles [a_0,...,a_{2^k-1}] q_controls (QuantumRegister|list): list of k control qubits"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucx:7
msgid "(or empty list if no controls). The control qubits are ordered according to their significance in increasing order: For example if q_controls=[q[1],q[2]] (with q = QuantumRegister(2)), the rotation Rx(a_0)is performed if q[1] and q[2] are in the state zero, the rotation  Rx(a_1) is performed if q[1] is in the state"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucx:11 qiskit.circuit.QuantumCircuit.ucy:11
msgid "one and q[2] is in the state zero, and so on"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucx:13 qiskit.circuit.QuantumCircuit.ucy:13
#: qiskit.circuit.QuantumCircuit.ucz:13
msgid "q_target (QuantumRegister|Qubit): target qubit, where we act on with"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucx:13 qiskit.circuit.QuantumCircuit.ucy:13
#: qiskit.circuit.QuantumCircuit.ucz:13
msgid "the single-qubit rotation gates"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucx:16 qiskit.circuit.QuantumCircuit.ucy:16
#: qiskit.circuit.QuantumCircuit.ucz:16
msgid "QuantumCircuit: the uniformly controlled rotation gate is attached to the circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucy:1
msgid "Attach a uniformly controlled (also called multiplexed) Ry rotation gate to a circuit. The decomposition is base on https://arxiv.org/pdf/quant-ph/0406176.pdf by Shende et al."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucy:5 qiskit.circuit.QuantumCircuit.ucz:5
msgid "angle_list (list[numbers): list of (real) rotation angles [a_0,...,a_{2^k-1}] q_controls (QuantumRegister|list[Qubit]): list of k control qubits"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucy:7
msgid "(or empty list if no controls). The control qubits are ordered according to their significance in increasing order: For example if q_controls=[q[1],q[2]] (with q = QuantumRegister(2)), the rotation Ry(a_0)is performed if q[1] and q[2] are in the state zero, the rotation  Ry(a_1) is performed if q[1] is in the state"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucz:1
msgid "Attach a uniformly controlled (also called multiplexed gates) Rz rotation gate to a circuit. The decomposition is base on https://arxiv.org/pdf/quant-ph/0406176.pdf by Shende et al."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.ucz:7
msgid "(or empty list if no controls). The control qubits are ordered according to their significance in increasing order: For example if q_controls=[q[1],q[2]] (with q = QuantumRegister(2)), the rotation Rz(a_0)is performed if q[1] and q[2] are in the state zero, the rotation  Rz(a_1) is performed if q[1] is in the state one and q[2] is in the state zero, and so on"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.width:3
msgid "Width of circuit."
msgstr ""

