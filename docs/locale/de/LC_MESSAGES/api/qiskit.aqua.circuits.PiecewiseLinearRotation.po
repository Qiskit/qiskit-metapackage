msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-13 16:11+0000\n"
"PO-Revision-Date: 2019-09-16 14:47\n"
"Last-Translator: lzdanski\n"
"Language-Team: German\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/api/qiskit.aqua.circuits.PiecewiseLinearRotation.po\n"
"Language: de_DE\n"

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:2
msgid "PiecewiseLinearRotation"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation:1
msgid "Bases: :class:`qiskit.aqua.utils.circuit_factory.CircuitFactory`"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation:1
msgid "Piecewise-linearly-controlled rotation. For a piecewise linear (not necessarily continuous) function f(x). The function f(x) is defined through breakpoints, slopes and offsets as follows. Suppose the breakpoints { x_0, ..., x_J } are a subset of [0,  2^n-1], where n is the number of state qubits. Further on, denote the corresponding slopes and offsets by a_j, b_j respectively. Then f(x) is defined as:"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation:8
msgid "x < x_0            --> f(x) = 0 x_j <= x < x_{j+1} --> f(x) = a_j * (x - x_j) + b_j"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation:11
msgid "where we implicitly assume x_{J+1} = 2^n."
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:10
msgid "Attributes Summary"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:14:<autosummary>:1
msgid ":obj:`num_target_qubits <qiskit.aqua.circuits.PiecewiseLinearRotation.num_target_qubits>`\\"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:14:<autosummary>:1
#: of qiskit.aqua.circuits.PiecewiseLinearRotation.num_target_qubits:1
msgid "Returns the number of target qubits"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:16
msgid "Methods Summary"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build <qiskit.aqua.circuits.PiecewiseLinearRotation.build>`\\ \\(qc\\, q\\[\\, q\\_ancillas\\]\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build:1
msgid "Adds corresponding sub-circuit to given circuit"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build_controlled <qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled>`\\ \\(qc\\, q\\, q\\_control\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled:1
msgid "Adds corresponding controlled sub-circuit to given circuit"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build_controlled_inverse <qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse>`\\ \\(qc\\, q\\, q\\_control\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse:1
msgid "Adds controlled inverse of corresponding sub-circuit to given circuit"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build_controlled_inverse_power <qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse_power>`\\ \\(qc\\, q\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid "Adds controlled, inverse, power of corresponding circuit."
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build_controlled_power <qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_power>`\\ \\(qc\\, q\\, q\\_control\\, power\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid "Adds controlled power of corresponding circuit."
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build_inverse <qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse>`\\ \\(qc\\, q\\[\\, q\\_ancillas\\]\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse:1
msgid "Adds inverse of corresponding sub-circuit to given circuit"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build_inverse_power <qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse_power>`\\ \\(qc\\, q\\, power\\[\\, q\\_ancillas\\]\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid "Adds inverse power of corresponding circuit."
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`build_power <qiskit.aqua.circuits.PiecewiseLinearRotation.build_power>`\\ \\(qc\\, q\\, power\\[\\, q\\_ancillas\\]\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid "Adds power of corresponding circuit."
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`evaluate <qiskit.aqua.circuits.PiecewiseLinearRotation.evaluate>`\\ \\(x\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
#: of qiskit.aqua.circuits.PiecewiseLinearRotation.evaluate:1
msgid "Classically evaluate the piecewise linear rotation :param x: value to be evaluated at :type x: float"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`get_num_qubits <qiskit.aqua.circuits.PiecewiseLinearRotation.get_num_qubits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`get_num_qubits_controlled <qiskit.aqua.circuits.PiecewiseLinearRotation.get_num_qubits_controlled>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`required_ancillas <qiskit.aqua.circuits.PiecewiseLinearRotation.required_ancillas>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:32:<autosummary>:1
msgid ":obj:`required_ancillas_controlled <qiskit.aqua.circuits.PiecewiseLinearRotation.required_ancillas_controlled>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:34
msgid "Attributes Documentation"
msgstr ""

#: ../../api/qiskit.aqua.circuits.PiecewiseLinearRotation.rst:38
msgid "Methods Documentation"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse
msgid "Parameters"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build:3
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled:3
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse:3
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse:3
msgid "quantum circuit"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build:4
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled:4
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse:4
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse:4
msgid "list of qubits (has to be same length as self._num_qubits)"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build:5
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled:6
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse:6
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse:5
msgid "list of ancilla qubits (or None if none needed)"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build:6
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse:6
msgid "parameters for circuit"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled:5
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse:5
msgid "control qubit"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled:7
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse:7
msgid "use basis gates for expansion of controlled circuit"
msgstr ""

#: of
#: qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_inverse_power:1
msgid "Adds controlled, inverse, power of corresponding circuit. May be overridden if a more efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_controlled_power:1
msgid "Adds controlled power of corresponding circuit. May be overridden if a more efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_inverse_power:1
msgid "Adds inverse power of corresponding circuit. May be overridden if a more efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.build_power:1
msgid "Adds power of corresponding circuit. May be overridden if a more efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearRotation.evaluate:5
msgid "Returns: value of piecewise linear function at x"
msgstr ""

