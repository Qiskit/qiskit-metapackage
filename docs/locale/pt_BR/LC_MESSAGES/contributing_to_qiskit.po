msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-09 12:18+0000\n"
"PO-Revision-Date: 2020-05-09 12:45\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/contributing_to_qiskit.po\n"
"Language: pt_BR\n"

#: ../../contributing_to_qiskit.rst:4
msgid "Contributing to Qiskit"
msgstr ""

#: ../../contributing_to_qiskit.rst:6
msgid "Qiskit is an open-source project committed to bringing quantum computing to people of all backgrounds. This page describes how you can join the Qiskit community in this goal."
msgstr ""

#: ../../contributing_to_qiskit.rst:14
msgid "Where Things Are"
msgstr ""

#: ../../contributing_to_qiskit.rst:16
msgid "The code for Qiskit is located in the `Qiskit GitHub organization <https://github.com/Qiskit>`__, where you can find the individual projects that make up Qiskit, including"
msgstr ""

#: ../../contributing_to_qiskit.rst:19
msgid "`Qiskit Terra <https://github.com/Qiskit/qiskit-terra>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:20
msgid "`Qiskit Aer <https://github.com/Qiskit/qiskit-aer>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:21
msgid "`Qiskit Ignis <https://github.com/Qiskit/qiskit-ignis>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:22
msgid "`Qiskit Aqua <https://github.com/Qiskit/qiskit-aqua>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:23
msgid "`Qiskit IBMQ Provider <https://github.com/Qiskit/qiskit-ibmq-provider>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:24
msgid "`Qiskit Tutorials <https://github.com/Qiskit/qiskit-tutorials>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:25
msgid "`Qiskit API Documentation <https://github.com/Qiskit/qiskit/tree/master/docs>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:30
msgid "Getting Started"
msgstr ""

#: ../../contributing_to_qiskit.rst:32
msgid "Learn how members of the Qiskit community"
msgstr ""

#: ../../contributing_to_qiskit.rst:34
msgid "`Relate to one another <https://github.com/Qiskit/qiskit/blob/master/CODE_OF_CONDUCT.md>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:35
msgid "`Discuss ideas <https://qiskit.slack.com/>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:36
msgid "`Get help when we're stuck <https://quantumcomputing.stackexchange.com/questions/tagged/qiskit>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:37
msgid "`Stay informed of news in the community <https://medium.com/qiskit>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:38
msgid "`Keep a consistent style <https://www.python.org/dev/peps/pep-0008>`__"
msgstr ""

#: ../../contributing_to_qiskit.rst:39
msgid ":ref:`Build Qiskit packages from source <install_install_from_source_label>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:45
msgid "Reporting Bugs and Requesting Enhancements"
msgstr ""

#: ../../contributing_to_qiskit.rst:47
msgid "When you encounter a problem, please open an issue in the appropriate element's issue tracker:"
msgstr ""

#: ../../contributing_to_qiskit.rst:52 ../../contributing_to_qiskit.rst:141
msgid "Element"
msgstr ""

#: ../../contributing_to_qiskit.rst:52
msgid "Issue Tracker"
msgstr ""

#: ../../contributing_to_qiskit.rst:54 ../../contributing_to_qiskit.rst:143
msgid "qiskit-terra"
msgstr ""

#: ../../contributing_to_qiskit.rst:54
msgid "https://github.com/Qiskit/qiskit-terra/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:55 ../../contributing_to_qiskit.rst:144
msgid "qiskit-aer"
msgstr ""

#: ../../contributing_to_qiskit.rst:55
msgid "https://github.com/Qiskit/qiskit-aer/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:56 ../../contributing_to_qiskit.rst:145
msgid "qiskit-ignis"
msgstr ""

#: ../../contributing_to_qiskit.rst:56
msgid "https://github.com/Qiskit/qiskit-ignis/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:57 ../../contributing_to_qiskit.rst:146
msgid "qiskit-aqua"
msgstr ""

#: ../../contributing_to_qiskit.rst:57
msgid "https://github.com/Qiskit/qiskit-aqua/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:58 ../../contributing_to_qiskit.rst:147
msgid "Docs or Qiskit Meta-package"
msgstr ""

#: ../../contributing_to_qiskit.rst:58
msgid "https://github.com/Qiskit/qiskit/issues"
msgstr ""

#: ../../contributing_to_qiskit.rst:61
msgid "If you have an idea for a new feature, please open an **Enhancement** issue in the appropriate element's issue tracker. Opening an issue starts a discussion with the team about your idea, how it fits in with the project, how it can be implemented, etc."
msgstr ""

#: ../../contributing_to_qiskit.rst:69
msgid "Contributing Code"
msgstr ""

#: ../../contributing_to_qiskit.rst:74
msgid "Style Guide"
msgstr ""

#: ../../contributing_to_qiskit.rst:76
msgid "To enforce a consistent code style in the project, we use `Pylint <https://www.pylint.org>`__ and `pycodesytle <https://pycodestyle.readthedocs.io/en/latest/>`__ to verify that code contributions conform to and respect the project's style guide. To verify that your changes conform to the style guide, run: ``tox -elint``"
msgstr ""

#: ../../contributing_to_qiskit.rst:85
msgid "Contributor License Agreement"
msgstr ""

#: ../../contributing_to_qiskit.rst:87
msgid "Before you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you're attesting that you are the author of the contribution, and that you're freely contributing it under the terms of the Apache-2.0 license."
msgstr ""

#: ../../contributing_to_qiskit.rst:92
msgid "When you contribute to the Qiskit project with a new pull request, a bot will evaluate whether you have signed the CLA. If required, the bot will comment on the pull request, including a link to accept the agreement. The `individual CLA <https://qiskit.org/license/qiskit-cla.pdf>`__ document is available for review as a PDF."
msgstr ""

#: ../../contributing_to_qiskit.rst:99
msgid "If your contribution is part of your employment or your contribution is the property of your employer, then you will more than likely need to sign a `corporate CLA <https://qiskit.org/license/qiskit-corporate-cla.pdf>`__ too and email it to us at <qiskit@us.ibm.com>."
msgstr ""

#: ../../contributing_to_qiskit.rst:107 ../../contributing_to_qiskit.rst:141
msgid "Pull Requests"
msgstr ""

#: ../../contributing_to_qiskit.rst:109
msgid "We use `GitHub pull requests <https://help.github.com/articles/about-pull-requests>`__ to accept contributions."
msgstr ""

#: ../../contributing_to_qiskit.rst:113
msgid "While not required, opening a new issue about the bug you're fixing or the feature you're working on before you open a pull request is an important step in starting a discussion with the community about your work. The issue gives us a place to talk about the idea and how we can work together to implement it in the code. It also lets the community know what you're working on, and if you need help, you can reference the issue when discussing it with other community and team members."
msgstr ""

#: ../../contributing_to_qiskit.rst:121
msgid "If you've written some code but need help finishing it, want to get initial feedback on it prior to finishing it, or want to share it and discuss prior to finishing the implementation, you can open a *Work in Progress* pull request. When you create the pull request, prepend the title with the **\\[WIP\\]** tag (for Work In Progress). This will indicate to reviewers that the code in the PR isn't in its final state and will change. It also means that we will not merge the commit until it is finished. You or a reviewer can remove the [WIP] tag when the code is ready to be fully reviewed for merging."
msgstr ""

#: ../../contributing_to_qiskit.rst:133
msgid "Code Review"
msgstr ""

#: ../../contributing_to_qiskit.rst:135
msgid "Code review is done in the open and is open to anyone. While only maintainers have access to merge commits, community feedback on pull requests is extremely valuable. It is also a good mechanism to learn about the code base. You can view a list of all open pull requests here:"
msgstr ""

#: ../../contributing_to_qiskit.rst:143
msgid "https://github.com/Qiskit/qiskit-terra/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:144
msgid "https://github.com/Qiskit/qiskit-aer/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:145
msgid "https://github.com/Qiskit/qiskit-ignis/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:146
msgid "https://github.com/Qiskit/qiskit-aqua/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:147
msgid "https://github.com/Qiskit/qiskit/pulls"
msgstr ""

#: ../../contributing_to_qiskit.rst:154
msgid "Commit Messages"
msgstr ""

#: ../../contributing_to_qiskit.rst:156
msgid "The content of the commit message describing a change is just as important as the change itself. The commit message provides the context for not only code review but also the change history in the git log. A detailed commit message will make it easier for your code to be reviewed, and will also provide context to the change when someone looks at it in the future. When writing a commit message, remember these important details:"
msgstr ""

#: ../../contributing_to_qiskit.rst:169
msgid "Do not assume the reviewer understands what the original problem was."
msgstr ""

#: ../../contributing_to_qiskit.rst:164
msgid "When reading an issue, after a number of back & forth comments, it is often clear what the root cause problem is. The commit message should have a clear statement as to what the original problem is. The bug is merely interesting historical background on *how* the problem was identified. It should be possible to review a proposed patch for correctness from the commit message, without needing to read the bug ticket."
msgstr ""

#: ../../contributing_to_qiskit.rst:174
msgid "Do not assume the code is self-evident/self-documenting."
msgstr ""

#: ../../contributing_to_qiskit.rst:172
msgid "What is self-evident to one person, might not be clear to another person. Always document what the original problem was and how it is being fixed, for any change except the most obvious typos, or whitespace-only commits."
msgstr ""

#: ../../contributing_to_qiskit.rst:180
msgid "Describe why a change is being made."
msgstr ""

#: ../../contributing_to_qiskit.rst:177
msgid "A common mistake is only to document how the code has been written, without describing *why* the developer chose to do it that way. Certainly, you should describe the overall code structure, particularly for large changes, but more importantly, be sure to describe the intent/motivation behind the changes."
msgstr ""

#: ../../contributing_to_qiskit.rst:185
msgid "Read the commit message to see if it hints at improved code structure."
msgstr ""

#: ../../contributing_to_qiskit.rst:183
msgid "Often when describing a large commit message, it becomes obvious that a commit should have been split into two or more parts. Don't be afraid to go back and rebase the change to split it up into separate pull requests."
msgstr ""

#: ../../contributing_to_qiskit.rst:192
msgid "Ensure sufficient information to decide whether to review."
msgstr ""

#: ../../contributing_to_qiskit.rst:188
msgid "When GitHub sends out email alerts for new pull request submissions, there is minimal information included - usually just the commit message and the list of files changes. Because of the high volume of patches, a commit message must contain sufficient information for potential reviewers to find the patch that they need to review."
msgstr ""

#: ../../contributing_to_qiskit.rst:203
msgid "The first commit line is the most important."
msgstr ""

#: ../../contributing_to_qiskit.rst:195
msgid "In Git commits, the first line of the commit message has special significance. It is used as the default pull request title, email notification subject line, git annotate messages, gitk viewer annotations, merge commit messages, and many more places where space is at a premium. As well as summarizing the change itself, it should take care to detail what part of the code is affected."
msgstr ""

#: ../../contributing_to_qiskit.rst:201
msgid "In addition, the first line of the commit message becomes an entry in the generated changelog if the PR is tagged as being included in the changelog. It is critically important that you write clear and succinct summary lines."
msgstr ""

#: ../../contributing_to_qiskit.rst:209
msgid "Describe any limitations of the current code."
msgstr ""

#: ../../contributing_to_qiskit.rst:206
msgid "If the code being changed still has future scope for improvements, or any known limitations, mention these in the commit message. This demonstrates to the reviewer that the broader picture has been considered, and what tradeoffs have been done in terms of short-term goals versus long-term wishes."
msgstr ""

#: ../../contributing_to_qiskit.rst:217
msgid "Include references to issues."
msgstr ""

#: ../../contributing_to_qiskit.rst:212
msgid "If the commit fixes are related to an issue, make sure you annotate that in the commit message. Use the syntax::"
msgstr ""

#: ../../contributing_to_qiskit.rst:217
msgid "if it fixes the issue (GitHub will close the issue when the PR merges)."
msgstr ""

#: ../../contributing_to_qiskit.rst:219
msgid "The main rule to follow is:"
msgstr ""

#: ../../contributing_to_qiskit.rst:221
msgid "The commit message must contain all the information required to fully understand and review the patch for correctness. Less is not more."
msgstr ""

#: ../../contributing_to_qiskit.rst:227
msgid "Documenting Your Code"
msgstr ""

#: ../../contributing_to_qiskit.rst:229
msgid "If you make a change to an element, make sure you update the associated *docstrings* and parts of the documentation under ``docs/apidocs`` in the corresponding repo. To locally build the element-specific documentation, run ``tox -edocs`` to compile and build the documentation locally and save the output to ``docs/_build/html``. Additionally, the Docs CI job on azure pipelines will run this and host a zip file of the output that you can download and view locally."
msgstr ""

#: ../../contributing_to_qiskit.rst:237
msgid "If you have an issue with the `combined documentation <https://qiskit.org/documentation/>`__ that is maintained in the `Qiskit/qiskit repo <https://github.com/Qiskit/qiskit>`__, you can open a `documentation issue <https://github.com/Qiskit/qiskit/issues/new/choose>`__ if you see doc bugs, have a new feature that needs to be documented, or think that material could be added to the existing docs."
msgstr ""

#: ../../contributing_to_qiskit.rst:246
msgid "Good First Contributions"
msgstr ""

#: ../../contributing_to_qiskit.rst:248
msgid "If you would like to contribute to Qiskit, but aren't sure where to get started, the ``good first issue`` label on issues for a project highlights items appropriate for people new to the project. These are all issues that have been reviewed and tagged by contributors as something a new contributor should be able to work on. In other words, intimate familiarity with Qiskit is not a requirement to develop a fix for the issue."
msgstr ""

#: ../../contributing_to_qiskit.rst:259
msgid "Deprecation Policy"
msgstr ""

#: ../../contributing_to_qiskit.rst:261
msgid "Qiskit users need to know if a feature or an API they rely upon will continue to be supported by the software tomorrow. Knowing under which conditions the project can remove (or change in a backwards-incompatible manner) a feature or API is important to the user. To manage expectations, the following policy is how API and feature deprecation/removal is handled by Qiskit:"
msgstr ""

#: ../../contributing_to_qiskit.rst:267
msgid "1. Features, APIs, or configuration options are marked deprecated in the code. Appropriate ``DeprecationWarning`` class warnings will be sent to the user. The deprecated code will be frozen and receive only minimal maintenance (just so that it continues to work as-is)."
msgstr ""

#: ../../contributing_to_qiskit.rst:272
msgid "2. A migration path will be documented for current users of the feature. This will be outlined in the both the release notes adding the deprecation, and the release notes removing the feature at the completion of the deprecation cycle. If feasible, the warning message will also include the migration path. A migration path might be \"stop using that feature\", but in such cases it is necessary to first judge how widely used and/or important the feature is to users, in order to determine a reasonable obsolescence date."
msgstr ""

#: ../../contributing_to_qiskit.rst:280
msgid "3. An obsolescence date for the feature will be set. The feature must remain intact and working (although with the proper warning being emitted) in all releases pushed until after that obsolescence date. At the very minimum, the feature (or API, or configuration option) should be marked as deprecated (and continue to be supported) for at least three months of linear time from the release date of the first release to include the deprecation warning. For example, if a feature were deprecated in the 0.9.0 release of Terra, which was released on August 22, 2019, then that feature should still appear in all releases until at least November 22, 2019. Since releases do not occur at fixed time intervals, a deprecation warning may only occur in one release prior to removal."
msgstr ""

#: ../../contributing_to_qiskit.rst:291
msgid "Note that this delay is a minimum. For significant features, it is recommended that the deprecated feature appears for at least double that time. Also, per the stable branch policy, deprecation removals can only occur during minor version releases; they are not appropriate for backporting."
msgstr ""

#: ../../contributing_to_qiskit.rst:299
msgid "Deprecation Warnings"
msgstr ""

#: ../../contributing_to_qiskit.rst:301
msgid "The proper way to raise a deprecation warning is to use the ``warn`` function from the `warnings module <https://docs.python.org/3/library/warnings.html>`__ in the Python standard library. The warning category class should be a ``DeprecationWarning``. An example would be::"
msgstr ""

#: ../../contributing_to_qiskit.rst:314
msgid "One thing to note here is the ``stack_level`` kwarg on the warn() call. This argument is used to specify which level in the call stack will be used as the line initiating the warning. Typically, ``stack_level`` should be set to 2, as this will show the line calling the context where the warning was raised. In the above example, it would be the caller of ``foo()``. If you did not set this, the warning would show that it was caused by the line in the foo() function, which is not helpful for users trying to determine the origin of a deprecated call. However, this value may be adjusted, depending on the call stack and where ``warn()`` gets called from. For example, if the warning is always raised by a private method that only has one caller, ``stack_level=3`` might be appropriate."
msgstr ""

#: ../../contributing_to_qiskit.rst:329
msgid "Stable Branch Policy"
msgstr ""

#: ../../contributing_to_qiskit.rst:331
msgid "The stable branch is intended to be a safe source of fixes for high-impact bugs and security issues that have been fixed on master since a release. When reviewing a stable branch PR, we must balance the risk of any given patch with the value that it will provide to users of the stable branch. Only a limited class of changes are appropriate for inclusion on the stable branch. A large, risky patch for a major issue might make sense, as might a trivial fix for a fairly obscure error-handling case. A number of factors must be weighed when considering a change:"
msgstr ""

#: ../../contributing_to_qiskit.rst:341
msgid "The risk of regression: even the tiniest changes carry some risk of breaking something, and we really want to avoid regressions on the stable branch."
msgstr ""

#: ../../contributing_to_qiskit.rst:344
msgid "The user visibility benefit: are we fixing something that users might actually notice, and if so, how important is it?"
msgstr ""

#: ../../contributing_to_qiskit.rst:346
msgid "How self-contained the fix is: if it fixes a significant issue but also refactors a lot of code, it's probably worth thinking about what a less risky fix might look like."
msgstr ""

#: ../../contributing_to_qiskit.rst:349
msgid "Whether the fix is already on master: a change must be a backport of a change already merged onto master, unless the change simply does not make sense on master."
msgstr ""

#: ../../contributing_to_qiskit.rst:356
msgid "Backporting procedure:"
msgstr ""

#: ../../contributing_to_qiskit.rst:358
msgid "When backporting a patch from master to stable, we want to keep a reference to the change on master. When you create the branch for the stable PR, use::"
msgstr ""

#: ../../contributing_to_qiskit.rst:364
msgid "However, this only works for small self-contained patches from master. If you need to backport a subset of a larger commit (from a squashed PR, for example) from master, do this manually. In these cases, add::"
msgstr ""

#: ../../contributing_to_qiskit.rst:370
msgid "so that we can track the source of the change subset, even if a strict cherry-pick doesn\\'t make sense."
msgstr ""

#: ../../contributing_to_qiskit.rst:373
msgid "If the patch you're proposing will not cherry-pick cleanly, you can help by resolving the conflicts yourself and proposing the resulting patch. Please keep Conflicts lines in the commit message to help review of the stable patch."
msgstr ""

#: ../../contributing_to_qiskit.rst:381
msgid "Backport labels"
msgstr ""

#: ../../contributing_to_qiskit.rst:383
msgid "Bugs or PRs tagged with ``stable backport potential`` are bugs that apply to the stable release too and may be suitable for backporting once a fix lands in master. Once the backport has been proposed, the tag should be removed."
msgstr ""

#: ../../contributing_to_qiskit.rst:388
msgid "Include ``[Stable]`` in the title of the PR against the stable branch, as a sign that setting the target branch as stable was not a mistake. Also, reference to the PR number in master that you are porting."
msgstr ""

#: ../../contributing_to_qiskit.rst:397
msgid "Contributing to Documentation"
msgstr ""

#: ../../contributing_to_qiskit.rst:399
msgid "Qiskit documentation is shaped by the `docs as code <https://www.writethedocs.org/guide/docs-as-code/>`__ philosophy, primarily drawn from Qiskit code comments in the `style of API documentation <https://alistapart.com/article/the-ten-essentials-for-good-api-documentation/>`__."
msgstr ""

#: ../../contributing_to_qiskit.rst:404
msgid "The documentation is built from the master branch of `Qiskit/qiskit/docs <https://github.com/Qiskit/qiskit/tree/master/docs>`__ using `Sphinx <http://www.sphinx-doc.org/en/master/>`__. The majority of documentation, under `API Reference <https://qiskit.org/documentation/apidoc/qiskit.html>`__, is drawn from code comments in the repositories listed in :ref:`where_things_are`."
msgstr ""

#: ../../contributing_to_qiskit.rst:413
msgid "Documentation Structure"
msgstr ""

#: ../../contributing_to_qiskit.rst:415
msgid "The way documentation is structured in Qiskit is to push as much of the actual documentation into the docstrings as possible. This makes it easier for additions and corrections to be made during development, because the majority of the documentation lives near the code being changed. There are three levels in the normal documentation structure in Terra:"
msgstr ""

#: ../../contributing_to_qiskit.rst:443
msgid "The ``.rst`` files in the ``docs/apidocs``"
msgstr ""

#: ../../contributing_to_qiskit.rst:422
msgid "These files are used to tell Sphinx which modules to include in the rendered documentation. This contains two pieces of information: an `internal reference <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`__ or `cross reference <https://www.sphinx-doc.org/en/latest/usage/restructuredtext/roles.html#ref-role>`__ to the module, which can be used for internal links inside the documentation, and an `automodule directive <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ used to parse the module docstrings from a specified import path. For example, the dagcircuit.rst file contains::"
msgstr ""

#: ../../contributing_to_qiskit.rst:440
msgid "The only ``.rst`` file outside of this is ``qiskit.rst``, which contains the table of contents. If you're adding a new ``.rst`` file for a new module's documentation, make sure to add it to the `toctree <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`__ in that file."
msgstr ""

#: ../../contributing_to_qiskit.rst:488
msgid "The module-level docstring"
msgstr ""

#: ../../contributing_to_qiskit.rst:446
msgid "This docstring is at the module level for the module specified in the ``automodule`` directive in the rst file. If the module specified is a directory/namespace, the docstring should be specified in the ``__init__.py`` file for that directory. This module-level docstring contains more details about the module being documented. The normal structure to this docstring is to outline all the classes and functions of the public API that are contained in that module. This is typically done using the `autosummary directive <https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html>`__ (or `autodoc directives <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`__ directly if the module is simple, such as in the case of ``qiskit.execute``). The autosummary directive is used to autodoc a list of different Python elements (classes, functions, etc.) directly without having to manually call out the autodoc directives for each one. The module-level docstring is where to provide a high-level overview of what functionality the module provides. This is normally done by grouping the different components of the public API together into multiple subsections."
msgstr ""

#: ../../contributing_to_qiskit.rst:463
msgid "For example, as in the previous dagcircuit module example, the contents of the module docstring for ``qiskit/dagcircuit/__init__.py`` would be::"
msgstr ""

#: ../../contributing_to_qiskit.rst:487
msgid "This is just an example and the actual module docstring for the dagcircuit module might diverge from this."
msgstr ""

#: ../../contributing_to_qiskit.rst:505
msgid "The actual docstring for the elements listed in the module docstring"
msgstr ""

#: ../../contributing_to_qiskit.rst:491
msgid "You should strive to document thoroughly all the public interfaces exposed using examples when necessary. For docstrings, `Google Python Style Docstrings <https://google.github.io/styleguide/pyguide.html?showone=Comments#38-comments-and-docstrings>`__ are used. This is parsed using the `napoleon sphinx extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`__. The `napoleon documentation <https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html>`__ contains a good example of how docstrings should be formatted."
msgstr ""

#: ../../contributing_to_qiskit.rst:500
msgid "You can use any Sphinx directive or rst formatting in a docstring as it makes sense. For example, one common extension used is the ``jupyter-execute`` directive, which is used to execute a code block in Jupyter and display both the code and output. This is particularly useful for visualizations."
msgstr ""

#: ../../contributing_to_qiskit.rst:508
msgid "Documentation Integration"
msgstr ""

#: ../../contributing_to_qiskit.rst:510
msgid "The hosted documentation at https://qiskit.org/documentation/ covers the entire Qiskit project; Terra is just one component of that. As such, the documentation builds for the hosted version are built by the Qiskit meta-package repository https://github.com/Qiskit/qiskit. When commits are merged to that repo, the output of Sphinx builds are uploaded to the qiskit.org website. Those Sphinx builds are configured to pull in the documentation from the version of the Qiskit elements installed by the meta-package at that point. For example, if the meta-package version is currently 0.13.0, then that will copy the documentation from Terra's 0.10.0 release. When the meta-package's requirements are bumped, then it will start pulling documentation from the new version. This means that fixes for incorrect API documentation will need to be included in a new release. Documentation fixes are valid backports for a stable patch release per the stable branch policy (see that section below)."
msgstr ""

#: ../../contributing_to_qiskit.rst:524
msgid "During the build process, the contents of each element's ``docs/apidocs/`` are recursively copied into a shared copy of ``doc/apidocs/`` in the meta-package repository along with all the other elements. This means that what is in the root of docs/apidocs on each element at a release will end up on the root of https://qiskit.org/documentation/apidoc/."
msgstr ""

#: ../../contributing_to_qiskit.rst:533
msgid "Translating Documentation"
msgstr ""

#: ../../contributing_to_qiskit.rst:535
msgid "Qiskit documentation is translated (localized) using Crowdin, a software and web localization platform that allows organizations to coordinate translation projects and collaborate with communities to translate materials. Crowdin allows our community of translators to amplify their impact by automatically reusing the work invested translating one sentence to translate other, similar sentences. Crowdin also makes translations resilient to many types of changes to the original material, such as moving sentences around, even across files."
msgstr ""

#: ../../contributing_to_qiskit.rst:543
msgid "Qiskit localization requests are handled in `Qiskit Translations <https://github.com/Qiskit/qiskit-translations>`__ repository. To contribute to Qiskit localization, please follow these steps:"
msgstr ""

#: ../../contributing_to_qiskit.rst:546
msgid "Add your name (or ID) to the `LOCALIZATION_CONTRIBUTORS <https://github.com/Qiskit/qiskit-translations/blob/master/LOCALIZATION_CONTRIBUTORS>`__ file."
msgstr ""

#: ../../contributing_to_qiskit.rst:549
msgid "Create a pull request (PR) to merge your change. Make sure to follow the template to open a Pull Request."
msgstr ""

#: ../../contributing_to_qiskit.rst:554
msgid "Each contributor has to create their own PR and sign the CLA."
msgstr ""

#: ../../contributing_to_qiskit.rst:555
msgid "Please mention the language that you'd like to contribute to in the PR summary."
msgstr ""

#: ../../contributing_to_qiskit.rst:557
msgid "If you have an open issue for a language request, **add the issue link to the PR**."
msgstr ""

#: ../../contributing_to_qiskit.rst:559
msgid "You will be asked to sign the Qiskit Contributors License Agreement (CLA); please do so."
msgstr ""

#: ../../contributing_to_qiskit.rst:561
msgid "In the `Qiskit-Docs <https://crowdin.com/project/qiskit-docs>`__ Crowdin project, choose the language that you want to contribute to."
msgstr ""

#: ../../contributing_to_qiskit.rst:566
msgid "As mentioned in the blog post, `Qiskit in my language is Qiskit <https://medium.com/qiskit/qiskit-in-my-language-is-qiskit-73d4626a99d3>`__, we want to make sure that translated languages have enough community support to build a translation team with translators, proofreaders, and translation leads. If you want to be a translation lead or would be willing to join a new translation project team, you can open a `GitHub issue <https://github.com/Qiskit/qiskit-translations/issues/new/choose>`__ to start a discussion with the Qiskit team and recruit translation project members."
msgstr ""

#: ../../contributing_to_qiskit.rst:572
msgid "Click the **Join** button and **paste the URL of your PR** in the dialog box where you are asked why you want to join the Crowdin project."
msgstr ""

#: ../../contributing_to_qiskit.rst:575
msgid "The administrators of the Crowdin project will review your request and give you access as quickly as they can."
msgstr ""

#: ../../contributing_to_qiskit.rst:579
msgid "Building from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:581
msgid "You can build a local copy of the documentation from your local clone of the `Qiskit/qiskit` repository as follows:"
msgstr ""

#: ../../contributing_to_qiskit.rst:584
msgid "Clone the Qiskit repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:590
msgid "Cloning the repository creates a local folder called ``qiskit``."
msgstr ""

#: ../../contributing_to_qiskit.rst:596
msgid "Build the documentation by navigating to your local clone of `Qiskit/qiskit` and running the following command in a terminal window."
msgstr ""

#: ../../contributing_to_qiskit.rst:603
msgid "If you do not already have the `tox <https://tox.readthedocs.io/en/latest/>`_ command installed, install it by running:"
msgstr ""

#: ../../contributing_to_qiskit.rst:610
msgid "As you make changes to your local RST files, you can update your HTML files by navigating to `/doc/` and running the following in a terminal window:"
msgstr ""

#: ../../contributing_to_qiskit.rst:618
msgid "This will build a styled, HTML version of your local documentation repository in the subdirectory `/docs/_build/html/`."
msgstr ""

#: ../../contributing_to_qiskit.rst:625
msgid "Installing from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:627
msgid "Installing the elements from source allows you to access the most recently updated version of Qiskit instead of using the version in the Python Package Index (PyPI) repository. This will give you the ability to inspect and extend the latest version of the Qiskit code more efficiently."
msgstr ""

#: ../../contributing_to_qiskit.rst:632
msgid "When installing the elements and components from source, by default their ``development`` version (which corresponds to the ``master`` git branch) will be used, as opposed to the ``stable`` version (which contains the same codebase as the published ``pip`` packages). Since the ``development`` versions of an element or component usually include new features and changes, they generally require using the ``development`` version of the rest of the items as well."
msgstr ""

#: ../../contributing_to_qiskit.rst:641
msgid "The Terra and Aer packages both require a compiler to build from source before you can install. Ignis, Aqua, and the IBM Quantum Provider backend do not require a compiler."
msgstr ""

#: ../../contributing_to_qiskit.rst:645
msgid "Installing elements from source requires the following order of installation to prevent installing versions of elements that may be lower than those desired if the ``pip`` version is behind the source versions:"
msgstr ""

#: ../../contributing_to_qiskit.rst:649
msgid ":ref:`qiskit-terra <install-qiskit-terra>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:650
msgid ":ref:`qiskit-aer <install-qiskit-aer>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:651
msgid ":ref:`qiskit-ignis <install-qiskit-ignis>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:652
msgid ":ref:`qiskit-aqua <install-qiskit-aqua>`"
msgstr ""

#: ../../contributing_to_qiskit.rst:653
msgid ":ref:`qiskit-ibmq-provider <install-qiskit-ibmq-provider>` (if you want to connect to the IBM Quantum devices or online simulator)"
msgstr ""

#: ../../contributing_to_qiskit.rst:657
msgid "To work with several components and elements simultaneously, use the following steps for each element."
msgstr ""

#: ../../contributing_to_qiskit.rst:662
msgid "Due to the use of namespace packaging in Python, care must be taken in how you install packages. If you're planning to install any element from source, do not use the ``qiskit`` meta-package. Also, follow this guide and use a separate virtual environment for development. If you do choose to mix an existing installation with your development, refer to https://github.com/pypa/sample-namespace-packages/blob/master/table.md for the set of combinations of installation methods that work together."
msgstr ""

#: ../../contributing_to_qiskit.rst:671
msgid "Set up the Virtual Development Environment"
msgstr ""

#: ../../contributing_to_qiskit.rst:681
msgid "Installing Terra from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:683
msgid "Installing from source requires that you have a C++ compiler on your system that supports C++11."
msgstr ""

#: ../../contributing_to_qiskit.rst:688
msgid "Compiler for Linux"
msgstr ""

#: ../../contributing_to_qiskit.rst:690
msgid "On most Linux platforms, the necessary GCC compiler is already installed."
msgstr ""

#: ../../contributing_to_qiskit.rst:692
msgid "Compiler for macOS"
msgstr ""

#: ../../contributing_to_qiskit.rst:694
msgid "If you use macOS, you can install the Clang compiler by installing XCode. Check if you have XCode and Clang installed by opening a terminal window and entering the following."
msgstr ""

#: ../../contributing_to_qiskit.rst:702
msgid "Install XCode and Clang by using the following command."
msgstr ""

#: ../../contributing_to_qiskit.rst:708
msgid "Compiler for Windows"
msgstr ""

#: ../../contributing_to_qiskit.rst:710
msgid "On Windows, it is easiest to install the Visual C++ compiler from the `Build Tools for Visual Studio 2017 <https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017>`__. You can instead install Visual Studio version 2015 or 2017, making sure to select the options for installing the C++ compiler."
msgstr ""

#: ../../contributing_to_qiskit.rst:715
msgid "Once the compilers are installed, you are ready to install Qiskit Terra."
msgstr ""

#: ../../contributing_to_qiskit.rst:717
msgid "Clone the Terra repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:723
msgid "Cloning the repository creates a local folder called ``qiskit-terra``."
msgstr ""

#: ../../contributing_to_qiskit.rst:729
msgid "Install the Python requirements libraries from your ``qiskit-terra`` directory."
msgstr ""

#: ../../contributing_to_qiskit.rst:735
msgid "If you want to run tests or linting checks, install the developer requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:741
msgid "Install ``qiskit-terra``."
msgstr ""

#: ../../contributing_to_qiskit.rst:747
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied, you can do this with:"
msgstr ""

#: ../../contributing_to_qiskit.rst:754
msgid "You can then run the code examples after installing Terra. You can run the example with the following command."
msgstr ""

#: ../../contributing_to_qiskit.rst:764
msgid "If you do not intend to install any other components, qiskit-terra will emit a ``RuntimeWarning`` warning that both qiskit-aer and qiskit-ibmq-provider are not installed. This is done because users commonly intend to use the additional elements, but do not realize they are not installed, or that the installation of either Aer or the IBM Quantum Provider failed for some reason. If you wish to suppress these warnings, add::"
msgstr ""

#: ../../contributing_to_qiskit.rst:776
msgid "before any ``qiskit`` imports in your code. This will suppress the warning about the missing qiskit-aer and qiskit-ibmq-provider, but will continue to display any other warnings from qiskit or other packages."
msgstr ""

#: ../../contributing_to_qiskit.rst:783
msgid "Installing Aer from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:785
msgid "Clone the Aer repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:791
msgid "Install build requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:797
msgid "After this, the steps to install Aer depend on which operating system you are using. Since Aer is a compiled C++ program with a Python interface, there are non-Python dependencies for building the Aer binary which can't be installed universally depending on operating system."
msgstr ""

#: ../../contributing_to_qiskit.rst:804 ../../contributing_to_qiskit.rst:980
msgid "Linux"
msgstr ""

#: ../../contributing_to_qiskit.rst:806 ../../contributing_to_qiskit.rst:870
msgid "Install compiler requirements."
msgstr ""

#: ../../contributing_to_qiskit.rst:808
msgid "Building Aer requires a C++ compiler and development headers."
msgstr ""

#: ../../contributing_to_qiskit.rst:810 ../../contributing_to_qiskit.rst:825
msgid "If you're using Fedora or an equivalent Linux distribution, install using:"
msgstr ""

#: ../../contributing_to_qiskit.rst:817 ../../contributing_to_qiskit.rst:832
msgid "For Ubuntu/Debian install it using:"
msgstr ""

#: ../../contributing_to_qiskit.rst:823
msgid "Install OpenBLAS development headers."
msgstr ""

#: ../../contributing_to_qiskit.rst:839
msgid "macOS"
msgstr ""

#: ../../contributing_to_qiskit.rst:841
msgid "Install dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:843
msgid "To use the `Clang <https://clang.llvm.org/>`__ compiler on macOS, you need to install an extra library for supporting `OpenMP <https://www.openmp.org/>`__.  You can use `brew <https://brew.sh/>`__ to install this and other dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:851
msgid "Then install a BLAS implementation; `OpenBLAS <https://www.openblas.net/>`__ is the default choice."
msgstr ""

#: ../../contributing_to_qiskit.rst:858
msgid "Next, install ``Xcode Command Line Tools``."
msgstr ""

#: ../../contributing_to_qiskit.rst:864
msgid "Windows"
msgstr ""

#: ../../contributing_to_qiskit.rst:866
msgid "On Windows you need to use `Anaconda3 <https://www.anaconda.com/distribution/#windows>`__ or `Miniconda3 <https://docs.conda.io/en/latest/miniconda.html>`__ to install all the dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:876
msgid "Install binary and build dependencies."
msgstr ""

#: ../../contributing_to_qiskit.rst:883
msgid "Build and install qiskit-aer directly"
msgstr ""

#: ../../contributing_to_qiskit.rst:885
msgid "If you have pip <19.0.0 installed and your environment doesn't require a custom build, run:"
msgstr ""

#: ../../contributing_to_qiskit.rst:893
msgid "This will both build the binaries and install Aer."
msgstr ""

#: ../../contributing_to_qiskit.rst:895
msgid "Alternatively, if you have a newer pip installed, or have some custom requirement, you can build a Python wheel manually."
msgstr ""

#: ../../contributing_to_qiskit.rst:903
msgid "If you need to set a custom option during the wheel build, refer to :ref:`aer_wheel_build_options`."
msgstr ""

#: ../../contributing_to_qiskit.rst:906
msgid "After you build the Python wheel, it will be stored in the ``dist/`` dir in the Aer repository. The exact version will depend"
msgstr ""

#: ../../contributing_to_qiskit.rst:914
msgid "The exact filename of the output wheel file depends on the current version of Aer under development."
msgstr ""

#: ../../contributing_to_qiskit.rst:920
msgid "Custom options during wheel builds"
msgstr ""

#: ../../contributing_to_qiskit.rst:922
msgid "The Aer build system uses `scikit-build <https://scikit-build.readthedocs.io/en/latest/index.html>`__ to run the compilation when building it with the Python interface. It acts as an interface for `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ to call `CMake <https://cmake.org/>`__ and compile the binaries for your local system."
msgstr ""

#: ../../contributing_to_qiskit.rst:927
msgid "Due to the complexity of compiling the binaries, you may need to pass options to a certain part of the build process. The way to pass variables is:"
msgstr ""

#: ../../contributing_to_qiskit.rst:934
msgid "where the elements within square brackets `[]` are optional, and ``skbuild_opts``, ``cmake_opts``, ``build_tool_opts`` are to be replaced by flags of your choice. A list of *CMake* options is available here: https://cmake.org/cmake/help/v3.6/manual/cmake.1.html#options. For example, you could run something like:"
msgstr ""

#: ../../contributing_to_qiskit.rst:944
msgid "This is passing the flag `-j8` to the underlying build system (which in this case is `Automake <https://www.gnu.org/software/automake/>`__), telling it that you want to build in parallel using 8 processes."
msgstr ""

#: ../../contributing_to_qiskit.rst:948
msgid "For example, a common use case for these flags on linux is to specify a specific version of the C++ compiler to use (normally if the default is too old):"
msgstr ""

#: ../../contributing_to_qiskit.rst:956
msgid "which will tell CMake to use the g++-7 command instead of the default g++ when compiling Aer."
msgstr ""

#: ../../contributing_to_qiskit.rst:959
msgid "Another common use case for this, depending on your environment, is that you may need to specify your platform name and turn off static linking."
msgstr ""

#: ../../contributing_to_qiskit.rst:967
msgid "Here ``--plat-name`` is a flag to setuptools, to specify the platform name to use in the package metadata, ``-DSTATIC_LINKING`` is a flag for using CMake to disable static linking, and ``-j8`` is a flag for using Automake to use 8 processes for compilation."
msgstr ""

#: ../../contributing_to_qiskit.rst:972
msgid "A list of common options depending on platform are:"
msgstr ""

#: ../../contributing_to_qiskit.rst:975
msgid "Platform"
msgstr ""

#: ../../contributing_to_qiskit.rst:975
msgid "Tool"
msgstr ""

#: ../../contributing_to_qiskit.rst:975
msgid "Option"
msgstr ""

#: ../../contributing_to_qiskit.rst:975
msgid "Use Case"
msgstr ""

#: ../../contributing_to_qiskit.rst:977
msgid "All"
msgstr ""

#: ../../contributing_to_qiskit.rst:977
msgid "Automake"
msgstr ""

#: ../../contributing_to_qiskit.rst:977
msgid "-j"
msgstr ""

#: ../../contributing_to_qiskit.rst:977
msgid "Followed by a number, sets the number of processes to use for compilation."
msgstr ""

#: ../../contributing_to_qiskit.rst:980 ../../contributing_to_qiskit.rst:987
msgid "CMake"
msgstr ""

#: ../../contributing_to_qiskit.rst:980
msgid "-DCMAKE_CXX_COMPILER"
msgstr ""

#: ../../contributing_to_qiskit.rst:980
msgid "Used to specify a specific C++ compiler; this is often needed if your default g++ is too."
msgstr ""

#: ../../contributing_to_qiskit.rst:984 ../../contributing_to_qiskit.rst:987
msgid "OSX"
msgstr ""

#: ../../contributing_to_qiskit.rst:984
msgid "setuptools"
msgstr ""

#: ../../contributing_to_qiskit.rst:984
msgid "--plat-name"
msgstr ""

#: ../../contributing_to_qiskit.rst:984
msgid "Used to specify the platform name in the output Python package."
msgstr ""

#: ../../contributing_to_qiskit.rst:987
msgid "-DSTATIC_LINKING"
msgstr ""

#: ../../contributing_to_qiskit.rst:987
msgid "Used to specify whether or not static linking should be used."
msgstr ""

#: ../../contributing_to_qiskit.rst:992
msgid "Some of these options are not platform-specific. These particular platforms are listed because they are commonly used in the environment. Refer to the tool documentation for more information."
msgstr ""

#: ../../contributing_to_qiskit.rst:999
msgid "Installing Ignis from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:1001
msgid "Clone the Ignis repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:1007
msgid "Cloning the repository creates a local directory called ``qiskit-ignis``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1013
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ignis package when installing from source."
msgstr ""

#: ../../contributing_to_qiskit.rst:1021
msgid "Install Ignis."
msgstr ""

#: ../../contributing_to_qiskit.rst:1027 ../../contributing_to_qiskit.rst:1065
#: ../../contributing_to_qiskit.rst:1103
msgid "If you want to install it in editable mode, meaning that code changes to the project don't require a reinstall to be applied:"
msgstr ""

#: ../../contributing_to_qiskit.rst:1037
msgid "Installing Aqua from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:1039
msgid "Clone the Aqua repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:1045
msgid "Cloning the repository creates a local directory called ``qiskit-aqua``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1051
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-aqua package when installing from source."
msgstr ""

#: ../../contributing_to_qiskit.rst:1059
msgid "Install Aqua."
msgstr ""

#: ../../contributing_to_qiskit.rst:1075
msgid "Installing IBM Quantum Provider from Source"
msgstr ""

#: ../../contributing_to_qiskit.rst:1077
msgid "Clone the qiskit-ibmq-provider repository."
msgstr ""

#: ../../contributing_to_qiskit.rst:1083
msgid "Cloning the repository creates a local directory called ``qiskit-ibmq-provider``."
msgstr ""

#: ../../contributing_to_qiskit.rst:1089
msgid "If you want to run tests or linting checks, install the developer requirements. This is not required to install or use the qiskit-ibmq-provider package when installing from source."
msgstr ""

#: ../../contributing_to_qiskit.rst:1097
msgid "Install qiskit-ibmq-provider."
msgstr ""

