msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-12 12:01+0000\n"
"PO-Revision-Date: 2020-03-12 12:58\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/advanced/terra/2_operators_overview.po\n"
"Language: pt_BR\n"

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:9
msgid "Operator Overview"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:11
msgid "This notebook shows how to use the ``Operator`` class from the *Quantum Information* module of Qiskit to create custom matrix operators and custom unitary gates, and to evaluate the unitary matrix for a quantum circuit."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:35
msgid "Operator Class"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:37
msgid "The ``Operator`` class is used in Qiskit to represent matrix operators acting on a quantum system. It has several methods to build composite operators using tensor products of smaller operators, and to compose operators."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:40
msgid "Creating Operators"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:42
msgid "The easiest way to create an operator object is to initialize it with a matrix given as a list or a Numpy array. For example, to create a two-qubit Pauli-XX operator:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:84
msgid "Operator Properties"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:86
msgid "The operator object stores the underlying matrix, and the input and output dimension of subsystems."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:88
msgid "``data``: To access the underly Numpy array, we may use the ``Operator.data`` property."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:89
msgid "``dims``: To return the total input and output dimension of the operator, we may use the ``Operator.dim`` property. *Note: the output is returned as a tuple ``(input_dim, output_dim)``, which is the reverse of the shape of the underlying matrix.*"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:158
msgid "Input and Output Dimensions"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:160
msgid "The operator class also keeps track of subsystem dimensions, which can be used for composing operators together. These can be accessed using the ``input_dims`` and ``output_dims`` functions."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:162
msgid "For :math:`2^N` by :math:`2^M` operators, the input and output dimension will be automatically assumed to be M-qubit and N-qubit:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:199
msgid "If the input matrix is not divisible into qubit subsystems, then it will be stored as a single-qubit operator. For example, if we have a :math:`6\\times6` matrix:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:236
msgid "The input and output dimension can also be manually specified when initializing a new operator:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:306
msgid "We can also extract just the input or output dimensions of a subset of subsystems using the ``input_dims`` and ``output_dims`` functions:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:343
msgid "Converting classes to Operators"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:345
msgid "Several other classes in Qiskit can be directly converted to an ``Operator`` object using the operator initialization method. For example:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:347
msgid "``Pauli`` objects"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:348
msgid "``Gate`` and ``Instruction`` objects"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:349
msgid "``QuantumCircuits`` objects"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:351
msgid "Note that the last point means we can use the ``Operator`` class as a unitary simulator to compute the final unitary matrix for a quantum circuit, without having to call a simulator backend. If the circuit contains any unsupported operations, an exception will be raised. Unsupported operations are: measure, reset, conditional operations, or a gate that does not have a matrix definition or decomposition in terms of gate with matrix definitions."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:517
msgid "Using Operators in circuits"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:519
msgid "Unitary ``Operators`` can be directly inserted into a ``QuantumCircuit`` using the ``QuantumCircuit.append`` method. This converts the ``Operator`` into a ``UnitaryGate`` object, which is added to the circuit."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:521
msgid "If the operator is not unitary, an exception will be raised. This can be checked using the ``Operator.is_unitary()`` function, which will return ``True`` if the operator is unitary and ``False`` otherwise."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:606
msgid "Note that in the above example we initialize the operator from a ``Pauli`` object. However, the ``Pauli`` object may also be directly inserted into the circuit itself and will be converted into a sequence of single-qubit Pauli gates:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:684
msgid "Combining Operators"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:686
msgid "Operators my be combined using several methods."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:689
msgid "Tensor Product"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:691
msgid "Two operators :math:`A` and :math:`B` may be combined into a tensor product operator :math:`A\\otimes B` using the ``Operator.tensor`` function. Note that if both A and B are single-qubit operators, then ``A.tensor(B)`` = :math:`A\\otimes B` will have the subsystems indexed as matrix B on subsystem 0, and matrix :math:`A` on subsystem 1."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:734
msgid "Tensor Expansion"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:736
msgid "A closely related operation is ``Operator.expand``, which acts like a tensor product but in the reverse order. Hence, for two operators :math:`A` and :math:`B` we have ``A.expand(B)`` = :math:`B\\otimes A` where the subsystems indexed as matrix A on subsystem 0, and matrix :math:`B` on subsystem 1."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:779
msgid "Composition"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:781
msgid "We can also compose two operators :math:`A` and :math:`B` to implement matrix multiplication using the ``Operator.compose`` method. We have that ``A.compose(B)`` returns the operator with matrix :math:`B.A`:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:819
msgid "We can also compose in the reverse order by applying :math:`B` in front of :math:`A` using the ``front`` kwarg of ``compose``: ``A.compose(B, front=True)`` = :math:`A.B`:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:858
msgid "Subsystem Composition"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:860
msgid "Note that the previous compose requires that the total output dimension of the first operator :math:`A` is equal to total input dimension of the composed operator :math:`B` (and similarly, the output dimension of :math:`B` must be equal to the input dimension of :math:`A` when composing with ``front=True``)."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:862
msgid "We can also compose a smaller operator with a selection of subsystems on a larger operator using the ``qargs`` kwarg of ``compose``, either with or without ``front=True``. In this case, the relevant input and output dimensions of the subsystems being composed must match. *Note that the smaller operator must always be the argument of ``compose`` method.*"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:864
msgid "For example, to compose a two-qubit gate with a three-qubit Operator:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:960
msgid "Linear combinations"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:962
msgid "Operators may also be combined using standard linear operators for addition, subtraction and scalar multiplication by complex numbers."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1007
msgid "An important point is that while ``tensor``, ``expand`` and ``compose`` will preserve the unitarity of unitary operators, linear combinations will not; hence, adding two unitary operators will, in general, result in a non-unitary operator:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1042
msgid "Implicit Conversion to Operators"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1044
msgid "Note that for all the following methods, if the second object is not already an ``Operator`` object, it will be implicitly converted into one by the method. This means that matrices can be passed in directly without being explicitly converted to an ``Operator`` first. If the conversion is not possible, an exception will be raised."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1082
msgid "Comparison of Operators"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1084
msgid "Operators implement an equality method that can be used to check if two operators are approximately equal."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1118
msgid "Note that this checks that each matrix element of the operators is approximately equal; two unitaries that differ by a global phase will not be considered equal:"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1153
msgid "Process Fidelity"
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1155
msgid "We may also compare operators using the ``process_fidelity`` function from the *Quantum Information* module. This is an information theoretic quantity for how close two quantum channels are to each other, and in the case of unitary operators it does not depend on global phase."
msgstr ""

#: ../../tutorials/advanced/terra/2_operators_overview.ipynb:1194
msgid "Note that process fidelity is generally only a valid measure of closeness if the input operators are unitary (or CP in the case of quantum channels), and an exception will be raised if the inputs are not CP."
msgstr ""

