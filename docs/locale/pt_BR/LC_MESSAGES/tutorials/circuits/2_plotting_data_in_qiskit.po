msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-11 18:45+0000\n"
"PO-Revision-Date: 2020-05-11 19:17\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/circuits/2_plotting_data_in_qiskit.po\n"
"Language: pt_BR\n"

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:9
msgid "Qiskit Visualizations"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:33
msgid "Plot histogram"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:35
msgid "To visualize the data from a quantum circuit run on a real device or ``qasm_simulator`` we have made a simple function"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:37
msgid "``plot_histogram(data)``"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:39
msgid "As an example we make a 2-qubit Bell state"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:112
msgid "Options when plotting a histogram"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:114
msgid "The ``plot_histogram()`` has a few options to adjust the output graph. The first option is the ``legend`` kwarg. This is used to provide a label for the executions. It takes a list of strings use to label each execution's results. This is mostly useful when plotting multiple execution results in the same histogram. The ``sort`` kwarg is used to adjust the order the bars in the histogram are rendered. It can be set to either ascending order with ``asc`` or descending order with ``dsc``. The ``number_to_keep`` kwarg takes an integer for the number of terms to show, the rest are grouped together in a single bar called rest. You can adjust the color of the bars with the ``color`` kwarg which either takes a string or a list of strings for the colors to use for the bars for each execution. You can adjust whether labels are printed above the bars or not with the ``bar_labels`` kwarg. The last option available is the ``figsize`` kwarg which takes a tuple of the size in inches to make the output figure."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:172
msgid "Using the output from plot\\_histogram()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:174
msgid "When using the plot\\_histogram() function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object from ``plot_histogram()`` to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png``. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:187
msgid "Plot State"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:198
msgid "In many situations you want to see the state of a quantum computer. This could be for debugging. Here we assume you have this state (either from simulation or state tomography) and the goal is to visualize the quantum state. This requires exponential resources, so we advise to only view the state of small quantum systems. There are several functions for generating different types of visualization of a quantum state"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:208
msgid "A quantum state is either a state matrix :math:`\\rho` (Hermitian matrix) or statevector :math:`|\\psi\\rangle` (complex vector). The state matrix is related to the statevector by"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:210
msgid "\\rho = |\\psi\\rangle\\langle \\psi|,"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:212
msgid "and is more general as it can represent mixed states (positive sum of statevectors)"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:214
msgid "\\rho = \\sum_k p_k |\\psi_k\\rangle\\langle \\psi_k |."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:216
msgid "The visualizations generated by the functions are: - ``'plot_state_city'``: The standard view for quantum states where the real and imaginary (imag) parts of the state matrix are plotted like a city."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:218
msgid "``'plot_state_qsphere'``: The Qiskit unique view of a quantum state where the amplitude and phase of the state vector are plotted in a spherical ball. The amplitude is the thickness of the arrow and the phase is the color. For mixed states it will show different ``'qsphere'`` for each component."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:220
msgid "``'plot_state_paulivec'``: The representation of the state matrix using Pauli operators as the basis :math:`\\rho=\\sum_{q=0}^{d^2-1}p_jP_j/d`."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:222
msgid "``'plot_state_hinton'``: Same as ``'city'`` but where the size of the element represents the value of the matrix element."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:224
msgid "``'plot_bloch_multivector'``: The projection of the quantum state onto the single qubit space and plotting on a bloch sphere."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:355
msgid "Here we see that there is no information about the quantum state in the single qubit space as all vectors are zero."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:367
msgid "Options when using state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:369
msgid "The various functions for plotting quantum states provide a number of options to adjust how the plots are rendered. Which options are available depends on the function being used."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:380
msgid "**plot\\_state\\_city()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:382
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:416
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:449
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:496
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:685
msgid "**title** (str): a string that represents the plot title"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:383
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:417
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:450
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:483
#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:497
msgid "**figsize** (tuple): figure size in inches (width, height)."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:384
msgid "**color** (list): a list of len=2 giving colors for real and imaginary components of matrix elements."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:414
msgid "**plot\\_state\\_hinton()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:447
msgid "**plot\\_state\\_paulivec()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:451
msgid "**color** (list or str): color of the expectation value bars."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:481
msgid "**plot\\_state\\_qsphere()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:494
msgid "**plot\\_bloch\\_multivector()** options"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:528
msgid "Using the output from state plotting functions"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:530
msgid "When using any of the state plotting functions it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:543
msgid "Interactive State Plots for Jupyter Notebooks"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:545
msgid "Just like with ``plot_histogram()`` there is a second set of functions for each of the functions to plot the quantum state. These functions have the same name but with a prepended ``i``:"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:555
msgid "These functions are made using an externally hosted JS library for use in Jupyter notebooks. The interactive plot can only be used if you're running inside a Jupyter notebook and only if you have external connectivity to the host with the JS library. If you use these functions outside of a Jupyter notebook it will fail."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:638
msgid "Plot Bloch Vector"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:640
msgid "A standard way of plotting a quantum system is using the Bloch vector. This only works for a single qubit and takes as input the Bloch vector."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:642
msgid "The Bloch vector is defined as :math:`[x = \\mathrm{Tr}[X \\rho], y = \\mathrm{Tr}[Y \\rho], z = \\mathrm{Tr}[Z \\rho]]`, where :math:`X`, :math:`Y`, and :math:`Z` are the Pauli operators for a single qubit and :math:`\\rho` is the state matrix."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:683
msgid "Options for plot\\_bloch\\_vector()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:686
msgid "**figsize** (tuple): Figure size in inches (width, height)."
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:717
msgid "Adjusting the output from plot\\_bloch\\_vector()"
msgstr ""

#: ../../tutorials/circuits/2_plotting_data_in_qiskit.ipynb:719
msgid "When using the ``plot_bloch_vector`` function it returns a ``matplotlib.Figure`` for the rendered visualization. Jupyter notebooks understand this return type and render it for us in this tutorial, but when running outside of Jupyter you do not have this feature automatically. However, the ``matplotlib.Figure`` class natively has methods to both display and save the visualization. You can call ``.show()`` on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive). Or alternatively you can call ``.savefig('out.png')`` to save the figure to ``out.png`` in the current working directory. The ``savefig()`` method takes a path so you can adjust the location and filename where you're saving the output."
msgstr ""

