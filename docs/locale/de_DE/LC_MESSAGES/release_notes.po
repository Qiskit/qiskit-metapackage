msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-10 00:37+0000\n"
"PO-Revision-Date: 2020-04-10 00:52\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: German\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: de\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/release_notes.po\n"
"Language: de_DE\n"

#: ../../release_notes.rst:3
msgid "Release Notes"
msgstr ""

#: ../../release_notes.rst:8
msgid "Version History"
msgstr ""

#: ../../release_notes.rst:10
msgid "This table tracks the meta-package versions and the version of each Qiskit element installed:"
msgstr ""

#: ../../release_notes.rst:12
msgid "**Version History**"
msgstr ""

#: ../../release_notes.rst:16
msgid "For the ``0.7.0``, ``0.7.1``, and ``0.7.2`` meta-package releases the :ref:`versioning_strategy` policy was not formalized yet."
msgstr ""

#: ../../release_notes.rst:22
msgid "Notable Changes"
msgstr ""

#: ../../release_notes.rst:26
msgid "Qiskit 0.18.0"
msgstr ""

#: ../../release_notes.rst:31
msgid "Terra 0.13.0"
msgstr ""

#: ../../release_notes.rst:36 ../../release_notes.rst:1689
#: ../../release_notes.rst:2455 ../../release_notes.rst:3001
#: ../../release_notes.rst:3125 ../../release_notes.rst:3537
msgid "Prelude"
msgstr ""

#: ../../release_notes.rst:38
msgid "The 0.13.0 release includes many big changes. Some highlights for this release are:"
msgstr ""

#: ../../release_notes.rst:41
msgid "For the transpiler we have switched the graph library used to build the :class:`qiskit.dagcircuit.DAGCircuit` class which is the underlying data structure behind all operations to be based on `retworkx <https://pypi.org/project/retworkx/>`_ for greatly improved performance. Circuit transpilation speed in the 0.13.0 release should be significanlty faster than in previous releases."
msgstr ""

#: ../../release_notes.rst:48
msgid "There has been a significant simplification to the style in which Pulse instructions are built. Now, ``Command`` s are deprecated and a unified set of :class:`~qiskit.pulse.instructions.Instruction` s are supported."
msgstr ""

#: ../../release_notes.rst:52
msgid "The :mod:`qiskit.quantum_info` module includes several new functions for generating random operators (such as Cliffords and quantum channels) and for computing the diamond norm of quantum channels; upgrades to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes to support computing measurement probabilities and sampling measurements; and several new classes are based on the symplectic representation of Pauli matrices. These new classes include Clifford operators (:class:`~qiskit.quantum_info.Clifford`), N-qubit matrices that are sparse in the Pauli basis (:class:`~qiskit.quantum_info.SparsePauliOp`), lists of Pauli's (:class:`~qiskit.quantum_info.PauliTable`), and lists of stabilizers (:class:`~qiskit.quantum_info.StabilizerTable`)."
msgstr ""

#: ../../release_notes.rst:65
msgid "This release also has vastly improved documentation across Qiskit, including improved documentation for the :mod:`qiskit.circuit`, :mod:`qiskit.pulse` and :mod:`qiskit.quantum_info` modules."
msgstr ""

#: ../../release_notes.rst:69
msgid "Additionally, the naming of gate objects and :class:`~qiskit.circuit.QuantumCircuit` methods have been updated to be more consistent. This has resulted in several classes and methods being deprecated as things move to a more consistent naming scheme."
msgstr ""

#: ../../release_notes.rst:74
msgid "For full details on all the changes made in this release see the detailed release notes below."
msgstr ""

#: ../../release_notes.rst:81 ../../release_notes.rst:1609
#: ../../release_notes.rst:1663 ../../release_notes.rst:1703
#: ../../release_notes.rst:2466 ../../release_notes.rst:3014
#: ../../release_notes.rst:3135 ../../release_notes.rst:3553
#: ../../release_notes.rst:4255 ../../release_notes.rst:4555
#: ../../release_notes.rst:4595 ../../release_notes.rst:4753
#: ../../release_notes.rst:4811 ../../release_notes.rst:4835
#: ../../release_notes.rst:4927 ../../release_notes.rst:4977
#: ../../release_notes.rst:5259 ../../release_notes.rst:5290
msgid "New Features"
msgstr ""

#: ../../release_notes.rst:83
msgid "Added a new circuit library module :mod:`qiskit.circuit.library`. This will be a place for constructors of commonly used circuits that can be used as building blocks for larger circuits or applications."
msgstr ""

#: ../../release_notes.rst:87
msgid "The :class:`qiskit.providers.BaseJob` class has four new methods:"
msgstr ""

#: ../../release_notes.rst:89
msgid ":meth:`~qiskit.providers.BaseJob.done`"
msgstr ""

#: ../../release_notes.rst:90
msgid ":meth:`~qiskit.providers.BaseJob.running`"
msgstr ""

#: ../../release_notes.rst:91
msgid ":meth:`~qiskit.providers.BaseJob.cancelled`"
msgstr ""

#: ../../release_notes.rst:92
msgid ":meth:`~qiskit.providers.BaseJob.in_final_state`"
msgstr ""

#: ../../release_notes.rst:94
msgid "These methods are used to check wheter a job is in a given job status."
msgstr ""

#: ../../release_notes.rst:96
msgid "Add ability to specify control conditioned on a qubit being in the ground state. The state of the control qubits is represented by an integer. For example::"
msgstr ""

#: ../../release_notes.rst:107
msgid "Creates a four qubit gate where the fourth qubit gets flipped if the first qubit is in the ground state and the second and third qubits are in the excited state. If ``ctrl_state`` is ``None``, the default, control is conditioned on all control qubits being excited."
msgstr ""

#: ../../release_notes.rst:113
#, python-format
msgid "A new jupyter widget, ``%circuit_library_info`` has been added to :mod:`qiskit.tools.jupyter`. This widget is used for visualizing details about circuits built from the circuit library. For example"
msgstr ""

#: ../../release_notes.rst:124
msgid "A new kwarg option, ``formatted`` ,  has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm` . When set to ``True`` the the method will print a syntax highlighted version (using pygments) to stdout and return ``None`` (which differs from the normal behavior of returning the QASM code as a string)."
msgstr ""

#: ../../release_notes.rst:130
msgid "A new kwarg option, ``filename`` , has been added to :meth:`qiskit.circuit.QuantumCircuit.qasm`. When set to a path the method will write the QASM code to that file. It will then continue to output as normal."
msgstr ""

#: ../../release_notes.rst:135
msgid "A new instruction :py:class:`~qiskit.pulse.SetFrequency` which allows users to change the frequency of the :class:`~qiskit.pulse.PulseChannel`. This is done in the following way::"
msgstr ""

#: ../../release_notes.rst:145
msgid "In this example, the frequency of all pulses before the ``SetFrequency`` command will be the default frequency and all pulses applied to drive channel zero after the ``SetFrequency`` command will be at 5.5 GHz. Users of ``SetFrequency`` should keep in mind any hardware limitations."
msgstr ""

#: ../../release_notes.rst:150
msgid "A new method, :meth:`~qiskit.circuit.QuantumCircuit.assign_parameters` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method accepts a parameter dictionary with both floats and Parameters objects in a single dictionary. In other words this new method allows you to bind floats, Parameters or both in a single dictionary."
msgstr ""

#: ../../release_notes.rst:156
msgid "Also, by using the ``inplace`` kwarg it can be specified you can optionally modify the original circuit in place. By default this is set to ``False`` and a copy of the original circuit will be returned from the method."
msgstr ""

#: ../../release_notes.rst:160
msgid "A new method :meth:`~qiskit.circuit.QuantumCircuit.num_nonlocal_gates` has been added to the :class:`qiskit.circuit.QuantumCircuit` class. This method will return the number of gates in a circuit that involve 2 or or more qubits. These gates are more costly in terms of time and error to implement."
msgstr ""

#: ../../release_notes.rst:166
msgid "The :class:`qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.iso` for adding an :class:`~qiskit.extensions.Isometry` gate to the circuit has a new alias. You can now call :meth:`qiskit.circuit.QuantumCircuit.isometry` in addition to calling ``iso``."
msgstr ""

#: ../../release_notes.rst:172
msgid "A ``description`` attribute has been added to the :class:`~qiskit.transpiler.CouplingMap` class for storing a short description for different coupling maps (e.g. full, grid, line, etc.)."
msgstr ""

#: ../../release_notes.rst:176
msgid "A new method :meth:`~qiskit.dagcircuit.DAGCircuit.compose` has been added to the :class:`~qiskit.dagcircuit.DAGCircuit` class for composing two circuits via their DAGs."
msgstr ""

#: ../../release_notes.rst:219
msgid "The mock backends in ``qiskit.test.mock`` now have a functional ``run()`` method that will return results similar to the real devices. If ``qiskit-aer`` is installed a simulation will be run with a noise model built from the device snapshot in the fake backend.  Otherwise, :class:`qiskit.providers.basicaer.QasmSimulatorPy` will be used to run an ideal simulation. Additionally, if a pulse experiment is passed to ``run`` and qiskit-aer is installed the ``PulseSimulator`` will be used to simulate the pulse schedules."
msgstr ""

#: ../../release_notes.rst:228
msgid "The :meth:`qiskit.result.Result` method :meth:`~qiskit.result.Result.get_counts` will now return a list of all the counts available when there are multiple circuits in a job. This works when ``get_counts()`` is called with no arguments."
msgstr ""

#: ../../release_notes.rst:233
msgid "The main consideration for this feature was for drawing all the results from multiple circuits in the same histogram. For example it is now possible to do something like:"
msgstr ""

#: ../../release_notes.rst:254
msgid "A new kwarg, ``initial_state`` has been added to the :func:`qiskit.visualization.circuit_drawer` function and the :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw`. When set to ``True`` the initial state will be included in circuit visualizations for all backends. For example:"
msgstr ""

#: ../../release_notes.rst:269
msgid "It is now possible to insert a callable into a :class:`qiskit.pulse.InstructionScheduleMap` which returns a new :class:`qiskit.pulse.Schedule` when it is called with parameters. For example:"
msgstr ""

#: ../../release_notes.rst:285
msgid "Two new gate classes, :class:`qiskit.extensions.iSwapGate` and :class:`qiskit.extensions.DCXGate`, along with their :class:`~qiskit.circuit.QuantumCircuit` methods :meth:`~qiskit.circuit.QuantumCircuit.iswap` and :meth:`~qiskit.circuit.QuantumCircuit.dcx` have been added to the standard extensions. These gates, which are locally equivalent to each other, can be used to enact particular XY interactions. A brief motivation for these gates can be found in: `arxiv.org/abs/quant-ph/0209035 <https://arxiv.org/abs/quant-ph/0209035>`_"
msgstr ""

#: ../../release_notes.rst:295
msgid "The :class:`qiskit.providers.BaseJob` class now has a new method :meth:`~qiskit.providers.BaseJob.wait_for_final_state` that polls for the job status until the job reaches a final state (such as ``DONE`` or ``ERROR``). This method also takes an optional ``callback`` kwarg which takes a Python callable that will be called during each iteration of the poll loop."
msgstr ""

#: ../../release_notes.rst:302
msgid "The ``search_width`` and ``search_depth`` attributes of the :class:`qiskit.transpiler.passes.LookaheadSwap` pass are now settable when initializing the pass. A larger search space can often lead to more optimized circuits, at the cost of longer run time."
msgstr ""

#: ../../release_notes.rst:307
msgid "The number of qubits in :class:`~qiskit.providers.models.BackendConfiguration` can now be accessed via the property :py:attr:`~qiskit.providers.models.BackendConfiguration.num_qubits`. It was previously only accessible via the ``n_qubits`` attribute."
msgstr ""

#: ../../release_notes.rst:313
msgid "Two new methods, :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles` and :meth:`~qiskit.quantum_info.OneQubitEulerDecomposer.angles_and_phase`, have been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class. These methods will return the relevant parameters without validation, and calling the ``OneQubitEulerDecomposer`` object will perform the full synthesis with validation."
msgstr ""

#: ../../release_notes.rst:320
msgid "An ``RR`` decomposition basis has been added to the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` for decomposing an arbitrary 2x2 unitary into a two :class:`~qiskit.extensions.RGate` circuit."
msgstr ""

#: ../../release_notes.rst:325
msgid "Adds the ability to set ``qargs`` to objects which are subclasses of the abstract ``BaseOperator`` class. This is done by calling the object ``op(qargs)`` (where ``op`` is an operator class) and will return a shallow copy of the original object with a qargs property set. When such an object is used with the :meth:`~qiskit.quantum_info.Operator.compose` or :meth:`~qiskit.quantum_info.Operator.dot` methods the internal value for qargs will be used when the ``qargs`` method kwarg is not used. This allows for subsystem composition using binary operators, for example::"
msgstr ""

#: ../../release_notes.rst:342
msgid "Adds :class:`qiskit.quantum_info.Clifford` operator class to the `quantum_info` module. This operator is an efficient symplectic representation an N-qubit unitary operator from the Clifford group. This class includes a :meth:`~qiskit.quantum_info.Clifford.to_circuit` method for compilation into a :class:`~qiskit.QuantumCircuit` of Clifford gates with a minimal number of CX gates for up to 3-qubits. It also providers general compilation for N > 3 qubits but this method is not optimal in the number of two-qubit gates."
msgstr ""

#: ../../release_notes.rst:351
msgid "Adds :class:`qiskit.quantum_info.SparsePauliOp` operator class. This is an efficient representaiton of an N-qubit matrix that is sparse in the Pauli basis and uses a :class:`qiskit.quantum_info.PauliTable` and vector of complex coefficients for its data structure."
msgstr ""

#: ../../release_notes.rst:356
msgid "This class supports much of the same functionality of the :class:`qiskit.quantum_info.Operator` class so :class:`~qiskit.quantum_info.SparsePauliOp` objects can be tensored, composed, scalar multiplied, added and subtracted."
msgstr ""

#: ../../release_notes.rst:361
msgid "Numpy arrays or :class:`~qiskit.quantum_info.Operator` objects can be converted to a :class:`~qiskit.quantum_info.SparsePauliOp` using the `:class:`~qiskit.quantum_info.SparsePauliOp.from_operator` method. :class:`~qiskit.quantum_info.SparsePauliOp` can be convered to a sparse csr_matrix or dense Numpy array using the :class:`~qiskit.quantum_info.SparsePauliOp.to_matrix` method, or to an :class:`~qiskit.quantum_info.Operator` object using the :class:`~qiskit.quantum_info.SparsePauliOp.to_operator` method."
msgstr ""

#: ../../release_notes.rst:370
msgid "A :class:`~qiskit.quantum_info.SparsePauliOp` can be iterated over in terms of its :class:`~qiskit.quantum_info.PauliTable` components and coefficients, its coefficients and Pauli string labels using the :meth:`~qiskit.quantum_info.SparsePauliOp.label_iter` method, and the (dense or sparse) matrix components using the :meth:`~qiskit.quantum_info.SparsePauliOp.matrix_iter` method."
msgstr ""

#: ../../release_notes.rst:377
msgid "Add :meth:`qiskit.quantum_info.diamond_norm` function for computing the diamond norm (completely-bounded trace-norm) of a quantum channel. This can be used to compute the distance between two quantum channels using ``diamond_norm(chan1 - chan2)``."
msgstr ""

#: ../../release_notes.rst:382
msgid "A new class :class:`qiskit.quantum_info.PauliTable` has been added. This is an efficient symplectic representation of a list of N-qubit Pauli operators. Some features of this class are:"
msgstr ""

#: ../../release_notes.rst:386
msgid ":class:`~qiskit.quantum_info.PauliTable` objects may be composed, and tensored which will return a :class:`~qiskit.quantum_info.PauliTable` object with the combination of the operation ( :meth:`~qiskit.quantum_info.PauliTable.compose`, :meth:`~qiskit.quantum_info.PauliTable.dot`, :meth:`~qiskit.quantum_info.PauliTable.expand`, :meth:`~qiskit.quantum_info.PauliTable.tensor`) between each element of  the first table, with each element of the second table."
msgstr ""

#: ../../release_notes.rst:395
msgid "Addition of two tables acts as list concatination of the terms in each table (``+``)."
msgstr ""

#: ../../release_notes.rst:398
msgid "Pauli tables can be sorted by lexicographic (tensor product) order or by Pauli weights (:meth:`~qiskit.quantum_info.PauliTable.sort`)."
msgstr ""

#: ../../release_notes.rst:401
msgid "Duplicate elements can be counted and deleted (:meth:`~qiskit.quantum_info.PauliTable.unique`)."
msgstr ""

#: ../../release_notes.rst:404
msgid "The PauliTable may be iterated over in either its native symplectic boolean array representation, as Pauli string labels (:meth:`~qiskit.quantum_info.PauliTable.label_iter`), or as dense Numpy array or sparse CSR matrices (:meth:`~qiskit.quantum_info.PauliTable.matrix_iter`)."
msgstr ""

#: ../../release_notes.rst:410
msgid "Checking commutation between elements of the Pauli table and another Pauli (:meth:`~qiskit.quantum_info.PauliTable.commutes`) or Pauli table (:meth:`~qiskit.quantum_info.PauliTable.commutes_with_all`)"
msgstr ""

#: ../../release_notes.rst:414
msgid "See the :class:`qiskit.quantum_info.PauliTable` class API documentation for additional details."
msgstr ""

#: ../../release_notes.rst:417
msgid "Adds :class:`qiskit.quantum_info.StabilizerTable` class. This is a subclass of the :class:`qiskit.quantum_info.PauliTable` class which includes a boolean phase vector along with the Pauli table array. This represents a list of Stabilizer operators which are real-Pauli operators with +1 or -1 coefficient. Because the stabilizer matrices are real the ``\"Y\"`` label matrix is defined as ``[[0, 1], [-1, 0]]``. See the API documentation for additional information."
msgstr ""

#: ../../release_notes.rst:425
msgid "Adds :func:`qiskit.quantum_info.pauli_basis` function which returns an N-qubit Pauli basis as a :class:`qiskit.quantum_info.PauliTable` object. The ordering of this basis can either be by standard lexicographic (tensor product) order, or by the number of non-identity Pauli terms (weight)."
msgstr ""

#: ../../release_notes.rst:430
msgid "Adds :class:`qiskit.quantum_info.ScalarOp` operator class that represents a scalar multiple of an identity operator. This can be used to initialize an identity on arbitrary dimension subsystems and it will be implicitly converted to other ``BaseOperator`` subclasses (such as an :class:`qiskit.quantum_info.Operator` or :class:`qiskit.quantum_info.SuperOp`) when it is composed with, or added to, them."
msgstr ""

#: ../../release_notes.rst:438
msgid "Example: Identity operator"
msgstr ""

#: ../../release_notes.rst:450
msgid "A new method, :meth:`~qiskit.quantum_info.Operator.reshape`, has been added to the :class:`qiskit.quantum_innfo.Operator` class that returns a shallow copy of an operator subclass with reshaped subsystem input or output dimensions. The combined dimensions of all subsystems must be the same as the original operator or an exception will be raised."
msgstr ""

#: ../../release_notes.rst:456
msgid "Adds :func:`qiskit.quantum_info.random_clifford` for generating a random :class:`qiskit.quantum_info.Clifford` operator."
msgstr ""

#: ../../release_notes.rst:459
msgid "Add :func:`qiskit.quantum_info.random_quantum_channel` function for generating a random quantum channel with fixed :class:`~qiskit.quantum_info.Choi`-rank in the :class:`~qiskit.quantum_info.Stinespring` representation."
msgstr ""

#: ../../release_notes.rst:464
msgid "Add :func:`qiskit.quantum_info.random_hermitian` for generating a random Hermitian :class:`~qiskit.quantum_info.Operator`."
msgstr ""

#: ../../release_notes.rst:467
msgid "Add :func:`qiskit.quantum_info.random_statevector` for generating a random :class:`~qiskit.quantum_info.Statevector`."
msgstr ""

#: ../../release_notes.rst:470
msgid "Adds :func:`qiskit.quantum_info.random_pauli_table` for generating a random :class:`qiskit.quantum_info.PauliTable`."
msgstr ""

#: ../../release_notes.rst:473
msgid "Adds :func:`qiskit.quantum_info.random_stabilizer_table` for generating a random :class:`qiskit.quantum_info.StabilizerTable`."
msgstr ""

#: ../../release_notes.rst:476
msgid "Add a ``num_qubits`` attribute to :class:`qiskit.quantum_info.StateVector` and :class:`qiskit.quantum_info.DensityMatrix` classes. This returns the number of qubits for N-qubit states and returns ``None`` for non-qubit states."
msgstr ""

#: ../../release_notes.rst:480
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.to_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.to_dict` methods to convert :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` objects into Bra-Ket notation dictionary."
msgstr ""

#: ../../release_notes.rst:486 ../../release_notes.rst:509
msgid "Example"
msgstr ""

#: ../../release_notes.rst:502
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return an array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:525
msgid "Adds :meth:`~qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`~qiskit.quantum_info.DensityMatrix.probabilities_dict` to :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes which return a count-style dictionary array of measurement outcome probabilities in the computational basis for the specified subsystems."
msgstr ""

#: ../../release_notes.rst:546
msgid "Add :meth:`~qiskit.quantum_info.Statevector.sample_counts` and :meth:`~qiskit.quantum_info.Statevector.sample_memory` methods to the :class:`~qiskit.quantum_info.Statevector` and :class:`~qiskit.quantum_info.DensityMatrix` classes for sampling measurement outcomes on subsystems."
msgstr ""

#: ../../release_notes.rst:552
msgid "Example:"
msgstr ""

#: ../../release_notes.rst:554
msgid "Generate a counts dictionary by sampling from a statevector"
msgstr ""

#: ../../release_notes.rst:575
msgid "Return the array of measurement outcomes for each sample"
msgstr ""

#: ../../release_notes.rst:596
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.measure` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows sampling a single measurement outcome from the specified subsystems and collapsing the statevector to the post-measurement computational basis state. For example"
msgstr ""

#: ../../release_notes.rst:619
msgid "Adds a :meth:`~qiskit.quantum_info.Statevector.reset` method to the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. This allows reseting some or all subsystems to the :math:`|0\\rangle` state. For example"
msgstr ""

#: ../../release_notes.rst:641
msgid "A new visualization function :func:`qiskit.visualization.visualize_transition` for visualizing single qubit gate transitions has been added. It takes in a single qubit circuit and returns an animation of qubit state transitions on a Bloch sphere. To use this function you must have installed the dependencies for and configured globally a matplotlib animtion writer. You can refer to the `matplotlib documentation <https://matplotlib.org/api/animation_api.html#writer-classes>`_ for more details on this. However, in the default case simply ensuring that `FFmpeg <https://www.ffmpeg.org/>`_ is installed is sufficient to use this function."
msgstr ""

#: ../../release_notes.rst:653
msgid "It supports circuits with the following gates:"
msgstr ""

#: ../../release_notes.rst:655
msgid ":class:`~qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:656
msgid ":class:`~qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:657
msgid ":class:`~qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:658
msgid ":class:`~qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:659
msgid ":class:`~qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:660
msgid ":class:`~qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:661
msgid ":class:`~qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:662
msgid ":class:`~qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:663
msgid ":class:`~qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:664
msgid ":class:`~qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:665
msgid ":class:`~qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:666
msgid ":class:`~qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:668 ../../release_notes.rst:921
#: ../../release_notes.rst:2701
msgid "For example:"
msgstr ""

#: ../../release_notes.rst:683
msgid ":func:`~qiskit.execute.execute` has a new kwarg ``schedule_circuit``. By setting ``schedule_circuit=True`` this enables scheduling of the circuit into a :class:`~qiskit.pulse.Schedule`. This allows users building :class:`qiskit.circuit.QuantumCircuit` objects to make use of custom scheduler  methods, such as the ``as_late_as_possible`` and ``as_soon_as_possible`` methods. For example::"
msgstr ""

#: ../../release_notes.rst:694
msgid "A new environment variable ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` can be set to ``Y`` or ``y`` which will suppress the warnings about ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. You can set the environment variable to ``N`` or ``n`` to ensure that warnings are always enabled even if the user config file is set to disable them."
msgstr ""

#: ../../release_notes.rst:703
msgid "A new user config file option, ``suppress_packaging_warnings`` has been added. When set to ``true`` in your user config file like::"
msgstr ""

#: ../../release_notes.rst:709
msgid "it will suppress the warnings about  ``qiskit-aer`` and ``qiskit-ibmq-provider`` not being installed at import time. This is useful for users who are only running qiskit-terra (or just not qiskit-aer and/or qiskit-ibmq-provider) and the warnings are not an indication of a potential packaging problem. If the user config file is set to disable the warnings this can be overriden by setting the ``QISKIT_SUPPRESS_PACKAGING_WARNINGS`` to ``N`` or ``n``"
msgstr ""

#: ../../release_notes.rst:717
msgid ":func:`qiskit.compiler.transpile()` has two new kwargs, ``layout_method`` and ``routing_method``. These allow you to select a particular method for placement and routing of circuits on constrained architectures. For, example::"
msgstr ""

#: ../../release_notes.rst:725
msgid "will run :class:`~qiskit.transpiler.passes.DenseLayout` layout pass and :class:`~qiskit.transpiler.passes.LookaheadSwap` routing pass."
msgstr ""

#: ../../release_notes.rst:728
msgid "There has been a significant simplification to the style in which Pulse instructions are built."
msgstr ""

#: ../../release_notes.rst:731
msgid "With the previous style, ``Command`` s were called with channels to make an :py:class:`~qiskit.pulse.instructions.Instruction`. The usage of both commands and instructions was a point of confusion. This was the previous style::"
msgstr ""

#: ../../release_notes.rst:741
msgid "or, equivalently (though less used)::"
msgstr ""

#: ../../release_notes.rst:749
msgid "Now, rather than build a command *and* an instruction, each command has been migrated into an instruction::"
msgstr ""

#: ../../release_notes.rst:758
msgid "There is now a :py:class:`~qiskit.pulse.instructions.Play` instruction which takes a description of a pulse envelope and a channel. There is a new :py:class:`~qiskit.pulse.pulse_lib.Pulse` class in the :mod:`~qiskit.pulse.pulse_lib` from which the pulse envelope description should subclass."
msgstr ""

#: ../../release_notes.rst:764 ../../release_notes.rst:2785
msgid "For example::"
msgstr ""

#: ../../release_notes.rst:773 ../../release_notes.rst:2007
#: ../../release_notes.rst:2824 ../../release_notes.rst:3384
#: ../../release_notes.rst:3835
msgid "Upgrade Notes"
msgstr ""

#: ../../release_notes.rst:775
msgid "The :class:`qiskit.dagcircuit.DAGNode` method ``pop`` which was deprecated in the 0.9.0 release has been removed. If you were using this method you can leverage Python's ``del`` statement or ``delattr()`` function to perform the same task."
msgstr ""

#: ../../release_notes.rst:780
#, python-format
msgid "A new optional visualization requirement, `pygments <https://pygments.org/>`_ , has been added. It is used for providing syntax highlighting of OpenQASM 2.0 code in Jupyter widgets and optionally for the :meth:`qiskit.circuit.QuantumCircuit.qasm` method. It must be installed (either with ``pip install pygments`` or ``pip install qiskit-terra[visualization]``) prior to using the ``%circuit_library_info`` widget in :mod:`qiskit.tools.jupyter` or the ``formatted`` kwarg on the :meth:`~qiskit.circuit.QuantumCircuit.qasm` method."
msgstr ""

#: ../../release_notes.rst:790
msgid "The pulse ``buffer`` option found in :class:`qiskit.pulse.Channel` and :class:`qiskit.pulse.Schedule` was deprecated in Terra 0.11.0 and has now been removed. To add a delay on a channel or in a schedule, specify it explicitly in your Schedule with a Delay::"
msgstr ""

#: ../../release_notes.rst:798
msgid "``PulseChannelSpec``, which was deprecated in Terra 0.11.0, has now been removed. Use BackendConfiguration instead::"
msgstr ""

#: ../../release_notes.rst:805
msgid "or, simply reference the channel directly, such as ``DriveChannel(index)``."
msgstr ""

#: ../../release_notes.rst:807
msgid "An import path was deprecated in Terra 0.10.0 and has now been removed: for ``PulseChannel``, ``DriveChannel``, ``MeasureChannel``, and ``ControlChannel``, use ``from qiskit.pulse.channels import X`` in place of ``from qiskit.pulse.channels.pulse_channels import X``."
msgstr ""

#: ../../release_notes.rst:812
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` (which was introduced in the 0.11.0 release) has been added to the preset pass manager for optimization levels 2 and 3. For level 2, there is a call limit of 1,000 and a timeout of 10 seconds. For level 3, the call limit is 10,000 and the timeout is 1 minute."
msgstr ""

#: ../../release_notes.rst:818
msgid "Now that the pass is included in the preset pass managers the `python-constraint <https://pypi.org/project/python-constraint/>`_ package is not longer an optional dependency and has been added to the requirements list."
msgstr ""

#: ../../release_notes.rst:823
msgid "The ``TranspileConfig`` class which was previously used to set run time configuration for a :class:`qiskit.transpiler.PassManager` has been removed and replaced by a new class :class:`qiskit.transpile.PassManagerConfig`. This new class has been structured to include only the information needed to construct a :class:`~qiskit.transpiler.PassManager`. The attributes of this class are:"
msgstr ""

#: ../../release_notes.rst:830 ../../release_notes.rst:896
msgid "``initial_layout``"
msgstr ""

#: ../../release_notes.rst:831 ../../release_notes.rst:892
msgid "``basis_gates``"
msgstr ""

#: ../../release_notes.rst:832 ../../release_notes.rst:893
msgid "``coupling_map``"
msgstr ""

#: ../../release_notes.rst:833 ../../release_notes.rst:895
msgid "``backend_properties``"
msgstr ""

#: ../../release_notes.rst:834 ../../release_notes.rst:894
msgid "``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:836
msgid "The function ``transpile_circuit`` in :mod:`qiskit.transpiler` has been removed. To transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` now you should use the :meth:`~qiskit.transpiler.PassManager.run` method of the :class:~qiskit.transpiler.PassManager` object."
msgstr ""

#: ../../release_notes.rst:842
msgid "The :class:`~qiskit.circuit.QuantumCircuit` method :meth:`~qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` function will no longer include the initial state included in visualizations by default. If you would like to retain the initial state in the output visualization you need to set the ``initial_state`` kwarg to ``True``. For example, running:"
msgstr ""

#: ../../release_notes.rst:857
msgid "This no longer includes the initial state. If you'd like to retain it you can run:"
msgstr ""

#: ../../release_notes.rst:868
msgid ":func:`qiskit.compiler.transpile` (and :func:`qiskit.execute.execute`, which uses ``transpile`` internally) will now raise an error when the ``pass_manager`` kwarg is set and a value is set for other kwargs that are already set in an instantiated :class:`~qiskit.transpiler.PassManager` object. Previously, these conflicting kwargs would just be silently ignored and the values in the ``PassManager`` instance would be used. For example::"
msgstr ""

#: ../../release_notes.rst:887
msgid "will now raise an error while prior to this release the value in ``pm`` would just silently be used and the value for the ``optimization_level`` kwarg would be ignored. The ``transpile`` kwargs this applies to are:"
msgstr ""

#: ../../release_notes.rst:891
msgid "``optimization_level``"
msgstr ""

#: ../../release_notes.rst:897
msgid "``layout_method``"
msgstr ""

#: ../../release_notes.rst:898
msgid "``routing_method``"
msgstr ""

#: ../../release_notes.rst:899
msgid "``backend``"
msgstr ""

#: ../../release_notes.rst:901
msgid "The :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.Clifford`, :class:`~qiskit.quantum_info.SparsePauliOp`, :class:`~qiskit.quantum_info.PauliTable`, :class:`~qiskit.quantum_info.StabilizerTable`, operator classes have an added ``call`` method that allows them to assign a `qargs` to the operator for use with the :meth:`~qiskit.quantum_info.Operator.compose`, :meth:`~qiskit.quantum_info.Operator.dot`, :meth:`~qiskit.quantum_info.Statevector.evolve`,``+``, and ``-`` operations."
msgstr ""

#: ../../release_notes.rst:911
msgid "The addition method of the :class:`qiskit.quantum_info.Operator`, class now accepts a ``qarg`` kwarg to allow adding a smaller operator to a larger one assuming identities on the other subsystems (same as for ``qargs`` on :meth:`~qiskit.quantum_info.Operator.compose` and :meth:`~qiskit.quantum_info.Operator.dot` methods). This allows subsystem addition using the call method as with composition. This support is added to all BaseOperator subclasses (:class:`~qiskit.quantum_info.ScalarOp`, :class:`~qiskit.quantum_info.Operator`, :class:`~qiskit.quantum_info.QuantumChannel`)."
msgstr ""

#: ../../release_notes.rst:937
msgid "The ``BaseOperator`` class has been updated so that addition, subtraction and scalar multiplication are no longer abstract methods. This means that they are no longer required to be implemented in subclasses if they are not supported. The base class will raise a ``NotImplementedError`` when the methods are not defined."
msgstr ""

#: ../../release_notes.rst:943
msgid "The :func:`qiskit.quantum_info.random_density_matrix` function will now return a random :class:`~qiskit.quantum_info.DensityMatrix` object. In previous releases it returned a numpy array."
msgstr ""

#: ../../release_notes.rst:947
msgid "The :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes no longer copy the input array if it is already the correct dtype."
msgstr ""

#: ../../release_notes.rst:951
msgid "`fastjsonschema <https://pypi.org/project/fastjsonschema/>`_ is added as a dependency. This is used for much faster validation of qobj dictionaries against the JSON schema when the ``to_dict()`` method is called on qobj objects with the ``validate`` keyword argument set to ``True``."
msgstr ""

#: ../../release_notes.rst:956
msgid "The qobj construction classes in :mod:`qiskit.qobj` will no longer validate against the qobj jsonschema by default. These include the following classes:"
msgstr ""

#: ../../release_notes.rst:959 ../../release_notes.rst:971
msgid ":class:`qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:960
msgid ":class:`qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:961 ../../release_notes.rst:972
msgid ":class:`qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:962 ../../release_notes.rst:973
msgid ":class:`qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:963 ../../release_notes.rst:974
msgid ":class:`qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:964
msgid ":class:`qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:965
msgid ":class:`qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:966
msgid ":class:`qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:967
msgid ":class:`qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:968
msgid ":class:`qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:969
msgid ":class:`qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:970
msgid ":class:`qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:975
msgid ":class:`qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:976
msgid ":class:`qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:978
msgid "If you were relying on this validation or would like to validate them against the qobj schema this can be done by setting the ``validate`` kwarg to ``True`` on :meth:`~qiskit.qobj.QasmQobj.to_dict` method from either of the top level Qobj classes :class:`~qiskit.qobj.QasmQobj` or :class:`~qiskit.qobj.PulseQobj`. For example:"
msgstr ""

#: ../../release_notes.rst:1004
msgid "which will validate the output dictionary against the Qobj jsonschema."
msgstr ""

#: ../../release_notes.rst:1006
msgid "The output dictionary from :meth:`qiskit.qobj.QasmQobj.to_dict` and :meth:`qiskit.qobj.PulseQobj.to_dict` is no longer in a format for direct json serialization as expected by IBMQ's API. These Qobj objects are the current format we use for passing experiments to providers/backends and while having a dictionary format that could just be passed to the IBMQ API directly was moderately useful for ``qiskit-ibmq-provider``, it made things more difficult for other providers. Especially for providers that wrap local simulators. Moving forward the definitions of what is passed between providers and the IBMQ API request format will be further decoupled (in a backwards compatible manner) which should ease the burden of writing providers and backends."
msgstr ""

#: ../../release_notes.rst:1018
msgid "In practice, the only functional difference between the output of these methods now and previous releases is that complex numbers are represented with the ``complex`` type and numpy arrays are not silently converted to list anymore. If you were previously calling ``json.dumps()`` directly on the output of ``to_dict()`` after this release a custom json encoder will be needed to handle these cases. For example::"
msgstr ""

#: ../../release_notes.rst:1061
msgid "will generate a json string in the same exact manner that ``json.dumps(my_qasm.to_dict())`` did in previous releases."
msgstr ""

#: ../../release_notes.rst:1064
msgid "``CmdDef`` has been deprecated since Terra 0.11.0 and has been removed. Please continue to use :py:class:`~qiskit.pulse.InstructionScheduleMap` instead."
msgstr ""

#: ../../release_notes.rst:1068
msgid "The methods ``cmds`` and ``cmd_qubits`` in :py:class:`~qiskit.pulse.InstructionScheduleMap` have been deprecated since Terra 0.11.0 and have been removed. Please use ``instructions`` and ``qubits_with_instruction`` instead."
msgstr ""

#: ../../release_notes.rst:1073
msgid "PulseDefaults have reported ``qubit_freq_est`` and ``meas_freq_est`` in Hz rather than GHz since Terra release 0.11.0. A warning which notified of this change has been removed."
msgstr ""

#: ../../release_notes.rst:1077
msgid "The previously deprecated (in the 0.11.0 release) support for passsing in :class:`qiskit.circuit.Instruction` parameters of types ``sympy.Basic``, ``sympy.Expr``, ``qiskit.qasm.node.node.Node`` (QASM AST node) and ``sympy.Matrix`` has been removed. The supported types for instruction parameters are:"
msgstr ""

#: ../../release_notes.rst:1083 ../../release_notes.rst:2930
msgid "``int``"
msgstr ""

#: ../../release_notes.rst:1084 ../../release_notes.rst:2931
msgid "``float``"
msgstr ""

#: ../../release_notes.rst:1085 ../../release_notes.rst:2932
msgid "``complex``"
msgstr ""

#: ../../release_notes.rst:1086 ../../release_notes.rst:2933
msgid "``str``"
msgstr ""

#: ../../release_notes.rst:1087
msgid "``list``"
msgstr ""

#: ../../release_notes.rst:1088 ../../release_notes.rst:2934
msgid "``np.ndarray``"
msgstr ""

#: ../../release_notes.rst:1089
msgid ":class:`qiskit.circuit.ParameterExpression`"
msgstr ""

#: ../../release_notes.rst:1091
msgid "The following properties of :py:class:`~qiskit.providers.models.BackendConfiguration`:"
msgstr ""

#: ../../release_notes.rst:1094
msgid "``dt``"
msgstr ""

#: ../../release_notes.rst:1095
msgid "``dtm``"
msgstr ""

#: ../../release_notes.rst:1096
msgid "``rep_time``"
msgstr ""

#: ../../release_notes.rst:1098
msgid "all have units of seconds. Prior to release 0.11.0, ``dt`` and ``dtm`` had units of nanoseconds. Prior to release 0.12.0, ``rep_time`` had units of microseconds. The warnings alerting users of these changes have now been removed from ``BackendConfiguration``."
msgstr ""

#: ../../release_notes.rst:1103
msgid "A new requirement has been added to the requirements list, `retworkx <https://pypi.org/project/retworkx/>`_. It is an Apache 2.0 licensed graph library that has a similar API to networkx and is being used to significantly speed up the :class:`qiskit.dagcircuit.DAGCircuit` operations as part of the transpiler. There are binaries published on PyPI for all the platforms supported by Qiskit Terra but if you're using a platform where there aren't precompiled binaries published refer to the `retworkx documentation <https://retworkx.readthedocs.io/en/stable/README.html#installing-retworkx>`_ for instructions on pip installing from sdist."
msgstr ""

#: ../../release_notes.rst:1114
msgid "If you encounter any issues with the transpiler or DAGCircuit class as part of the transition you can switch back to the previous networkx implementation by setting the environment variable ``USE_RETWORKX`` to ``N``. This option will be removed in the 0.14.0 release."
msgstr ""

#: ../../release_notes.rst:1123 ../../release_notes.rst:2060
#: ../../release_notes.rst:2870 ../../release_notes.rst:3426
#: ../../release_notes.rst:4101
msgid "Deprecation Notes"
msgstr ""

#: ../../release_notes.rst:1125
msgid "Passing in the data to the constructor for :class:`qiskit.dagcircuit.DAGNode` as a dictionary arg ``data_dict`` is deprecated and will be removed in a future release. Instead you should now pass the fields in as kwargs to the constructor. For example the previous behavior of::"
msgstr ""

#: ../../release_notes.rst:1139
msgid "should now be::"
msgstr ""

#: ../../release_notes.rst:1145
msgid "The naming of gate objects and methods have been updated to be more consistent. The following changes have been made:"
msgstr ""

#: ../../release_notes.rst:1148
msgid "The Pauli gates all have one uppercase letter only (``I``, ``X``, ``Y``, ``Z``)"
msgstr ""

#: ../../release_notes.rst:1150
msgid "The parameterized Pauli gates (i.e. rotations) prepend the uppercase letter ``R`` (``RX``, ``RY``, ``RZ``)"
msgstr ""

#: ../../release_notes.rst:1152
msgid "A controlled version prepends the uppercase letter ``C`` (``CX``, ``CRX``, ``CCX``)"
msgstr ""

#: ../../release_notes.rst:1154
msgid "Gates are named according to their action, not their alternative names (``CCX``, not ``Toffoli``)"
msgstr ""

#: ../../release_notes.rst:1157
msgid "The old names have been deprecated and will be removed in a future release. This is a list of the changes showing the old and new class, name attribute, and methods. If a new column is blank then there is no change for that."
msgstr ""

#: ../../release_notes.rst:1161
msgid "Gate Name Changes"
msgstr ""

#: ../../release_notes.rst:1164
msgid "Old Class"
msgstr ""

#: ../../release_notes.rst:1165
msgid "New Class"
msgstr ""

#: ../../release_notes.rst:1166
msgid "Old Name Attribute"
msgstr ""

#: ../../release_notes.rst:1167
msgid "New Name Attribute"
msgstr ""

#: ../../release_notes.rst:1168
msgid "Old :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:1169
msgid "New :class:`qiskit.circuit.QuantumCircuit` method"
msgstr ""

#: ../../release_notes.rst:1170
msgid "``ToffoliGate``"
msgstr ""

#: ../../release_notes.rst:1171
msgid ":class:`~qiskit.extensions.CCXGate`"
msgstr ""

#: ../../release_notes.rst:1172
msgid "``ccx``"
msgstr ""

#: ../../release_notes.rst:1174
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ccx` and :meth:`~qiskit.circuit.QuantumCircuit.toffoli`"
msgstr ""

#: ../../release_notes.rst:1177
msgid "``CrxGate``"
msgstr ""

#: ../../release_notes.rst:1178
msgid ":class:`~qiskit.extensions.CRXGate`"
msgstr ""

#: ../../release_notes.rst:1179
msgid "``crx``"
msgstr ""

#: ../../release_notes.rst:1181
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crx`"
msgstr ""

#: ../../release_notes.rst:1183
msgid "``CryGate``"
msgstr ""

#: ../../release_notes.rst:1184
msgid ":class:`~qiskit.extensions.CRYGate`"
msgstr ""

#: ../../release_notes.rst:1185
msgid "``cry``"
msgstr ""

#: ../../release_notes.rst:1187
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cry`"
msgstr ""

#: ../../release_notes.rst:1189
msgid "``CrzGate``"
msgstr ""

#: ../../release_notes.rst:1190
msgid ":class:`~qiskit.extensions.CRZGate`"
msgstr ""

#: ../../release_notes.rst:1191
msgid "``crz``"
msgstr ""

#: ../../release_notes.rst:1193
msgid ":meth:`~qiskit.circuit.QuantumCircuit.crz`"
msgstr ""

#: ../../release_notes.rst:1195
msgid "``FredkinGate``"
msgstr ""

#: ../../release_notes.rst:1196
msgid ":class:`~qiskit.extensions.CSwapGate`"
msgstr ""

#: ../../release_notes.rst:1197
msgid "``cswap``"
msgstr ""

#: ../../release_notes.rst:1199
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cswap` and :meth:`~qiskit.circuit.QuantumCircuit.fredkin`"
msgstr ""

#: ../../release_notes.rst:1202
msgid "``Cu1Gate``"
msgstr ""

#: ../../release_notes.rst:1203
msgid ":class:`~qiskit.extensions.CU1Gate`"
msgstr ""

#: ../../release_notes.rst:1204
msgid "``cu1``"
msgstr ""

#: ../../release_notes.rst:1206
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu1`"
msgstr ""

#: ../../release_notes.rst:1208
msgid "``Cu3Gate``"
msgstr ""

#: ../../release_notes.rst:1209
msgid ":class:`~qiskit.extensions.CU3Gate`"
msgstr ""

#: ../../release_notes.rst:1210
msgid "``cu3``"
msgstr ""

#: ../../release_notes.rst:1212
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cu3`"
msgstr ""

#: ../../release_notes.rst:1214
msgid "``CnotGate``"
msgstr ""

#: ../../release_notes.rst:1215
msgid ":class:`~qiskit.extensions.CXGate`"
msgstr ""

#: ../../release_notes.rst:1216
msgid "``cx``"
msgstr ""

#: ../../release_notes.rst:1218
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cx` and :meth:`~qiskit.circuit.QuantumCircuit.cnot`"
msgstr ""

#: ../../release_notes.rst:1221
msgid "``CyGate``"
msgstr ""

#: ../../release_notes.rst:1222
msgid ":class:`~qiskit.extensions.CYGate`"
msgstr ""

#: ../../release_notes.rst:1223
msgid "``cy``"
msgstr ""

#: ../../release_notes.rst:1225
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cy`"
msgstr ""

#: ../../release_notes.rst:1227
msgid "``CzGate``"
msgstr ""

#: ../../release_notes.rst:1228
msgid ":class:`~qiskit.extensions.CZGate`"
msgstr ""

#: ../../release_notes.rst:1229
msgid "``cz``"
msgstr ""

#: ../../release_notes.rst:1231
msgid ":meth:`~qiskit.circuit.QuantumCircuit.cz`"
msgstr ""

#: ../../release_notes.rst:1233
msgid "``DiagGate``"
msgstr ""

#: ../../release_notes.rst:1234
msgid ":class:`~qiskit.extensions.DiagonalGate`"
msgstr ""

#: ../../release_notes.rst:1235
msgid "``diag``"
msgstr ""

#: ../../release_notes.rst:1236
msgid "``diagonal``"
msgstr ""

#: ../../release_notes.rst:1237
msgid "``diag_gate``"
msgstr ""

#: ../../release_notes.rst:1238
msgid ":meth:`~qiskit.circuit.QuantumCircuit.diagonal`"
msgstr ""

#: ../../release_notes.rst:1239
msgid "``IdGate``"
msgstr ""

#: ../../release_notes.rst:1240
msgid ":class:`~qiskit.extensions.IGate`"
msgstr ""

#: ../../release_notes.rst:1241
msgid "``id``"
msgstr ""

#: ../../release_notes.rst:1243
msgid "``iden``"
msgstr ""

#: ../../release_notes.rst:1244
msgid ":meth:`~qiskit.circuit.QuantumCircuit.i` and :meth:`~qiskit.circuit.QuantumCircuit.id`"
msgstr ""

#: ../../release_notes.rst:1246
msgid ":class:`~qiskit.extensions.Isometry`"
msgstr ""

#: ../../release_notes.rst:1248
msgid "``iso``"
msgstr ""

#: ../../release_notes.rst:1249
msgid "``isometry``"
msgstr ""

#: ../../release_notes.rst:1250
msgid ":meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:1251
msgid ":meth:`~qiskit.circuit.QuantumCircuit.isometry` and :meth:`~qiskit.circuit.QuantumCircuit.iso`"
msgstr ""

#: ../../release_notes.rst:1253
msgid "``UCG``"
msgstr ""

#: ../../release_notes.rst:1254
msgid ":class:`~qiskit.extensions.UCGate`"
msgstr ""

#: ../../release_notes.rst:1255
msgid "``multiplexer``"
msgstr ""

#: ../../release_notes.rst:1257
msgid "``ucg``"
msgstr ""

#: ../../release_notes.rst:1258
msgid ":meth:`~qiskit.circuit.QuantumCircuit.uc`"
msgstr ""

#: ../../release_notes.rst:1259
msgid "``UCRot``"
msgstr ""

#: ../../release_notes.rst:1260
msgid ":class:`~qiskit.extensions.UCPauliRotGate`"
msgstr ""

#: ../../release_notes.rst:1265
msgid "``UCX``"
msgstr ""

#: ../../release_notes.rst:1266
msgid ":class:`~qiskit.extensions.UCRXGate`"
msgstr ""

#: ../../release_notes.rst:1267
msgid "``ucrotX``"
msgstr ""

#: ../../release_notes.rst:1268
msgid "``ucrx``"
msgstr ""

#: ../../release_notes.rst:1269
msgid "``ucx``"
msgstr ""

#: ../../release_notes.rst:1270
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrx`"
msgstr ""

#: ../../release_notes.rst:1271
msgid "``UCY``"
msgstr ""

#: ../../release_notes.rst:1272
msgid ":class:`~qiskit.extensions.UCRYGate`"
msgstr ""

#: ../../release_notes.rst:1273
msgid "``ucroty``"
msgstr ""

#: ../../release_notes.rst:1274
msgid "``ucry``"
msgstr ""

#: ../../release_notes.rst:1275
msgid "``ucy``"
msgstr ""

#: ../../release_notes.rst:1276
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucry`"
msgstr ""

#: ../../release_notes.rst:1277
msgid "``UCZ``"
msgstr ""

#: ../../release_notes.rst:1278
msgid ":class:`~qiskit.extensions.UCRZGate`"
msgstr ""

#: ../../release_notes.rst:1279
msgid "``ucrotz``"
msgstr ""

#: ../../release_notes.rst:1280
msgid "``ucrz``"
msgstr ""

#: ../../release_notes.rst:1281
msgid "``ucz``"
msgstr ""

#: ../../release_notes.rst:1282
msgid ":meth:`~qiskit.circuit.QuantumCircuit.ucrz`"
msgstr ""

#: ../../release_notes.rst:1284
msgid "The kwarg ``period`` for the function :func:`~qiskit.pulse.pulse_lib.square`, :func:`~qiskit.pulse.pulse_lib.sawtooth`, and :func:`~qiskit.pulse.pulse_lib.triangle` in :mod:`qiskit.pulse.pulse_lib` is now deprecated and will be removed in a future release. Instead you should now use the ``freq`` kwarg to set the frequency."
msgstr ""

#: ../../release_notes.rst:1292
msgid "The ``DAGCircuit.compose_back()`` and ``DAGCircuit.extend_back()`` methods are deprecated and will be removed in a future release. Instead you should use the :meth:`qiskit.dagcircuit.DAGCircuit.compose` method, which is a more general and more flexible method that provides the same functionality."
msgstr ""

#: ../../release_notes.rst:1297
msgid "The ``callback`` kwarg of the :class:`qiskit.transpiler.PassManager` class's constructor has been deprecated and will be removed in a future release. Instead of setting it at the object level during creation it should now be set as a kwarg parameter on the :meth:`qiskit.transpiler.PassManager.run` method."
msgstr ""

#: ../../release_notes.rst:1303
msgid "The ``n_qubits`` and ``numberofqubits`` keywords are deprecated throughout Terra and replaced by ``num_qubits``. The old names will be removed in a future release. The objects affected by this change are listed below:"
msgstr ""

#: ../../release_notes.rst:1307
msgid "New Methods"
msgstr ""

#: ../../release_notes.rst:1310
msgid "Class"
msgstr ""

#: ../../release_notes.rst:1311
msgid "Old Method"
msgstr ""

#: ../../release_notes.rst:1312
msgid "New Method"
msgstr ""

#: ../../release_notes.rst:1313
msgid ":class:`~qiskit.circuit.QuantumCircuit`"
msgstr ""

#: ../../release_notes.rst:1314 ../../release_notes.rst:1327
msgid "``n_qubits``"
msgstr ""

#: ../../release_notes.rst:1315
msgid ":meth:`~qiskit.circuit.QuantumCircuit.num_qubits`"
msgstr ""

#: ../../release_notes.rst:1316
msgid ":class:`~qiskit.quantum_info.Pauli`"
msgstr ""

#: ../../release_notes.rst:1317
msgid "``numberofqubits``"
msgstr ""

#: ../../release_notes.rst:1318
msgid ":meth:`~qiskit.quantum_info.Pauli.num_qubits`"
msgstr ""

#: ../../release_notes.rst:1320
msgid "New arguments"
msgstr ""

#: ../../release_notes.rst:1323
msgid "Function"
msgstr ""

#: ../../release_notes.rst:1324
msgid "Old Argument"
msgstr ""

#: ../../release_notes.rst:1325
msgid "New Argument"
msgstr ""

#: ../../release_notes.rst:1326
msgid ":func:`~qiskit.circuit.random.random_circuit`"
msgstr ""

#: ../../release_notes.rst:1328 ../../release_notes.rst:1331
msgid "``num_qubits``"
msgstr ""

#: ../../release_notes.rst:1329
msgid ":class:`~qiskit.extensions.MSGate`"
msgstr ""

#: ../../release_notes.rst:1330
msgid "``n_qubit``"
msgstr ""

#: ../../release_notes.rst:1333
msgid "The function ``qiskit.quantum_info.synthesis.euler_angles_1q`` is now deprecated. It has been superseded by the :class:`qiskit.quantum_info.OneQubitEulerDecomposer` class which provides the same functionality through::"
msgstr ""

#: ../../release_notes.rst:1340
msgid "The ``pass_manager`` kwarg for the :func:`qiskit.compiler.transpile` has been deprecated and will be removed in a future release. Moving forward the preferred way to transpile a circuit with a custom :class:`~qiskit.transpiler.PassManager` object is to use the :meth:`~qiskit.transpiler.PassManager.run` method of the ``PassManager`` object."
msgstr ""

#: ../../release_notes.rst:1347
msgid "The :func:`qiskit.quantum_info.random_state` function has been deprecated and will be removed in a future release. Instead you should use the :func:`qiskit.quantum_info.random_statevector` function."
msgstr ""

#: ../../release_notes.rst:1351
msgid "The ``add``, ``subtract``, and ``multiply`` methods of the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes are deprecated and will be removed in a future release. Instead you shoulde use ``+``, ``-``, ``*`` binary operators instead."
msgstr ""

#: ../../release_notes.rst:1357
msgid "Deprecates :meth:`qiskit.quantum_info.Statevector.to_counts`, :meth:`qiskit.quantum_info.DensityMatrix.to_counts`, and :func:`qiskit.quantum_info.counts.state_to_counts`. These functions are superseded by the class methods :meth:`qiskit.quantum_info.Statevector.probabilities_dict` and :meth:`qiskit.quantum_info.DensityMatrix.probabilities_dict`."
msgstr ""

#: ../../release_notes.rst:1364
msgid ":py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s (e.g. ``Gaussian``) now subclass from :py:class:`~qiskit.pulse.pulse_lib.Pulse` and have been moved to the :mod:`qiskit.pulse.pulse_lib`. The previous path via ``pulse.commands`` is deprecated and will be removed in a future release."
msgstr ""

#: ../../release_notes.rst:1370
msgid "``DelayInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instruction.Delay`. This new instruction has been taken over the previous ``Command`` ``Delay``. The migration pattern is::"
msgstr ""

#: ../../release_notes.rst:1378
msgid "Until the deprecation period is over, the previous ``Delay`` syntax of calling a command on a channel will also be supported::"
msgstr ""

#: ../../release_notes.rst:1383
msgid "The new ``Delay`` instruction does not support a ``command`` attribute."
msgstr ""

#: ../../release_notes.rst:1385
msgid "``FrameChange`` and ``FrameChangeInstruction`` have been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.ShiftPhase`. The changes are::"
msgstr ""

#: ../../release_notes.rst:1393
msgid "Until the deprecation period is over, the previous FrameChange syntax of calling a command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:1398
msgid "The ``call`` method of :py:class:`~qiskit.pulse.pulse_lib.SamplePulse` and :py:class:`~qiskit.pulse.pulse_lib.ParametricPulse` s have been deprecated. The migration is as follows::"
msgstr ""

#: ../../release_notes.rst:1404
msgid "``AcquireInstruction`` has been deprecated and replaced by :py:class:`~qiskit.pulse.instructions.Acquire`. The changes are::"
msgstr ""

#: ../../release_notes.rst:1411
msgid "Until the deprecation period is over, the previous Acquire syntax of calling the command on a channel will be supported::"
msgstr ""

#: ../../release_notes.rst:1420 ../../release_notes.rst:2269
#: ../../release_notes.rst:2940 ../../release_notes.rst:3473
#: ../../release_notes.rst:4167 ../../release_notes.rst:4266
#: ../../release_notes.rst:4351 ../../release_notes.rst:4563
#: ../../release_notes.rst:4790 ../../release_notes.rst:4889
msgid "Bug Fixes"
msgstr ""

#: ../../release_notes.rst:1422
msgid "The :class:`~qiskit.transpiler.passes.BarrierBeforeFinalMeasurements` transpiler pass, included in the preset transpiler levels when targeting a physical device, previously inserted a barrier across only measured qubits. In some cases, this allowed the transpiler to insert a swap after a measure operation, rendering the circuit invalid for current devices. The pass has been updated so that the inserted barrier will span all qubits on the device. Fixes `#3937 <https://github.com/Qiskit/qiskit-terra/issues/3937>`_"
msgstr ""

#: ../../release_notes.rst:1431
msgid "When extending a :class:`~qiskit.circuit.QuantumCircuit` instance (extendee) with another circuit (extension), the circuit is taken via reference. If a circuit is extended with itself that leads to an infinite loop as extendee and extension are the same. This bug has been resolved by copying the extension if it is the same object as the extendee. Fixes `#3811 <https://github.com/Qiskit/qiskit-terra/issues/3811>`_"
msgstr ""

#: ../../release_notes.rst:1438
msgid "Fixes a case in :meth:`qiskit.result.Result.get_counts`, where the results for an expirement could not be referenced if the experiment was initialized as a Schedule without a name. Fixes `#2753 <https://github.com/Qiskit/qiskit-terra/issues/2753>`_"
msgstr ""

#: ../../release_notes.rst:1443
msgid "Previously, replacing :class:`~qiskit.circuit.Parameter` objects in a circuit with new Parameter objects prior to decomposing a circuit would result in the substituted values not correctly being substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order."
msgstr ""

#: ../../release_notes.rst:1449
msgid "The matplotlib output backend for the :func:`qiskit.visualization.circuit_drawer` function and :meth:`qiskit.circuit.QuantumCircuit.draw` method drawer has been fixed to render :class:`~qiskit.extensions.CU1Gate` gates correctly. Fixes `#3684 <https://github.com/Qiskit/qiskit-terra/issues/3684>`_"
msgstr ""

#: ../../release_notes.rst:1455
msgid "A bug in :meth`qiskit.circuit.QuantumCircuit.from_qasm_str` and :meth`qiskit.circuit.QuantumCircuit.from_qasm_file` when loading QASM with custom gates defined has been fixed. Now, loading this QASM::"
msgstr ""

#: ../../release_notes.rst:1466
msgid "is equivalent to the following circuit::"
msgstr ""

#: ../../release_notes.rst:1479
msgid "Fixes `#1566 <https://github.com/Qiskit/qiskit-terra/issues/1566>`_"
msgstr ""

#: ../../release_notes.rst:1481
msgid "Allow quantum circuit Instructions to have list parameter values. This is used in Aer for expectation value snapshot parameters for example ``params = [[1.0, 'I'], [1.0, 'X']]]`` for :math:`\\langle I + X\\rangle`."
msgstr ""

#: ../../release_notes.rst:1485
msgid "Previously, for circuits containing composite gates (those created via :meth:`qiskit.circuit.QuantumCircuit.to_gate` or :meth:`qiskit.circuit.QuantumCircuit.to_instruction` or their corresponding converters), attempting to bind the circuit more than once would result in only the first bind value being applied to all circuits when transpiled. This has been resolved so that the values provided for subsequent binds are correctly respected."
msgstr ""

#: ../../release_notes.rst:1497 ../../release_notes.rst:2330
#: ../../release_notes.rst:2970 ../../release_notes.rst:3495
#: ../../release_notes.rst:4195 ../../release_notes.rst:4273
msgid "Other Notes"
msgstr ""

#: ../../release_notes.rst:1499
msgid "The qasm and pulse qobj classes:"
msgstr ""

#: ../../release_notes.rst:1501 ../../release_notes.rst:1513
msgid ":class:`~qiskit.qobj.QasmQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:1502
msgid ":class:`~qiskit.qobj.QobjExperimentHeader`"
msgstr ""

#: ../../release_notes.rst:1503 ../../release_notes.rst:1514
msgid ":class:`~qiskit.qobj.QasmQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:1504 ../../release_notes.rst:1515
msgid ":class:`~qiskit.qobj.QasmQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:1505 ../../release_notes.rst:1516
msgid ":class:`~qiskit.qobj.QasmQobjConfig`"
msgstr ""

#: ../../release_notes.rst:1506
msgid ":class:`~qiskit.qobj.QobjHeader`"
msgstr ""

#: ../../release_notes.rst:1507
msgid ":class:`~qiskit.qobj.PulseQobjInstruction`"
msgstr ""

#: ../../release_notes.rst:1508
msgid ":class:`~qiskit.qobj.PulseQobjExperimentConfig`"
msgstr ""

#: ../../release_notes.rst:1509
msgid ":class:`~qiskit.qobj.PulseQobjExperiment`"
msgstr ""

#: ../../release_notes.rst:1510
msgid ":class:`~qiskit.qobj.PulseQobjConfig`"
msgstr ""

#: ../../release_notes.rst:1511
msgid ":class:`~qiskit.qobj.QobjMeasurementOption`"
msgstr ""

#: ../../release_notes.rst:1512
msgid ":class:`~qiskit.qobj.PulseLibraryItem`"
msgstr ""

#: ../../release_notes.rst:1517
msgid ":class:`~qiskit.qobj.QasmQobj`"
msgstr ""

#: ../../release_notes.rst:1518
msgid ":class:`~qiskit.qobj.PulseQobj`"
msgstr ""

#: ../../release_notes.rst:1520
msgid "from :mod:`qiskit.qobj` have all been reimplemented without using the marsmallow library. These new implementations are designed to be drop-in replacement (except for as noted in the upgrade release notes) but specifics inherited from marshmallow may not work. Please file issues for any incompatibilities found."
msgstr ""

#: ../../release_notes.rst:1527
msgid "Aer 0.5.0"
msgstr ""

#: ../../release_notes.rst:1530 ../../release_notes.rst:1543
#: ../../release_notes.rst:2341 ../../release_notes.rst:2398
#: ../../release_notes.rst:4283
msgid "Added"
msgstr ""

#: ../../release_notes.rst:1531
msgid "Add support for terra diagonal gate"
msgstr ""

#: ../../release_notes.rst:1532
msgid "Add support for parameterized qobj"
msgstr ""

#: ../../release_notes.rst:1535
msgid "Fixed"
msgstr ""

#: ../../release_notes.rst:1536
msgid "Added postfix for linux on Raspberry Pi"
msgstr ""

#: ../../release_notes.rst:1537
msgid "Handle numpy array inputs from qobj"
msgstr ""

#: ../../release_notes.rst:1540
msgid "Ignis 0.3.0"
msgstr ""

#: ../../release_notes.rst:1545
msgid "API documentation"
msgstr ""

#: ../../release_notes.rst:1546
msgid "CNOT-Dihedral randomized benchmarking"
msgstr ""

#: ../../release_notes.rst:1547
msgid "Accreditation module for output accrediation of noisy devices"
msgstr ""

#: ../../release_notes.rst:1548
msgid "Pulse calibrations for single qubits"
msgstr ""

#: ../../release_notes.rst:1549
msgid "Pulse Discriminator"
msgstr ""

#: ../../release_notes.rst:1550
msgid "Entanglement verification circuits"
msgstr ""

#: ../../release_notes.rst:1551
msgid "Gateset tomography for single-qubit gate sets"
msgstr ""

#: ../../release_notes.rst:1552
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epg``, ``calculate_2q_epg`` functions to calculate 1 and 2-qubit error per gate from error per Clifford"
msgstr ""

#: ../../release_notes.rst:1555
msgid "Adds randomized benchmarking utility functions ``calculate_1q_epc``, ``calculate_2q_epc`` for calculating 1 and 2-qubit error per Clifford from error per gate"
msgstr ""

#: ../../release_notes.rst:1560 ../../release_notes.rst:1624
#: ../../release_notes.rst:1673 ../../release_notes.rst:2361
#: ../../release_notes.rst:2431 ../../release_notes.rst:4335
msgid "Changed"
msgstr ""

#: ../../release_notes.rst:1561
msgid "Support integer labels for qubits in tomography"
msgstr ""

#: ../../release_notes.rst:1562
msgid "Support integer labels for measurement error mitigation"
msgstr ""

#: ../../release_notes.rst:1565 ../../release_notes.rst:2211
#: ../../release_notes.rst:2242 ../../release_notes.rst:2374
#: ../../release_notes.rst:2440 ../../release_notes.rst:4367
msgid "Deprecated"
msgstr ""

#: ../../release_notes.rst:1566
msgid "Deprecates ``twoQ_clifford_error`` function. Use ``calculate_2q_epc`` instead."
msgstr ""

#: ../../release_notes.rst:1567
msgid "Python 3.5 support in qiskit-ignis is deprecated. Support will be removed on the upstream python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:1572 ../../release_notes.rst:1601
msgid "Aqua 0.6.5"
msgstr ""

#: ../../release_notes.rst:1574 ../../release_notes.rst:1579
#: ../../release_notes.rst:1588 ../../release_notes.rst:1593
#: ../../release_notes.rst:1598 ../../release_notes.rst:1603
#: ../../release_notes.rst:1642 ../../release_notes.rst:1647
#: ../../release_notes.rst:1652 ../../release_notes.rst:1657
#: ../../release_notes.rst:2387 ../../release_notes.rst:2392
#: ../../release_notes.rst:2985 ../../release_notes.rst:2990
#: ../../release_notes.rst:2995 ../../release_notes.rst:3508
#: ../../release_notes.rst:3513 ../../release_notes.rst:3518
#: ../../release_notes.rst:3523 ../../release_notes.rst:4388
#: ../../release_notes.rst:4398 ../../release_notes.rst:4426
#: ../../release_notes.rst:4449 ../../release_notes.rst:4454
#: ../../release_notes.rst:4534 ../../release_notes.rst:4539
#: ../../release_notes.rst:4544 ../../release_notes.rst:4549
#: ../../release_notes.rst:4951 ../../release_notes.rst:4956
msgid "No Change"
msgstr ""

#: ../../release_notes.rst:1577 ../../release_notes.rst:1606
msgid "IBM Q Provider 0.6.0"
msgstr ""

#: ../../release_notes.rst:1583
msgid "Qiskit 0.17.0"
msgstr ""

#: ../../release_notes.rst:1586 ../../release_notes.rst:1640
#: ../../release_notes.rst:1686
msgid "Terra 0.12.0"
msgstr ""

#: ../../release_notes.rst:1591
msgid "Aer 0.4.1"
msgstr ""

#: ../../release_notes.rst:1596 ../../release_notes.rst:1650
msgid "Ignis 0.2.0"
msgstr ""

#: ../../release_notes.rst:1611
msgid "There are three new exceptions: ``VisualizationError``, ``VisualizationValueError``, and ``VisualizationTypeError``. These are now used in the visualization modules when an exception is raised."
msgstr ""

#: ../../release_notes.rst:1614
msgid "You can now set the logging level and specify a log file using the environment variables ``QSIKIT_IBMQ_PROVIDER_LOG_LEVEL`` and ``QISKIT_IBMQ_PROVIDER_LOG_FILE``, respectively. Note that the name of the logger is ``qiskit.providers.ibmq``."
msgstr ""

#: ../../release_notes.rst:1617
msgid ":class:`qiskit.providers.ibmq.job.IBMQJob` now has a new method :meth:`~qiskit.providers.ibmq.job.IBMQJob.scheduling_mode` that returns the scheduling mode the job is in."
msgstr ""

#: ../../release_notes.rst:1620
msgid "IQX-related tutorials that used to be in ``qiskit-iqx-tutorials`` are now in ``qiskit-ibmq-provider``."
msgstr ""

#: ../../release_notes.rst:1626
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.jobs` now accepts a new boolean parameter ``descending``, which can be used to indicate whether the jobs should be returned in descending or ascending order."
msgstr ""

#: ../../release_notes.rst:1629
msgid ":class:`qiskit.providers.ibmq.managed.IBMQJobManager` now looks at the job limit and waits for old jobs to finish before submitting new ones if the limit has been reached."
msgstr ""

#: ../../release_notes.rst:1631
msgid ":meth:`qiskit.providers.ibmq.IBMQBackend.status` now raises a :class:`qiskit.providers.ibmq.IBMQBackendApiProtocolError` exception if there was an issue with validating the status."
msgstr ""

#: ../../release_notes.rst:1637
msgid "Qiskit 0.16.0"
msgstr ""

#: ../../release_notes.rst:1645 ../../release_notes.rst:2338
msgid "Aer 0.4.0"
msgstr ""

#: ../../release_notes.rst:1655
msgid "Aqua 0.6.4"
msgstr ""

#: ../../release_notes.rst:1660
msgid "IBM Q Provider 0.5.0"
msgstr ""

#: ../../release_notes.rst:1665
#, python-format
msgid "Some of the visualization and Jupyter tools, including gate/error map and backend information, have been moved from ``qiskit-terra`` to ``qiskit-ibmq-provider``. They are now under the :mod:`qiskit.providers.ibmq.jupyter` and :mod:`qiskit.providers.ibmq.visualization`. In addition, you can now use ``%iqx_dashboard`` to get a dashboard that provides both job and backend information."
msgstr ""

#: ../../release_notes.rst:1675
msgid "JSON schema validation is no longer run by default on Qobj objects passed to :meth:`qiskit.providers.ibmq.IBMQBackend.run`. This significantly speeds up the execution of the `run()` method. Qobj objects are still validated on the server side, and invalid Qobjs will continue to raise exceptions. To force local validation, set ``validate_qobj=True`` when you invoke ``run()``."
msgstr ""

#: ../../release_notes.rst:1683
msgid "Qiskit 0.15.0"
msgstr ""

#: ../../release_notes.rst:1691
msgid "The 0.12.0 release includes several new features and bug fixes. The biggest change for this release is the addition of support for parametric pulses to OpenPulse. These are Pulse commands which take parameters rather than sample points to describe a pulse. 0.12.0 is also the first release to include support for Python 3.8. It also marks the beginning of the deprecation for Python 3.5 support, which will be removed when the upstream community stops supporting it."
msgstr ""

#: ../../release_notes.rst:1705
msgid "The pass :class:`qiskit.transpiler.passes.CSPLayout` was extended with two new parameters: ``call_limit`` and ``time_limit``. These options allow limiting how long the pass will run. The option ``call_limit`` limits the number of times that the recursive function in the backtracking solver may be called. Similarly, ``time_limit`` limits how long (in seconds) the solver will be allowed to run. The defaults are ``1000`` calls and ``10`` seconds respectively."
msgstr ""

#: ../../release_notes.rst:1713
msgid ":class:`qiskit.pulse.Acquire` can now be applied to a single qubit. This makes pulse programming more consistent and easier to reason about, as now all operations apply to a single channel. For example::"
msgstr ""

#: ../../release_notes.rst:1723
msgid "A new method :meth:`qiskit.transpiler.CouplingMap.draw` was added to :class:`qiskit.transpiler.CouplingMap` to generate a graphviz image from the coupling map graph. For example:"
msgstr ""

#: ../../release_notes.rst:1735
msgid "Parametric pulses have been added to OpenPulse. These are pulse commands which are parameterized and understood by the backend. Arbitrary pulse shapes are still supported by the SamplePulse Command. The new supported pulse classes are:"
msgstr ""

#: ../../release_notes.rst:1740
msgid ":class:`qiskit.pulse.ConstantPulse`"
msgstr ""

#: ../../release_notes.rst:1741
msgid ":class:`qiskit.pulse.Drag`"
msgstr ""

#: ../../release_notes.rst:1742
msgid ":class:`qiskit.pulse.Gaussian`"
msgstr ""

#: ../../release_notes.rst:1743
msgid ":class:`qiskit.pulse.GaussianSquare`"
msgstr ""

#: ../../release_notes.rst:1745
msgid "They can be used like any other Pulse command. An example::"
msgstr ""

#: ../../release_notes.rst:1757
msgid "The resulting schedule will be similar to a SamplePulse schedule built using :mod:`qiskit.pulse.pulse_lib`, however, waveform sampling will be performed by the backend. The method :meth:`qiskit.pulse.Schedule.draw` can still be used as usual. However, the command will be converted to a ``SamplePulse`` with the :meth:`qiskit.pulse.ParametricPulse.get_sample_pulse` method, so the pulse shown may not sample the continuous function the same way that the backend will."
msgstr ""

#: ../../release_notes.rst:1766
msgid "This feature can be used to construct Pulse programs for any backend, but the pulses will be converted to ``SamplePulse`` objects if the backend does not support parametric pulses. Backends which support them will have the following new attribute::"
msgstr ""

#: ../../release_notes.rst:1774
msgid "Note that the backend does not need to support all of the parametric pulses defined in Qiskit."
msgstr ""

#: ../../release_notes.rst:1777
msgid "When the backend supports parametric pulses, and the Pulse schedule is built with them, the assembled Qobj is significantly smaller. The size of a PulseQobj built entirely with parametric pulses is dependent only on the number of instructions, whereas the size of a PulseQobj built otherwise will grow with the duration of the instructions (since every sample must be specified with a value)."
msgstr ""

#: ../../release_notes.rst:1784
msgid "Added utility functions, :func:`qiskit.scheduler.measure` and :func:`qiskit.scheduler.measure_all` to `qiskit.scheduler` module. These functions return a :class:`qiskit.pulse.Schedule` object which measures qubits using OpenPulse. For example::"
msgstr ""

#: ../../release_notes.rst:1798
msgid "Pulse :class:`qiskit.pulse.Schedule` objects now have better representations that for simple schedules should be valid Python expressions."
msgstr ""

#: ../../release_notes.rst:1802
msgid "for example:"
msgstr ""

#: ../../release_notes.rst:1814
msgid "The :class:`qiskit.circuit.QuantumCircuit` methods :meth:`qiskit.circuit.QuantumCircuit.measure_active`, :meth:`qiskit.circuit.QuantumCircuit.measure_all`, and :meth:`qiskit.circuit.QuantumCircuit.remove_final_measurements` now have an addition kwarg ``inplace``. When ``inplace`` is set to ``False`` the function will return a modified **copy** of the circuit. This is different from the default behavior which will modify the circuit object in-place and return nothing."
msgstr ""

#: ../../release_notes.rst:1823
msgid "Several new constructor methods were added to the :class:`qiskit.transpiler.CouplingMap` class for building objects with basic qubit coupling graphs. The new constructor methods are:"
msgstr ""

#: ../../release_notes.rst:1827
msgid ":meth:`qiskit.transpiler.CouplingMap.from_full`"
msgstr ""

#: ../../release_notes.rst:1828
msgid ":meth:`qiskit.transpiler.CouplingMap.from_line`"
msgstr ""

#: ../../release_notes.rst:1829
msgid ":meth:`qiskit.transpiler.CouplingMap.from_ring`"
msgstr ""

#: ../../release_notes.rst:1830
msgid ":meth:`qiskit.transpiler.CouplingMap.from_grid`"
msgstr ""

#: ../../release_notes.rst:1832
msgid "For example, to use the new constructors to get a coupling map of 5 qubits connected in a linear chain you can now run:"
msgstr ""

#: ../../release_notes.rst:1842
msgid "Introduced a new pass :class:`qiskit.transpiler.passes.CrosstalkAdaptiveSchedule`. This pass aims to reduce the impact of crosstalk noise on a program. It uses crosstalk characterization data from the backend to schedule gates. When a pair of gates has high crosstalk, they get serialized using a barrier. Naive serialization is harmful because it incurs decoherence errors. Hence, this pass uses a SMT optimization approach to compute a schedule which minimizes the impact of crosstalk as well as decoherence errors."
msgstr ""

#: ../../release_notes.rst:1852
msgid "The pass takes as input a circuit which is already transpiled onto the backend i.e., the circuit is expressed in terms of physical qubits and swap gates have been inserted and decomposed into CNOTs if required. Using this circuit and crosstalk characterization data, a `Z3 optimization <https://github.com/Z3Prover/z3>`_ is used to construct a new scheduled circuit as output."
msgstr ""

#: ../../release_notes.rst:1859
msgid "To use the pass on a circuit circ::"
msgstr ""

#: ../../release_notes.rst:1866
msgid "``backend_prop`` is a :class:`qiskit.providers.models.BackendProperties` object for the target backend. ``crosstalk_prop`` is a dict which specifies conditional error rates. For two gates ``g1`` and ``g2``, ``crosstalk_prop[g1][g2]`` specifies the conditional error rate of ``g1`` when ``g1`` and ``g2`` are executed simultaneously. A method for generating ``crosstalk_prop`` will be added in a future release of qiskit-ignis. Until then you'll either have to already know the crosstalk properties of your device, or manually write your own device characterization experiments."
msgstr ""

#: ../../release_notes.rst:1875
msgid "In the preset pass manager for optimization level 1, :func:`qiskit.transpiler.preset_passmanagers.level_1_pass_manager` if :class:`qiskit.transpiler.passes.TrivialLayout` layout pass is not a perfect match for a particular circuit, then :class:`qiskit.transpiler.passes.DenseLayout` layout pass is used instead."
msgstr ""

#: ../../release_notes.rst:1882
msgid "Added a new abstract method :meth:`qiskit.quantum_info.Operator.dot` to the abstract ``BaseOperator`` class, so it is included for all implementations of that abstract class, including :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects. This method returns the right operator multiplication ``a.dot(b)`` :math:`= a \\cdot b`. This is equivalent to calling the operator :meth:`qiskit.quantum_info.Operator.compose` method with the kwarg ``front`` set to ``True``."
msgstr ""

#: ../../release_notes.rst:1894
msgid "Added :func:`qiskit.quantum_info.average_gate_fidelity` and :func:`qiskit.quantum_info.gate_error` functions to the :mod:`qiskit.quantum_info` module for working with :class:`qiskit.quantum_info.Operator` and ``QuantumChannel`` (e.g., :class:`qiskit.quantum_info.Choi`) objects."
msgstr ""

#: ../../release_notes.rst:1900
msgid "Added the :func:`qiskit.quantum_info.partial_trace` function to the :mod:`qiskit.quantum_info` that works with :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` quantum state classes. For example::"
msgstr ""

#: ../../release_notes.rst:1915
msgid "When :meth:`qiskit.circuit.QuantumCircuit.draw` or :func:`qiskit.visualization.circuit_drawer` is called with the ``with_layout`` kwarg set True (the default) the output visualization will now display the physical qubits as integers to clearly distinguish them from the virtual qubits."
msgstr ""

#: ../../release_notes.rst:1921
msgid "For Example:"
msgstr ""

#: ../../release_notes.rst:1936
msgid "Added new state measure functions to the :mod:`qiskit.quantum_info` module: :func:`qiskit.quantum_info.entropy`, :func:`qiskit.quantum_info.mutual_information`, :func:`qiskit.quantum_info.concurrence`, and :func:`qiskit.quantum_info.entanglement_of_formation`. These functions work with the :class:`qiskit.quantum_info.Statevector` and :class:`qiskit.quantum_info.DensityMatrix` classes."
msgstr ""

#: ../../release_notes.rst:1944
msgid "The decomposition methods for single-qubit gates in :class:`qiskit.quantum_info.synthesis.one_qubit_decompose.OneQubitEulerDecomposer` have been expanded to now also include the ``'ZXZ'`` basis, characterized by three rotations about the  Z,X,Z axis. This now means that a general 2x2 Operator can be decomposed into following bases: ``U3``, ``U1X``, ``ZYZ``, ``ZXZ``, ``XYX``, ``ZXZ``."
msgstr ""

#: ../../release_notes.rst:1955 ../../release_notes.rst:2813
msgid "Known Issues"
msgstr ""

#: ../../release_notes.rst:1957
msgid "Running functions that use :func:`qiskit.tools.parallel_map` (for example :func:`qiskit.execute.execute`, :func:`qiskit.compiler.transpile`, and :meth:`qiskit.transpiler.PassManager.run`) may not work when called from a script running outside of a ``if __name__ == '__main__':`` block when using Python 3.8 on MacOS. Other environments are unaffected by this issue. This is due to changes in how parallel processes are launched by Python 3.8 on MacOS. If ``RuntimeError`` or ``AttributeError`` are raised by scripts that are directly calling ``parallel_map()`` or when calling a function that uses it internally with Python 3.8 on MacOS embedding the script calls inside ``if __name__ == '__main__':`` should workaround the issue. For example::"
msgstr ""

#: ../../release_notes.rst:1982
msgid "should be changed to::"
msgstr ""

#: ../../release_notes.rst:2001
msgid "if errors are encountered with Python 3.8 on MacOS."
msgstr ""

#: ../../release_notes.rst:2009
msgid "The value of the ``rep_time`` parameter for Pulse backend's configuration object is now in units of seconds, not microseconds. The first time a ``PulseBackendConfiguration`` object is initialized it will raise a single warning to the user to indicate this."
msgstr ""

#: ../../release_notes.rst:2014
msgid "The ``rep_time`` argument for :func:`qiskit.compiler.assemble` now takes in a value in units of seconds, not microseconds. This was done to make the units with everything else in pulse. If you were passing in a value for ``rep_time`` ensure that you update the value to account for this change."
msgstr ""

#: ../../release_notes.rst:2019
msgid "The value of the ``base_gate`` property of :class:`qiskit.circuit.ControlledGate` objects has been changed from the class of the base gate to an instance of the class of the base gate."
msgstr ""

#: ../../release_notes.rst:2023
msgid "The ``base_gate_name`` property of :class:`qiskit.circuit.ControlledGate` has been removed; you can get the name of the base gate by accessing ``base_gate.name`` on the object. For example::"
msgstr ""

#: ../../release_notes.rst:2034
msgid "Changed :class:`qiskit.quantum_info.Operator` magic methods so that ``__mul__`` (which gets executed by python's multiplication operation, if the left hand side of the operation has it defined) implements right matrix multiplication (i.e. :meth:`qiskit.quantum_info.Operator.dot`), and ``__rmul__`` (which gets executed by python's multiplication operation from the right hand side of the operation if the left does not have ``__mul__`` defined) implements scalar multiplication (i.e. :meth:`qiskit.quantum_info.Operator.multiply`). Previously both methods implemented scalar multiplciation."
msgstr ""

#: ../../release_notes.rst:2044
msgid "The second argument of the :func:`qiskit.quantum_info.process_fidelity` function, ``target``, is now optional. If a target unitary is not specified, then process fidelity of the input channel with the identity operator will be returned."
msgstr ""

#: ../../release_notes.rst:2049
msgid ":func:`qiskit.compiler.assemble` will now respect the configured ``max_shots`` value for a backend. If a value for the ``shots`` kwarg is specified that exceed the max shots set in the backend configuration the function will now raise a ``QiskitError`` exception. Additionally, if no shots argument is provided the default value is either 1024 (the previous behavior) or ``max_shots`` from the backend, whichever is lower."
msgstr ""

#: ../../release_notes.rst:2062
msgid "Methods for adding gates to a :class:`qiskit.circuit.QuantumCircuit` with abbreviated keyword arguments (e.g. ``ctl``, ``tgt``) have had their keyword arguments renamed to be more descriptive (e.g. ``control_qubit``, ``target_qubit``). The old names have been deprecated. A table including the old and new calling signatures for the ``QuantumCircuit`` methods is included below."
msgstr ""

#: ../../release_notes.rst:2068
msgid "New signatures for ``QuantumCircuit`` gate methods"
msgstr ""

#: ../../release_notes.rst:2071
msgid "Instruction Type"
msgstr ""

#: ../../release_notes.rst:2072
msgid "Former Signature"
msgstr ""

#: ../../release_notes.rst:2073
msgid "New Signature"
msgstr ""

#: ../../release_notes.rst:2074
msgid ":class:`qiskit.extensions.HGate`"
msgstr ""

#: ../../release_notes.rst:2075
msgid "``qc.h(q)``"
msgstr ""

#: ../../release_notes.rst:2076
msgid "``qc.h(qubit)``"
msgstr ""

#: ../../release_notes.rst:2077
msgid ":class:`qiskit.extensions.CHGate`"
msgstr ""

#: ../../release_notes.rst:2078
msgid "``qc.ch(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2079
msgid "``qc.ch((control_qubit, target_qubit))``"
msgstr ""

#: ../../release_notes.rst:2080
msgid ":class:`qiskit.extensions.IdGate`"
msgstr ""

#: ../../release_notes.rst:2081 ../../release_notes.rst:2084
msgid "``qc.iden(q)``"
msgstr ""

#: ../../release_notes.rst:2082 ../../release_notes.rst:2085
msgid "``qc.iden(qubit)``"
msgstr ""

#: ../../release_notes.rst:2083 ../../release_notes.rst:2086
msgid ":class:`qiskit.extensions.RGate`"
msgstr ""

#: ../../release_notes.rst:2087
msgid "``qc.r(theta, phi, q)``"
msgstr ""

#: ../../release_notes.rst:2088
msgid "``qc.r(theta, phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:2089
msgid ":class:`qiskit.extensions.RXGate`"
msgstr ""

#: ../../release_notes.rst:2090
msgid "``qc.rx(theta, q)``"
msgstr ""

#: ../../release_notes.rst:2091
msgid "``qc.rx(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:2092
msgid ":class:`qiskit.extensions.CrxGate`"
msgstr ""

#: ../../release_notes.rst:2093
msgid "``qc.crx(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2094
msgid "``qc.crx(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2095
msgid ":class:`qiskit.extensions.RYGate`"
msgstr ""

#: ../../release_notes.rst:2096
msgid "``qc.ry(theta, q)``"
msgstr ""

#: ../../release_notes.rst:2097
msgid "``qc.ry(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:2098
msgid ":class:`qiskit.extensions.CryGate`"
msgstr ""

#: ../../release_notes.rst:2099
msgid "``qc.cry(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2100
msgid "``qc.cry(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2101
msgid ":class:`qiskit.extensions.RZGate`"
msgstr ""

#: ../../release_notes.rst:2102
msgid "``qc.rz(phi, q)``"
msgstr ""

#: ../../release_notes.rst:2103
msgid "``qc.rz(phi, qubit)``"
msgstr ""

#: ../../release_notes.rst:2104
msgid ":class:`qiskit.extensions.CrzGate`"
msgstr ""

#: ../../release_notes.rst:2105
msgid "``qc.crz(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2106
msgid "``qc.crz(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2107
msgid ":class:`qiskit.extensions.SGate`"
msgstr ""

#: ../../release_notes.rst:2108
msgid "``qc.s(q)``"
msgstr ""

#: ../../release_notes.rst:2109
msgid "``qc.s(qubit)``"
msgstr ""

#: ../../release_notes.rst:2110
msgid ":class:`qiskit.extensions.SdgGate`"
msgstr ""

#: ../../release_notes.rst:2111
msgid "``qc.sdg(q)``"
msgstr ""

#: ../../release_notes.rst:2112
msgid "``qc.sdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:2113
msgid ":class:`qiskit.extensions.FredkinGate`"
msgstr ""

#: ../../release_notes.rst:2114
msgid "``qc.cswap(ctl, tgt1, tgt2)``"
msgstr ""

#: ../../release_notes.rst:2115
msgid "``qc.cswap(control_qubit, target_qubit1, target_qubit2)``"
msgstr ""

#: ../../release_notes.rst:2116
msgid ":class:`qiskit.extensions.TGate`"
msgstr ""

#: ../../release_notes.rst:2117
msgid "``qc.t(q)``"
msgstr ""

#: ../../release_notes.rst:2118
msgid "``qc.t(qubit)``"
msgstr ""

#: ../../release_notes.rst:2119
msgid ":class:`qiskit.extensions.TdgGate`"
msgstr ""

#: ../../release_notes.rst:2120
msgid "``qc.tdg(q)``"
msgstr ""

#: ../../release_notes.rst:2121
msgid "``qc.tdg(qubit)``"
msgstr ""

#: ../../release_notes.rst:2122
msgid ":class:`qiskit.extensions.U1Gate`"
msgstr ""

#: ../../release_notes.rst:2123
msgid "``qc.u1(theta, q)``"
msgstr ""

#: ../../release_notes.rst:2124
msgid "``qc.u1(theta, qubit)``"
msgstr ""

#: ../../release_notes.rst:2125
msgid ":class:`qiskit.extensions.Cu1Gate`"
msgstr ""

#: ../../release_notes.rst:2126
msgid "``qc.cu1(theta, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2127
msgid "``qc.cu1(theta, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2128
msgid ":class:`qiskit.extensions.U2Gate`"
msgstr ""

#: ../../release_notes.rst:2129
msgid "``qc.u2(phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:2130
msgid "``qc.u2(phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:2131
msgid ":class:`qiskit.extensions.U3Gate`"
msgstr ""

#: ../../release_notes.rst:2132
msgid "``qc.u3(theta, phi, lam, q)``"
msgstr ""

#: ../../release_notes.rst:2133
msgid "``qc.u3(theta, phi, lam, qubit)``"
msgstr ""

#: ../../release_notes.rst:2134
msgid ":class:`qiskit.extensions.Cu3Gate`"
msgstr ""

#: ../../release_notes.rst:2135
msgid "``qc.cu3(theta, phi, lam, ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2136
msgid "``qc.cu3(theta, phi, lam, control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2137
msgid ":class:`qiskit.extensions.XGate`"
msgstr ""

#: ../../release_notes.rst:2138
msgid "``qc.x(q)``"
msgstr ""

#: ../../release_notes.rst:2139
msgid "``qc.x(qubit)``"
msgstr ""

#: ../../release_notes.rst:2140
msgid ":class:`qiskit.extensions.CnotGate`"
msgstr ""

#: ../../release_notes.rst:2141
msgid "``qc.cx(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2142
msgid "``qc.cx(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2143
msgid ":class:`qiskit.extensions.ToffoliGate`"
msgstr ""

#: ../../release_notes.rst:2144
msgid "``qc.ccx(ctl1, ctl2, tgt)``"
msgstr ""

#: ../../release_notes.rst:2145
msgid "``qc.ccx(control_qubit1, control_qubit2, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2146
msgid ":class:`qiskit.extensions.YGate`"
msgstr ""

#: ../../release_notes.rst:2147
msgid "``qc.y(q)``"
msgstr ""

#: ../../release_notes.rst:2148
msgid "``qc.y(qubit)``"
msgstr ""

#: ../../release_notes.rst:2149
msgid ":class:`qiskit.extensions.CyGate`"
msgstr ""

#: ../../release_notes.rst:2150
msgid "``qc.cy(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2151
msgid "``qc.cy(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2152
msgid ":class:`qiskit.extensions.ZGate`"
msgstr ""

#: ../../release_notes.rst:2153
msgid "``qc.z(q)``"
msgstr ""

#: ../../release_notes.rst:2154
msgid "``qc.z(qubit)``"
msgstr ""

#: ../../release_notes.rst:2155
msgid ":class:`qiskit.extensions.CzGate`"
msgstr ""

#: ../../release_notes.rst:2156
msgid "``qc.cz(ctl, tgt)``"
msgstr ""

#: ../../release_notes.rst:2157
msgid "``qc.cz(control_qubit, target_qubit)``"
msgstr ""

#: ../../release_notes.rst:2159
msgid "Running :class:`qiskit.pulse.Acquire` on multiple qubits has been deprecated and will be removed in a future release. Additionally, the :class:`qiskit.pulse.AcquireInstruction` parameters ``mem_slots`` and ``reg_slots`` have been deprecated. Instead ``reg_slot`` and ``mem_slot`` should be used instead."
msgstr ""

#: ../../release_notes.rst:2165
msgid "The attribute of the :class:`qiskit.providers.models.PulseDefaults` class ``circuit_instruction_map`` has been deprecated and will be removed in a future release. Instead you should use the new attribute ``instruction_schedule_map``. This was done to match the type of the value of the attribute, which is an ``InstructionScheduleMap``."
msgstr ""

#: ../../release_notes.rst:2171
msgid "The :class:`qiskit.pulse.PersistentValue` command is deprecated and will be removed in a future release. Similar functionality can be achieved with the :class:`qiskit.pulse.ConstantPulse` command (one of the new parametric pulses). Compare the following::"
msgstr ""

#: ../../release_notes.rst:2188
msgid "Python 3.5 support in qiskit-terra is deprecated. Support will be removed in the first release after the upstream Python community's end of life date for the version, which is 09/13/2020."
msgstr ""

#: ../../release_notes.rst:2192
msgid "The ``require_cptp`` kwarg of the :func:`qiskit.quantum_info.process_fidelity` function has been deprecated and will be removed in a future release. It is superseded by two separate kwargs ``require_cp`` and ``require_tp``."
msgstr ""

#: ../../release_notes.rst:2197
msgid "Setting the ``scale`` parameter for :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` as the first positional argument is deprecated and will be removed in a future release. Instead you should use ``scale`` as keyword argument."
msgstr ""

#: ../../release_notes.rst:2203
msgid "The :mod:`qiskit.tools.qi.qi` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module. A table of the deprecated functions and their replacement are below:"
msgstr ""

#: ../../release_notes.rst:2208
msgid "``qiskit.tools.qi.qi`` replacements"
msgstr ""

#: ../../release_notes.rst:2212 ../../release_notes.rst:2243
msgid "Replacement"
msgstr ""

#: ../../release_notes.rst:2213
msgid ":func:`qiskit.tools.partial_trace`"
msgstr ""

#: ../../release_notes.rst:2214
msgid ":func:`qiskit.quantum_info.partial_trace`"
msgstr ""

#: ../../release_notes.rst:2215
msgid ":func:`qiskit.tools.choi_to_pauli`"
msgstr ""

#: ../../release_notes.rst:2216
msgid ":class:`qiskit.quantum_info.Choi` and :class:`quantum_info.PTM`"
msgstr ""

#: ../../release_notes.rst:2217
msgid ":func:`qiskit.tools.chop`"
msgstr ""

#: ../../release_notes.rst:2218
msgid "``numpy.round``"
msgstr ""

#: ../../release_notes.rst:2219
msgid "``qiskit.tools.qi.qi.outer``"
msgstr ""

#: ../../release_notes.rst:2220
msgid "``numpy.outer``"
msgstr ""

#: ../../release_notes.rst:2221
msgid ":func:`qiskit.tools.concurrence`"
msgstr ""

#: ../../release_notes.rst:2222
msgid ":func:`qiskit.quantum_info.concurrence`"
msgstr ""

#: ../../release_notes.rst:2223
msgid ":func:`qiskit.tools.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:2224
msgid ":func:`qiskit.quantum_info.shannon_entropy`"
msgstr ""

#: ../../release_notes.rst:2225
msgid ":func:`qiskit.tools.entropy`"
msgstr ""

#: ../../release_notes.rst:2226
msgid ":func:`qiskit.quantum_info.entropy`"
msgstr ""

#: ../../release_notes.rst:2227
msgid ":func:`qiskit.tools.mutual_information`"
msgstr ""

#: ../../release_notes.rst:2228
msgid ":func:`qiskit.quantum_info.mutual_information`"
msgstr ""

#: ../../release_notes.rst:2229
msgid ":func:`qiskit.tools.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:2230
msgid ":func:`qiskit.quantum_info.entanglement_of_formation`"
msgstr ""

#: ../../release_notes.rst:2231
msgid ":func:`qiskit.tools.is_pos_def`"
msgstr ""

#: ../../release_notes.rst:2232
msgid "``quantum_info.operators.predicates.is_positive_semidefinite_matrix``"
msgstr ""

#: ../../release_notes.rst:2234
msgid "The :mod:`qiskit.quantum_info.states.states` module is deprecated and will be removed in a future release. The legacy functions in the module have all been superseded by functions and classes in the :mod:`qiskit.quantum_info` module."
msgstr ""

#: ../../release_notes.rst:2239
msgid "``qiskit.quantum_info.states.states`` replacements"
msgstr ""

#: ../../release_notes.rst:2244
msgid "``qiskit.quantum_info.states.states.basis_state``"
msgstr ""

#: ../../release_notes.rst:2245
msgid ":meth:`qiskit.quantum_info.Statevector.from_label`"
msgstr ""

#: ../../release_notes.rst:2246
msgid "``qiskit.quantum_info.states.states.projector``"
msgstr ""

#: ../../release_notes.rst:2247
msgid ":class:`qiskit.quantum_info.DensityMatrix`"
msgstr ""

#: ../../release_notes.rst:2249
msgid "The ``scaling`` parameter of the ``draw()`` method for the ``Schedule`` and ``Pulse`` objects was deprecated and will be removed in a future release. Instead the new ``scale`` parameter should be used. This was done to have a consistent argument between pulse and circuit drawings. For example::"
msgstr ""

#: ../../release_notes.rst:2271
msgid "Previously, calling :meth:`qiskit.circuit.QuantumCircuit.bind_parameters` prior to decomposing a circuit would result in the bound values not being correctly substituted into the decomposed gates. This has been resolved such that binding and decomposition may occur in any order. Fixes `issue #2482 <https://github.com/Qiskit/qiskit-terra/issues/2482>`_ and `issue #3509 <https://github.com/Qiskit/qiskit-terra/issues/3509>`_"
msgstr ""

#: ../../release_notes.rst:2278
msgid "The ``Collect2qBlocks`` pass had previously not considered classical conditions when determining whether to include a gate within an existing block. In some cases, this resulted in classical conditions being lost when transpiling with ``optimization_level=3``. This has been resolved so that classically conditioned gates are never included in a block. Fixes `issue #3215 <https://github.com/Qiskit/qiskit-terra/issues/3215>`_"
msgstr ""

#: ../../release_notes.rst:2286
msgid "All the output types for the circuit drawers in :meth:`qiskit.circuit.QuantumCircuit.draw` and :func:`qiskit.visualization.circuit_drawer` have fixed and/or improved support for drawing controlled custom gates. Fixes `issue #3546 <https://github.com/Qiskit/qiskit-terra/issues/3546>`_, `issue #3763 <https://github.com/Qiskit/qiskit-terra/issues/3763>`_, and `issue #3764 <https://github.com/Qiskit/qiskit-terra/issues/3764>`_"
msgstr ""

#: ../../release_notes.rst:2294
msgid "Explanation and examples have been added to documentation for the :class:`qiskit.circuit.QuantumCircuit` methods for adding gates: :meth:`qiskit.circuit.QuantumCircuit.ccx`, :meth:`qiskit.circuit.QuantumCircuit.ch`, :meth:`qiskit.circuit.QuantumCircuit.crz`, :meth:`qiskit.circuit.QuantumCircuit.cswap`, :meth:`qiskit.circuit.QuantumCircuit.cu1`, :meth:`qiskit.circuit.QuantumCircuit.cu3`, :meth:`qiskit.circuit.QuantumCircuit.cx`, :meth:`qiskit.circuit.QuantumCircuit.cy`, :meth:`qiskit.circuit.QuantumCircuit.cz`, :meth:`qiskit.circuit.QuantumCircuit.h`, :meth:`qiskit.circuit.QuantumCircuit.iden`, :meth:`qiskit.circuit.QuantumCircuit.rx`, :meth:`qiskit.circuit.QuantumCircuit.ry`, :meth:`qiskit.circuit.QuantumCircuit.rz`, :meth:`qiskit.circuit.QuantumCircuit.s`, :meth:`qiskit.circuit.QuantumCircuit.sdg`, :meth:`qiskit.circuit.QuantumCircuit.swap`, :meth:`qiskit.circuit.QuantumCircuit.t`, :meth:`qiskit.circuit.QuantumCircuit.tdg`, :meth:`qiskit.circuit.QuantumCircuit.u1`, :meth:`qiskit.circuit.QuantumCircuit.u2`, :meth:`qiskit.circuit.QuantumCircuit.u3`, :meth:`qiskit.circuit.QuantumCircuit.x`, :meth:`qiskit.circuit.QuantumCircuit.y`, :meth:`qiskit.circuit.QuantumCircuit.z`. Fixes `issue #3400 <https://github.com/Qiskit/qiskit-terra/issues/3400>`_"
msgstr ""

#: ../../release_notes.rst:2323
msgid "Fixes for handling of complex number parameter in circuit visualization. Fixes `issue #3640 <https://github.com/Qiskit/qiskit-terra/issues/3640>`_"
msgstr ""

#: ../../release_notes.rst:2332
msgid "The transpiler passes in the :mod:`qiskit.transpiler.passes` directory have been organized into subdirectories to better categorize them by functionality. They are still all accessible under the ``qiskit.transpiler.passes`` namespace."
msgstr ""

#: ../../release_notes.rst:2342
msgid "Added ``NoiseModel.from_backend`` for building a basic device noise model for an IBMQ backend (\\#569)"
msgstr ""

#: ../../release_notes.rst:2344
msgid "Added multi-GPU enabled simulation methods to the ``QasmSimulator``, ``StatevectorSimulator``, and ``UnitarySimulator``. The qasm simulator has gpu version of the density matrix and statevector methods and can be accessed using ``\"method\": \"density_matrix_gpu\"`` or ``\"method\": \"statevector_gpu\"`` in ``backend_options``. The statevector simulator gpu method can be accessed using ``\"method\": \"statevector_gpu\"``. The unitary simulator GPU method can be accessed using ``\"method\": \"unitary_gpu\"``. These backends use CUDA and require an NVidia GPU.(\\#544)"
msgstr ""

#: ../../release_notes.rst:2351
msgid "Added ``PulseSimulator`` backend (\\#542)"
msgstr ""

#: ../../release_notes.rst:2352
msgid "Added ``PulseSystemModel`` and ``HamiltonianModel`` classes to represent models to be used in ``PulseSimulator`` (\\#496, \\#493)"
msgstr ""

#: ../../release_notes.rst:2354
msgid "Added ``duffing_model_generators`` to generate ``PulseSystemModel`` objects from a list of parameters (\\#516)"
msgstr ""

#: ../../release_notes.rst:2356
msgid "Migrated ODE function solver to C++ (\\#442, \\#350)"
msgstr ""

#: ../../release_notes.rst:2357
msgid "Added high level pulse simulator tests (\\#379)"
msgstr ""

#: ../../release_notes.rst:2358
msgid "CMake BLAS_LIB_PATH flag to set path to look for BLAS lib (\\#543)"
msgstr ""

#: ../../release_notes.rst:2363
msgid "Changed the structure of the ``src`` directory to organise simulator source code. Simulator controller headers were moved to ``src/controllers`` and simulator method State headers are in ``src/simulators`` (\\#544)"
msgstr ""

#: ../../release_notes.rst:2366
msgid "Moved the location of several functions (\\#568): * Moved contents of ``qiskit.provider.aer.noise.errors`` into the ``qiskit.providers.noise`` module * Moved contents of ``qiskit.provider.aer.noise.utils`` into the ``qiskit.provider.aer.utils`` module."
msgstr ""

#: ../../release_notes.rst:2371
msgid "Enabled optimization to aggregate consecutive gates in a circuit (fusion) by default (\\#579)."
msgstr ""

#: ../../release_notes.rst:2375
msgid "Deprecated ``utils.qobj_utils`` functions (\\#568)"
msgstr ""

#: ../../release_notes.rst:2376
msgid "Deprecated ``qiskit.providers.aer.noise.device.basic_device_noise_model``. It is superseded by the ``NoiseModel.from_backend`` method (\\#569)"
msgstr ""

#: ../../release_notes.rst:2380 ../../release_notes.rst:4361
msgid "Removed"
msgstr ""

#: ../../release_notes.rst:2381
msgid "Removed ``NoiseModel.as_dict``, ``QuantumError.as_dict``, ``ReadoutError.as_dict``, and ``QuantumError.kron`` methods that were deprecated in 0.3 (\\#568)."
msgstr ""

#: ../../release_notes.rst:2385 ../../release_notes.rst:2988
#: ../../release_notes.rst:3511 ../../release_notes.rst:4252
msgid "Ignis 0.2"
msgstr ""

#: ../../release_notes.rst:2390 ../../release_notes.rst:2993
#: ../../release_notes.rst:3516 ../../release_notes.rst:4280
msgid "Aqua 0.6"
msgstr ""

#: ../../release_notes.rst:2395
msgid "IBM Q Provider 0.4.6"
msgstr ""

#: ../../release_notes.rst:2400
msgid "Several new methods were added to :class:`IBMQBackend<qiskit.providers.ibmq.ibmqbackend.IBMQBackend>`:"
msgstr ""

#: ../../release_notes.rst:2403
msgid ":meth:`~qiskit.providers.ibmq.job.IBMQJob.wait_for_final_state` blocks until the job finishes. It takes a callback function that it will invoke after every query to provide feedback."
msgstr ""

#: ../../release_notes.rst:2406
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.active_jobs` returns the jobs submitted to a backend that are currently in an unfinished status."
msgstr ""

#: ../../release_notes.rst:2408
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.job_limit` returns the job limit for a backend."
msgstr ""

#: ../../release_notes.rst:2410
msgid ":meth:`~qiskit.providers.ibmq.ibmqbackend.IBMQBackend.remaining_jobs_count` returns the number of jobs that you can submit to the backend before job limit is reached."
msgstr ""

#: ../../release_notes.rst:2413
msgid ":class:`~qiskit.providers.ibmq.job.QueueInfo` now has a new :meth:`~qiskit.providers.ibmq.job.QueueInfo.format` method that returns a formatted string of the queue information."
msgstr ""

#: ../../release_notes.rst:2417
msgid ":class:`IBMQJob<qiskit.providers.ibmq.job.IBMQJob>` now has three new methods: :meth:`~qiskit.providers.ibmq.job.IBMQJob.done`, :meth:`~qiskit.providers.ibmq.job.IBMQJob.running`, and :meth:`~qiskit.providers.ibmq.job.IBMQJob.cancelled` that are used to indicate job status."
msgstr ""

#: ../../release_notes.rst:2422
msgid ":meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run()` now accepts an optional `job_tags` parameter. If specified, the `job_tags` are assigned to the job, which can later be used as a filter in :meth:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs()`."
msgstr ""

#: ../../release_notes.rst:2426
msgid ":class:`~qiskit.providers.ibmq.managed.IBMQJobManager` now has a new method :meth:`~qiskit.providers.ibmq.managed.IBMQJobManager.retrieve_job_set()` that allows you to retrieve a previously submitted job set using the job set ID."
msgstr ""

#: ../../release_notes.rst:2433
msgid "The ``Exception`` hierarchy has been refined with more specialized classes. You can, however, continue to catch their parent exceptions (such as ``IBMQAccountError``). Also, the exception class ``IBMQApiUrlError`` has been replaced by ``IBMQAccountCredentialsInvalidUrl`` and ``IBMQAccountCredentialsInvalidToken``."
msgstr ""

#: ../../release_notes.rst:2442
msgid "The use of proxy urls without a protocol (e.g. ``http://``) is deprecated due to recent Python changes."
msgstr ""

#: ../../release_notes.rst:2447
msgid "Qiskit 0.14.0"
msgstr ""

#: ../../release_notes.rst:2450
msgid "Terra 0.11.0"
msgstr ""

#: ../../release_notes.rst:2457
msgid "The 0.11.0 release includes several new features and bug fixes. The biggest change for this release is the addition of the pulse scheduler. This allows users to define their quantum program as a ``QuantumCircuit`` and then map it to the underlying pulse instructions that will control the quantum hardware to implement the circuit."
msgstr ""

#: ../../release_notes.rst:2468
msgid "Added 5 new commands to easily retrieve user-specific data from ``BackendProperties``: ``gate_property``, ``gate_error``, ``gate_length``, ``qubit_property``, ``t1``, ``t2``, ``readout_error`` and ``frequency``. They return the specific values of backend properties. For example::"
msgstr ""

#: ../../release_notes.rst:2486
msgid "Added method ``Instruction.is_parameterized()`` to check if an instruction object is parameterized. This method returns ``True`` if and only if instruction has a ``ParameterExpression`` or ``Parameter`` object for one of its params."
msgstr ""

#: ../../release_notes.rst:2491
msgid "Added a new analysis pass ``Layout2qDistance``. This pass allows to \"score\" a layout selection, once ``property_set['layout']`` is set.  The score will be the sum of distances for each two-qubit gate in the circuit, when they are not directly connected. This scoring does not consider direction in the coupling map. The lower the number, the better the layout selection is."
msgstr ""

#: ../../release_notes.rst:2497
msgid "For example, consider a linear coupling map ``[0]--[2]--[1]`` and the following circuit::"
msgstr ""

#: ../../release_notes.rst:2504
msgid "If the layout is ``{qr[0]:0, qr[1]:1}``, ``Layout2qDistance`` will set ``property_set['layout_score'] = 1``. If the layout is ``{qr[0]:0, qr[1]:2}``, then the result is ``property_set['layout_score'] = 0``. The lower the score, the better."
msgstr ""

#: ../../release_notes.rst:2509
msgid "Added ``qiskit.QuantumCircuit.cnot`` as an alias for the ``cx`` method of ``QuantumCircuit``. The names ``cnot`` and ``cx`` are often used interchangeably now the `cx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:2513
msgid "Added ``qiskit.QuantumCircuit.toffoli`` as an alias for the ``ccx`` method of ``QuantumCircuit``. The names ``toffoli`` and ``ccx`` are often used interchangeably now the `ccx` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:2517
msgid "Added ``qiskit.QuantumCircuit.fredkin`` as an alias for the ``cswap`` method of ``QuantumCircuit``. The names ``fredkin`` and ``cswap`` are often used interchangeably now the `cswap` method can be called with either name."
msgstr ""

#: ../../release_notes.rst:2522
msgid "The ``latex`` output mode for ``qiskit.visualization.circuit_drawer()`` and the ``qiskit.circuit.QuantumCircuit.draw()`` method now has a mode to passthrough raw latex from gate labels and parameters. The syntax for doing this mirrors matplotlib's `mathtext mode <https://matplotlib.org/tutorials/text/mathtext.html>`__ syntax. Any portion of a label string between a pair of '$' characters will be treated as raw latex and passed directly into the generated output latex. This can be leveraged to add more advanced formatting to circuit diagrams generated with the latex drawer."
msgstr ""

#: ../../release_notes.rst:2532
msgid "Prior to this release all gate labels were run through a utf8 -> latex conversion to make sure that the output latex would compile the string as expected. This is still what happens for all portions of a label outside the '$' pair. Also if you want to use a dollar sign in your label make sure you escape it in the label string (ie ``'\\$'``)."
msgstr ""

#: ../../release_notes.rst:2538
msgid "You can mix and match this passthrough with the utf8 -> latex conversion to create the exact label you want, for example::"
msgstr ""

#: ../../release_notes.rst:2549
msgid "will now render the first custom gate's label as ``α_gate``, the second will be ``α_gate`` with a 2 subscript, and the last custom gate's label will be ``$α$_gate``."
msgstr ""

#: ../../release_notes.rst:2553
msgid "Add ``ControlledGate`` class for representing controlled gates. Controlled gate instances are created with the ``control(n)`` method of ``Gate`` objects where ``n`` represents the number of controls. The control qubits come before the controlled qubits in the new gate. For example::"
msgstr ""

#: ../../release_notes.rst:2566
msgid "generates::"
msgstr ""

#: ../../release_notes.rst:2577
msgid "Allowed values of ``meas_level`` parameters and fields can now be a member from the `IntEnum` class ``qiskit.qobj.utils.MeasLevel``. This can be used when calling ``execute`` (or anywhere else ``meas_level`` is specified) with a pulse experiment. For example::"
msgstr ""

#: ../../release_notes.rst:2594
msgid "In this above example, ``meas_level=MeasLevel.CLASSIFIED`` and ``meas_level=2`` can be used interchangably now."
msgstr ""

#: ../../release_notes.rst:2597
msgid "A new layout selector based on constraint solving is included. `CSPLayout` models the problem of finding a layout as a constraint problem and uses recursive backtracking to solve it."
msgstr ""

#: ../../release_notes.rst:2626
msgid "The parameter ``CSPLayout(...,strict_direction=True)`` is more restrictive but it will guarantee there is no need of running ``CXDirection`` after."
msgstr ""

#: ../../release_notes.rst:2645
msgid "If the constraint system is not solvable, the `layout` property is not set."
msgstr ""

#: ../../release_notes.rst:2658
msgid "PulseBackendConfiguration (accessed normally as backend.configuration()) has been extended with useful methods to explore its data and the functionality that exists in PulseChannelSpec. PulseChannelSpec will be deprecated in the future. For example::"
msgstr ""

#: ../../release_notes.rst:2671
msgid "``PulseDefaults`` (accessed normally as ``backend.defaults()``) has an attribute, ``circuit_instruction_map`` which has the methods of CmdDef. The new `circuit_instruction_map` is an ``InstructionScheduleMap`` object with three new functions beyond what CmdDef had:"
msgstr ""

#: ../../release_notes.rst:2676
msgid "qubit_instructions(qubits) returns the operations defined for the qubits"
msgstr ""

#: ../../release_notes.rst:2677
msgid "assert_has(instruction, qubits) raises an error if the op isn't defined"
msgstr ""

#: ../../release_notes.rst:2678
msgid "remove(instruction, qubits) like pop, but doesn't require parameters"
msgstr ""

#: ../../release_notes.rst:2680
msgid "There are some differences from the CmdDef:"
msgstr ""

#: ../../release_notes.rst:2682
msgid "``__init__`` takes no arguments"
msgstr ""

#: ../../release_notes.rst:2683
msgid "``cmds`` and ``cmd_qubits`` are deprecated and replaced with ``instructions`` and ``qubits_with_instruction``"
msgstr ""

#: ../../release_notes.rst:2686
msgid "Example::"
msgstr ""

#: ../../release_notes.rst:2694
msgid "A new kwarg parameter, ``show_framechange_channels`` to optionally disable displaying channels with only framechange instructions in pulse visualizations was added to the ``qiskit.visualization.pulse_drawer()`` function and ``qiskit.pulse.Schedule.draw()`` method. When this new kwarg is set to ``False`` the output pulse schedule visualization will not include any channels that only include frame changes."
msgstr ""

#: ../../release_notes.rst:2721
msgid "A new utility function ``qiskit.result.marginal_counts()`` is added which allows marginalization of the counts over some indices of interest. This is useful when more qubits are measured than needed, and one wishes to get the observation counts for some subset of them only."
msgstr ""

#: ../../release_notes.rst:2726
msgid "When ``passmanager.run(...)`` is invoked with more than one circuit, the transpilation of these circuits will run in parallel."
msgstr ""

#: ../../release_notes.rst:2729
msgid "PassManagers can now be sliced to create a new PassManager containing a subset of passes using the square bracket operator. This allow running or drawing a portion of the PassManager for easier testing and visualization. For example let's try to draw the first 3 passes of a PassManager pm, or run just the second pass on our circuit:"
msgstr ""

#: ../../release_notes.rst:2740
msgid "Also now, PassManagers can be created by adding two PassManagers or by directly adding a pass/list of passes to a PassManager."
msgstr ""

#: ../../release_notes.rst:2748
msgid "A basic ``scheduler`` module has now been added to Qiskit. The `scheduler` schedules an input transpiled ``QuantumCircuit`` into a pulse ``Schedule``. The scheduler accepts as input a ``Schedule`` and either a pulse ``Backend``, or a ``CmdDef`` which relates circuit ``Instruction`` objects on specific qubits to pulse Schedules and a ``meas_map`` which determines which measurements must occur together."
msgstr ""

#: ../../release_notes.rst:2755
msgid "Scheduling example::"
msgstr ""

#: ../../release_notes.rst:2767
msgid "The scheduler currently supports two scheduling policies, `as_late_as_possible` (``alap``) and `as_soon_as_possible` (``asap``), which respectively schedule pulse instructions to occur as late as possible or as soon as possible across qubits in a circuit. The scheduling policy may be selected with the input argument ``method``, for example::"
msgstr ""

#: ../../release_notes.rst:2776
msgid "It is easy to use a pulse ``Schedule`` within a ``QuantumCircuit`` by mapping it to a custom circuit instruction such as a gate which may be used in a ``QuantumCircuit``. To do this, first, define the custom gate and then add an entry into the ``CmdDef`` for the gate, for each qubit that the gate will be applied to. The gate can then be used in the ``QuantumCircuit``. At scheduling time the gate will be mapped to the underlying pulse schedule. Using this technique allows easy integration with preexisting qiskit modules such as Ignis."
msgstr ""

#: ../../release_notes.rst:2815
msgid "The feature for transpiling in parallel when ``passmanager.run(...)`` is invoked with more than one circuit is not supported under Windows. See `#2988 <https://github.com/Qiskit/qiskit-terra/issues/2988>`__ for more details."
msgstr ""

#: ../../release_notes.rst:2826
msgid "The ``qiskit.pulse.channels.SystemTopology`` class was used as a helper class for ``PulseChannelSpec``. It has been removed since with the deprecation of ``PulseChannelSpec`` and changes to ``BackendConfiguration`` make it unnecessary."
msgstr ""

#: ../../release_notes.rst:2831
msgid "The previously deprecated representation of qubits and classical bits as tuple, which was deprecated in the 0.9 release, has been removed. The use of ``Qubit`` and ``Clbit`` objects is the new way to represent qubits and classical bits."
msgstr ""

#: ../../release_notes.rst:2836
msgid "The previously deprecated representation of the basis set as single string has been removed. A list of strings is the new preferred way."
msgstr ""

#: ../../release_notes.rst:2839
msgid "The method ``BaseModel.as_dict``, which was deprecated in the 0.9 release, has been removed in favor of the method ``BaseModel.to_dict``."
msgstr ""

#: ../../release_notes.rst:2842
msgid "In PulseDefaults (accessed normally as backend.defaults()), ``qubit_freq_est`` and ``meas_freq_est`` are now returned in Hz rather than GHz. This means the new return values are 1e9 * their previous value."
msgstr ""

#: ../../release_notes.rst:2846
msgid "`dill <https://pypi.org/project/dill/>`__ was added as a requirement. This is needed to enable running ``passmanager.run()`` in parallel for more than one circuit."
msgstr ""

#: ../../release_notes.rst:2850
msgid "The previously deprecated gate ``UBase``, which was deprecated in the 0.9 release, has been removed. The gate ``U3Gate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:2854
msgid "The previously deprecated gate ``CXBase``, which was deprecated in the 0.9 release, has been removed. The gate ``CnotGate`` should be used instead."
msgstr ""

#: ../../release_notes.rst:2858
msgid "The instruction ``snapshot`` used to implicitly convert the ``label`` parameter to string. That conversion has been removed and an error is raised if a string is not provided."
msgstr ""

#: ../../release_notes.rst:2862
msgid "The previously deprecated gate ``U0Gate``, which was deprecated in the 0.9 release, has been removed. The gate ``IdGate`` should be used instead to insert delays."
msgstr ""

#: ../../release_notes.rst:2872
msgid "The ``qiskit.pulse.CmdDef`` class has been deprecated. Instead you should use the ``qiskit.pulse.InstructionScheduleMap``. The ``InstructionScheduleMap`` object for a pulse enabled system can be accessed at ``backend.defaults().instruction_schedules``."
msgstr ""

#: ../../release_notes.rst:2877
msgid "``PulseChannelSpec`` is being deprecated. Use ``BackendConfiguration`` instead. The backend configuration is accessed normally as ``backend.configuration()``. The config has been extended with most of the functionality of PulseChannelSpec, with some modifications as follows, where `0` is an exemplary qubit index::"
msgstr ""

#: ../../release_notes.rst:2888
msgid "Now, if there is an attempt to get a channel for a qubit which does not exist for the device, a ``BackendConfigurationError`` will be raised with a helpful explanation."
msgstr ""

#: ../../release_notes.rst:2892
msgid "The methods ``memoryslots`` and ``registerslots`` of the PulseChannelSpec have not been migrated to the backend configuration. These classical resources are not restrained by the physical configuration of a backend system. Please instantiate them directly::"
msgstr ""

#: ../../release_notes.rst:2900
msgid "The ``qubits`` method is not migrated to backend configuration. The result of ``qubits`` can be built as such::"
msgstr ""

#: ../../release_notes.rst:2905
msgid "``Qubit`` within ``pulse.channels`` has been deprecated. They should not be used. It is possible to obtain channel <=> qubit mappings through the BackendConfiguration (or backend.configuration())."
msgstr ""

#: ../../release_notes.rst:2909
msgid "The function ``qiskit.visualization.circuit_drawer.qx_color_scheme()`` has been deprecated. This function is no longer used internally and doesn't reflect the current IBM QX style. If you were using this function to generate a style dict locally you must save the output from it and use that dictionary directly."
msgstr ""

#: ../../release_notes.rst:2915
msgid "The Exception ``TranspilerAccessError`` has been deprecated. An alternative function ``TranspilerError`` can be used instead to provide the same functionality. This alternative function provides the exact same functionality but with greater generality."
msgstr ""

#: ../../release_notes.rst:2920
msgid "Buffers in Pulse are deprecated. If a nonzero buffer is supplied, a warning will be issued with a reminder to use a Delay instead. Other options would include adding samples to a pulse instruction which are (0.+0.j) or setting the start time of the next pulse to ``schedule.duration + buffer``."
msgstr ""

#: ../../release_notes.rst:2925
msgid "Passing in ``sympy.Basic``, ``sympy.Expr`` and ``sympy.Matrix`` types as instruction parameters are deprecated and will be removed in a future release. You'll need to convert the input to one of the supported types which are:"
msgstr ""

#: ../../release_notes.rst:2942
msgid "The Collect2qBlocks and CommutationAnalysis passes in the transpiler had been unable to process circuits containing Parameterized gates, preventing Parameterized circuits from being transpiled at optimization_level 2 or above. These passes have been corrected to treat Parameterized gates as opaque."
msgstr ""

#: ../../release_notes.rst:2948
msgid "The align_measures function had an issue where Measure stimulus pulses weren't properly aligned with Acquire pulses, resulting in an error. This has been fixed."
msgstr ""

#: ../../release_notes.rst:2952
msgid "Uses of ``numpy.random.seed`` have been removed so that calls of qiskit functions do not affect results of future calls to ``numpy.random``"
msgstr ""

#: ../../release_notes.rst:2955
msgid "Fixed race condition occurring in the job monitor when ``job.queue_position()`` returns ``None``. ``None`` is a valid return from ``job.queue_position()``."
msgstr ""

#: ../../release_notes.rst:2959
msgid "Backend support for ``memory=True`` now checked when that kwarg is passed. ``QiskitError`` results if not supported."
msgstr ""

#: ../../release_notes.rst:2962
msgid "When transpiling without a coupling map, there were no check in the amount of qubits of the circuit to transpile. Now the transpile process checks that the backend has enough qubits to allocate the circuit."
msgstr ""

#: ../../release_notes.rst:2972
msgid "The ``qiskit.result.marginal_counts()`` function replaces a similar utility function in qiskit-ignis ``qiskit.ignis.verification.tomography.marginal_counts()``, which will be deprecated in a future qiskit-ignis release."
msgstr ""

#: ../../release_notes.rst:2977
msgid "All sympy parameter output type support have been been removed (or deprecated as noted) from qiskit-terra. This includes sympy type parameters in ``QuantumCircuit`` objects, qasm ast nodes, or ``Qobj`` objects."
msgstr ""

#: ../../release_notes.rst:2983 ../../release_notes.rst:3506
#: ../../release_notes.rst:4233
msgid "Aer 0.3"
msgstr ""

#: ../../release_notes.rst:2998
msgid "IBM Q Provider 0.4"
msgstr ""

#: ../../release_notes.rst:3003
msgid "The 0.4.0 release is the first release that makes use of all the features of the new IBM Q API. In particular, the ``IBMQJob`` class has been revamped in order to be able to retrieve more information from IBM Q, and a Job Manager class has been added for allowing a higher-level and more seamless usage of large or complex jobs. If you have not upgraded from the legacy IBM Q Experience or QConsole yet, please ensure to revisit the release notes for IBM Q Provider 0.3 (Qiskit 0.11) for more details on how to make the transition. The legacy accounts will no longer be supported as of this release."
msgstr ""

#: ../../release_notes.rst:3017
msgid "Job modifications"
msgstr ""

#: ../../release_notes.rst:3019
msgid "The ``IBMQJob`` class has been revised, and now mimics more closely to the contents of a remote job along with new features:"
msgstr ""

#: ../../release_notes.rst:3022
msgid "You can now assign a name to a job, by specifying ``IBMQBackend.run(..., job_name='...')`` when submitting a job. This name can be retrieved via ``IBMQJob.name()`` and can be used for filtering."
msgstr ""

#: ../../release_notes.rst:3025
msgid "Jobs can now be shared with other users at different levels (global, per hub, group or project) via an optional ``job_share_level`` parameter when submitting the job."
msgstr ""

#: ../../release_notes.rst:3028
msgid "``IBMQJob`` instances now have more attributes, reflecting the contents of the remote IBM Q jobs. This implies that new attributes introduced by the IBM Q API will automatically and immediately be available for use (for example, ``job.new_api_attribute``). The new attributes will be promoted to methods when they are considered stable (for example, ``job.name()``)."
msgstr ""

#: ../../release_notes.rst:3033
msgid "``.error_message()`` returns more information on why a job failed."
msgstr ""

#: ../../release_notes.rst:3034
msgid "``.queue_position()`` accepts a ``refresh`` parameter for forcing an update."
msgstr ""

#: ../../release_notes.rst:3035
msgid "``.result()`` accepts an optional ``partial`` parameter, for returning partial results, if any, of jobs that failed. Be aware that ``Result`` methods, such as ``get_counts()`` will raise an exception if applied on experiments that failed."
msgstr ""

#: ../../release_notes.rst:3040
msgid "Please note that the changes include some low-level modifications of the class. If you were creating the instances manually, note that:"
msgstr ""

#: ../../release_notes.rst:3043
msgid "the signature of the constructor has changed to account for the new features."
msgstr ""

#: ../../release_notes.rst:3044
msgid "the ``.submit()`` method can no longer be called directly, and jobs are expected to be submitted either via the synchronous ``IBMQBackend.run()`` or via the Job Manager."
msgstr ""

#: ../../release_notes.rst:3049
msgid "Job Manager"
msgstr ""

#: ../../release_notes.rst:3051
msgid "A new Job Manager (``IBMQJobManager``) has been introduced, as a higher-level mechanism for handling jobs composed of multiple circuits or pulse schedules. The Job Manager aims to provide a transparent interface, intelligently splitting the input into efficient units of work and taking full advantage of the different components. It will be expanded on upcoming versions, and become the recommended entry point for job submission."
msgstr ""

#: ../../release_notes.rst:3058
msgid "Its ``.run()`` method receives a list of circuits or pulse schedules, and returns a ``ManagedJobSet instance``, which can then be used to track the statuses and results of these jobs. For example::"
msgstr ""

#: ../../release_notes.rst:3086
msgid "provider.backends modifications"
msgstr ""

#: ../../release_notes.rst:3088
msgid "The ``provider.backends`` member, which was previously a function that returned a list of backends, has been promoted to a service. This implies that it can be used both in the previous way, as a ``.backends()`` method, and also as a ``.backends`` attribute with expanded capabilities:"
msgstr ""

#: ../../release_notes.rst:3093
msgid "it contains the existing backends from that provider as attributes, which can be used for autocompletion. For example::"
msgstr ""

#: ../../release_notes.rst:3098
msgid "is equivalent to::"
msgstr ""

#: ../../release_notes.rst:3102
msgid "the ``provider.backends.jobs()`` and ``provider.backends.retrieve_job()`` methods can be used for retrieving provider-wide jobs."
msgstr ""

#: ../../release_notes.rst:3107
msgid "Other changes"
msgstr ""

#: ../../release_notes.rst:3109
msgid "The ``backend.properties()`` function now accepts an optional ``datetime`` parameter. If specified, the function returns the backend properties closest to, but older than, the specified datetime filter."
msgstr ""

#: ../../release_notes.rst:3112
msgid "Some ``warnings`` have been toned down to ``logger.warning`` messages."
msgstr ""

#: ../../release_notes.rst:3117
msgid "Qiskit 0.13.0"
msgstr ""

#: ../../release_notes.rst:3120
msgid "Terra 0.10.0"
msgstr ""

#: ../../release_notes.rst:3127
msgid "The 0.10.0 release includes several new features and bug fixes. The biggest change for this release is the addition of initial support for using Qiskit with trapped ion trap backends."
msgstr ""

#: ../../release_notes.rst:3137
msgid "Introduced new methods in ``QuantumCircuit`` which allows the seamless adding or removing of measurements at the end of a circuit."
msgstr ""

#: ../../release_notes.rst:3143
msgid "``measure_all()``"
msgstr ""

#: ../../release_notes.rst:3141
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all qubits in the circuit. Creates a ``ClassicalRegister`` of size equal to the number of qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:3149
msgid "``measure_active()``"
msgstr ""

#: ../../release_notes.rst:3146
msgid "Adds a ``barrier`` followed by a ``measure`` operation to all active qubits in the circuit. A qubit is active if it has at least one other operation acting upon it. Creates a ``ClassicalRegister`` of size equal to the number of active qubits in the circuit, which store the measurements."
msgstr ""

#: ../../release_notes.rst:3156
msgid "``remove_final_measurements()``"
msgstr ""

#: ../../release_notes.rst:3152
msgid "Removes all final measurements and preceeding ``barrier`` from a circuit. A measurement is considered \"final\" if it is not followed by any other operation, excluding barriers and other measurements. After the measurements are removed, if all of the classical bits in the ``ClassicalRegister`` are idle (have no operations attached to them), then the ``ClassicalRegister`` is removed."
msgstr ""

#: ../../release_notes.rst:3158
msgid "Examples::"
msgstr ""

#: ../../release_notes.rst:3219
msgid "Initial support for executing experiments on ion trap backends has been added."
msgstr ""

#: ../../release_notes.rst:3222
msgid "An Rxx gate (rxx) and a global Mølmer–Sørensen gate (ms) have been added to the standard gate set."
msgstr ""

#: ../../release_notes.rst:3225
msgid "A Cnot to Rxx/Rx/Ry decomposer ``cnot_rxx_decompose`` and a single qubit Euler angle decomposer ``OneQubitEulerDecomposer`` have been added to the ``quantum_info.synthesis`` module."
msgstr ""

#: ../../release_notes.rst:3229
msgid "A transpiler pass ``MSBasisDecomposer`` has been added to unroll circuits defined over U3 and Cnot gates into a circuit defined over Rxx,Ry and Rx. This pass will be included in preset pass managers for backends which include the 'rxx' gate in their supported basis gates."
msgstr ""

#: ../../release_notes.rst:3234
msgid "The backends in ``qiskit.test.mock`` now contain a snapshot of real device calibration data. This is accessible via the ``properties()`` method for each backend. This can be used to test any code that depends on backend properties, such as noise-adaptive transpiler passes or device noise models for simulation. This will create a faster testing and development cycle without the need to go to live backends."
msgstr ""

#: ../../release_notes.rst:3241
msgid "Allows the Result class to return partial results. If a valid result schema is loaded that contains some experiments which succeeded and some which failed, this allows accessing the data from experiments that succeeded, while raising an exception for experiments that failed and displaying the appropriate error message for the failed results."
msgstr ""

#: ../../release_notes.rst:3247
msgid "An ``ax`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:3249
msgid "``qiskit.visualization.plot_histogram``"
msgstr ""

#: ../../release_notes.rst:3250
msgid "``qiskit.visualization.plot_state_paulivec``"
msgstr ""

#: ../../release_notes.rst:3251
msgid "``qiskit.visualization.plot_state_qsphere``"
msgstr ""

#: ../../release_notes.rst:3252
msgid "``qiskit.visualization.circuit_drawer`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:3253
msgid "``qiskit.QuantumCircuit.draw`` (``mpl`` backend only)"
msgstr ""

#: ../../release_notes.rst:3255
msgid "This kwarg is used to pass in a ``matplotlib.axes.Axes`` object to the visualization functions. This enables integrating these visualization functions into a larger visualization workflow. Also, if an `ax` kwarg is specified then there is no return from the visualization functions."
msgstr ""

#: ../../release_notes.rst:3260
msgid "An ``ax_real`` and ``ax_imag`` kwarg has been added to the following visualization functions:"
msgstr ""

#: ../../release_notes.rst:3263
msgid "``qiskit.visualization.plot_state_hinton``"
msgstr ""

#: ../../release_notes.rst:3264
msgid "``qiskit.visualization.plot_state_city``"
msgstr ""

#: ../../release_notes.rst:3266
msgid "These new kargs work the same as the newly added ``ax`` kwargs for other visualization functions. However because these plots use two axes (one for the real component, the other for the imaginary component). Having two kwargs also provides the flexibility to only generate a visualization for one of the components instead of always doing both. For example::"
msgstr ""

#: ../../release_notes.rst:3279
msgid "will only generate a plot of the real component."
msgstr ""

#: ../../release_notes.rst:3281
msgid "A given pass manager now can be edited with the new method `replace`. This method allows to replace a particular stage in a pass manager, which can be handy when dealing with preset pass managers. For example, let's edit the layout selector of the pass manager used at optimization level 0:"
msgstr ""

#: ../../release_notes.rst:3302
msgid "The layout selection is set in the stage `[1]`. Let's replace it with `DenseLayout`:"
msgstr ""

#: ../../release_notes.rst:3318
msgid "If you want to replace it without any condition, you can use set-item shortcut:"
msgstr ""

#: ../../release_notes.rst:3332 ../../release_notes.rst:3817
msgid "Introduced a new pulse command ``Delay`` which may be inserted into a pulse ``Schedule``. This command accepts a ``duration`` and may be added to any ``Channel``. Other commands may not be scheduled on a channel during a delay."
msgstr ""

#: ../../release_notes.rst:3336 ../../release_notes.rst:3821
msgid "The delay can be added just like any other pulse command. For example::"
msgstr ""

#: ../../release_notes.rst:3357
msgid "One may also pass additional channels to be padded and a time to pad until, for example::"
msgstr ""

#: ../../release_notes.rst:3386
msgid "Assignments and modifications to the ``data`` attribute of ``qiskit.QuantumCircuit`` objects are now validated following the same rules used throughout the ``QuantumCircuit`` API. This was done to improve the performance of the circuits API since we can now assume the ``data`` attribute is in a known format. If you were manually modifying the ``data`` attribute of a circuit object before this may no longer work if your modifications resulted in an data structure other than the list of instructions with context in the format ``[(instruction, qargs, cargs)]``"
msgstr ""

#: ../../release_notes.rst:3395
msgid "The transpiler default passmanager for optimization level 2 now uses the ``DenseLayout`` layout selection mechanism by default instead of ``NoiseAdaptiveLayout``. The ``Denselayout`` pass has also been modified to be made noise-aware."
msgstr ""

#: ../../release_notes.rst:3400
msgid "The deprecated ``DeviceSpecification`` class has been removed. Instead you should use the ``PulseChannelSpec``. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:3407
msgid "The deprecated module ``qiskit.pulse.ops`` has been removed. Use ``Schedule`` and ``Instruction`` methods directly. For example, rather than::"
msgstr ""

#: ../../release_notes.rst:3414
msgid "Instead please use::"
msgstr ""

#: ../../release_notes.rst:3419
msgid "This same pattern applies to other ``ops`` functions: ``insert``, ``shift``, ``append``, and ``flatten``."
msgstr ""

#: ../../release_notes.rst:3428
msgid "Using the ``control`` property of ``qiskit.circuit.Instruction`` for classical control is now deprecated. In the future this property will be used for quantum control. Classically conditioned operations will instead be handled by the ``condition`` property of ``qiskit.circuit.Instruction``."
msgstr ""

#: ../../release_notes.rst:3433
msgid "Support for setting ``qiskit.circuit.Instruction`` parameters with an object of type ``qiskit.qasm.node.Node`` has been deprecated. ``Node`` objects that were previously used as parameters should be converted to a supported type prior to initializing a new ``Instruction`` object or calling the ``Instruction.params`` setter. Supported types are ``int``, ``float``, ``complex``, ``str``, ``qiskit.circuit.ParameterExpression``, or ``numpy.ndarray``."
msgstr ""

#: ../../release_notes.rst:3441
msgid "In the qiskit 0.9.0 release the representation of bits (both qubits and classical bits) changed from tuples of the form ``(register, index)`` to be instances of the classes ``qiskit.circuit.Qubit`` and ``qiskit.circuit.Clbit``. For backwards compatibility comparing the equality between a legacy tuple and the bit classes was supported as everything transitioned from tuples to being objects. This support is now deprecated and will be removed in the future. Everything should use the bit classes instead of tuples moving forward."
msgstr ""

#: ../../release_notes.rst:3450
msgid "When the ``mpl`` output is used for either ``qiskit.QuantumCircuit.draw()`` or ``qiskit.visualization.circuit_drawer()`` and the ``style`` kwarg is used, passing in unsupported dictionary keys as part of the ``style``` dictionary is now deprecated. Where these unknown arguments were previously silently ignored, in the future, unsupported keys will raise an exception."
msgstr ""

#: ../../release_notes.rst:3456
msgid "The ``line length`` kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function with the text output mode is deprecated. It has been replaced by the ``fold`` kwarg which will behave identically for the text output mode (but also now supports the mpl output mode too). ``line_length`` will be removed in a future release so calls should be updated to use ``fold`` instead."
msgstr ""

#: ../../release_notes.rst:3463
msgid "The ``fold`` field in the ``style`` dict kwarg for the ``qiskit.QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function has been deprecated. It has been replaced by the ``fold`` kwarg on both functions. This kwarg behaves identically to the field in the style dict."
msgstr ""

#: ../../release_notes.rst:3475
msgid "Instructions layering which underlies all types of circuit drawing has changed to address right/left justification. This sometimes results in output which is topologically equivalent to the rendering in prior versions but visually different than previously rendered. Fixes `issue #2802 <https://github.com/Qiskit/qiskit-terra/issues/2802>`_"
msgstr ""

#: ../../release_notes.rst:3481
msgid "Add ``memory_slots`` to ``QobjExperimentHeader`` of pulse Qobj. This fixes a bug in the data format of ``meas_level=2`` results of pulse experiments. Measured quantum states are returned as a bit string with zero padding based on the number set for ``memory_slots``."
msgstr ""

#: ../../release_notes.rst:3486
msgid "Fixed the visualization of the rzz gate in the latex circuit drawer to match the cu1 gate to reflect the symmetry in the rzz gate. The fix is based on the cds command of the qcircuit latex package. Fixes `issue #1957 <https://github.com/Qiskit/qiskit-terra/issues/1957>`_"
msgstr ""

#: ../../release_notes.rst:3497
msgid "``matplotlib.figure.Figure`` objects returned by visualization functions are no longer always closed by default. Instead the returned figure objects are only closed if the configured matplotlib backend is an inline jupyter backend(either set with ``%matplotlib inline`` or ``%matplotlib notebook``). Output figure objects are still closed with these backends to avoid duplicate outputs in jupyter notebooks (which is why the ``Figure.close()`` were originally added)."
msgstr ""

#: ../../release_notes.rst:3521 ../../release_notes.rst:4373
#: ../../release_notes.rst:4407 ../../release_notes.rst:4457
msgid "IBM Q Provider 0.3"
msgstr ""

#: ../../release_notes.rst:3527
msgid "Qiskit 0.12.0"
msgstr ""

#: ../../release_notes.rst:3532
msgid "Terra 0.9"
msgstr ""

#: ../../release_notes.rst:3539
msgid "The 0.9 release includes many new features and many bug fixes. The biggest changes for this release are new debugging capabilities for PassManagers. This includes a function to visualize a PassManager, the ability to add a callback function to a PassManager, and logging of passes run in the PassManager. Additionally, this release standardizes the way that you can set an initial layout for your circuit. So now you can leverage ``initial_layout`` the kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` and the qubits in the circuit will get laid out on the desire qubits on the device. Visualization of circuits will now also show this clearly when visualizing a circuit that has been transpiled with a layout."
msgstr ""

#: ../../release_notes.rst:3555
msgid "A ``DAGCircuit`` object (i.e. the graph representation of a QuantumCircuit where operation dependencies are explicit) can now be visualized with the ``.draw()`` method. This is in line with Qiskit's philosophy of easy visualization. Other objects which support a ``.draw()`` method are ``QuantumCircuit``, ``PassManager``, and ``Schedule``."
msgstr ""

#: ../../release_notes.rst:3561
msgid "Added a new visualization function ``qiskit.visualization.plot_error_map()`` to plot the error map for a given backend. It takes in a backend object from the qiskit-ibmq-provider and will plot the current error map for that device."
msgstr ""

#: ../../release_notes.rst:3566
msgid "Both ``qiskit.QuantumCircuit.draw()`` and ``qiskit.visualization.circuit_drawer()`` now support annotating the qubits in the visualization with layout information. If the ``QuantumCircuit`` object being drawn includes layout metadata (which is normally only set on the circuit output from ``transpile()`` calls) then by default that layout will be shown on the diagram. This is done for all circuit drawer backends. For example::"
msgstr ""

#: ../../release_notes.rst:3595
msgid "will yield a diagram like::"
msgstr ""

#: ../../release_notes.rst:3630
msgid "If you do not want the layout to be shown on transpiled circuits (or any other circuits with a layout set) there is a new boolean kwarg for both functions, ``with_layout`` (which defaults ``True``), which when set ``False`` will disable the layout annotation in the output circuits."
msgstr ""

#: ../../release_notes.rst:3635
msgid "A new analysis pass ``CountOpsLongest`` was added to retrieve the number of operations on the longest path of the DAGCircuit. When used it will add a ``count_ops_longest_path`` key to the property set dictionary. You can add it to your a passmanager with something like::"
msgstr ""

#: ../../release_notes.rst:3647
msgid "and then access the longest path via the property set value with something like::"
msgstr ""

#: ../../release_notes.rst:3655
msgid "which will set a condition on that pass based on the longest path."
msgstr ""

#: ../../release_notes.rst:3657
msgid "Two new functions, ``sech()`` and ``sech_deriv()`` were added to the pulse library module ``qiskit.pulse.pulse_lib`` for creating an unnormalized hyperbolic secant ``SamplePulse`` object and an unnormalized hyperbolic secant derviative ``SamplePulse`` object resepctively."
msgstr ""

#: ../../release_notes.rst:3662
msgid "A new kwarg option ``vertical_compression`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. This option only works with the ``text`` backend. This option can be set to either ``high``, ``medium`` (the default), or ``low`` to adjust how much vertical space is used by the output visualization."
msgstr ""

#: ../../release_notes.rst:3669
msgid "A new kwarg boolean option ``idle_wires`` was added to the ``QuantumCircuit.draw()`` method and the ``qiskit.visualization.circuit_drawer()`` function. It works for all drawer backends. When ``idle_wires`` is set False in a drawer call the drawer will not draw any bits that do not have any circuit elements in the output quantum circuit visualization."
msgstr ""

#: ../../release_notes.rst:3676
msgid "A new PassManager visualizer function ``qiskit.visualization.pass_mamanger_drawer()`` was added. This function takes in a PassManager object and will generate a flow control diagram of all the passes run in the PassManager."
msgstr ""

#: ../../release_notes.rst:3681
msgid "When creating a PassManager you can now specify a callback function that if specified will be run after each pass is executed. This function gets passed a set of kwargs on each call with the state of the pass manager after each pass execution. Currently these kwargs are:"
msgstr ""

#: ../../release_notes.rst:3686
msgid "``pass_`` (``Pass``): the pass being run"
msgstr ""

#: ../../release_notes.rst:3687
msgid "``dag`` (``DAGCircuit``): the dag output of the pass"
msgstr ""

#: ../../release_notes.rst:3688
msgid "``time`` (``float``): the time to execute the pass"
msgstr ""

#: ../../release_notes.rst:3689
msgid "``property_set`` (``PropertySet``): the property set"
msgstr ""

#: ../../release_notes.rst:3690
msgid "``count`` (``int``): the index for the pass execution"
msgstr ""

#: ../../release_notes.rst:3692
msgid "However, it's worth noting that while these arguments are set for the 0.9 release they expose the internals of the pass manager and are subject to change in future release."
msgstr ""

#: ../../release_notes.rst:3696
msgid "For example you can use this to create a callback function that will visualize the circuit output after each pass is executed::"
msgstr ""

#: ../../release_notes.rst:3706
msgid "Additionally you can specify the callback function when using ``qiskit.compiler.transpile()``::"
msgstr ""

#: ../../release_notes.rst:3716
msgid "A new method ``filter()`` was added to the ``qiskit.pulse.Schedule`` class. This enables filtering the instructions in a schedule. For example, filtering by instruction type::"
msgstr ""

#: ../../release_notes.rst:3730
msgid "Additional decomposition methods for several types of gates. These methods will use different decomposition techniques to break down a gate into a sequence of CNOTs and single qubit gates. The following methods are added:"
msgstr ""

#: ../../release_notes.rst:3736
msgid "Method"
msgstr ""

#: ../../release_notes.rst:3736
msgid "Description"
msgstr ""

#: ../../release_notes.rst:3738
msgid "``QuantumCircuit.iso()``"
msgstr ""

#: ../../release_notes.rst:3738
msgid "Add an arbitrary isometry from m to n qubits to a circuit. This allows for attaching arbitrary unitaries on n qubits (m=n) or to prepare any state of n qubits (m=0)"
msgstr ""

#: ../../release_notes.rst:3744
msgid "``QuantumCircuit.diag_gate()``"
msgstr ""

#: ../../release_notes.rst:3744
msgid "Add a diagonal gate to the circuit"
msgstr ""

#: ../../release_notes.rst:3746
msgid "``QuantumCircuit.squ()``"
msgstr ""

#: ../../release_notes.rst:3746
msgid "Decompose an arbitrary 2x2 unitary into three rotation gates and add to a circuit"
msgstr ""

#: ../../release_notes.rst:3750
msgid "``QuantumCircuit.ucg()``"
msgstr ""

#: ../../release_notes.rst:3750
msgid "Attach an uniformly controlled gate (also called a multiplexed gate) to a circuit"
msgstr ""

#: ../../release_notes.rst:3754
msgid "``QuantumCircuit.ucx()``"
msgstr ""

#: ../../release_notes.rst:3754
msgid "Attach a uniformly controlled (also called multiplexed) Rx rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:3758
msgid "``QuantumCircuit.ucy()``"
msgstr ""

#: ../../release_notes.rst:3758
msgid "Attach a uniformly controlled (also called multiplexed) Ry rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:3762
msgid "``QuantumCircuit.ucz()``"
msgstr ""

#: ../../release_notes.rst:3762
msgid "Attach a uniformly controlled (also called multiplexed) Rz rotation gate to a circuit"
msgstr ""

#: ../../release_notes.rst:3767
msgid "Addition of Gray-Synth and Patel–Markov–Hayes algorithms for synthesis of CNOT-Phase and CNOT-only linear circuits. These functions allow the synthesis of circuits that consist of only CNOT gates given a linear function or a circuit that consists of only CNOT and phase gates given a matrix description."
msgstr ""

#: ../../release_notes.rst:3773
msgid "A new function ``random_circuit`` was added to the ``qiskit.circuit.random`` module. This function will generate a random circuit of a specified size by randomly selecting different gates and adding them to the circuit. For example, you can use this to generate a 5 qubit circuit with a depth of 10 using::"
msgstr ""

#: ../../release_notes.rst:3783
msgid "A new kwarg ``output_names`` was added to the ``qiskit.compiler.transpile()`` function. This kwarg takes in a string or a list of strings and uses those as the value of the circuit name for the output circuits that get returned by the ``transpile()`` call. For example::"
msgstr ""

#: ../../release_notes.rst:3794
msgid "the ``name`` attribute on tcirc_a and tcirc_b will be ``'Circuit A'`` and ``'Circuit B'`` respectively."
msgstr ""

#: ../../release_notes.rst:3797
msgid "A new method ``equiv()`` was added to the ``qiskit.quantum_info.Operator`` and ``qiskit.quantum_info.Statevector`` classes. These methods are used to check whether a second ``Operator`` object or ``Statevector`` is equivalent up to global phase."
msgstr ""

#: ../../release_notes.rst:3802
msgid "The user config file has several new options:"
msgstr ""

#: ../../release_notes.rst:3804
msgid "The ``circuit_drawer`` field now accepts an `auto` value. When set as the value for the ``circuit_drawer`` field the default drawer backend will be `mpl` if it is available, otherwise the `text` backend will be used."
msgstr ""

#: ../../release_notes.rst:3808
msgid "A new field ``circuit_mpl_style`` can be used to set the default style used by the matplotlib circuit drawer. Valid values for this field are ``bw`` and ``default`` to set the default to a black and white or the default color style respectively."
msgstr ""

#: ../../release_notes.rst:3812
msgid "A new field ``transpile_optimization_level`` can be used to set the default transpiler optimization level to use for calls to ``qiskit.compiler.transpile()``. The value can be set to either 0, 1, 2, or 3."
msgstr ""

#: ../../release_notes.rst:3837
msgid "The previously deprecated ``qiskit._util`` module has been removed. ``qiskit.util`` should be used instead."
msgstr ""

#: ../../release_notes.rst:3840
msgid "The ``QuantumCircuit.count_ops()`` method now returns an ``OrderedDict`` object instead of a ``dict``. This should be compatible for most use cases since ``OrderedDict`` is a ``dict`` subclass. However type checks and other class checks might need to be updated."
msgstr ""

#: ../../release_notes.rst:3845
msgid "The ``DAGCircuit.width()`` method now returns the total number quantum bits and classical bits. Before it would only return the number of quantum bits. If you require just the number of quantum bits you can use ``DAGCircuit.num_qubits()`` instead."
msgstr ""

#: ../../release_notes.rst:3850
msgid "The function ``DAGCircuit.num_cbits()`` has been removed. Instead you can use ``DAGCircuit.num_clbits()``."
msgstr ""

#: ../../release_notes.rst:3853
msgid "Individual quantum bits and classical bits are no longer represented as ``(register, index)`` tuples. They are now instances of `Qubit` and `Clbit` classes. If you're dealing with individual bits make sure that you update any usage or type checks to look for these new classes instead of tuples."
msgstr ""

#: ../../release_notes.rst:3859
msgid "The preset passmanager classes ``qiskit.transpiler.preset_passmanagers.default_pass_manager`` and ``qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator`` (which were the previous default pass managers for ``qiskit.compiler.transpile()`` calls) have been removed. If you were manually using this pass managers switch to the new default, ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:3867
msgid "The ``LegacySwap`` pass has been removed. If you were using it in a custom pass manager, it's usage can be replaced by the ``StochasticSwap`` pass, which is a faster more stable version. All the preset passmanagers have been updated to use ``StochasticSwap`` pass instead of the ``LegacySwap``."
msgstr ""

#: ../../release_notes.rst:3872
msgid "The following deprecated ``qiskit.dagcircuit.DAGCircuit`` methods have been removed:"
msgstr ""

#: ../../release_notes.rst:3875
msgid "``DAGCircuit.get_qubits()`` - Use ``DAGCircuit.qubits()`` instead"
msgstr ""

#: ../../release_notes.rst:3876
msgid "``DAGCircuit.get_bits()`` - Use ``DAGCircuit.clbits()`` instead"
msgstr ""

#: ../../release_notes.rst:3877
msgid "``DAGCircuit.qasm()`` - Use a combination of ``qiskit.converters.dag_to_circuit()`` and ``QuantumCircuit.qasm()``. For example::"
msgstr ""

#: ../../release_notes.rst:3886
msgid "``DAGCircuit.get_op_nodes()`` - Use ``DAGCircuit.op_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``op_nodes()`` instead of the list of tuples previously returned by ``get_op_nodes()``."
msgstr ""

#: ../../release_notes.rst:3890
msgid "``DAGCircuit.get_gate_nodes()`` - Use ``DAGCircuit.gate_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``gate_nodes()`` instead of the list of tuples previously returned by ``get_gate_nodes()``."
msgstr ""

#: ../../release_notes.rst:3894
msgid "``DAGCircuit.get_named_nodes()`` - Use ``DAGCircuit.named_nodes()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``named_nodes()`` instead of the list of node_ids previously returned by ``get_named_nodes()``."
msgstr ""

#: ../../release_notes.rst:3898
msgid "``DAGCircuit.get_2q_nodes()`` - Use ``DAGCircuit.twoQ_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``twoQ_gates()`` instead of the list of data_dicts previously returned by ``get_2q_nodes()``."
msgstr ""

#: ../../release_notes.rst:3902
msgid "``DAGCircuit.get_3q_or_more_nodes()`` - Use ``DAGCircuit.threeQ_or_more_gates()`` instead. Note that the return type is a list of ``DAGNode`` objects for ``threeQ_or_more_gates()`` instead of the list of tuples previously returned by ``get_3q_or_more_nodes()``."
msgstr ""

#: ../../release_notes.rst:3907
msgid "The following ``qiskit.dagcircuit.DAGCircuit`` methods had deprecated support for accepting a ``node_id`` as a parameter. This has been removed and now only ``DAGNode`` objects are accepted as input:"
msgstr ""

#: ../../release_notes.rst:3911
msgid "``successors()``"
msgstr ""

#: ../../release_notes.rst:3912
msgid "``predecessors()``"
msgstr ""

#: ../../release_notes.rst:3913
msgid "``ancestors()``"
msgstr ""

#: ../../release_notes.rst:3914
msgid "``descendants()``"
msgstr ""

#: ../../release_notes.rst:3915
msgid "``bfs_successors()``"
msgstr ""

#: ../../release_notes.rst:3916
msgid "``quantum_successors()``"
msgstr ""

#: ../../release_notes.rst:3917
msgid "``remove_op_node()``"
msgstr ""

#: ../../release_notes.rst:3918
msgid "``remove_ancestors_of()``"
msgstr ""

#: ../../release_notes.rst:3919
msgid "``remove_descendants_of()``"
msgstr ""

#: ../../release_notes.rst:3920
msgid "``remove_nonancestors_of()``"
msgstr ""

#: ../../release_notes.rst:3921
msgid "``remove_nondescendants_of()``"
msgstr ""

#: ../../release_notes.rst:3922
msgid "``substitute_node_with_dag()``"
msgstr ""

#: ../../release_notes.rst:3924
msgid "The ``qiskit.dagcircuit.DAGCircuit`` method ``rename_register()`` has been removed. This was unused by all the qiskit code. If you were relying on it externally you'll have to re-implement is an external function."
msgstr ""

#: ../../release_notes.rst:3928
msgid "The ``qiskit.dagcircuit.DAGCircuit`` property ``multi_graph`` has been removed. Direct access to the underlying ``networkx`` ``multi_graph`` object isn't supported anymore. The API provided by the ``DAGCircuit`` class should be used instead."
msgstr ""

#: ../../release_notes.rst:3933
msgid "The deprecated exception class ``qiskit.qiskiterror.QiskitError`` has been removed. Instead you should use ``qiskit.exceptions.QiskitError``."
msgstr ""

#: ../../release_notes.rst:3936
msgid "The boolean kwargs, ``ignore_requires`` and ``ignore_preserves`` from the ``qiskit.transpiler.PassManager`` constructor have been removed. These are no longer valid options."
msgstr ""

#: ../../release_notes.rst:3940
msgid "The module ``qiskit.tools.logging`` has been removed. This module was not used by anything and added nothing over the interfaces that Python's standard library ``logging`` module provides. If you want to set a custom formatter for logging use the standard library ``logging`` module instead."
msgstr ""

#: ../../release_notes.rst:3945
msgid "The ``CompositeGate`` class has been removed. Instead you should directly create a instruction object from a circuit and append that to your circuit. For example, you can run something like::"
msgstr ""

#: ../../release_notes.rst:3955
msgid "The previously deprecated kwargs, ``seed`` and ``config`` for ``qiskit.compiler.assemble()`` have been removed use ``seed_simulator`` and ``run_config`` respectively instead."
msgstr ""

#: ../../release_notes.rst:3959
msgid "The previously deprecated converters ``qiskit.converters.qobj_to_circuits()`` and ``qiskit.converters.circuits_to_qobj()`` have been removed. Use ``qiskit.assembler.disassemble()`` and ``qiskit.compiler.assemble()`` respectively instead."
msgstr ""

#: ../../release_notes.rst:3965
msgid "The previously deprecated kwarg ``seed_mapper`` for ``qiskit.compiler.transpile()`` has been removed. Instead you should use ``seed_transpiler``"
msgstr ""

#: ../../release_notes.rst:3969
msgid "The previously deprecated kwargs ``seed``, ``seed_mapper``, ``config``, and ``circuits`` for the ``qiskit.execute()`` function have been removed. Use ``seed_simulator``, ``seed_transpiler``, ``run_config``, and ``experiments`` arguments respectively instead."
msgstr ""

#: ../../release_notes.rst:3974
msgid "The previously deprecated ``qiskit.tools.qcvv`` module has been removed use qiskit-ignis instead."
msgstr ""

#: ../../release_notes.rst:3977
msgid "The previously deprecated functions ``qiskit.transpiler.transpile()`` and ``qiskit.transpiler.transpile_dag()`` have been removed. Instead you should use ``qiskit.compiler.transpile``. If you were using ``transpile_dag()`` this can be replaced by running::"
msgstr ""

#: ../../release_notes.rst:3986
msgid "The previously deprecated function ``qiskit.compile()`` has been removed instead you should use ``qiskit.compiler.transpile()`` and ``qiskit.compiler.assemble()``."
msgstr ""

#: ../../release_notes.rst:3990
#, python-format
msgid "The jupyter cell magic ``%%qiskit_progress_bar`` from ``qiskit.tools.jupyter`` has been changed to a line magic. This was done to better reflect how the magic is used and how it works. If you were using the ``%%qiskit_progress_bar`` cell magic in an existing notebook, you will have to update this to be a line magic by changing it to be ``%qiskit_progress_bar`` instead. Everything else should behave identically."
msgstr ""

#: ../../release_notes.rst:3998
msgid "The deprecated function ``qiskit.tools.qi.qi.random_unitary_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_unitary()`` function instead."
msgstr ""

#: ../../release_notes.rst:4002
msgid "The deprecated function ``qiskit.tools.qi.qi.random_density_matrix()`` has been removed. You should use the ``qiskit.quantum_info.random.random_density_matrix()`` function instead."
msgstr ""

#: ../../release_notes.rst:4007
msgid "The deprecated function ``qiskit.tools.qi.qi.purity()`` has been removed. You should the ``qiskit.quantum_info.purity()`` function instead."
msgstr ""

#: ../../release_notes.rst:4010
msgid "The deprecated ``QuantumCircuit._attach()`` method has been removed. You should use ``QuantumCircuit.append()`` instead."
msgstr ""

#: ../../release_notes.rst:4013
msgid "The ``qiskit.qasm.Qasm`` method ``get_filename()`` has been removed. You can use the ``return_filename()`` method instead."
msgstr ""

#: ../../release_notes.rst:4016
msgid "The deprecated ``qiskit.mapper`` module has been removed. The list of functions and classes with their alternatives are:"
msgstr ""

#: ../../release_notes.rst:4019
msgid "``qiskit.mapper.CouplingMap``: ``qiskit.transpiler.CouplingMap`` should be used instead."
msgstr ""

#: ../../release_notes.rst:4021
msgid "``qiskit.mapper.Layout``: ``qiskit.transpiler.Layout`` should be used instead"
msgstr ""

#: ../../release_notes.rst:4023
msgid "``qiskit.mapper.compiling.euler_angles_1q()``: ``qiskit.quantum_info.synthesis.euler_angles_1q()`` should be used instead"
msgstr ""

#: ../../release_notes.rst:4026
msgid "``qiskit.mapper.compiling.two_qubit_kak()``: ``qiskit.quantum_info.synthesis.two_qubit_cnot_decompose()`` should be used instead."
msgstr ""

#: ../../release_notes.rst:4030
msgid "The deprecated exception classes ``qiskit.mapper.exceptions.CouplingError`` and ``qiskit.mapper.exceptions.LayoutError`` don't have an alternative since they serve no purpose without a ``qiskit.mapper`` module."
msgstr ""

#: ../../release_notes.rst:4034
msgid "The ``qiskit.pulse.samplers`` module has been moved to ``qiskit.pulse.pulse_lib.samplers``. You will need to update imports of ``qiskit.pulse.samplers`` to ``qiskit.pulse.pulse_lib.samplers``."
msgstr ""

#: ../../release_notes.rst:4038
msgid "`seaborn`_ is now a dependency for the function ``qiskit.visualization.plot_state_qsphere()``. It is needed to generate proper angular color maps for the visualization. The ``qiskit-terra[visualization]`` extras install target has been updated to install ``seaborn>=0.9.0`` If you are using visualizations and specifically the ``plot_state_qsphere()`` function you can use that to install ``seaborn`` or just manually run ``pip install seaborn>=0.9.0``"
msgstr ""

#: ../../release_notes.rst:4048
msgid "The previously deprecated functions ``qiksit.visualization.plot_state`` and ``qiskit.visualization.iplot_state`` have been removed. Instead you should use the specific function for each plot type. You can refer to the following tables to map the deprecated functions to their equivalent new ones:"
msgstr ""

#: ../../release_notes.rst:4055 ../../release_notes.rst:5197
#: ../../release_notes.rst:5477 ../../release_notes.rst:5514
msgid "Qiskit Terra 0.6"
msgstr ""

#: ../../release_notes.rst:4055 ../../release_notes.rst:5197
msgid "Qiskit Terra 0.7+"
msgstr ""

#: ../../release_notes.rst:4057 ../../release_notes.rst:5199
msgid "plot_state(rho)"
msgstr ""

#: ../../release_notes.rst:4057 ../../release_notes.rst:4058
#: ../../release_notes.rst:5199 ../../release_notes.rst:5200
msgid "plot_state_city(rho)"
msgstr ""

#: ../../release_notes.rst:4058 ../../release_notes.rst:5200
msgid "plot_state(rho, method='city')"
msgstr ""

#: ../../release_notes.rst:4059 ../../release_notes.rst:5201
msgid "plot_state(rho, method='paulivec')"
msgstr ""

#: ../../release_notes.rst:4059 ../../release_notes.rst:5201
msgid "plot_state_paulivec(rho)"
msgstr ""

#: ../../release_notes.rst:4060 ../../release_notes.rst:5202
msgid "plot_state(rho, method='qsphere')"
msgstr ""

#: ../../release_notes.rst:4060 ../../release_notes.rst:5202
msgid "plot_state_qsphere(rho)"
msgstr ""

#: ../../release_notes.rst:4061 ../../release_notes.rst:5203
msgid "plot_state(rho, method='bloch')"
msgstr ""

#: ../../release_notes.rst:4061 ../../release_notes.rst:5203
msgid "plot_bloch_multivector(rho)"
msgstr ""

#: ../../release_notes.rst:4062 ../../release_notes.rst:5204
msgid "plot_state(rho, method='hinton')"
msgstr ""

#: ../../release_notes.rst:4062 ../../release_notes.rst:5204
msgid "plot_state_hinton(rho)"
msgstr ""

#: ../../release_notes.rst:4065
msgid "The ``pylatexenc`` and ``pillow`` dependencies for the ``latex`` and ``latex_source`` circuit drawer backends are no longer listed as requirements. If you are going to use the latex circuit drawers ensure you have both packages installed or use the setuptools extras to install it along with qiskit-terra::"
msgstr ""

#: ../../release_notes.rst:4073
msgid "The root of the ``qiskit`` namespace will now emit a warning on import if either ``qiskit.IBMQ`` or ``qiskit.Aer`` could not be setup. This will occur whenever anything in the ``qiskit`` namespace is imported. These warnings were added to make it clear for users up front if they're running qiskit and the qiskit-aer and qiskit-ibmq-provider packages could not be found. It's not always clear if the packages are missing or python packaging/pip installed an element incorrectly until you go to use them and get an empty ``ImportError``. These warnings should make it clear up front if there these commonly used aliases are missing."
msgstr ""

#: ../../release_notes.rst:4083
msgid "However, for users that choose not to use either qiskit-aer or qiskit-ibmq-provider this might cause additional noise. For these users these warnings are easily suppressable using Python's standard library ``warnings``. Users can suppress the warnings by putting these two lines before any imports from qiskit::"
msgstr ""

#: ../../release_notes.rst:4093
msgid "This will suppress the warnings emitted by not having qiskit-aer or qiskit-ibmq-provider installed, but still preserve any other warnings emitted by qiskit or any other package."
msgstr ""

#: ../../release_notes.rst:4103
msgid "The ``U`` and ``CX`` gates have been deprecated. If you're using these gates in your code you should update them to use ``u3`` and ``cx`` instead. For example, if you're using the circuit gate functions ``circuit.u_base()`` and ``circuit.cx_base()`` you should update these to be ``circuit.u3()`` and ``circuit.cx()`` respectively."
msgstr ""

#: ../../release_notes.rst:4109
msgid "The ``u0`` gate has been deprecated in favor of using multiple ``iden`` gates and it will be removed in the future. If you're using the ``u0`` gate in your circuit you should update your calls to use ``iden``. For example, f you were using ``circuit.u0(2)`` in your circuit before that should be updated to be::"
msgstr ""

#: ../../release_notes.rst:4118
msgid "instead."
msgstr ""

#: ../../release_notes.rst:4120
msgid "The ``qiskit.pulse.DeviceSpecification`` class is deprecated now. Instead you should use ``qiskit.pulse.PulseChannelSpec``."
msgstr ""

#: ../../release_notes.rst:4123
msgid "Accessing a ``qiskit.circuit.Qubit``, ``qiskit.circuit.Clbit``, or ``qiskit.circuit.Bit`` class by index is deprecated (for compatibility with the ``(register, index)`` tuples that these classes replaced). Instead you should use the ``register`` and ``index`` attributes."
msgstr ""

#: ../../release_notes.rst:4128
msgid "Passing in a bit to the ``qiskit.QuantumCircuit`` method ``append`` as a tuple ``(register, index)`` is deprecated. Instead bit objects should be used directly."
msgstr ""

#: ../../release_notes.rst:4132
msgid "Accessing the elements of a ``qiskit.transpiler.Layout`` object with a tuple ``(register, index)`` is deprecated. Instead a bit object should be used directly."
msgstr ""

#: ../../release_notes.rst:4136
msgid "The ``qiskit.transpiler.Layout`` constructor method ``qiskit.transpiler.Layout.from_tuplelist()`` is deprecated. Instead the constructor ``qiskit.transpiler.Layout.from_qubit_list()`` should be used."
msgstr ""

#: ../../release_notes.rst:4140
msgid "The module ``qiskit.pulse.ops`` has been deprecated. All the functions it provided:"
msgstr ""

#: ../../release_notes.rst:4143
msgid "``union``"
msgstr ""

#: ../../release_notes.rst:4144
msgid "``flatten``"
msgstr ""

#: ../../release_notes.rst:4145
msgid "``shift``"
msgstr ""

#: ../../release_notes.rst:4146
msgid "``insert``"
msgstr ""

#: ../../release_notes.rst:4147
msgid "``append``"
msgstr ""

#: ../../release_notes.rst:4149
msgid "have equivalent methods available directly on the ``qiskit.pulse.Schedule`` and ``qiskit.pulse.Instruction`` classes. Those methods should be used instead."
msgstr ""

#: ../../release_notes.rst:4153
msgid "The ``qiskit.qasm.Qasm`` method ``get_tokens()`` is deprecated. Instead you should use the ``generate_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:4156
msgid "The ``qiskit.qasm.qasmparser.QasmParser`` method ``get_tokens()`` is deprecated. Instead you should use the ``read_tokens()`` method."
msgstr ""

#: ../../release_notes.rst:4159
msgid "The ``as_dict()`` method for the Qobj class has been deprecated and will be removed in the future. You should replace calls to it with ``to_dict()`` instead."
msgstr ""

#: ../../release_notes.rst:4169
msgid "The definition of the ``CU3Gate`` has been changed to be equivalent to the canonical definition of a controlled ``U3Gate``."
msgstr ""

#: ../../release_notes.rst:4172
msgid "The handling of layout in the pass manager has been standardized. This fixes several reported issues with handling layout. The ``initial_layout`` kwarg parameter on ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` will now lay out your qubits from the circuit onto the desired qubits on the device when transpiling circuits."
msgstr ""

#: ../../release_notes.rst:4178
msgid "Support for n-qubit unitaries was added to the BasicAer simulator and ``unitary`` (arbitrary unitary gates) was added to the set of basis gates for the simulators"
msgstr ""

#: ../../release_notes.rst:4182
msgid "The ``qiskit.visualization.plost_state_qsphere()`` has been updated to fix several issues with it. Now output Q Sphere visualization will be correctly generated and the following aspects have been updated:"
msgstr ""

#: ../../release_notes.rst:4186
msgid "All complementary basis states are antipodal"
msgstr ""

#: ../../release_notes.rst:4187
msgid "Phase is indicated by color of line and marker on sphere's surface"
msgstr ""

#: ../../release_notes.rst:4190
msgid "Probability is indicated by translucency of line and volume of marker on"
msgstr ""

#: ../../release_notes.rst:4189
msgid "sphere's surface"
msgstr ""

#: ../../release_notes.rst:4197
msgid "The default PassManager for ``qiskit.compiler.transpile()`` and ``qiskit.execute()`` has been changed to optimization level 1 pass manager defined at ``qiskit.transpile.preset_passmanagers.level1_pass_manager``."
msgstr ""

#: ../../release_notes.rst:4201
msgid "All the circuit drawer backends now will express gate parameters in a circuit as common fractions of pi in the output visualization. If the value of a parameter can be expressed as a fraction of pi that will be used instead of the numeric equivalent."
msgstr ""

#: ../../release_notes.rst:4206
msgid "When using ``qiskit.assembler.assemble_schedules()`` if you do not provide the number of memory_slots to use the number will be inferred based on the number of acquisitions in the input schedules."
msgstr ""

#: ../../release_notes.rst:4210
msgid "The deprecation warning on the ``qiskit.dagcircuit.DAGCircuit`` property ``node_counter`` has been removed. The behavior change being warned about was put into effect when the warning was added, so warning that it had changed served no purpose."
msgstr ""

#: ../../release_notes.rst:4215
msgid "Calls to ``PassManager.run()`` now will emit python logging messages at the INFO level for each pass execution. These messages will include the Pass name and the total execution time of the pass. Python's standard logging was used because it allows Qiskit-Terra's logging to integrate in a standard way with other applications and libraries. All logging for the transpiler occurs under the ``qiskit.transpiler`` namespace, as used by ``logging.getLogger('qiskit.transpiler``). For example, to turn on DEBUG level logging for the transpiler you can run::"
msgstr ""

#: ../../release_notes.rst:4229
msgid "which will set the log level for the transpiler to DEBUG and configure those messages to be printed to stderr."
msgstr ""

#: ../../release_notes.rst:4234
msgid "There's a new high-performance Density Matrix Simulator that can be used in conjunction with our noise models, to better simulate real world scenarios."
msgstr ""

#: ../../release_notes.rst:4236
msgid "We have added a Matrix Product State (MPS) simulator. MPS allows for efficient simulation of several classes of quantum circuits, even under presence of strong correlations and highly entangled states. For cases amenable to MPS, circuits with several hundred qubits and more can be exactly simulated, e.g., for the purpose of obtaining expectation values of observables."
msgstr ""

#: ../../release_notes.rst:4241
msgid "Snapshots can be performed in all of our simulators."
msgstr ""

#: ../../release_notes.rst:4242
msgid "Now we can measure sampling circuits with read-out errors too, not only ideal circuits."
msgstr ""

#: ../../release_notes.rst:4244
msgid "We have increased some circuit optimizations with noise presence."
msgstr ""

#: ../../release_notes.rst:4245
msgid "A better 2-qubit error aproximations have been included."
msgstr ""

#: ../../release_notes.rst:4246
msgid "Included some tools for making certain noisy simulations easier to craft and faster to simulate."
msgstr ""

#: ../../release_notes.rst:4248
msgid "Increased performance with simulations that require less floating point numerical precision."
msgstr ""

#: ../../release_notes.rst:4257
msgid "`Logging Module <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/9_ignis_logging.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:4258
msgid "`Purity RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5c_purity_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:4259
msgid "`Interleaved RB <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/5b_interleaved_rb.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:4260
msgid "`Repetition Code for Verification <https://github.com/Qiskit/qiskit-iqx-tutorials/blob/stable/0.12.x/qiskit/advanced/ignis/8_repetition_code.ipynb>`_"
msgstr ""

#: ../../release_notes.rst:4261
msgid "Seed values can now be arbitrarily added to RB (not just in order)"
msgstr ""

#: ../../release_notes.rst:4262
msgid "Support for adding multiple results to measurement mitigation"
msgstr ""

#: ../../release_notes.rst:4263
msgid "RB Fitters now support providing guess values"
msgstr ""

#: ../../release_notes.rst:4268
msgid "Fixed a bug in RB fit error"
msgstr ""

#: ../../release_notes.rst:4269
msgid "Fixed a bug in the characterization fitter when selecting a qubit index to fit"
msgstr ""

#: ../../release_notes.rst:4275
msgid "Measurement mitigation now operates in parallel when applied to multiple results"
msgstr ""

#: ../../release_notes.rst:4277
msgid "Guess values for RB fitters are improved"
msgstr ""

#: ../../release_notes.rst:4285
msgid "Relative-Phase Toffoli gates ``rccx`` (with 2 controls) and ``rcccx`` (with 3 controls)."
msgstr ""

#: ../../release_notes.rst:4287
msgid "Variational form ``RYCRX``"
msgstr ""

#: ../../release_notes.rst:4288
msgid "A new ``'basic-no-ancilla'`` mode to ``mct``."
msgstr ""

#: ../../release_notes.rst:4289
msgid "Multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz`` as a general ``u3`` gate is not supported by graycode implementation"
msgstr ""

#: ../../release_notes.rst:4291
msgid "Chemistry: ROHF open-shell support"
msgstr ""

#: ../../release_notes.rst:4293 ../../release_notes.rst:4300
#: ../../release_notes.rst:4306
msgid "Supported for all drivers: Gaussian16, PyQuante, PySCF and PSI4"
msgstr ""

#: ../../release_notes.rst:4294
msgid "HartreeFock initial state, UCCSD variational form and two qubit reduction for parity mapping now support different alpha and beta particle numbers for open shell support"
msgstr ""

#: ../../release_notes.rst:4298
msgid "Chemistry: UHF open-shell support"
msgstr ""

#: ../../release_notes.rst:4301
msgid "QMolecule extended to include integrals, coefficients etc for separate beta"
msgstr ""

#: ../../release_notes.rst:4303
msgid "Chemistry: QMolecule extended with integrals in atomic orbital basis to facilitate common access to these for experimentation"
msgstr ""

#: ../../release_notes.rst:4308
msgid "Chemistry: Additional PyQuante and PySCF driver configuration"
msgstr ""

#: ../../release_notes.rst:4310
msgid "Convergence tolerance and max convergence iteration controls."
msgstr ""

#: ../../release_notes.rst:4311
msgid "For PySCF initial guess choice"
msgstr ""

#: ../../release_notes.rst:4313
msgid "Chemistry: Processing output added to debug log from PyQuante and PySCF computations (Gaussian16 and PSI4 outputs were already added to debug log)"
msgstr ""

#: ../../release_notes.rst:4315
msgid "Chemistry: Merged qiskit-chemistry into qiskit-aqua"
msgstr ""

#: ../../release_notes.rst:4316
msgid "Add ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator`` class."
msgstr ""

#: ../../release_notes.rst:4318
msgid "Add ``evolution_instruction`` function to get registerless instruction of time evolution."
msgstr ""

#: ../../release_notes.rst:4320
msgid "Add ``op_converter`` module to unified the place in charge of converting different types of operators."
msgstr ""

#: ../../release_notes.rst:4322
msgid "Add ``Z2Symmetries`` class to encapsulate the Z2 symmetries info and has helper methods for tapering an Operator."
msgstr ""

#: ../../release_notes.rst:4324
msgid "Amplitude Estimation: added maximum likelihood postprocessing and confidence interval computation."
msgstr ""

#: ../../release_notes.rst:4326
msgid "Maximum Likelihood Amplitude Estimation (MLAE): Implemented new algorithm for amplitude estimation based on maximum likelihood estimation, which reduces number of required qubits and circuit depth."
msgstr ""

#: ../../release_notes.rst:4329
msgid "Added (piecewise) linearly and polynomially controlled Pauli-rotation circuits."
msgstr ""

#: ../../release_notes.rst:4331
msgid "Add ``q_equation_of_motion`` to study excited state of a molecule, and add two algorithms to prepare the reference state."
msgstr ""

#: ../../release_notes.rst:4337
msgid "Improve ``mct``'s ``'basic'`` mode by using relative-phase Toffoli gates to build intermediate results."
msgstr ""

#: ../../release_notes.rst:4339
msgid "Adapt to Qiskit Terra's newly introduced ``Qubit`` class."
msgstr ""

#: ../../release_notes.rst:4340
msgid "Prevent ``QPE/IQPE`` from modifying input ``Operator`` objects."
msgstr ""

#: ../../release_notes.rst:4341
msgid "The PyEDA dependency was removed; corresponding oracles' underlying logic operations are now handled by SymPy."
msgstr ""

#: ../../release_notes.rst:4343
msgid "Refactor the ``Operator`` class, each representation has its own class ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:4345
msgid "The ``power`` in ``evolution_instruction`` was applied on the theta on the CRZ gate directly, the new version repeats the circuits to implement power."
msgstr ""

#: ../../release_notes.rst:4347
msgid "CircuitCache is OFF by default, and it can be set via environment variable now ``QISKIT_AQUA_CIRCUIT_CACHE``."
msgstr ""

#: ../../release_notes.rst:4353
msgid "A bug where ``TruthTableOracle`` would build incorrect circuits for truth tables with only a single ``1`` value."
msgstr ""

#: ../../release_notes.rst:4355
msgid "A bug caused by ``PyEDA``'s indeterminism."
msgstr ""

#: ../../release_notes.rst:4356
msgid "A bug with ``QPE/IQPE``'s translation and stretch computation."
msgstr ""

#: ../../release_notes.rst:4357
msgid "Chemistry: Bravyi-Kitaev mapping fixed when num qubits was not a power of 2"
msgstr ""

#: ../../release_notes.rst:4358
msgid "Setup ``initial_layout`` in ``QuantumInstance`` via a list."
msgstr ""

#: ../../release_notes.rst:4363
msgid "General multi-controlled rotation gate ``mcu3`` is removed and replaced by multi-controlled rotation gates ``mcrx``, ``mcry``, and ``mcrz``"
msgstr ""

#: ../../release_notes.rst:4368
msgid "The ``Operator`` class is deprecated, in favor of using ``MatrixOperator``, ``WeightedPauliOperator`` and ``TPBGroupedPauliOperator``."
msgstr ""

#: ../../release_notes.rst:4375 ../../release_notes.rst:4393
msgid "No change"
msgstr ""

#: ../../release_notes.rst:4380
msgid "Qiskit 0.11.1"
msgstr ""

#: ../../release_notes.rst:4382
msgid "We have bumped up Qiskit micro version to 0.11.1 because IBM Q Provider has bumped its micro version as well."
msgstr ""

#: ../../release_notes.rst:4386 ../../release_notes.rst:4424
#: ../../release_notes.rst:4532 ../../release_notes.rst:4574
msgid "Terra 0.8"
msgstr ""

#: ../../release_notes.rst:4391 ../../release_notes.rst:4429
#: ../../release_notes.rst:4537 ../../release_notes.rst:4750
msgid "Aer 0.2"
msgstr ""

#: ../../release_notes.rst:4396 ../../release_notes.rst:4447
#: ../../release_notes.rst:4542 ../../release_notes.rst:4808
#: ../../release_notes.rst:4959
msgid "Ignis 0.1"
msgstr ""

#: ../../release_notes.rst:4401 ../../release_notes.rst:4452
#: ../../release_notes.rst:4547 ../../release_notes.rst:4832
msgid "Aqua 0.5"
msgstr ""

#: ../../release_notes.rst:4403
msgid "``qiskit-aqua`` has been updated to ``0.5.3`` to fix code related to changes in how gates inverses are done."
msgstr ""

#: ../../release_notes.rst:4409
msgid "The ``IBMQProvider`` has been updated to version ``0.3.1`` to fix backward compatibility issues and work with the default 10 job limit in single calls to the IBM Q API v2."
msgstr ""

#: ../../release_notes.rst:4416
msgid "Qiskit 0.11"
msgstr ""

#: ../../release_notes.rst:4418
msgid "We have bumped up Qiskit minor version to 0.11 because IBM Q Provider has bumped up its minor version too. On Aer, we have jumped from 0.2.1 to 0.2.3 because there was an issue detected right after releasing 0.2.2 and before Qiskit 0.11 went online."
msgstr ""

#: ../../release_notes.rst:4432
msgid "New features"
msgstr ""

#: ../../release_notes.rst:4434
msgid "Added support for multi-controlled phase gates"
msgstr ""

#: ../../release_notes.rst:4435
msgid "Added optimized anti-diagonal single-qubit gates"
msgstr ""

#: ../../release_notes.rst:4438
msgid "Improvements"
msgstr ""

#: ../../release_notes.rst:4440
msgid "Introduced a technique called Fusion that increments performance of circuit execution Tuned threading strategy to gain performance in most common scenarios."
msgstr ""

#: ../../release_notes.rst:4442
msgid "Some of the already implemented error models have been polished."
msgstr ""

#: ../../release_notes.rst:4459
msgid "The ``IBMQProvider`` has been updated in order to default to using the new `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__. Accessing the legacy IBM Q Experience v1 and QConsole will still be supported during the 0.3.x line until its final deprecation one month from the release. It is encouraged to update to the new IBM Q Experience to take advantage of the new functionality and features."
msgstr ""

#: ../../release_notes.rst:4466
msgid "Updating to the new IBM Q Experience v2"
msgstr ""

#: ../../release_notes.rst:4468
msgid "If you have credentials for the legacy IBM Q Experience stored on disk, you can make use of the interactive helper::"
msgstr ""

#: ../../release_notes.rst:4476
msgid "For more complex cases or fine tuning your configuration, the following methods are available:"
msgstr ""

#: ../../release_notes.rst:4479
msgid "the ``IBMQ.delete_accounts()`` can be used for resetting your configuration file."
msgstr ""

#: ../../release_notes.rst:4481
msgid "the ``IBMQ.save_account('MY_TOKEN')`` method can be used for saving your credentials, following the instructions in the `IBM Q Experience v2 <https://quantum-computing.ibm.com>`__ account page."
msgstr ""

#: ../../release_notes.rst:4486
msgid "Updating your programs"
msgstr ""

#: ../../release_notes.rst:4488
msgid "When using the new IBM Q Experience v2 through the provider, access to backends is done via individual ``provider`` instances (as opposed to accessing them directly through the ``qiskit.IBMQ`` object as in previous versions), which allows for more granular control over the project you are using."
msgstr ""

#: ../../release_notes.rst:4493
msgid "You can get a reference to the ``providers`` that you have access to using the ``IBMQ.providers()`` and ``IBMQ.get_provider()`` methods::"
msgstr ""

#: ../../release_notes.rst:4503
msgid "For convenience, ``IBMQ.load_account()`` and ``IBMQ.enable_account()`` will return a provider for the open access project, which is the default in the new IBM Q Experience v2."
msgstr ""

#: ../../release_notes.rst:4507
msgid "For example, the following program in previous versions::"
msgstr ""

#: ../../release_notes.rst:4515
msgid "Would be equivalent to the following program in the current version::"
msgstr ""

#: ../../release_notes.rst:4524
msgid "You can find more information and details in the `IBM Q Provider documentation <https://github.com/Qiskit/qiskit-ibmq-provider>`__."
msgstr ""

#: ../../release_notes.rst:4529
msgid "Qiskit 0.10"
msgstr ""

#: ../../release_notes.rst:4552
msgid "IBM Q Provider 0.2"
msgstr ""

#: ../../release_notes.rst:4557
msgid "The ``IBMQProvider`` supports connecting to the new version of the IBM Q API. Please note support for this version is still experimental :pull_ibmq-provider:`78`."
msgstr ""

#: ../../release_notes.rst:4559
msgid "Added support for Circuits through the new API :pull_ibmq-provider:`79`."
msgstr ""

#: ../../release_notes.rst:4565
msgid "Fixed incorrect parsing of some API hub URLs :pull_ibmq-provider:`77`."
msgstr ""

#: ../../release_notes.rst:4566
msgid "Fixed noise model handling for remote simulators :pull_ibmq-provider:`84`."
msgstr ""

#: ../../release_notes.rst:4571
msgid "Qiskit 0.9"
msgstr ""

#: ../../release_notes.rst:4579 ../../release_notes.rst:5350
#: ../../release_notes.rst:5558
msgid "Highlights"
msgstr ""

#: ../../release_notes.rst:4581
msgid "Introduction of the Pulse module under ``qiskit.pulse``, which includes tools for building pulse commands, scheduling them on pulse channels, visualization, and running them on IBM Q devices."
msgstr ""

#: ../../release_notes.rst:4584
msgid "Improved QuantumCircuit and Instruction classes, allowing for the composition of arbitrary sub-circuits into larger circuits, and also for creating parametrized circuits."
msgstr ""

#: ../../release_notes.rst:4587
msgid "A powerful Quantum Info module under ``qiskit.quantum_info``, providing tools to work with operators and channels and to use them inside circuits."
msgstr ""

#: ../../release_notes.rst:4589
msgid "New transpiler optimization passes and access to predefined transpiling routines."
msgstr ""

#: ../../release_notes.rst:4597
msgid "The core ``StochasticSwap`` routine is implemented in `Cython <https://cython.org/>`__."
msgstr ""

#: ../../release_notes.rst:4598
msgid "Added ``QuantumChannel`` classes for manipulating quantum channels and CPTP maps."
msgstr ""

#: ../../release_notes.rst:4600
msgid "Support for parameterized circuits."
msgstr ""

#: ../../release_notes.rst:4601
msgid "The ``PassManager`` interface has been improved and new functions added for easier interaction and usage with custom pass managers."
msgstr ""

#: ../../release_notes.rst:4603
msgid "Preset ``PassManager``\\s are now included which offer a predetermined pipeline of transpiler passes."
msgstr ""

#: ../../release_notes.rst:4605
msgid "User configuration files to let local environments override default values for some functions."
msgstr ""

#: ../../release_notes.rst:4607
msgid "New transpiler passes: ``EnlargeWithAncilla``, ``Unroll2Q``, ``NoiseAdaptiveLayout``, ``OptimizeSwapBeforeMeasure``, ``RemoveDiagonalGatesBeforeMeasure``, ``CommutativeCancellation``, ``Collect2qBlocks``, and ``ConsolidateBlocks``."
msgstr ""

#: ../../release_notes.rst:4614 ../../release_notes.rst:4798
#: ../../release_notes.rst:4821 ../../release_notes.rst:4898
#: ../../release_notes.rst:5020 ../../release_notes.rst:5334
#: ../../release_notes.rst:5372 ../../release_notes.rst:5576
msgid "Compatibility Considerations"
msgstr ""

#: ../../release_notes.rst:4616
msgid "As part of the 0.8 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the 0.9 (unless otherwise noted) release to avoid a breaking change in the future."
msgstr ""

#: ../../release_notes.rst:4621
msgid "The methods prefixed by ``_get`` in the ``DAGCircuit`` object are being renamed without that prefix."
msgstr ""

#: ../../release_notes.rst:4623
msgid "Changed elements in ``couplinglist`` of ``CouplingMap`` from tuples to lists."
msgstr ""

#: ../../release_notes.rst:4624
msgid "Unroller bases must now be explicit, and violation raises an informative ``QiskitError``."
msgstr ""

#: ../../release_notes.rst:4626
msgid "The ``qiskit.tools.qcvv`` package is deprecated and will be removed in the in the future. You should migrate to using the Qiskit Ignis which replaces this module."
msgstr ""

#: ../../release_notes.rst:4629
msgid "The ``qiskit.compile()`` function is now deprecated in favor of explicitly using the ``qiskit.compiler.transpile()`` function to transform a circuit, followed by ``qiskit.compiler.assemble()`` to make a Qobj out of it. Instead of ``compile(...)``, use ``assemble(transpile(...), ...)``."
msgstr ""

#: ../../release_notes.rst:4633
msgid "``qiskit.converters.qobj_to_circuits()`` has been deprecated and will be removed in a future release. Instead ``qiskit.assembler.disassemble()`` should be used to extract ``QuantumCircuit`` objects from a compiled Qobj."
msgstr ""

#: ../../release_notes.rst:4637
msgid "The ``qiskit.mapper`` namespace has been deprecated. The ``Layout`` and ``CouplingMap`` classes can be accessed via ``qiskit.transpiler``."
msgstr ""

#: ../../release_notes.rst:4639
msgid "A few functions in ``qiskit.tools.qi.qi`` have been deprecated and moved to ``qiskit.quantum_info``."
msgstr ""

#: ../../release_notes.rst:4642
msgid "Please note that some backwards incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:4647
msgid "IBM Q Provider"
msgstr ""

#: ../../release_notes.rst:4649
msgid "The IBM Q provider was previously included in Terra, but it has been split out into a separate package ``qiskit-ibmq-provider``. This will need to be installed, either via pypi with ``pip install qiskit-ibmq-provider`` or from source in order to access ``qiskit.IBMQ`` or ``qiskit.providers.ibmq``. If you install qiskit with ``pip install qiskit``, that will automatically install all subpackages of the Qiskit project."
msgstr ""

#: ../../release_notes.rst:4659
msgid "Cython Components"
msgstr ""

#: ../../release_notes.rst:4661
msgid "Starting in the 0.8 release the core stochastic swap routine is now implemented in `Cython <https://cython.org/>`__. This was done to significantly improve the performance of the swapper, however if you build Terra from source or run on a non-x86 or other platform without prebuilt wheels and install from source distribution you'll need to make sure that you have Cython installed prior to installing/building Qiskit Terra. This can easily be done with pip/pypi: ``pip install Cython``."
msgstr ""

#: ../../release_notes.rst:4672
msgid "Compiler Workflow"
msgstr ""

#: ../../release_notes.rst:4674
msgid "The ``qiskit.compile()`` function has been deprecated and replaced by first calling ``qiskit.compiler.transpile()`` to run optimization and mapping on a circuit, and then ``qiskit.compiler.assemble()`` to build a Qobj from that optimized circuit to send to a backend. While this is only a deprecation it will emit a warning if you use the old ``qiskit.compile()`` call."
msgstr ""

#: ../../release_notes.rst:4680
msgid "**transpile(), assemble(), execute() parameters**"
msgstr ""

#: ../../release_notes.rst:4682
msgid "These functions are heavily overloaded and accept a wide range of inputs. They can handle circuit and pulse inputs. All kwargs except for ``backend`` for these functions now also accept lists of the previously accepted types. The ``initial_layout`` kwarg can now be supplied as a both a list and dictionary, e.g. to map a Bell experiment on qubits 13 and 14, you can supply: ``initial_layout=[13, 14]`` or ``initial_layout={qr[0]: 13, qr[1]: 14}``"
msgstr ""

#: ../../release_notes.rst:4692
msgid "Qobj"
msgstr ""

#: ../../release_notes.rst:4694
msgid "The Qobj class has been split into two separate subclasses depending on the use case, either ``PulseQobj`` or ``QasmQobj`` for pulse and circuit jobs respectively. If you're interacting with Qobj directly you may need to adjust your usage accordingly."
msgstr ""

#: ../../release_notes.rst:4699
msgid "The ``qiskit.qobj.qobj_to_dict()`` is removed. Instead use the ``to_dict()`` method of a Qobj object."
msgstr ""

#: ../../release_notes.rst:4705
msgid "Visualization"
msgstr ""

#: ../../release_notes.rst:4707
msgid "The largest change to the visualization module is it has moved from ``qiskit.tools.visualization`` to ``qiskit.visualization``. This was done to indicate that the visualization module is more than just a tool. However, since this interface was declared stable in the 0.7 release the public interface off of ``qiskit.tools.visualization`` will continue to work. That may change in a future release, but it will be deprecated prior to removal if that happens."
msgstr ""

#: ../../release_notes.rst:4714
msgid "The previously deprecated functions, ``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from ``qiskit.tools.visualization`` have been removed. Instead of these functions, calling ``qiskit.visualization.circuit_drawer()`` with the appropriate arguments should be used."
msgstr ""

#: ../../release_notes.rst:4721
msgid "The previously deprecated ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used."
msgstr ""

#: ../../release_notes.rst:4726
msgid "The Wigner plotting functions ``plot_wigner_function``, ``plot_wigner_curve``, ``plot_wigner_plaquette``, and ``plot_wigner_data`` previously in the ``qiskit.tools.visualization._state_visualization`` module have been removed. They were never exposed through the public stable interface and were not well documented. The code to use this feature can still be accessed through the qiskit-tutorials repository."
msgstr ""

#: ../../release_notes.rst:4736
msgid "Mapper"
msgstr ""

#: ../../release_notes.rst:4738
msgid "The public api from ``qiskit.mapper`` has been moved into ``qiskit.transpiler``. While it has only been deprecated in this release, it will be removed in the 0.9 release so updating your usage of ``Layout`` and ``CouplingMap`` to import from ``qiskit.transpiler`` instead of ``qiskit.mapper`` before that takes place will avoid any surprises in the future."
msgstr ""

#: ../../release_notes.rst:4755
msgid "Added multiplexer gate :pull_aer:`192`"
msgstr ""

#: ../../release_notes.rst:4756
msgid "Added ``remap_noise_model`` function to ``noise.utils`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:4757
msgid "Added ``__eq__`` method to ``NoiseModel``, ``QuantumError``, ``ReadoutError`` :pull_aer:`181`"
msgstr ""

#: ../../release_notes.rst:4759
msgid "Added support for labelled gates in noise models :pull_aer:`175`"
msgstr ""

#: ../../release_notes.rst:4760
msgid "Added optimized ``mcx``, ``mcy``, ``mcz``, ``mcu1``, ``mcu2``, ``mcu3``, gates to ``QubitVector`` :pull_aer:`124`"
msgstr ""

#: ../../release_notes.rst:4762
msgid "Added optimized controlled-swap gate to ``QubitVector`` :pull_aer:`142`"
msgstr ""

#: ../../release_notes.rst:4763
msgid "Added gate-fusion optimization for ``QasmController``, which is enabled by setting ``fusion_enable=true`` :pull_aer:`136`"
msgstr ""

#: ../../release_notes.rst:4765
msgid "Added better management of failed simulations :pull_aer:`167`"
msgstr ""

#: ../../release_notes.rst:4766
msgid "Added qubits truncate optimization for unused qubits :pull_aer:`164`"
msgstr ""

#: ../../release_notes.rst:4767
msgid "Added ability to disable depolarizing error on device noise model :pull_aer:`131`"
msgstr ""

#: ../../release_notes.rst:4769
msgid "Added initialize simulator instruction to ``statevector_state`` :pull_aer:`117`, :pull_aer:`137`"
msgstr ""

#: ../../release_notes.rst:4771
msgid "Added coupling maps to simulators :pull_aer:`93`"
msgstr ""

#: ../../release_notes.rst:4772
msgid "Added circuit optimization framework :pull_aer:`83`"
msgstr ""

#: ../../release_notes.rst:4773
msgid "Added benchmarking :pull_aer:`71`, :pull_aer:`177`"
msgstr ""

#: ../../release_notes.rst:4774
msgid "Added wheels support for Debian-like distributions :pull_aer:`69`"
msgstr ""

#: ../../release_notes.rst:4775
msgid "Added autoconfiguration of threads for qasm simulator :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:4776
msgid "Added Simulation method based on Stabilizer Rank Decompositions :pull_aer:`51`"
msgstr ""

#: ../../release_notes.rst:4777
msgid "Added ``basis_gates`` kwarg to ``NoiseModel`` init :pull_aer:`175`."
msgstr ""

#: ../../release_notes.rst:4778
msgid "Added an optional parameter to ``NoiseModel.as_dict()`` for returning dictionaries that can be serialized using the standard json library directly :pull_aer:`165`"
msgstr ""

#: ../../release_notes.rst:4781
msgid "Refactor thread management :pull_aer:`50`"
msgstr ""

#: ../../release_notes.rst:4782
msgid "Improve noise transformations :pull_aer:`162`"
msgstr ""

#: ../../release_notes.rst:4783
msgid "Improve error reporting :pull_aer:`160`"
msgstr ""

#: ../../release_notes.rst:4784
msgid "Improve efficiency of parallelization with ``max_memory_mb`` a new parameter of ``backend_opts`` :pull_aer:`61`"
msgstr ""

#: ../../release_notes.rst:4786
msgid "Improve u1 performance in ``statevector`` :pull_aer:`123`"
msgstr ""

#: ../../release_notes.rst:4792
msgid "Fixed OpenMP clashing problems on macOS for the Terra add-on :pull_aer:`46`"
msgstr ""

#: ../../release_notes.rst:4800
msgid "Deprecated ``\"initial_statevector\"`` backend option for ``QasmSimulator`` and ``StatevectorSimulator`` :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:4802
msgid "Renamed ``\"chop_threshold\"`` backend option to ``\"zero_threshold\"`` and changed default value to 1e-10 :pull_aer:`185`"
msgstr ""

#: ../../release_notes.rst:4813
msgid "Quantum volume"
msgstr ""

#: ../../release_notes.rst:4814
msgid "Measurement mitigation using tensored calibrations"
msgstr ""

#: ../../release_notes.rst:4815
msgid "Simultaneous RB has the option to align Clifford gates across subsets"
msgstr ""

#: ../../release_notes.rst:4816
msgid "Measurement correction can produce a new calibration for a subset of qubits"
msgstr ""

#: ../../release_notes.rst:4823
msgid "RB writes to the minimal set of classical registers (it used to be Q[i]->C[i]). This change enables measurement correction with RB. Unless users had external analysis code, this will not change outcomes. RB circuits from 0.1 are not compatible with 0.1.1 fitters."
msgstr ""

#: ../../release_notes.rst:4837
msgid "Implementation of the HHL algorithm supporting ``LinearSystemInput``"
msgstr ""

#: ../../release_notes.rst:4838
msgid "Pluggable component ``Eigenvalues`` with variant ``EigQPE``"
msgstr ""

#: ../../release_notes.rst:4839
msgid "Pluggable component ``Reciprocal`` with variants ``LookupRotation`` and ``LongDivision``"
msgstr ""

#: ../../release_notes.rst:4841
msgid "Multiple-Controlled U1 and U3 operations ``mcu1`` and ``mcu3``"
msgstr ""

#: ../../release_notes.rst:4842
msgid "Pluggable component ``QFT`` derived from component ``IQFT``"
msgstr ""

#: ../../release_notes.rst:4843
msgid "Summarized the transpiled circuits at the DEBUG logging level"
msgstr ""

#: ../../release_notes.rst:4844
msgid "``QuantumInstance`` accepts ``basis_gates`` and ``coupling_map`` again."
msgstr ""

#: ../../release_notes.rst:4845
msgid "Support to use ``cx`` gate for the entanglement in ``RY`` and ``RYRZ`` variational form (``cz`` is the default choice)"
msgstr ""

#: ../../release_notes.rst:4847
msgid "Support to use arbitrary mixer Hamiltonian in QAOA, allowing use of QAOA in constrained optimization problems [arXiv:1709.03489]"
msgstr ""

#: ../../release_notes.rst:4849
msgid "Added variational algorithm base class ``VQAlgorithm``, implemented by ``VQE`` and ``QSVMVariational``"
msgstr ""

#: ../../release_notes.rst:4851
msgid "Added ``ising/docplex.py`` for automatically generating Ising Hamiltonian from optimization models of DOcplex"
msgstr ""

#: ../../release_notes.rst:4853
msgid "Added ``'basic-dirty-ancilla``' mode for ``mct``"
msgstr ""

#: ../../release_notes.rst:4854
msgid "Added ``mcmt`` for Multi-Controlled, Multi-Target gate"
msgstr ""

#: ../../release_notes.rst:4855
msgid "Exposed capabilities to generate circuits from logical AND, OR, DNF (disjunctive normal forms), and CNF (conjunctive normal forms) formulae"
msgstr ""

#: ../../release_notes.rst:4857
msgid "Added the capability to generate circuits from ESOP (exclusive sum of products) formulae with optional optimization based on Quine-McCluskey and ExactCover"
msgstr ""

#: ../../release_notes.rst:4859
msgid "Added ``LogicalExpressionOracle`` for generating oracle circuits from arbitrary Boolean logic expressions (including DIMACS support) with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:4862
msgid "Added ``TruthTableOracle`` for generating oracle circuits from truth-tables with optional optimization capability"
msgstr ""

#: ../../release_notes.rst:4864
msgid "Added ``CustomCircuitOracle`` for generating oracle from user specified circuits"
msgstr ""

#: ../../release_notes.rst:4866
msgid "Added implementation of the Deutsch-Jozsa algorithm"
msgstr ""

#: ../../release_notes.rst:4867
msgid "Added implementation of the Bernstein-Vazirani algorithm"
msgstr ""

#: ../../release_notes.rst:4868
msgid "Added implementation of the Simon's algorithm"
msgstr ""

#: ../../release_notes.rst:4869
msgid "Added implementation of the Shor's algorithm"
msgstr ""

#: ../../release_notes.rst:4870
msgid "Added optional capability for Grover's algorithm to take a custom initial state (as opposed to the default uniform superposition)"
msgstr ""

#: ../../release_notes.rst:4872
msgid "Added capability to create a ``Custom`` initial state using existing circuit"
msgstr ""

#: ../../release_notes.rst:4874
msgid "Added the ADAM (and AMSGRAD) optimization algorithm"
msgstr ""

#: ../../release_notes.rst:4875
msgid "Multivariate distributions added, so uncertainty models now have univariate and multivariate distribution components"
msgstr ""

#: ../../release_notes.rst:4877
msgid "Added option to include or skip the swaps operations for qft and iqft circuit constructions"
msgstr ""

#: ../../release_notes.rst:4879
msgid "Added classical linear system solver ``ExactLSsolver``"
msgstr ""

#: ../../release_notes.rst:4880
msgid "Added parameters ``auto_hermitian`` and ``auto_resize`` to ``HHL`` algorithm to support non-Hermitian and non :math:`2^n` sized matrices by default"
msgstr ""

#: ../../release_notes.rst:4882
msgid "Added another feature map, ``RawFeatureVector``, that directly maps feature vectors to qubits' states for classification"
msgstr ""

#: ../../release_notes.rst:4884
msgid "``SVM_Classical`` can now load models trained by ``QSVM``"
msgstr ""

#: ../../release_notes.rst:4891
msgid "Fixed ``ising/docplex.py`` to correctly multiply constant values in constraints"
msgstr ""

#: ../../release_notes.rst:4892
msgid "Fixed package setup to correctly identify namespace packages using ``setuptools.find_namespace_packages``"
msgstr ""

#: ../../release_notes.rst:4900
msgid "``QuantumInstance`` does not take ``memory`` anymore."
msgstr ""

#: ../../release_notes.rst:4901
msgid "Moved command line and GUI to separate repo (``qiskit_aqua_uis``)"
msgstr ""

#: ../../release_notes.rst:4903
msgid "Removed the ``SAT``-specific oracle (now supported by ``LogicalExpressionOracle``)"
msgstr ""

#: ../../release_notes.rst:4905
msgid "Changed ``advanced`` mode implementation of ``mct``: using simple ``h`` gates instead of ``ch``, and fixing the old recursion step in ``_multicx``"
msgstr ""

#: ../../release_notes.rst:4907
msgid "Components ``random_distributions`` renamed to ``uncertainty_models``"
msgstr ""

#: ../../release_notes.rst:4908
msgid "Reorganized the constructions of various common gates (``ch``, ``cry``, ``mcry``, ``mct``, ``mcu1``, ``mcu3``, ``mcmt``, ``logic_and``, and ``logic_or``) and circuits (``PhaseEstimationCircuit``, ``BooleanLogicCircuits``, ``FourierTransformCircuits``, and ``StateVectorCircuits``) under the ``circuits`` directory"
msgstr ""

#: ../../release_notes.rst:4913
msgid "Renamed the algorithm ``QSVMVariational`` to ``VQC``, which stands for Variational Quantum Classifier"
msgstr ""

#: ../../release_notes.rst:4915
msgid "Renamed the algorithm ``QSVMKernel`` to ``QSVM``"
msgstr ""

#: ../../release_notes.rst:4916
msgid "Renamed the class ``SVMInput`` to ``ClassificationInput``"
msgstr ""

#: ../../release_notes.rst:4917
msgid "Renamed problem type ``'svm_classification'`` to ``'classification'``"
msgstr ""

#: ../../release_notes.rst:4918
msgid "Changed the type of ``entangler_map`` used in ``FeatureMap`` and ``VariationalForm`` to list of lists"
msgstr ""

#: ../../release_notes.rst:4924
msgid "IBM Q Provider 0.1"
msgstr ""

#: ../../release_notes.rst:4929
msgid "This is the first release as a standalone package. If you are installing Terra standalone you'll also need to install the ``qiskit-ibmq-provider`` package with ``pip install qiskit-ibmq-provider`` if you want to use the IBM Q backends."
msgstr ""

#: ../../release_notes.rst:4934
msgid "Support for non-Qobj format jobs has been removed from the provider. You'll have to convert submissions in an older format to Qobj before you can submit."
msgstr ""

#: ../../release_notes.rst:4942
msgid "Qiskit 0.8"
msgstr ""

#: ../../release_notes.rst:4944
msgid "In Qiskit 0.8 we introduced the Qiskit Ignis element. It also includes the Qiskit Terra element 0.7.1 release which contains a bug fix for the BasicAer Python simulator."
msgstr ""

#: ../../release_notes.rst:4949 ../../release_notes.rst:4974
msgid "Terra 0.7"
msgstr ""

#: ../../release_notes.rst:4954 ../../release_notes.rst:5256
msgid "Aer 0.1"
msgstr ""

#: ../../release_notes.rst:4961
msgid "This is the first release of Qiskit Ignis."
msgstr ""

#: ../../release_notes.rst:4967
msgid "Qiskit 0.7"
msgstr ""

#: ../../release_notes.rst:4969
msgid "In Qiskit 0.7 we introduced Qiskit Aer and combined it with Qiskit Terra."
msgstr ""

#: ../../release_notes.rst:4979
msgid "This release includes several new features and many bug fixes. With this release the interfaces for circuit diagram, histogram, bloch vectors, and state visualizations are declared stable. Additionally, this release includes a defined and standardized bit order/endianness throughout all aspects of Qiskit. These are all declared as stable interfaces in this release which won't have breaking changes made moving forward, unless there is appropriate and lengthy deprecation periods warning of any coming changes."
msgstr ""

#: ../../release_notes.rst:4987
msgid "There is also the introduction of the following new features:"
msgstr ""

#: ../../release_notes.rst:4989
msgid "A new ASCII art circuit drawing output mode"
msgstr ""

#: ../../release_notes.rst:4990
msgid "A new circuit drawing interface off of ``QuantumCircuit`` objects that enables calls of ``circuit.draw()`` or ``print(circuit)`` to render a drawing of circuits"
msgstr ""

#: ../../release_notes.rst:4993
msgid "A visualizer for drawing the DAG representation of a circuit"
msgstr ""

#: ../../release_notes.rst:4994
msgid "A new quantum state plot type for hinton diagrams in the local matplotlib based state plots"
msgstr ""

#: ../../release_notes.rst:4996
msgid "2 new constructor methods off the ``QuantumCircuit`` class ``from_qasm_str()`` and ``from_qasm_file()`` which let you easily create a circuit object from OpenQASM"
msgstr ""

#: ../../release_notes.rst:4999
msgid "A new function ``plot_bloch_multivector()`` to plot Bloch vectors from a tensored state vector or density matrix"
msgstr ""

#: ../../release_notes.rst:5001
msgid "Per-shot measurement results are available in simulators and select devices. These can be accessed by setting the ``memory`` kwarg to ``True`` when calling ``compile()`` or ``execute()`` and then accessed using the ``get_memory()`` method on the ``Result`` object."
msgstr ""

#: ../../release_notes.rst:5005
msgid "A ``qiskit.quantum_info`` module with revamped Pauli objects and methods for working with quantum states"
msgstr ""

#: ../../release_notes.rst:5007
msgid "New transpile passes for circuit analysis and transformation: ``CommutationAnalysis``, ``CommutationTransformation``, ``CXCancellation``, ``Decompose``, ``Unroll``, ``Optimize1QGates``, ``CheckMap``, ``CXDirection``, ``BarrierBeforeFinalMeasurements``"
msgstr ""

#: ../../release_notes.rst:5011
msgid "New alternative swap mapper passes in the transpiler: ``BasicSwap``, ``LookaheadSwap``, ``StochasticSwap``"
msgstr ""

#: ../../release_notes.rst:5013
msgid "More advanced transpiler infrastructure with support for analysis passes, transformation passes, a global ``property_set`` for the pass manager, and repeat-until control of passes"
msgstr ""

#: ../../release_notes.rst:5022
msgid "As part of the 0.7 release the following things have been deprecated and will either be removed or changed in a backwards incompatible manner in a future release. While not strictly necessary these are things to adjust for before the next release to avoid a breaking change."
msgstr ""

#: ../../release_notes.rst:5027
msgid "``plot_circuit()``, ``latex_circuit_drawer()``, ``generate_latex_source()``, and ``matplotlib_circuit_drawer()`` from qiskit.tools.visualization are deprecated. Instead the ``circuit_drawer()`` function from the same module should be used, there are kwarg options to mirror the functionality of all the deprecated functions."
msgstr ""

#: ../../release_notes.rst:5032
msgid "The current default output of ``circuit_drawer()`` (using latex and falling back on python) is deprecated and will be changed to just use the ``text`` output by default in future releases."
msgstr ""

#: ../../release_notes.rst:5035
msgid "The ``qiskit.wrapper.load_qasm_string()`` and ``qiskit.wrapper.load_qasm_file()`` functions are deprecated and the ``QuantumCircuit.from_qasm_str()`` and ``QuantumCircuit.from_qasm_file()`` constructor methods should be used instead."
msgstr ""

#: ../../release_notes.rst:5040
msgid "The ``plot_barriers`` and ``reverse_bits`` keys in the ``style`` kwarg dictionary are deprecated, instead the ``qiskit.tools.visualization.circuit_drawer()`` kwargs ``plot_barriers`` and ``reverse_bits`` should be used instead."
msgstr ""

#: ../../release_notes.rst:5044
msgid "The functions ``plot_state()`` and ``iplot_state()`` have been depreciated. Instead the functions ``plot_state_*()`` and ``iplot_state_*()`` should be called for the visualization method required."
msgstr ""

#: ../../release_notes.rst:5047
msgid "The ``skip_transpiler`` argumentt has been deprecated from ``compile()`` and ``execute()``. Instead you can use the ``PassManager`` directly, just set the ``pass_manager`` to a blank ``PassManager`` object with ``PassManager()``"
msgstr ""

#: ../../release_notes.rst:5050
msgid "The ``transpile_dag()`` function ``format`` kwarg for emitting different output formats is deprecated, instead you should convert the default output ``DAGCircuit`` object to the desired format."
msgstr ""

#: ../../release_notes.rst:5053
msgid "The unrollers have been deprecated, moving forward only DAG to DAG unrolling will be supported."
msgstr ""

#: ../../release_notes.rst:5056
msgid "Please note that some backwards-incompatible changes have been made during this release. The following notes contain information on how to adapt to these changes."
msgstr ""

#: ../../release_notes.rst:5061
msgid "Changes to Result objects"
msgstr ""

#: ../../release_notes.rst:5063
msgid "As part of the rewrite of the Results object to be more consistent and a stable interface moving forward a few changes have been made to how you access the data stored in the result object. First the ``get_data()`` method has been renamed to just ``data()``. Accompanying that change is a change in the data format returned by the function. It is now returning the raw data from the backends instead of doing any post-processing. For example, in previous versions you could call::"
msgstr ""

#: ../../release_notes.rst:5075
msgid "and that would return the unitary matrix like::"
msgstr ""

#: ../../release_notes.rst:5079
msgid "But now if you call (with the renamed method)::"
msgstr ""

#: ../../release_notes.rst:5083
msgid "it will return something like::"
msgstr ""

#: ../../release_notes.rst:5087
msgid "To get the post processed results in the same format as before the 0.7 release you must use the ``get_counts()``, ``get_statevector()``, and ``get_unitary()`` methods on the result object instead of ``get_data()['counts']``, ``get_data()['statevector']``, and ``get_data()['unitary']`` respectively."
msgstr ""

#: ../../release_notes.rst:5092
msgid "Additionally, support for ``len()`` and indexing on a ``Result`` object has been removed. Instead you should deal with the output from the post processed methods on the Result objects."
msgstr ""

#: ../../release_notes.rst:5096
msgid "Also, the ``get_snapshot()`` and ``get_snapshots()`` methods from the ``Result`` class have been removed. Instead you can access the snapshots using ``Result.data()['snapshots']``."
msgstr ""

#: ../../release_notes.rst:5102
msgid "Changes to Visualization"
msgstr ""

#: ../../release_notes.rst:5104
msgid "The largest change made to visualization in the 0.7 release is the removal of Matplotlib and other visualization dependencies from the project requirements. This was done to simplify the requirements and configuration required for installing Qiskit. If you plan to use any visualizations (including all the jupyter magics) except for the ``text``, ``latex``, and ``latex_source`` output for the circuit drawer you'll you must manually ensure that the visualization dependencies are installed. You can leverage the optional requirements to the Qiskit Terra package to do this::"
msgstr ""

#: ../../release_notes.rst:5115
msgid "Aside from this there have been changes made to several of the interfaces as part of the stabilization which may have an impact on existing code. The first is the ``basis`` kwarg in the ``circuit_drawer()`` function is no longer accepted. If you were relying on the ``circuit_drawer()`` to adjust the basis gates used in drawing a circuit diagram you will have to do this priort to calling ``circuit_drawer()``. For example::"
msgstr ""

#: ../../release_notes.rst:5125
msgid "will have to be adjust to be::"
msgstr ""

#: ../../release_notes.rst:5134
msgid "Moving forward the ``circuit_drawer()`` function will be the sole interface for circuit drawing in the visualization module. Prior to the 0.7 release there were several other functions which either used different output backends or changed the output for drawing circuits. However, all those other functions have been deprecated and that functionality has been integrated as options on ``circuit_drawer()``."
msgstr ""

#: ../../release_notes.rst:5141
msgid "For the other visualization functions, ``plot_histogram()`` and ``plot_state()`` there are also a few changes to check when upgrading. First is the output from these functions has changed, in prior releases these would interactively show the output visualization. However that has changed to instead return a ``matplotlib.Figure`` object. This provides much more flexibility and options to interact with the visualization prior to saving or showing it. This will require adjustment to how these functions are consumed. For example, prior to this release when calling::"
msgstr ""

#: ../../release_notes.rst:5153
msgid "would open up new windows (depending on matplotlib backend) to display the visualization. However starting in the 0.7 you'll have to call ``show()`` on the output to mirror this behavior. For example::"
msgstr ""

#: ../../release_notes.rst:5160
msgid "or::"
msgstr ""

#: ../../release_notes.rst:5167
msgid "Note that this is only for when running outside of Jupyter. No adjustment is required inside a Jupyter environment because Jupyter notebooks natively understand how to render ``matplotlib.Figure`` objects."
msgstr ""

#: ../../release_notes.rst:5171
msgid "However, returning the Figure object provides additional flexibility for dealing with the output. For example instead of just showing the figure you can now directly save it to a file by leveraging the ``savefig()`` method. For example::"
msgstr ""

#: ../../release_notes.rst:5181
msgid "The other key aspect which has changed with these functions is when running under jupyter. In the 0.6 release ``plot_state()`` and ``plot_histogram()`` when running under jupyter the default behavior was to use the interactive Javascript plots if the externally hosted Javascript library for rendering the visualization was reachable over the network. If not it would just use the matplotlib version. However in the 0.7 release this no longer the case, and separate functions for the interactive plots, ``iplot_state()`` and ``iplot_histogram()`` are to be used instead. ``plot_state()`` and ``plot_histogram()`` always use the matplotlib versions."
msgstr ""

#: ../../release_notes.rst:5191
msgid "Additionally, starting in this release the ``plot_state()`` function is deprecated in favor of calling individual methods for each method of plotting a quantum state. While the ``plot_state()`` function will continue to work until the 0.9 release, it will emit a warning each time it is used. The"
msgstr ""

#: ../../release_notes.rst:5207
msgid "The same is true for the interactive JS equivalent, ``iplot_state()``. The function names are all the same, just with a prepended `i` for each function. For example, ``iplot_state(rho, method='paulivec')`` is ``iplot_state_paulivec(rho)``."
msgstr ""

#: ../../release_notes.rst:5213
msgid "Changes to Backends"
msgstr ""

#: ../../release_notes.rst:5215
msgid "With the improvements made in the 0.7 release there are a few things related to backends to keep in mind when upgrading. The biggest change is the restructuring of the provider instances in the root  ``qiskit``` namespace. The ``Aer`` provider is not installed by default and requires the installation of the ``qiskit-aer`` package. This package contains the new high performance fully featured simulator. If you installed via ``pip install qiskit`` you'll already have this installed. The python simulators are now available under ``qiskit.BasicAer`` and the old C++ simulators are available with ``qiskit.LegacySimulators``. This also means that the implicit fallback to python based simulators when the C++ simulators are not found doesn't exist anymore. If you ask for a local C++ based simulator backend, and it can't be found an exception will be raised instead of just using the python simulator instead."
msgstr ""

#: ../../release_notes.rst:5229
msgid "Additionally the previously deprecation top level functions ``register()`` and ``available_backends()`` have been removed. Also, the deprecated ``backend.parameters()`` and ``backend.calibration()`` methods have been removed in favor of ``backend.properties()``. You can refer to the 0.6 release notes section :ref:`backends` for more details on these changes."
msgstr ""

#: ../../release_notes.rst:5235
msgid "The ``backend.jobs()`` and ``backend.retrieve_jobs()`` calls no longer return results from those jobs. Instead you must call the ``result()`` method on the returned jobs objects."
msgstr ""

#: ../../release_notes.rst:5240
msgid "Changes to the compiler, transpiler, and unrollers"
msgstr ""

#: ../../release_notes.rst:5242
msgid "As part of an effort to stabilize the compiler interfaces there have been several changes to be aware of when leveraging the compiler functions. First it is important to note that the ``qiskit.transpiler.transpile()`` function now takes a QuantumCircuit object (or a list of them) and returns a QuantumCircuit object (or a list of them). The DAG processing is done internally now."
msgstr ""

#: ../../release_notes.rst:5249
msgid "You can also easily switch between circuits, DAGs, and Qobj now using the functions in ``qiskit.converters``."
msgstr ""

#: ../../release_notes.rst:5261
msgid "Aer provides three simulator backends:"
msgstr ""

#: ../../release_notes.rst:5263
msgid "``QasmSimulator``: simulate experiments and return measurement outcomes"
msgstr ""

#: ../../release_notes.rst:5264
msgid "``StatevectorSimulator``: return the final statevector for a quantum circuit acting on the all zero state"
msgstr ""

#: ../../release_notes.rst:5266
msgid "``UnitarySimulator``: return the unitary matrix for a quantum circuit"
msgstr ""

#: ../../release_notes.rst:5268
msgid "``noise`` module: contains advanced noise modeling features for the ``QasmSimulator``"
msgstr ""

#: ../../release_notes.rst:5271
msgid "``NoiseModel``, ``QuantumError``, ``ReadoutError`` classes for simulating a Qiskit quantum circuit in the presence of errors"
msgstr ""

#: ../../release_notes.rst:5273
msgid "``errors`` submodule including functions for generating ``QuantumError`` objects for the following types of quantum errors: Kraus, mixed unitary, coherent unitary, Pauli, depolarizing, thermal relaxation, amplitude damping, phase damping, combined phase and amplitude damping"
msgstr ""

#: ../../release_notes.rst:5277
msgid "``device`` submodule for automatically generating a noise model based on the ``BackendProperties`` of a device"
msgstr ""

#: ../../release_notes.rst:5280
msgid "``utils`` module:"
msgstr ""

#: ../../release_notes.rst:5282
msgid "``qobj_utils`` provides functions for directly modifying a Qobj to insert special simulator instructions not yet supported through the Qiskit Terra API."
msgstr ""

#: ../../release_notes.rst:5287
msgid "Aqua 0.4"
msgstr ""

#: ../../release_notes.rst:5292
msgid "Programmatic APIs for algorithms and components -- each component can now be instantiated and initialized via a single (non-empty) constructor call"
msgstr ""

#: ../../release_notes.rst:5294
msgid "``QuantumInstance`` API for algorithm/backend decoupling -- ``QuantumInstance`` encapsulates a backend and its settings"
msgstr ""

#: ../../release_notes.rst:5296
msgid "Updated documentation and Jupyter Notebooks illustrating the new programmatic APIs"
msgstr ""

#: ../../release_notes.rst:5298
msgid "Transparent parallelization for gradient-based optimizers"
msgstr ""

#: ../../release_notes.rst:5299
msgid "Multiple-Controlled-NOT (cnx) operation"
msgstr ""

#: ../../release_notes.rst:5300
msgid "Pluggable algorithmic component ``RandomDistribution``"
msgstr ""

#: ../../release_notes.rst:5301
msgid "Concrete implementations of ``RandomDistribution``: ``BernoulliDistribution``, ``LogNormalDistribution``, ``MultivariateDistribution``, ``MultivariateNormalDistribution``, ``MultivariateUniformDistribution``, ``NormalDistribution``, ``UniformDistribution``, and ``UnivariateDistribution``"
msgstr ""

#: ../../release_notes.rst:5306
msgid "Concrete implementations of ``UncertaintyProblem``: ``FixedIncomeExpectedValue``, ``EuropeanCallExpectedValue``, and ``EuropeanCallDelta``"
msgstr ""

#: ../../release_notes.rst:5309
msgid "Amplitude Estimation algorithm"
msgstr ""

#: ../../release_notes.rst:5310
msgid "Qiskit Optimization: New Ising models for optimization problems exact cover, set packing, vertex cover, clique, and graph partition"
msgstr ""

#: ../../release_notes.rst:5312
msgid "Qiskit AI:"
msgstr ""

#: ../../release_notes.rst:5314
msgid "New feature maps extending the ``FeatureMap`` pluggable interface: ``PauliExpansion`` and ``PauliZExpansion``"
msgstr ""

#: ../../release_notes.rst:5316
msgid "Training model serialization/deserialization mechanism"
msgstr ""

#: ../../release_notes.rst:5318
msgid "Qiskit Finance:"
msgstr ""

#: ../../release_notes.rst:5320
msgid "Amplitude estimation for Bernoulli random variable: illustration of amplitude estimation on a single qubit problem"
msgstr ""

#: ../../release_notes.rst:5322
msgid "Loading of multiple univariate and multivariate random distributions"
msgstr ""

#: ../../release_notes.rst:5323
msgid "European call option: expected value and delta (using univariate distributions)"
msgstr ""

#: ../../release_notes.rst:5325
msgid "Fixed income asset pricing: expected value (using multivariate distributions)"
msgstr ""

#: ../../release_notes.rst:5328
msgid "The Pauli string in ``Operator`` class is aligned with Terra 0.7. Now the order of a n-qubit pauli string is ``q_{n-1}...q{0}`` Thus, the (de)serialier (``save_to_dict`` and ``load_from_dict``) in the ``Operator`` class are also changed to adopt the changes of ``Pauli`` class."
msgstr ""

#: ../../release_notes.rst:5336
msgid "``HartreeFock`` component of pluggable type ``InitialState`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:5338
msgid "``UCCSD`` component of pluggable type ``VariationalForm`` moved to Qiskit Chemistry"
msgstr ""

#: ../../release_notes.rst:5344
msgid "Qiskit 0.6"
msgstr ""

#: ../../release_notes.rst:5347
msgid "Terra 0.6"
msgstr ""

#: ../../release_notes.rst:5352
msgid "This release includes a redesign of internal components centered around a new, formal communication format (Qobj), along with long awaited features to improve the user experience as a whole. The highlights, compared to the 0.5 release, are:"
msgstr ""

#: ../../release_notes.rst:5357
msgid "Improvements for inter-operability (based on the Qobj specification) and extensibility (facilities for extending Qiskit with new backends in a seamless way)"
msgstr ""

#: ../../release_notes.rst:5360
msgid "New options for handling credentials and authentication for the IBM Q backends, aimed at simplifying the process and supporting automatic loading of user credentials"
msgstr ""

#: ../../release_notes.rst:5363
msgid "A revamp of the visualization utilities: stylish interactive visualizations are now available for Jupyter users, along with refinements for the circuit drawer (including a matplotlib-based version)"
msgstr ""

#: ../../release_notes.rst:5366
msgid "Performance improvements centered around circuit transpilation: the basis for a more flexible and modular architecture have been set, including parallelization of the circuit compilation and numerous optimizations"
msgstr ""

#: ../../release_notes.rst:5374
msgid "Please note that some backwards-incompatible changes have been introduced during this release -- the following notes contain information on how to adapt to the new changes."
msgstr ""

#: ../../release_notes.rst:5379
msgid "Removal of ``QuantumProgram``"
msgstr ""

#: ../../release_notes.rst:5381
msgid "As hinted during the 0.5 release, the deprecation of the  ``QuantumProgram`` class has now been completed and is no longer available, in favor of working with the individual components (:class:`~qiskit.backends.basejob.BaseJob`, :class:`~qiskit._quantumcircuit.QuantumCircuit`, :class:`~qiskit._classicalregister.ClassicalRegister`, :class:`~qiskit._quantumregister.QuantumRegister`, :mod:`~qiskit`) directly."
msgstr ""

#: ../../release_notes.rst:5389
msgid "Please check the :ref:`0.5 release notes <quantum-program-0-5>` and the examples for details about the transition::"
msgstr ""

#: ../../release_notes.rst:5414
msgid "IBM Q Authentication and ``Qconfig.py``"
msgstr ""

#: ../../release_notes.rst:5416
msgid "The managing of credentials for authenticating when using the IBM Q backends has been expanded, and there are new options that can be used for convenience:"
msgstr ""

#: ../../release_notes.rst:5419
msgid "save your credentials in disk once, and automatically load them in future sessions. This provides a one-off mechanism::"
msgstr ""

#: ../../release_notes.rst:5425
msgid "afterwards, your credentials can be automatically loaded from disk by invoking :meth:`~qiskit.backends.ibmq.ibmqprovider.IBMQ.load_accounts`::"
msgstr ""

#: ../../release_notes.rst:5431
msgid "or you can load only specific accounts if you only want to use those in a session::"
msgstr ""

#: ../../release_notes.rst:5435
msgid "use environment variables. If ``QE_TOKEN`` and ``QE_URL`` is set, the ``IBMQ.load_accounts()`` call will automatically load the credentials from them."
msgstr ""

#: ../../release_notes.rst:5439
msgid "Additionally, the previous method of having a ``Qconfig.py`` file in the program folder and passing the credentials explicitly is still supported."
msgstr ""

#: ../../release_notes.rst:5446
msgid "Working with backends"
msgstr ""

#: ../../release_notes.rst:5448
msgid "A new mechanism has been introduced in Terra 0.6 as the recommended way for obtaining a backend, allowing for more powerful and unified filtering and integrated with the new credentials system. The previous top-level methods :meth:`~qiskit.wrapper._wrapper.register`, :meth:`~qiskit.wrapper._wrapper.available_backends` and :meth:`~qiskit.wrapper._wrapper.get_backend` are still supported, but will deprecated in upcoming versions in favor of using the `qiskit.IBMQ` and `qiskit.Aer` objects directly, which allow for more complex filtering."
msgstr ""

#: ../../release_notes.rst:5457
msgid "For example, to list and use a local backend::"
msgstr ""

#: ../../release_notes.rst:5464
msgid "And for listing and using remote backends::"
msgstr ""

#: ../../release_notes.rst:5472
msgid "Please note as well that the names of the local simulators have been simplified. The previous names can still be used, but it is encouraged to use the new, shorter names:"
msgstr ""

#: ../../release_notes.rst:5477 ../../release_notes.rst:5514
msgid "Qiskit Terra 0.5"
msgstr ""

#: ../../release_notes.rst:5479
msgid "'local_qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:5479
msgid "'qasm_simulator'"
msgstr ""

#: ../../release_notes.rst:5480
msgid "'local_statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:5480
msgid "'statevector_simulator'"
msgstr ""

#: ../../release_notes.rst:5481
msgid "'local_unitary_simulator_py'"
msgstr ""

#: ../../release_notes.rst:5481
msgid "'unitary_simulator'"
msgstr ""

#: ../../release_notes.rst:5486
msgid "Backend and Job API changes"
msgstr ""

#: ../../release_notes.rst:5488
msgid "Jobs submitted to IBM Q backends have improved capabilities. It is possible to cancel them and replenish credits (``job.cancel()``), and to retrieve previous jobs executed on a specific backend either by job id (``backend.retrieve_job(job_id)``) or in batch of latest jobs (``backend.jobs(limit)``)"
msgstr ""

#: ../../release_notes.rst:5494
msgid "Properties for checking each individual job status (``queued``, ``running``, ``validating``, ``done`` and ``cancelled``) no longer exist. If you want to check the job status, use the identity comparison against ``job.status``::"
msgstr ""

#: ../../release_notes.rst:5505
msgid "Please consult the new documentation of the :class:`~qiskit.backends.ibmq.ibmqjob.IBMQJob` class to get further insight in how to use the simplified API."
msgstr ""

#: ../../release_notes.rst:5509
msgid "A number of members of :class:`~qiskit.backends.basebackend.BaseBackend` and :class:`~qiskit.backends.basejob.BaseJob` are no longer properties, but methods, and as a result they need to be invoked as functions."
msgstr ""

#: ../../release_notes.rst:5516
msgid "backend.name"
msgstr ""

#: ../../release_notes.rst:5516
msgid "backend.name()"
msgstr ""

#: ../../release_notes.rst:5517
msgid "backend.status"
msgstr ""

#: ../../release_notes.rst:5517
msgid "backend.status()"
msgstr ""

#: ../../release_notes.rst:5518
msgid "backend.configuration"
msgstr ""

#: ../../release_notes.rst:5518
msgid "backend.configuration()"
msgstr ""

#: ../../release_notes.rst:5519
msgid "backend.calibration"
msgstr ""

#: ../../release_notes.rst:5519
msgid "backend.properties()"
msgstr ""

#: ../../release_notes.rst:5520
msgid "backend.parameters"
msgstr ""

#: ../../release_notes.rst:5520
msgid "backend.jobs() backend.retrieve_job(job_id)"
msgstr ""

#: ../../release_notes.rst:5522
msgid "job.status"
msgstr ""

#: ../../release_notes.rst:5522
msgid "job.status()"
msgstr ""

#: ../../release_notes.rst:5523
msgid "job.cancelled"
msgstr ""

#: ../../release_notes.rst:5523
msgid "job.queue_position()"
msgstr ""

#: ../../release_notes.rst:5524
msgid "job.running"
msgstr ""

#: ../../release_notes.rst:5524
msgid "job.cancel()"
msgstr ""

#: ../../release_notes.rst:5525
msgid "job.queued"
msgstr ""

#: ../../release_notes.rst:5526
msgid "job.done"
msgstr ""

#: ../../release_notes.rst:5531
msgid "Better Jupyter tools"
msgstr ""

#: ../../release_notes.rst:5533
msgid "The new release contains improvements to the user experience while using Jupyter notebooks."
msgstr ""

#: ../../release_notes.rst:5536
msgid "First, new interactive visualizations of counts histograms and quantum states are provided: :meth:`~qiskit.tools.visualization.plot_histogram` and :meth:`~qiskit.tools.visualization.plot_state`. These methods will default to the new interactive kind when the environment is Jupyter and internet connection exists."
msgstr ""

#: ../../release_notes.rst:5543
#, python-format
msgid "Secondly, the new release provides Jupyter cell magics for keeping track of the progress of your code. Use ``%%qiskit_job_status`` to keep track of the status of submitted jobs to IBM Q backends. Use ``%%qiskit_progress_bar`` to keep track of the progress of compilation/execution."
msgstr ""

#: ../../release_notes.rst:5552
msgid "Qiskit 0.5"
msgstr ""

#: ../../release_notes.rst:5555
msgid "Terra 0.5"
msgstr ""

#: ../../release_notes.rst:5560
msgid "This release brings a number of improvements to Qiskit, both for the user experience and under the hood. Please refer to the full changelog for a detailed description of the changes - the highlights are:"
msgstr ""

#: ../../release_notes.rst:5564
msgid "new ``statevector`` :mod:`simulators <qiskit.backends.local>` and feature and performance improvements to the existing ones (in particular to the C++ simulator), along with a reorganization of how to work with backends focused on extensibility and flexibility (using aliases and backend providers)"
msgstr ""

#: ../../release_notes.rst:5568
msgid "reorganization of the asynchronous features, providing a friendlier interface for running jobs asynchronously via :class:`Job` instances"
msgstr ""

#: ../../release_notes.rst:5570
msgid "numerous improvements and fixes throughout the Terra as a whole, both for convenience of the users (such as allowing anonymous registers) and for enhanced functionality (such as improved plotting of circuits)"
msgstr ""

#: ../../release_notes.rst:5578
msgid "Please note that several backwards-incompatible changes have been introduced during this release as a result of the ongoing development. While some of these features will continue to be supported during a period of time before being fully deprecated, it is recommended to update your programs in order to prepare for the new versions and take advantage of the new functionality."
msgstr ""

#: ../../release_notes.rst:5588
msgid "``QuantumProgram`` changes"
msgstr ""

#: ../../release_notes.rst:5590
msgid "Several methods of the :class:`~qiskit.QuantumProgram` class are on their way to being deprecated:"
msgstr ""

#: ../../release_notes.rst:5593
msgid "methods for interacting **with the backends and the API**:"
msgstr ""

#: ../../release_notes.rst:5595
msgid "The recommended way for opening a connection to the IBM Q API and for using the backends is through the top-level functions directly instead of the ``QuantumProgram`` methods. In particular, the :func:`qiskit.register` method provides the equivalent of the previous :func:`qiskit.QuantumProgram.set_api` call. In a similar vein, there is a new :func:`qiskit.available_backends`, :func:`qiskit.get_backend` and related functions for querying the available backends directly. For example, the following snippet for version 0.4::"
msgstr ""

#: ../../release_notes.rst:5612 ../../release_notes.rst:5630
msgid "would be equivalent to the following snippet for version 0.5::"
msgstr ""

#: ../../release_notes.rst:5621
msgid "methods for **compiling and executing programs**:"
msgstr ""

#: ../../release_notes.rst:5623
msgid "The top-level functions now also provide equivalents for the :func:`qiskit.QuantumProgram.compile` and :func:`qiskit.QuantumProgram.execute` methods. For example, the following snippet from version 0.4::"
msgstr ""

#: ../../release_notes.rst:5636
msgid "In general, from version 0.5 onwards we encourage to try to make use of the individual objects and classes directly instead of relying on ``QuantumProgram``. For example, a :class:`~qiskit.QuantumCircuit` can be instantiated and constructed by appending :class:`~qiskit.QuantumRegister`, :class:`~qiskit.ClassicalRegister`, and gates directly. Please check the update example in the Quickstart section, or the ``using_qiskit_core_level_0.py`` and ``using_qiskit_core_level_1.py`` examples on the main repository."
msgstr ""

#: ../../release_notes.rst:5646
msgid "Backend name changes"
msgstr ""

#: ../../release_notes.rst:5648
msgid "In order to provide a more extensible framework for backends, there have been some design changes accordingly:"
msgstr ""

#: ../../release_notes.rst:5651
msgid "**local simulator names**"
msgstr ""

#: ../../release_notes.rst:5653
msgid "The names of the local simulators have been homogenized in order to follow the same pattern: ``PROVIDERNAME_TYPE_simulator_LANGUAGEORPROJECT`` - for example, the C++ simulator previously named ``local_qiskit_simulator`` is now ``local_qasm_simulator_cpp``. An overview of the current simulators:"
msgstr ""

#: ../../release_notes.rst:5659
msgid "``QASM`` simulator is supposed to be like an experiment. You apply a circuit on some qubits, and observe measurement results - and you repeat for many shots to get a histogram of counts via ``result.get_counts()``."
msgstr ""

#: ../../release_notes.rst:5662
msgid "``Statevector`` simulator is to get the full statevector (:math:`2^n` amplitudes) after evolving the zero state through the circuit, and can be obtained via ``result.get_statevector()``."
msgstr ""

#: ../../release_notes.rst:5665
msgid "``Unitary`` simulator is to get the unitary matrix equivalent of the circuit, returned via ``result.get_unitary()``."
msgstr ""

#: ../../release_notes.rst:5667
msgid "In addition, you can get intermediate states from a simulator by applying a ``snapshot(slot)`` instruction at various spots in the circuit. This will save the current state of the simulator in a given slot, which can later be retrieved via ``result.get_snapshot(slot)``."
msgstr ""

#: ../../release_notes.rst:5672
msgid "**backend aliases**:"
msgstr ""

#: ../../release_notes.rst:5674
msgid "The SDK now provides an \"alias\" system that allows for automatically using the most performant simulator of a specific type, if it is available in your system. For example, with the following snippet::"
msgstr ""

#: ../../release_notes.rst:5682
msgid "the backend will be the C++ statevector simulator if available, falling back to the Python statevector simulator if not present."
msgstr ""

#: ../../release_notes.rst:5686
msgid "More flexible names and parameters"
msgstr ""

#: ../../release_notes.rst:5688
msgid "Several functions of the SDK have been made more flexible and user-friendly:"
msgstr ""

#: ../../release_notes.rst:5690
msgid "**automatic circuit and register names**"
msgstr ""

#: ../../release_notes.rst:5692
msgid ":class:`qiskit.ClassicalRegister`, :class:`qiskit.QuantumRegister` and :class:`qiskit.QuantumCircuit` can now be instantiated without explicitly giving them a name - a new autonaming feature will automatically assign them an identifier::"
msgstr ""

#: ../../release_notes.rst:5699
msgid "Please note as well that the order of the parameters have been swapped ``QuantumRegister(size, name)``."
msgstr ""

#: ../../release_notes.rst:5702
msgid "**methods accepting names or instances**"
msgstr ""

#: ../../release_notes.rst:5704
msgid "In combination with the autonaming changes, several methods such as :func:`qiskit.Result.get_data` now accept both names and instances for convenience. For example, when retrieving the results for a job that has a single circuit such as::"
msgstr ""

#: ../../release_notes.rst:5713
msgid "The following calls are equivalent::"
msgstr ""

