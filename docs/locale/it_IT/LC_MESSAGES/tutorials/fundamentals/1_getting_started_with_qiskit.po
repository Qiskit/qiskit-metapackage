msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-12 12:01+0000\n"
"PO-Revision-Date: 2020-03-12 12:43\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /poBranch/docs/locale/en/LC_MESSAGES/tutorials/fundamentals/1_getting_started_with_qiskit.po\n"
"Language: it_IT\n"

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:9
msgid "Getting Started with Qiskit"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:11
msgid "Here, we provide an overview of working with Qiskit. The fundamental package of Qiskit is Terra that provides the basic building blocks necessary to program quantum computers. The fundamental unit of Qiskit is the `**quantum circuit** <https://en.wikipedia.org/wiki/Quantum_circuit>`__. A basic workflow using Qiskit consists of two stages: **Build** and **Execute**. **Build** allows you to make different quantum circuits that represent the problem you are solving, and **Execute** that allows you to run them on different backends. After the jobs have been run, the data is collected and postprocessed depending on the desired output."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:30
msgid "Circuit Basics"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:33
msgid "Building the circuit"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:35
msgid "The basic element needed for your first program is the QuantumCircuit. We begin by creating a ``QuantumCircuit`` comprised of three qubits."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:51
msgid "After you create the circuit with its registers, you can add gates (\"operations\") to manipulate the registers. As you proceed through the tutorials you will find more gates and circuits; below is an example of a quantum circuit that makes a three-qubit GHZ state"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:53
msgid "|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:55
msgid "To create such a state, we start with a three-qubit quantum register. By default, each qubit in the register is initialized to :math:`|0\\rangle`. To make the GHZ state, we apply the following gates: \\* A Hadamard gate :math:`H` on qubit 0, which puts it into the superposition state :math:`\\left(|0\\rangle+|1\\rangle\\right)/\\sqrt{2}`. \\* A controlled-Not operation (:math:`C_{X}`) between qubit 0 and qubit 1. \\* A controlled-Not operation between qubit 0 and qubit 2."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:57
msgid "On an ideal quantum computer, the state produced by running this circuit would be the GHZ state above."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:59
msgid "In Qiskit, operations can be added to the circuit one by one, as shown below."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:101
msgid "Visualize Circuit"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:103
msgid "You can visualize your circuit using Qiskit ``QuantumCircuit.draw()``, which plots the circuit in the form found in many textbooks."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:168
msgid "In this circuit, the qubits are put in order, with qubit zero at the top and qubit two at the bottom. The circuit is read left to right (meaning that gates that are applied earlier in the circuit show up further to the left)."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:174
msgid "Note: If you don't have matplotlib set up as your default in '~/.qiskit/settings.conf' it will use a text-based drawer over matplotlib. To set the default to matplotlib, use the following in the settings.conf"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:181
msgid "For those that want the full LaTeX experience, you can also set the circuit\\_drawer = latex."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:193
msgid "Simulating circuits using Qiskit Aer"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:195
msgid "Qiskit Aer is our package for simulating quantum circuits. It provides many different backends for doing a simulation. There is also a basic, Python only, implementation called ``BasicAer`` in Terra that can be used as a drop-in replacement for ``Aer`` in the examples below."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:198
msgid "Statevector backend"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:200
msgid "The most common backend in Qiskit Aer is the ``statevector_simulator``. This simulator returns the quantum state, which is a complex vector of dimensions :math:`2^n`, where :math:`n` is the number of qubits (so be careful using this as it will quickly get too large to run on your machine)."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:211
msgid "When representing the state of a multi-qubit system, the tensor order used in Qiskit is different than that used in most physics textbooks. Suppose there are :math:`n` qubits, and qubit :math:`j` is labeled as :math:`Q_{j}`. Qiskit uses an ordering in which the :math:`n^{\\mathrm{th}}` qubit is on the left side of the tensor product, so that the basis vectors are labeled as :math:`Q_n\\otimes \\cdots \\otimes Q_1\\otimes Q_0`."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:213
msgid "For example, if qubit zero is in state 0, qubit 1 is in state 0, and qubit 2 is in state 1, Qiskit would represent this state as :math:`|100\\rangle`, whereas many physics textbooks would represent it as :math:`|001\\rangle`."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:215
msgid "This difference in labeling affects the way multi-qubit operations are represented as matrices. For example, Qiskit represents a controlled-X (:math:`C_{X}`) operation with qubit 0 being the control and qubit 1 being the target as"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:217
msgid "C_X = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\  0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 \\\\\\end{pmatrix}."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:223
msgid "To run the above circuit using the statevector simulator, first you need to import Aer and then set the backend to ``statevector_simulator``."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:242
msgid "Now that we have chosen the backend, it's time to compile and run the quantum circuit. In Qiskit we provide the ``execute`` function for this. ``execute`` returns a ``job`` object that encapsulates information about the job submitted to the backend."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:248
msgid "Tip: You can obtain the above parameters in Jupyter. Simply place the text cursor on a function and press Shift+Tab."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:268
msgid "When you run a program, a job object is made that has the following two useful methods: ``job.status()`` and ``job.result()``, which return the status of the job and a result object, respectively."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:274
msgid "Note: Jobs run asynchronously, but when the result method is called, it switches to synchronous and waits for it to finish before moving on to another task."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:293
msgid "The results object contains the data and Qiskit provides the method ``result.get_statevector(circ)`` to return the state vector for the quantum circuit."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:329
msgid "Qiskit also provides a visualization toolbox to allow you to view these results."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:331
msgid "Below, we use the visualization function to plot the real and imaginary components of the state density matrix :nbsphinx-math:`\\rho`."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:356
msgid "Unitary backend"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:363
msgid "Qiskit Aer also includes a ``unitary_simulator`` that works *provided all the elements in the circuit are unitary operations*. This backend calculates the :math:`2^n \\times 2^n` matrix representing the gates in the quantum circuit."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:433
msgid "OpenQASM backend"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:440
msgid "The simulators above are useful because they provide information about the state output by the ideal circuit and the matrix representation of the circuit. However, a real experiment terminates by *measuring* each qubit (usually in the computational :math:`|0\\rangle, |1\\rangle` basis). Without measurement, we cannot gain information about the state. Measurements cause the quantum system to collapse into classical bits."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:442
msgid "For example, suppose we make independent measurements on each qubit of the three-qubit GHZ state"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:444
msgid "|\\psi\\rangle = |000\\rangle +|111\\rangle)/\\sqrt{2},  and let :math:`xyz` denote the bitstring that results. Recall that, under the qubit labeling used by Qiskit, :math:`x` would correspond to the outcome on qubit 2, :math:`y` to the outcome on qubit 1, and :math:`z` to the outcome on qubit 0."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:452
msgid "Note: This representation of the bitstring puts the most significant bit (MSB) on the left, and the least significant bit (LSB) on the right. This is the standard ordering of binary bitstrings. We order the qubits in the same way, which is why Qiskit uses a non-standard tensor product order."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:458
msgid "Recall the probability of obtaining outcome :math:`xyz` is given by"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:460
msgid "\\mathrm{Pr}(xyz) = |\\langle xyz | \\psi \\rangle |^{2}"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:462
msgid "and as such for the GHZ state probability of obtaining 000 or 111 are both 1/2."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:464
msgid "To simulate a circuit that includes measurement, we need to add measurements to the original circuit above, and use a different Aer backend."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:558
msgid "This circuit adds a classical register, and three measurements that are used to map the outcome of qubits to the classical bits."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:560
msgid "To simulate this circuit, we use the ``qasm_simulator`` in Qiskit Aer. Each run of this circuit will yield either the bitstring 000 or 111. To build up statistics about the distribution of the bitstrings (to, e.g., estimate :math:`\\mathrm{Pr}(000)`), we need to repeat the circuit many times. The number of times the circuit is repeated can be specified in the ``execute`` function, via the ``shots`` keyword."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:584
msgid "Once you have a result object, you can access the counts via the function ``get_counts(circuit)``. This gives you the *aggregated* binary outcomes of the circuit you submitted."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:618
msgid "Approximately 50 percent of the time, the output bitstring is 000. Qiskit also provides a function ``plot_histogram``, which allows you to view the outcomes."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:642
msgid "The estimated outcome probabilities :math:`\\mathrm{Pr}(000)` and :math:`\\mathrm{Pr}(111)` are computed by taking the aggregate counts and dividing by the number of shots (times the circuit was repeated). Try changing the ``shots`` keyword in the ``execute`` function and see how the estimated probabilities change."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:650
msgid "Running circuits from the IBM Q account"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:652
msgid "To facilitate access to real quantum computing hardware, we have provided a simple API interface. To access IBM Q devices, you'll need an API token. You can generate, or view, your API token `here <https://quantum-computing.ibm.com/account>`__ (create an account if you don't already have one)."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:654
msgid "Your IBM Q account lets you run your circuit on real devices or on our cloud simulator. Basic account usage can be seen in the examples below. For more detailed instructions on using the IBM Q account."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:669
msgid "After generating your API token, call: ``IBMQ.save_account('MY_TOKEN')``."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:671
msgid "This will store your IBM Q credentials in a local file. Unless your registration information has changed, you only need to do this once. You may now load your accounts by calling,"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:686
msgid "Once your account has been loaded, you have one or more providers available to you"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:701
msgid "Each provider gives access to a selection of services (e.g. Backends) that is authorized by your account. To see the backends available to a given provider, first select the provider by hub, group, project, or a combination thereof:"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:716
msgid "then ask the provider to list its backends:"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:732
msgid "Running circuits on real devices"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:734
msgid "Today's quantum information processors are small and noisy, but are advancing at a fast pace. They provide a great opportunity to explore what `noisy, intermediate-scale quantum (NISQ) <https://arxiv.org/abs/1801.00862>`__ computers can do."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:741
msgid "Let us now grab a backend from the provider on which to run our quantum circuit:"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:756
msgid "To run the circuit on the given device we use ``execute``. Sometimes the devices are busy with jobs from other users. Your job is added to the list of pending jobs called the queue, and executed in this queue order. To monitor the status of our job through the process, we can use the ``job_monitor``"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:787
msgid "``job_exp`` has a ``.result()`` method that lets us get the results from running our circuit."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:793
msgid "Note: When the .result() method is called, the code block will wait until the job has finished before releasing the cell."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:812
msgid "Like before, the counts from the execution can be obtained using ``get_counts(qc)``"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:829
msgid "Simulating circuits using the IBM Q cloud simulator"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:831
msgid "The IBM Q provider also comes with a remote optimized simulator called ``ibmq_qasm_simulator``. This remote simulator is capable of simulating up to 32 qubits. It can be used the same way as the remote real backends."
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:872
msgid "Retrieving a previously run job"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:874
msgid "If your experiment takes longer to run then you have time to wait around, or if you simply want to retrieve old jobs, the IBM Q backends allow you to do that. First, you would need to note your job's ID:"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:891
msgid "Given a job ID, that job object can be later reconstructed from the backend using ``retrieve_job``:"
msgstr ""

#: ../../tutorials/fundamentals/1_getting_started_with_qiskit.ipynb:906
msgid "and then the results can be obtained from the new job object."
msgstr ""

