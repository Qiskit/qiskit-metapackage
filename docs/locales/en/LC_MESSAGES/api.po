# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-21 15:59-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../api/modules.rst:2
msgid "qiskit"
msgstr ""

#: ../../api/qiskit.rst:2
msgid "qiskit package"
msgstr ""

#: of qiskit:1
msgid "Main Qiskit public functionality."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.rst:10
#: ../../api/qiskit.aqua.algorithms.classical.rst:10
#: ../../api/qiskit.aqua.algorithms.many_sample.rst:10
#: ../../api/qiskit.aqua.algorithms.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.rst:10
#: ../../api/qiskit.aqua.circuits.rst:10
#: ../../api/qiskit.aqua.components.optimizers.rst:10
#: ../../api/qiskit.aqua.components.rst:10 ../../api/qiskit.aqua.rst:10
#: ../../api/qiskit.aqua.translators.rst:10
#: ../../api/qiskit.chemistry.aqua_extensions.components.rst:10
#: ../../api/qiskit.chemistry.aqua_extensions.rst:10
#: ../../api/qiskit.chemistry.drivers.gaussiand.rst:10
#: ../../api/qiskit.chemistry.drivers.rst:10 ../../api/qiskit.chemistry.rst:10
#: ../../api/qiskit.extensions.rst:10
#: ../../api/qiskit.ignis.characterization.rst:10
#: ../../api/qiskit.ignis.mitigation.rst:10
#: ../../api/qiskit.ignis.verification.rst:10
#: ../../api/qiskit.ignis.verification.tomography.rst:10
#: ../../api/qiskit.providers.aer.noise.rst:10
#: ../../api/qiskit.providers.aer.rst:10
#: ../../api/qiskit.providers.ibmq.api_v2.rst:10
#: ../../api/qiskit.providers.ibmq.rst:10 ../../api/qiskit.providers.rst:10
#: ../../api/qiskit.pulse.rst:10 ../../api/qiskit.qasm.rst:10
#: ../../api/qiskit.qobj.rst:10 ../../api/qiskit.quantum_info.operators.rst:10
#: ../../api/qiskit.quantum_info.rst:10 ../../api/qiskit.rst:10
#: ../../api/qiskit.test.rst:10 ../../api/qiskit.tools.rst:10
#: ../../api/qiskit.transpiler.passes.mapping.cython.rst:10
#: ../../api/qiskit.transpiler.passes.mapping.rst:10
#: ../../api/qiskit.transpiler.passes.rst:10 ../../api/qiskit.transpiler.rst:10
#: ../../api/qiskit.validation.rst:10 ../../api/qiskit.visualization.rst:10
msgid "Subpackages"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.qaoa.rst:10
#: ../../api/qiskit.aqua.algorithms.adaptive.qgan.rst:10
#: ../../api/qiskit.aqua.algorithms.adaptive.rst:20
#: ../../api/qiskit.aqua.algorithms.adaptive.vqc.rst:10
#: ../../api/qiskit.aqua.algorithms.adaptive.vqe.rst:10
#: ../../api/qiskit.aqua.algorithms.classical.cplex.rst:10
#: ../../api/qiskit.aqua.algorithms.classical.exact_eigen_solver.rst:10
#: ../../api/qiskit.aqua.algorithms.classical.exact_ls_solver.rst:10
#: ../../api/qiskit.aqua.algorithms.classical.svm.rst:10
#: ../../api/qiskit.aqua.algorithms.many_sample.eoh.rst:10
#: ../../api/qiskit.aqua.algorithms.many_sample.qsvm.rst:10
#: ../../api/qiskit.aqua.algorithms.rst:20
#: ../../api/qiskit.aqua.algorithms.single_sample.amplitude_estimation.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.bernstein_vazirani.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.deutsch_jozsa.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.grover.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.hhl.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.iterative_qpe.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.qpe.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.shor.rst:10
#: ../../api/qiskit.aqua.algorithms.single_sample.simon.rst:10
#: ../../api/qiskit.aqua.circuits.gates.rst:10
#: ../../api/qiskit.aqua.circuits.rst:17
#: ../../api/qiskit.aqua.components.eigs.rst:10
#: ../../api/qiskit.aqua.components.feature_maps.rst:10
#: ../../api/qiskit.aqua.components.initial_states.rst:10
#: ../../api/qiskit.aqua.components.iqfts.rst:10
#: ../../api/qiskit.aqua.components.multiclass_extensions.rst:10
#: ../../api/qiskit.aqua.components.neural_networks.rst:10
#: ../../api/qiskit.aqua.components.optimizers.nlopts.rst:10
#: ../../api/qiskit.aqua.components.optimizers.rst:17
#: ../../api/qiskit.aqua.components.oracles.rst:10
#: ../../api/qiskit.aqua.components.qfts.rst:10
#: ../../api/qiskit.aqua.components.reciprocals.rst:10
#: ../../api/qiskit.aqua.components.uncertainty_models.rst:10
#: ../../api/qiskit.aqua.components.uncertainty_problems.rst:10
#: ../../api/qiskit.aqua.components.variational_forms.rst:10
#: ../../api/qiskit.aqua.input.rst:10 ../../api/qiskit.aqua.parser.rst:10
#: ../../api/qiskit.aqua.rst:23
#: ../../api/qiskit.aqua.translators.data_providers.rst:10
#: ../../api/qiskit.aqua.translators.ising.rst:10
#: ../../api/qiskit.aqua.utils.rst:10 ../../api/qiskit.assembler.rst:10
#: ../../api/qiskit.chemistry.aqua_extensions.components.initial_states.rst:10
#: ../../api/qiskit.chemistry.aqua_extensions.components.variational_forms.rst:10
#: ../../api/qiskit.chemistry.core.rst:10
#: ../../api/qiskit.chemistry.drivers.gaussiand.gauopen.rst:10
#: ../../api/qiskit.chemistry.drivers.gaussiand.rst:17
#: ../../api/qiskit.chemistry.drivers.hdf5d.rst:10
#: ../../api/qiskit.chemistry.drivers.psi4d.rst:10
#: ../../api/qiskit.chemistry.drivers.pyquanted.rst:10
#: ../../api/qiskit.chemistry.drivers.pyscfd.rst:10
#: ../../api/qiskit.chemistry.drivers.rst:21
#: ../../api/qiskit.chemistry.parser.rst:10 ../../api/qiskit.chemistry.rst:20
#: ../../api/qiskit.circuit.rst:10 ../../api/qiskit.compiler.rst:10
#: ../../api/qiskit.converters.rst:10 ../../api/qiskit.dagcircuit.rst:10
#: ../../api/qiskit.extensions.rst:18
#: ../../api/qiskit.extensions.simulator.rst:10
#: ../../api/qiskit.extensions.standard.rst:10
#: ../../api/qiskit.ignis.characterization.coherence.rst:10
#: ../../api/qiskit.ignis.characterization.gates.rst:10
#: ../../api/qiskit.ignis.characterization.hamiltonian.rst:10
#: ../../api/qiskit.ignis.characterization.rst:19
#: ../../api/qiskit.ignis.mitigation.measurement.rst:10
#: ../../api/qiskit.ignis.verification.quantum_volume.rst:10
#: ../../api/qiskit.ignis.verification.randomized_benchmarking.rst:10
#: ../../api/qiskit.ignis.verification.tomography.basis.rst:10
#: ../../api/qiskit.ignis.verification.tomography.fitters.rst:10
#: ../../api/qiskit.ignis.verification.tomography.rst:18
#: ../../api/qiskit.mapper.rst:10
#: ../../api/qiskit.providers.aer.backends.rst:10
#: ../../api/qiskit.providers.aer.backends.wrappers.rst:5
#: ../../api/qiskit.providers.aer.noise.device.rst:10
#: ../../api/qiskit.providers.aer.noise.errors.rst:10
#: ../../api/qiskit.providers.aer.noise.rst:19
#: ../../api/qiskit.providers.aer.noise.utils.rst:10
#: ../../api/qiskit.providers.aer.rst:19
#: ../../api/qiskit.providers.aer.utils.rst:10
#: ../../api/qiskit.providers.basicaer.rst:10
#: ../../api/qiskit.providers.ibmq.api.rst:10
#: ../../api/qiskit.providers.ibmq.api_v2.clients.rst:10
#: ../../api/qiskit.providers.ibmq.api_v2.rest.rst:10
#: ../../api/qiskit.providers.ibmq.api_v2.rst:18
#: ../../api/qiskit.providers.ibmq.circuits.rst:10
#: ../../api/qiskit.providers.ibmq.credentials.rst:10
#: ../../api/qiskit.providers.ibmq.job.rst:10
#: ../../api/qiskit.providers.ibmq.rst:22
#: ../../api/qiskit.providers.ibmq.utils.rst:10
#: ../../api/qiskit.providers.models.rst:10 ../../api/qiskit.providers.rst:20
#: ../../api/qiskit.pulse.channels.rst:10
#: ../../api/qiskit.pulse.commands.rst:10
#: ../../api/qiskit.pulse.pulse_lib.rst:10 ../../api/qiskit.pulse.rst:20
#: ../../api/qiskit.pulse.samplers.rst:10 ../../api/qiskit.qasm.node.rst:10
#: ../../api/qiskit.qasm.rst:17 ../../api/qiskit.qobj.converters.rst:10
#: ../../api/qiskit.qobj.models.rst:10 ../../api/qiskit.qobj.rst:18
#: ../../api/qiskit.quantum_info.analyzation.rst:10
#: ../../api/qiskit.quantum_info.operators.channel.rst:10
#: ../../api/qiskit.quantum_info.operators.rst:17
#: ../../api/qiskit.quantum_info.random.rst:10
#: ../../api/qiskit.quantum_info.states.rst:10
#: ../../api/qiskit.quantum_info.synthesis.rst:10
#: ../../api/qiskit.result.rst:10 ../../api/qiskit.rst:36
#: ../../api/qiskit.test.providers.rst:10 ../../api/qiskit.test.rst:17
#: ../../api/qiskit.tools.events.rst:10 ../../api/qiskit.tools.jupyter.rst:10
#: ../../api/qiskit.tools.monitor.rst:10 ../../api/qiskit.tools.qcvv.rst:10
#: ../../api/qiskit.tools.qi.rst:10 ../../api/qiskit.tools.rst:21
#: ../../api/qiskit.transpiler.passes.mapping.cython.stochastic_swap.rst:10
#: ../../api/qiskit.transpiler.passes.mapping.rst:17
#: ../../api/qiskit.transpiler.passes.rst:17
#: ../../api/qiskit.transpiler.preset_passmanagers.rst:10
#: ../../api/qiskit.transpiler.rst:18 ../../api/qiskit.validation.fields.rst:10
#: ../../api/qiskit.validation.jsonschema.rst:10
#: ../../api/qiskit.validation.rst:18
#: ../../api/qiskit.visualization.interactive.rst:10
#: ../../api/qiskit.visualization.rst:17
msgid "Submodules"
msgstr ""

#: ../../api/qiskit._util.rst:2
msgid "qiskit.\\_util module"
msgstr ""

#: of qiskit._util:1
msgid "Compat shim for backwards compatability with qiskit.util."
msgstr ""

#: ../../api/qiskit.aqua.rst:2
msgid "qiskit.aqua package"
msgstr ""

#: of qiskit.aqua:1
msgid "Algorithm discovery methods, Error and Base classes"
msgstr ""

#: of qiskit.aqua.AquaError:1 qiskit.aqua.aqua_error.AquaError:1
#: qiskit.chemistry.QiskitChemistryError:1
#: qiskit.chemistry.qiskit_chemistry_error.QiskitChemistryError:1
#: qiskit.exceptions.QiskitError:1
#: qiskit.qasm.node.nodeexception.NodeException:1
msgid "ベースクラス: :class:`Exception`"
msgstr ""

#: of qiskit.aqua.AquaError:1 qiskit.aqua.aqua_error.AquaError:1
msgid "Base class for errors raised by Aqua."
msgstr ""

#: ../../docstring of qiskit.aqua.Operator:1 qiskit.aqua.Preferences:1
#: qiskit.aqua.QiskitAqua:1 qiskit.aqua.QuantumInstance:1
#: qiskit.aqua._credentials_preferences.CredentialsPreferences:1
#: qiskit.aqua.algorithms.adaptive.qaoa.var_form.QAOAVarForm:1
#: qiskit.aqua.algorithms.classical.cplex.cplex_ising.IsingInstance:1
#: qiskit.aqua.algorithms.classical.cplex.cplex_ising.IsingModel:1
#: qiskit.aqua.algorithms.classical.cplex.cplex_ising.IsingSolution:1
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX:1
#: qiskit.aqua.circuits.FourierTransformCircuits:1
#: qiskit.aqua.circuits.PhaseEstimationCircuit:1
#: qiskit.aqua.circuits.StateVectorCircuit:1
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits:1
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit:1
#: qiskit.aqua.circuits.statevector_circuit.StateVectorCircuit:1
#: qiskit.aqua.components.initial_states.VarFormBased:1
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased:1
#: qiskit.aqua.operator.Operator:1 qiskit.aqua.parser.JSONSchema:1
#: qiskit.aqua.parser.json_schema.JSONSchema:1
#: qiskit.aqua.preferences.Preferences:1 qiskit.aqua.qiskit_aqua.QiskitAqua:1
#: qiskit.aqua.qiskit_aqua_globals.QiskitAquaGlobals:1
#: qiskit.aqua.quantum_instance.QuantumInstance:1
#: qiskit.aqua.utils.CircuitCache:1 qiskit.aqua.utils.PauliGraph:1
#: qiskit.aqua.utils.circuit_cache.CircuitCache:1
#: qiskit.aqua.utils.pauli_graph.PauliGraph:1
#: qiskit.chemistry.FermionicOperator:1 qiskit.chemistry.MP2Info:1
#: qiskit.chemistry.QMolecule:1 qiskit.chemistry.QiskitChemistry:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator:1
#: qiskit.chemistry.mp2info.MP2Info:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry:1
#: qiskit.chemistry.qmolecule.QMolecule:1 qiskit.circuit.Instruction:1
#: qiskit.circuit.InstructionSet:1 qiskit.circuit.Parameter:1
#: qiskit.circuit.QuantumCircuit:1 qiskit.circuit.register.Register:1
#: qiskit.dagcircuit.DAGCircuit:1 qiskit.dagcircuit.DAGNode:1
#: qiskit.ignis.characterization.fitters.BaseFitter:1
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter:1
#: qiskit.ignis.mitigation.measurement.MeasurementFilter:1
#: qiskit.ignis.mitigation.measurement.TensoredFilter:1
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter:1
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter:1
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter:1
#: qiskit.ignis.verification.quantum_volume.QVFitter:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter:1
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford:1
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter:1
#: qiskit.ignis.verification.tomography.TomographyFitter:1
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter:1
#: qiskit.providers.aer.noise.NoiseModel:1
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel:1
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer:1
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector:1
#: qiskit.providers.ibmq.api.utils.Credentials:1
#: qiskit.providers.ibmq.api.utils.Request:1
#: qiskit.providers.ibmq.api_v2.clients.base.BaseClient:1
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage:1
#: qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase:1
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager:1
#: qiskit.providers.ibmq.credentials.credentials.Credentials:1
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory:1 qiskit.pulse.CmdDef:1
#: qiskit.pulse.DeviceSpecification:1 qiskit.pulse.LoConfig:1
#: qiskit.pulse.LoRange:1 qiskit.pulse.ScheduleComponent:1
#: qiskit.pulse.channels.channels.Channel:1
#: qiskit.pulse.channels.device_specification.DeviceSpecification:1
#: qiskit.pulse.channels.qubit.Qubit:1 qiskit.pulse.cmd_def.CmdDef:1
#: qiskit.pulse.commands.command.Command:1
#: qiskit.pulse.commands.meas_opts.MeasOpts:1
#: qiskit.pulse.configuration.LoConfig:1 qiskit.pulse.configuration.LoRange:1
#: qiskit.pulse.interfaces.ScheduleComponent:1
#: qiskit.pulse.timeslots.Interval:1 qiskit.pulse.timeslots.Timeslot:1
#: qiskit.pulse.timeslots.TimeslotCollection:1 qiskit.qasm.Qasm:1
#: qiskit.qasm.node.node.Node:1 qiskit.qasm.qasmlexer.QasmLexer:1
#: qiskit.qasm.qasmparser.QasmParser:1
#: qiskit.qobj.converters.lo_config.LoConfigConverter:1
#: qiskit.qobj.converters.pulse_instruction.ConversionMethodBinder:1
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:1
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter:1
#: qiskit.quantum_info.Pauli:1 qiskit.quantum_info.operators.pauli.Pauli:1
#: qiskit.quantum_info.operators.quaternion.Quaternion:1
#: qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitWeylDecomposition:1
#: qiskit.tools.events.pubsub.Publisher:1
#: qiskit.tools.events.pubsub.Subscriber:1 qiskit.transpiler.CouplingMap:1
#: qiskit.transpiler.FlowController:1 qiskit.transpiler.Layout:1
#: qiskit.transpiler.PassManager:1 qiskit.transpiler.basepasses.BasePass:1
#: qiskit.transpiler.coupling.CouplingMap:1
#: qiskit.transpiler.fencedobjs.FencedObject:1
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection:1
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout:1
#: qiskit.user_config.UserConfig:1 qiskit.validation.base.BaseSchema.Meta:1
#: qiskit.visualization.bloch.Bloch:1
#: qiskit.visualization.latex.QCircuitImage:1
#: qiskit.visualization.matplotlib.Anchor:1
#: qiskit.visualization.matplotlib.EventsOutputChannels:1
#: qiskit.visualization.matplotlib.MatplotlibDrawer:1
#: qiskit.visualization.matplotlib.SamplePulseDrawer:1
#: qiskit.visualization.matplotlib.ScheduleDrawer:1
#: qiskit.visualization.qcstyle.OPStylePulse:1
#: qiskit.visualization.qcstyle.OPStyleSched:1
#: qiskit.visualization.qcstyle.QCStyle:1
#: qiskit.visualization.text.DrawElement:1 qiskit.visualization.text.Layer:1
#: qiskit.visualization.text.TextDrawing:1
msgid "ベースクラス: :class:`object`"
msgstr ""

#: of qiskit.aqua.Preferences.credentials_preferences:1
#: qiskit.aqua.preferences.Preferences.credentials_preferences:1
msgid "Return credentials preferences"
msgstr ""

#: of qiskit.aqua.Pluggable:1
#: qiskit.aqua.circuits.boolean_logical_circuits.BooleanLogicNormalForm:1
#: qiskit.aqua.components.multiclass_extensions.Estimator:1
#: qiskit.aqua.components.multiclass_extensions.estimator.Estimator:1
#: qiskit.aqua.parser.BaseParser:1 qiskit.aqua.parser.base_parser.BaseParser:1
#: qiskit.aqua.pluggable.Pluggable:1
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider:1
#: qiskit.aqua.utils.CircuitFactory:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory:1
#: qiskit.chemistry.core.ChemistryOperator:1
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator:1
#: qiskit.chemistry.drivers.BaseDriver:1
#: qiskit.chemistry.drivers._basedriver.BaseDriver:1
#: qiskit.providers.BaseBackend:1 qiskit.providers.BaseJob:1
#: qiskit.providers.BaseProvider:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator:1
msgid "ベースクラス: :class:`abc.ABC`"
msgstr ""

#: of qiskit.aqua.Pluggable:1 qiskit.aqua.pluggable.Pluggable:1
msgid "Base class for Pluggables."
msgstr ""

#: of qiskit.aqua.Pluggable:3 qiskit.aqua.QuantumAlgorithm:3
#: qiskit.aqua.algorithms.QuantumAlgorithm:3
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm:3
#: qiskit.aqua.components.eigs.Eigenvalues:3
#: qiskit.aqua.components.eigs.eigs.Eigenvalues:3
#: qiskit.aqua.components.feature_maps.FeatureMap:3
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap:3
#: qiskit.aqua.components.initial_states.InitialState:3
#: qiskit.aqua.components.initial_states.initial_state.InitialState:3
#: qiskit.aqua.components.iqfts.IQFT:3 qiskit.aqua.components.iqfts.iqft.IQFT:3
#: qiskit.aqua.components.multiclass_extensions.MulticlassExtension:3
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension:3
#: qiskit.aqua.components.neural_networks.DiscriminativeNetwork:3
#: qiskit.aqua.components.neural_networks.GenerativeNetwork:3
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork:3
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork:3
#: qiskit.aqua.components.oracles.Oracle:3
#: qiskit.aqua.components.oracles.oracle.Oracle:3
#: qiskit.aqua.components.qfts.QFT:3 qiskit.aqua.components.qfts.qft.QFT:3
#: qiskit.aqua.components.reciprocals.Reciprocal:3
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal:3
#: qiskit.aqua.components.variational_forms.VariationalForm:3
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm:3
#: qiskit.aqua.pluggable.Pluggable:3 qiskit.chemistry.core.ChemistryOperator:3
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator:3
#: qiskit.chemistry.drivers.BaseDriver:3
#: qiskit.chemistry.drivers._basedriver.BaseDriver:3
msgid ""
"This method should initialize the module and its configuration, and use "
"an exception if a component of the module is available."
msgstr ""

#: of qiskit.aqua.Pluggable.check_pluggable_valid:1
#: qiskit.aqua.algorithms.classical.cplex.cplex_ising.CPLEX_Ising.check_pluggable_valid:1
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.check_pluggable_valid:1
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.check_pluggable_valid:1
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.check_pluggable_valid:1
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.check_pluggable_valid:1
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.check_pluggable_valid:1
#: qiskit.aqua.components.oracles.LogicalExpressionOracle.check_pluggable_valid:1
#: qiskit.aqua.components.oracles.TruthTableOracle.check_pluggable_valid:1
#: qiskit.aqua.components.oracles.logical_expression_oracle.LogicalExpressionOracle.check_pluggable_valid:1
#: qiskit.aqua.components.oracles.truth_table_oracle.TruthTableOracle.check_pluggable_valid:1
#: qiskit.aqua.pluggable.Pluggable.check_pluggable_valid:1
msgid "Checks if pluggable is ready for use. Throws an exception if not"
msgstr ""

#: of qiskit.aqua.Pluggable.configuration:1
#: qiskit.aqua.pluggable.Pluggable.configuration:1
msgid "Return pluggable configuration."
msgstr ""

#: of qiskit.aqua.Operator:1 qiskit.aqua.operator.Operator:1
msgid "Operators relevant for quantum applications"
msgstr ""

#: of qiskit.aqua.Operator:5 qiskit.aqua.operator.Operator:5
msgid ""
"For grouped paulis representation, all operations will always convert it "
"to paulis and then convert it back. (It might be a performance issue.)"
msgstr ""

#: of qiskit.aqua.Operator.chop:1 qiskit.aqua.operator.Operator.chop:1
msgid ""
"Eliminate the real and imagine part of coeff in each pauli by "
"`threshold`. If pauli's coeff is less then `threshold` in both real and "
"imagine parts, the pauli is removed. To align the internal "
"representations, all available representations are chopped. The chopped "
"result is stored back to original property. Note: if coeff is real-only, "
"the imag part is skipped."
msgstr ""

#: ../../docstring of qiskit.aqua.Operator.chop
#: qiskit.aqua.Operator.construct_evaluation_circuit
#: qiskit.aqua.Operator.construct_evolution_circuit
#: qiskit.aqua.Operator.convert qiskit.aqua.Operator.eval
#: qiskit.aqua.Operator.evaluate_with_result qiskit.aqua.Operator.evolve
#: qiskit.aqua.Operator.kernel_F2 qiskit.aqua.Operator.load_from_file
#: qiskit.aqua.Operator.print_operators qiskit.aqua.Operator.qubit_tapering
#: qiskit.aqua.Operator.row_echelon_F2 qiskit.aqua.Operator.save_to_file
#: qiskit.aqua.Operator.scaling_coeff
#: qiskit.aqua.Operator.two_qubit_reduced_operator
#: qiskit.aqua.QiskitAqua.run_algorithm_to_json
#: qiskit.aqua.QuantumAlgorithm.run qiskit.aqua.QuantumInstance.execute
#: qiskit.aqua._logging.build_logging_config
#: qiskit.aqua._logging.set_qiskit_aqua_logging
#: qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.Grover.construct_circuit
#: qiskit.aqua.algorithms.HHL.construct_circuit
#: qiskit.aqua.algorithms.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.HHL.init_params
#: qiskit.aqua.algorithms.IQPE.construct_circuit
#: qiskit.aqua.algorithms.IQPE.init_params
#: qiskit.aqua.algorithms.QAOA.init_params
#: qiskit.aqua.algorithms.QGAN.set_generator
#: qiskit.aqua.algorithms.QPE.construct_circuit
#: qiskit.aqua.algorithms.QPE.init_params
#: qiskit.aqua.algorithms.QSVM.construct_circuit
#: qiskit.aqua.algorithms.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.QSVM.load_model qiskit.aqua.algorithms.QSVM.predict
#: qiskit.aqua.algorithms.QSVM.save_model qiskit.aqua.algorithms.QSVM.test
#: qiskit.aqua.algorithms.QSVM.train
#: qiskit.aqua.algorithms.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.SVM_Classical.load_model
#: qiskit.aqua.algorithms.SVM_Classical.save_model
#: qiskit.aqua.algorithms.SVM_Classical.test
#: qiskit.aqua.algorithms.SVM_Classical.train
#: qiskit.aqua.algorithms.Shor.construct_circuit
#: qiskit.aqua.algorithms.Shor.init_params
#: qiskit.aqua.algorithms.Simon.construct_circuit
#: qiskit.aqua.algorithms.VQC.construct_circuit
#: qiskit.aqua.algorithms.VQC.predict qiskit.aqua.algorithms.VQC.test
#: qiskit.aqua.algorithms.VQC.train
#: qiskit.aqua.algorithms.VQE.construct_circuit
#: qiskit.aqua.algorithms.VQE.init_params
#: qiskit.aqua.algorithms.adaptive.QAOA.init_params
#: qiskit.aqua.algorithms.adaptive.QGAN.set_generator
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.VQC.predict
#: qiskit.aqua.algorithms.adaptive.VQC.test
#: qiskit.aqua.algorithms.adaptive.VQC.train
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit
#: qiskit.aqua.algorithms.adaptive.VQE.init_params
#: qiskit.aqua.algorithms.adaptive.qaoa.qaoa.QAOA.init_params
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_generator
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_generator
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.init_params
#: qiskit.aqua.algorithms.classical.SVM_Classical.load_model
#: qiskit.aqua.algorithms.classical.SVM_Classical.save_model
#: qiskit.aqua.algorithms.classical.SVM_Classical.test
#: qiskit.aqua.algorithms.classical.SVM_Classical.train
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.variable
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.load_model
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.save_model
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.test
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.train
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_circuit
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.many_sample.QSVM.load_model
#: qiskit.aqua.algorithms.many_sample.QSVM.predict
#: qiskit.aqua.algorithms.many_sample.QSVM.save_model
#: qiskit.aqua.algorithms.many_sample.QSVM.test
#: qiskit.aqua.algorithms.many_sample.QSVM.train
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_circuit
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.load_model
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.predict
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.save_model
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.train
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.single_sample.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.single_sample.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.single_sample.Grover.construct_circuit
#: qiskit.aqua.algorithms.single_sample.HHL.construct_circuit
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.single_sample.HHL.init_params
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.IQPE.init_params
#: qiskit.aqua.algorithms.single_sample.QPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.QPE.init_params
#: qiskit.aqua.algorithms.single_sample.Shor.construct_circuit
#: qiskit.aqua.algorithms.single_sample.Shor.init_params
#: qiskit.aqua.algorithms.single_sample.Simon.construct_circuit
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build_controlled
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.S0Factory.build
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.SPsi0Factory.build
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover.construct_circuit
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.construct_circuit
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.init_params
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.init_params
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.init_params
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.construct_circuit
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.init_params
#: qiskit.aqua.algorithms.single_sample.simon.simon.Simon.construct_circuit
#: qiskit.aqua.build_logging_config qiskit.aqua.circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.ESOP.construct_circuit
#: qiskit.aqua.circuits.FixedValueComparator.build
#: qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit
#: qiskit.aqua.circuits.LinearYRotation.build
#: qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit
#: qiskit.aqua.circuits.WeightedSumOperator.build
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator.build
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit
#: qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and
#: qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or
#: qiskit.aqua.circuits.gates.ch
#: qiskit.aqua.circuits.gates.controlled_hadamard_gate.ch
#: qiskit.aqua.circuits.gates.controlled_ry_gates.cry
#: qiskit.aqua.circuits.gates.controlled_ry_gates.mcry
#: qiskit.aqua.circuits.gates.cry qiskit.aqua.circuits.gates.logical_and
#: qiskit.aqua.circuits.gates.logical_or qiskit.aqua.circuits.gates.mcry
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation.build
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.build
#: qiskit.aqua.circuits.statevector_circuit.StateVectorCircuit.construct_circuit
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator.build
#: qiskit.aqua.components.eigs.Eigenvalues
#: qiskit.aqua.components.eigs.Eigenvalues.construct_circuit
#: qiskit.aqua.components.eigs.Eigenvalues.construct_inverse
#: qiskit.aqua.components.eigs.EigsQPE.construct_circuit
#: qiskit.aqua.components.eigs.EigsQPE.init_params
#: qiskit.aqua.components.eigs.eigs.Eigenvalues
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_circuit
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_inverse
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.construct_circuit
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.init_params
#: qiskit.aqua.components.feature_maps.FeatureMap
#: qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit
#: qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit
#: qiskit.aqua.components.feature_maps.data_mapping.self_product
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector.construct_circuit
#: qiskit.aqua.components.feature_maps.self_product
#: qiskit.aqua.components.initial_states.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.InitialState
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.Zero.construct_circuit
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.initial_state.InitialState
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit
#: qiskit.aqua.components.iqfts.IQFT
#: qiskit.aqua.components.iqfts.IQFT.construct_circuit
#: qiskit.aqua.components.iqfts.iqft.IQFT
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit
#: qiskit.aqua.components.multiclass_extensions.MulticlassExtension
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension
#: qiskit.aqua.components.neural_networks.DiscriminativeNetwork.loss
#: qiskit.aqua.components.neural_networks.DiscriminativeNetwork.train
#: qiskit.aqua.components.neural_networks.GenerativeNetwork
#: qiskit.aqua.components.neural_networks.QuantumGenerator.init_params
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.loss
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.train
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.init_params
#: qiskit.aqua.components.optimizers.ADAM.optimize
#: qiskit.aqua.components.optimizers.AQGD.converged
#: qiskit.aqua.components.optimizers.AQGD.deriv
#: qiskit.aqua.components.optimizers.AQGD.optimize
#: qiskit.aqua.components.optimizers.AQGD.update
#: qiskit.aqua.components.optimizers.CG.optimize
#: qiskit.aqua.components.optimizers.COBYLA.optimize
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize
#: qiskit.aqua.components.optimizers.Optimizer.init_params
#: qiskit.aqua.components.optimizers.Optimizer.optimize
#: qiskit.aqua.components.optimizers.Optimizer.set_options
#: qiskit.aqua.components.optimizers.POWELL.optimize
#: qiskit.aqua.components.optimizers.P_BFGS.optimize
#: qiskit.aqua.components.optimizers.SLSQP.optimize
#: qiskit.aqua.components.optimizers.SPSA.optimize
#: qiskit.aqua.components.optimizers.TNC.optimize
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize
#: qiskit.aqua.components.optimizers.aqgd.AQGD.converged
#: qiskit.aqua.components.optimizers.aqgd.AQGD.deriv
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize
#: qiskit.aqua.components.optimizers.aqgd.AQGD.update
#: qiskit.aqua.components.optimizers.cg.CG.optimize
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize
#: qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.init_params
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.set_options
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize
#: qiskit.aqua.components.oracles.Oracle
#: qiskit.aqua.components.oracles.oracle.Oracle
#: qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers
#: qiskit.aqua.components.oracles.truth_table_oracle.get_prime_implicants
#: qiskit.aqua.components.qfts.QFT
#: qiskit.aqua.components.qfts.QFT.construct_circuit
#: qiskit.aqua.components.qfts.qft.QFT
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit
#: qiskit.aqua.components.reciprocals.LongDivision.construct_circuit
#: qiskit.aqua.components.reciprocals.LongDivision.sv_to_resvec
#: qiskit.aqua.components.reciprocals.LookupRotation.construct_circuit
#: qiskit.aqua.components.reciprocals.LookupRotation.sv_to_resvec
#: qiskit.aqua.components.reciprocals.Reciprocal
#: qiskit.aqua.components.reciprocals.Reciprocal.construct_circuit
#: qiskit.aqua.components.reciprocals.Reciprocal.sv_to_resvec
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.construct_circuit
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.sv_to_resvec
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.construct_circuit
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.sv_to_resvec
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.construct_circuit
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.sv_to_resvec
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel.build
#: qiskit.aqua.components.uncertainty_models.MultivariateDistribution.build
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution.build
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.build
#: qiskit.aqua.components.uncertainty_models.UniformDistribution.build
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.build
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.build
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel.build
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution.build
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution.build
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.build
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution.build
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.build
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.build
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta.build
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue.build
#: qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue.build
#: qiskit.aqua.components.uncertainty_problems.MultivariateProblem.build
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective.build
#: qiskit.aqua.components.uncertainty_problems.UnivariateProblem.build
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta.build
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue.build
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue.build
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem.build
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective.build
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem.build
#: qiskit.aqua.components.variational_forms.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.VariationalForm
#: qiskit.aqua.components.variational_forms.VariationalForm.construct_circuit
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.construct_circuit
#: qiskit.aqua.execute_algorithm qiskit.aqua.get_backend_from_provider
#: qiskit.aqua.get_backends_from_provider qiskit.aqua.get_provider_from_backend
#: qiskit.aqua.operator.Operator.chop
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit
#: qiskit.aqua.operator.Operator.construct_evolution_circuit
#: qiskit.aqua.operator.Operator.convert qiskit.aqua.operator.Operator.eval
#: qiskit.aqua.operator.Operator.evaluate_with_result
#: qiskit.aqua.operator.Operator.evolve qiskit.aqua.operator.Operator.kernel_F2
#: qiskit.aqua.operator.Operator.load_from_file
#: qiskit.aqua.operator.Operator.print_operators
#: qiskit.aqua.operator.Operator.qubit_tapering
#: qiskit.aqua.operator.Operator.row_echelon_F2
#: qiskit.aqua.operator.Operator.save_to_file
#: qiskit.aqua.operator.Operator.scaling_coeff
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator
#: qiskit.aqua.parser.BaseParser.delete_section
#: qiskit.aqua.parser.BaseParser.delete_section_properties
#: qiskit.aqua.parser.BaseParser.delete_section_property
#: qiskit.aqua.parser.BaseParser.set_section
#: qiskit.aqua.parser.BaseParser.set_section_property
#: qiskit.aqua.parser.JSONSchema.check_property_value
#: qiskit.aqua.parser.JSONSchema.check_section_value
#: qiskit.aqua.parser.JSONSchema.get_property_default_value
#: qiskit.aqua.parser.JSONSchema.get_section_default_properties
#: qiskit.aqua.parser.JSONSchema.get_section_types
#: qiskit.aqua.parser.JSONSchema.update_pluggable_schemas
#: qiskit.aqua.parser._inputparser.InputParser.delete_section
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_properties
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_property
#: qiskit.aqua.parser.base_parser.BaseParser.set_section
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_property
#: qiskit.aqua.parser.json_schema.JSONSchema.check_property_value
#: qiskit.aqua.parser.json_schema.JSONSchema.check_section_value
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_value
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_default_properties
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_types
#: qiskit.aqua.parser.json_schema.JSONSchema.update_pluggable_schemas
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json
#: qiskit.aqua.qiskit_aqua.execute_algorithm
#: qiskit.aqua.qiskit_aqua.run_algorithm
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json
#: qiskit.aqua.quantum_instance.QuantumInstance.execute
#: qiskit.aqua.run_algorithm qiskit.aqua.run_algorithm_to_json
#: qiskit.aqua.set_qiskit_aqua_logging
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.init_from_input
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider.init_from_input
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider.init_from_input
#: qiskit.aqua.translators.ising.clique.get_clique_qubitops
#: qiskit.aqua.translators.ising.clique.get_graph_solution
#: qiskit.aqua.translators.ising.clique.get_gset_result
#: qiskit.aqua.translators.ising.clique.parse_gset_format
#: qiskit.aqua.translators.ising.clique.random_graph
#: qiskit.aqua.translators.ising.clique.sample_most_likely
#: qiskit.aqua.translators.ising.clique.satisfy_or_not
#: qiskit.aqua.translators.ising.docplex.get_qubitops
#: qiskit.aqua.translators.ising.docplex.sample_most_likely
#: qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops
#: qiskit.aqua.translators.ising.exact_cover.get_solution
#: qiskit.aqua.translators.ising.exact_cover.random_number_list
#: qiskit.aqua.translators.ising.exact_cover.read_numbers_from_file
#: qiskit.aqua.translators.ising.exact_cover.sample_most_likely
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops
#: qiskit.aqua.translators.ising.graph_partition.get_graph_solution
#: qiskit.aqua.translators.ising.graph_partition.get_gset_result
#: qiskit.aqua.translators.ising.graph_partition.objective_value
#: qiskit.aqua.translators.ising.graph_partition.parse_gset_format
#: qiskit.aqua.translators.ising.graph_partition.random_graph
#: qiskit.aqua.translators.ising.max_cut.get_graph_solution
#: qiskit.aqua.translators.ising.max_cut.get_gset_result
#: qiskit.aqua.translators.ising.max_cut.get_max_cut_qubitops
#: qiskit.aqua.translators.ising.max_cut.max_cut_value
#: qiskit.aqua.translators.ising.max_cut.parse_gset_format
#: qiskit.aqua.translators.ising.max_cut.random_graph
#: qiskit.aqua.translators.ising.max_cut.sample_most_likely
#: qiskit.aqua.translators.ising.partition.get_partition_qubitops
#: qiskit.aqua.translators.ising.partition.partition_value
#: qiskit.aqua.translators.ising.partition.random_number_list
#: qiskit.aqua.translators.ising.partition.read_numbers_from_file
#: qiskit.aqua.translators.ising.partition.sample_most_likely
#: qiskit.aqua.translators.ising.portfolio.random_model
#: qiskit.aqua.translators.ising.portfolio.sample_most_likely
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value
#: qiskit.aqua.translators.ising.set_packing.get_solution
#: qiskit.aqua.translators.ising.set_packing.random_number_list
#: qiskit.aqua.translators.ising.set_packing.read_numbers_from_file
#: qiskit.aqua.translators.ising.set_packing.sample_most_likely
#: qiskit.aqua.translators.ising.stable_set.get_graph_solution
#: qiskit.aqua.translators.ising.stable_set.get_stable_set_qubitops
#: qiskit.aqua.translators.ising.stable_set.parse_gset_format
#: qiskit.aqua.translators.ising.stable_set.random_graph
#: qiskit.aqua.translators.ising.stable_set.sample_most_likely
#: qiskit.aqua.translators.ising.stable_set.stable_set_value
#: qiskit.aqua.translators.ising.tsp.get_tsp_qubitops
#: qiskit.aqua.translators.ising.tsp.get_tsp_solution
#: qiskit.aqua.translators.ising.tsp.parse_tsplib_format
#: qiskit.aqua.translators.ising.tsp.random_tsp
#: qiskit.aqua.translators.ising.tsp.sample_most_likely
#: qiskit.aqua.translators.ising.tsp.tsp_feasible
#: qiskit.aqua.translators.ising.tsp.tsp_value
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution
#: qiskit.aqua.translators.ising.vertex_cover.check_full_edge_coverage
#: qiskit.aqua.translators.ising.vertex_cover.get_graph_solution
#: qiskit.aqua.translators.ising.vertex_cover.get_gset_result
#: qiskit.aqua.translators.ising.vertex_cover.parse_gset_format
#: qiskit.aqua.translators.ising.vertex_cover.random_graph
#: qiskit.aqua.utils.CircuitCache.cache_circuit
#: qiskit.aqua.utils.CircuitFactory.build
#: qiskit.aqua.utils.CircuitFactory.build_controlled
#: qiskit.aqua.utils.CircuitFactory.build_controlled_inverse
#: qiskit.aqua.utils.CircuitFactory.build_inverse
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend
#: qiskit.aqua.utils.backend_utils.is_aer_provider
#: qiskit.aqua.utils.backend_utils.is_aer_statevector_backend
#: qiskit.aqua.utils.backend_utils.is_basicaer_provider
#: qiskit.aqua.utils.backend_utils.is_ibmq_provider
#: qiskit.aqua.utils.backend_utils.is_local_backend
#: qiskit.aqua.utils.backend_utils.is_simulator_backend
#: qiskit.aqua.utils.backend_utils.is_statevector_backend
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.circuit_cache.CircuitCache.cache_circuit
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_inverse
#: qiskit.aqua.utils.circuit_utils.summarize_circuits
#: qiskit.aqua.utils.compile_and_run_circuits
#: qiskit.aqua.utils.compile_circuits
#: qiskit.aqua.utils.controlled_circuit.get_controlled_circuit
#: qiskit.aqua.utils.convert_dict_to_json
#: qiskit.aqua.utils.dataset_helper.get_feature_dimension
#: qiskit.aqua.utils.dataset_helper.get_num_classes
#: qiskit.aqua.utils.dataset_helper.map_label_to_class_name
#: qiskit.aqua.utils.dataset_helper.reduce_dim_to_via_pca
#: qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels
#: qiskit.aqua.utils.entangler_map.get_entangler_map
#: qiskit.aqua.utils.entangler_map.validate_entangler_map
#: qiskit.aqua.utils.find_regs_by_name qiskit.aqua.utils.get_entangler_map
#: qiskit.aqua.utils.get_feature_dimension
#: qiskit.aqua.utils.get_measured_qubits_from_qobj
#: qiskit.aqua.utils.get_num_classes
#: qiskit.aqua.utils.get_subsystem_density_matrix
#: qiskit.aqua.utils.get_subsystems_counts
#: qiskit.aqua.utils.json_utils.convert_dict_to_json
#: qiskit.aqua.utils.map_label_to_class_name
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits_from_qobj
#: qiskit.aqua.utils.measurement_error_mitigation.mitigate_measurement_error
#: qiskit.aqua.utils.mitigate_measurement_error qiskit.aqua.utils.optimize_svm
#: qiskit.aqua.utils.qp_solver.optimize_svm qiskit.aqua.utils.random_h1_body
#: qiskit.aqua.utils.random_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_diag
#: qiskit.aqua.utils.random_matrix_generator.random_h1_body
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_non_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_unitary
#: qiskit.aqua.utils.random_non_hermitian qiskit.aqua.utils.random_unitary
#: qiskit.aqua.utils.reduce_dim_to_via_pca
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits
#: qiskit.aqua.utils.run_circuits.compile_circuits
#: qiskit.aqua.utils.run_circuits.find_regs_by_name
#: qiskit.aqua.utils.run_circuits.run_qobjs qiskit.aqua.utils.run_qobjs
#: qiskit.aqua.utils.split_dataset_to_data_and_labels
#: qiskit.aqua.utils.subsystem.get_subsystem_density_matrix
#: qiskit.aqua.utils.subsystem.get_subsystem_fidelity
#: qiskit.aqua.utils.subsystem.get_subsystems_counts
#: qiskit.aqua.utils.summarize_circuits
#: qiskit.aqua.utils.tensor_product.tensorproduct
#: qiskit.aqua.utils.tensorproduct qiskit.aqua.utils.validate_entangler_map
#: qiskit.assembler.assemble_circuits qiskit.assembler.disassemble
#: qiskit.chemistry.FermionicOperator.fermion_mode_elimination
#: qiskit.chemistry.FermionicOperator.fermion_mode_freezing
#: qiskit.chemistry.FermionicOperator.mapping
#: qiskit.chemistry.FermionicOperator.particle_hole_transformation
#: qiskit.chemistry.MP2Info.mp2_get_term_info
#: qiskit.chemistry.MP2Info.mp2_terms qiskit.chemistry.QMolecule.mo_to_spin
#: qiskit.chemistry.QMolecule.onee_to_spin
#: qiskit.chemistry.QMolecule.oneeints2mo
#: qiskit.chemistry.QMolecule.twoe_to_spin
#: qiskit.chemistry.QMolecule.twoeints2mo qiskit.chemistry.QiskitChemistry.run
#: qiskit.chemistry.QiskitChemistry.run_driver
#: qiskit.chemistry._logging.build_logging_config
#: qiskit.chemistry._logging.set_qiskit_chemistry_logging
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit
#: qiskit.chemistry.bksf.bksf_mapping
#: qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list
#: qiskit.chemistry.bksf.edge_operator_aij
#: qiskit.chemistry.bksf.edge_operator_bi
#: qiskit.chemistry.bksf.generate_fermions
#: qiskit.chemistry.bksf.number_operator qiskit.chemistry.bksf.vacuum_operator
#: qiskit.chemistry.build_logging_config
#: qiskit.chemistry.core.ChemistryOperator.init_params
#: qiskit.chemistry.core.ChemistryOperator.process_algorithm_result
#: qiskit.chemistry.core.ChemistryOperator.run
#: qiskit.chemistry.core.Hamiltonian.init_params
#: qiskit.chemistry.core.Hamiltonian.run
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.init_params
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.process_algorithm_result
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.run
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.init_params
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.run
#: qiskit.chemistry.drivers.BaseDriver.init_from_input
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers._basedriver.BaseDriver.init_from_input
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.psi4d.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver.init_from_input
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_elimination
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_freezing
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping
#: qiskit.chemistry.fermionic_operator.FermionicOperator.particle_hole_transformation
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms
#: qiskit.chemistry.parser.InputParser.delete_section
#: qiskit.chemistry.parser._inputparser.InputParser.delete_section
#: qiskit.chemistry.particle_hole.last_two_indices_swap
#: qiskit.chemistry.particle_hole.normal_order_integrals
#: qiskit.chemistry.particle_hole.particle_hole_transformation
#: qiskit.chemistry.particle_hole.sort
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run_driver
#: qiskit.chemistry.qiskit_chemistry.run_driver_to_json
#: qiskit.chemistry.qiskit_chemistry.run_experiment
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin
#: qiskit.chemistry.qmolecule.QMolecule.onee_to_spin
#: qiskit.chemistry.qmolecule.QMolecule.oneeints2mo
#: qiskit.chemistry.qmolecule.QMolecule.twoe_to_spin
#: qiskit.chemistry.qmolecule.QMolecule.twoeints2mo
#: qiskit.chemistry.run_driver_to_json qiskit.chemistry.run_experiment
#: qiskit.chemistry.set_qiskit_chemistry_logging
#: qiskit.circuit.CompositeGate.copy qiskit.circuit.CompositeGate.snapshot
#: qiskit.circuit.Gate.copy qiskit.circuit.Instruction.copy
#: qiskit.circuit.Measure.copy qiskit.circuit.QuantumCircuit.append
#: qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.ch qiskit.circuit.QuantumCircuit.copy
#: qiskit.circuit.QuantumCircuit.draw
#: qiskit.circuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.QuantumCircuit.has_register
#: qiskit.circuit.QuantumCircuit.measure
#: qiskit.circuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.QuantumCircuit.snapshot
#: qiskit.circuit.QuantumCircuit.to_instruction qiskit.circuit.Reset.copy
#: qiskit.compiler.assemble qiskit.compiler.transpile
#: qiskit.converters.ast_to_dag qiskit.converters.circuit_to_dag
#: qiskit.converters.circuit_to_instruction qiskit.converters.circuits_to_qobj
#: qiskit.converters.dag_to_circuit qiskit.converters.qobj_to_circuits
#: qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.compose_back
#: qiskit.dagcircuit.DAGCircuit.compose_front qiskit.dagcircuit.DAGCircuit.node
#: qiskit.dagcircuit.DAGCircuit.nodes_on_wire
#: qiskit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag
#: qiskit.dagcircuit.DAGNode.semantic_eq qiskit.execute.execute
#: qiskit.extensions.simulator.Snapshot.copy
#: qiskit.extensions.standard.Barrier.copy
#: qiskit.extensions.standard.CHGate.copy
#: qiskit.extensions.standard.CXBase.copy
#: qiskit.extensions.standard.CnotGate.copy
#: qiskit.extensions.standard.CrzGate.copy
#: qiskit.extensions.standard.Cu1Gate.copy
#: qiskit.extensions.standard.Cu3Gate.copy
#: qiskit.extensions.standard.CyGate.copy
#: qiskit.extensions.standard.CzGate.copy
#: qiskit.extensions.standard.FredkinGate.copy
#: qiskit.extensions.standard.HGate.copy qiskit.extensions.standard.IdGate.copy
#: qiskit.extensions.standard.RXGate.copy
#: qiskit.extensions.standard.RYGate.copy
#: qiskit.extensions.standard.RZGate.copy
#: qiskit.extensions.standard.RZZGate.copy
#: qiskit.extensions.standard.SGate.copy
#: qiskit.extensions.standard.SdgGate.copy
#: qiskit.extensions.standard.SwapGate.copy
#: qiskit.extensions.standard.TGate.copy
#: qiskit.extensions.standard.TdgGate.copy
#: qiskit.extensions.standard.ToffoliGate.copy
#: qiskit.extensions.standard.U0Gate.copy
#: qiskit.extensions.standard.U1Gate.copy
#: qiskit.extensions.standard.U2Gate.copy
#: qiskit.extensions.standard.U3Gate.copy qiskit.extensions.standard.UBase.copy
#: qiskit.extensions.standard.XGate.copy qiskit.extensions.standard.YGate.copy
#: qiskit.extensions.standard.ZGate.copy
#: qiskit.ignis.characterization.BaseCoherenceFitter.add_data
#: qiskit.ignis.characterization.BaseCoherenceFitter.plot
#: qiskit.ignis.characterization.BaseGateFitter.add_data
#: qiskit.ignis.characterization.BaseGateFitter.plot
#: qiskit.ignis.characterization.characterization_utils.pad_id_gates
#: qiskit.ignis.characterization.characterization_utils.time_to_ngates
#: qiskit.ignis.characterization.coherence.T1Fitter.add_data
#: qiskit.ignis.characterization.coherence.T1Fitter.plot
#: qiskit.ignis.characterization.coherence.T2Fitter.add_data
#: qiskit.ignis.characterization.coherence.T2Fitter.plot
#: qiskit.ignis.characterization.coherence.T2StarFitter.add_data
#: qiskit.ignis.characterization.coherence.T2StarFitter.plot
#: qiskit.ignis.characterization.coherence.circuits.t1_circuits
#: qiskit.ignis.characterization.coherence.circuits.t2_circuits
#: qiskit.ignis.characterization.coherence.circuits.t2star_circuits
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter.plot
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter.plot
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter.plot
#: qiskit.ignis.characterization.coherence.t1_circuits
#: qiskit.ignis.characterization.coherence.t2_circuits
#: qiskit.ignis.characterization.coherence.t2star_circuits
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.plot
#: qiskit.ignis.characterization.fitters.BaseFitter.add_data
#: qiskit.ignis.characterization.fitters.BaseGateFitter.plot
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.add_data
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.angle_err
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.plot
#: qiskit.ignis.characterization.gates.AmpCalFitter.add_data
#: qiskit.ignis.characterization.gates.AmpCalFitter.angle_err
#: qiskit.ignis.characterization.gates.AmpCalFitter.plot
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.add_data
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.angle_err
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.plot
#: qiskit.ignis.characterization.gates.AngleCalFitter.add_data
#: qiskit.ignis.characterization.gates.AngleCalFitter.angle_err
#: qiskit.ignis.characterization.gates.AngleCalFitter.plot
#: qiskit.ignis.characterization.gates.ampcal_1Q_circuits
#: qiskit.ignis.characterization.gates.ampcal_cx_circuits
#: qiskit.ignis.characterization.gates.anglecal_1Q_circuits
#: qiskit.ignis.characterization.gates.anglecal_cx_circuits
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.angle_err
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.plot
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.angle_err
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.plot
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.angle_err
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.plot
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.angle_err
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.plot
#: qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.ZZ_rate
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.plot_ZZ
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.plot_calibration
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.subset_fitter
#: qiskit.ignis.mitigation.measurement.MeasurementFilter.apply
#: qiskit.ignis.mitigation.measurement.TensoredFilter.apply
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.plot_calibration
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal
#: qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal
#: qiskit.ignis.mitigation.measurement.complete_meas_cal
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.apply
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.plot_calibration
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.subset_fitter
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.plot_calibration
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal
#: qiskit.ignis.verification.quantum_volume.QVFitter.add_data
#: qiskit.ignis.verification.quantum_volume.QVFitter.add_statevectors
#: qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data
#: qiskit.ignis.verification.quantum_volume.circuits.qv_circuits
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_data
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_statevectors
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.plot_qv_data
#: qiskit.ignis.verification.quantum_volume.qv_circuits
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.add_data
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data
#: qiskit.ignis.verification.randomized_benchmarking.circuits.calc_xdata
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern
#: qiskit.ignis.verification.randomized_benchmarking.circuits.handle_length_multiplier
#: qiskit.ignis.verification.randomized_benchmarking.circuits.load_tables
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq
#: qiskit.ignis.verification.randomized_benchmarking.circuits.replace_q_indices
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford_from_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.compose_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.find_inverse_clifford_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.get_quantum_circuit
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.load_clifford_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.pickle_clifford_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.random_clifford_gates
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.add_data
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.twoQ_clifford_error
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.add_data
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_measure_basis
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_preparation_basis
#: qiskit.ignis.verification.tomography.StateTomographyFitter.add_data
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit
#: qiskit.ignis.verification.tomography.StateTomographyFitter.set_measure_basis
#: qiskit.ignis.verification.tomography.StateTomographyFitter.set_preparation_basis
#: qiskit.ignis.verification.tomography.TomographyFitter.add_data
#: qiskit.ignis.verification.tomography.TomographyFitter.fit
#: qiskit.ignis.verification.tomography.TomographyFitter.set_measure_basis
#: qiskit.ignis.verification.tomography.TomographyFitter.set_preparation_basis
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix
#: qiskit.ignis.verification.tomography.data.expectation_counts
#: qiskit.ignis.verification.tomography.data.marginal_counts
#: qiskit.ignis.verification.tomography.expectation_counts
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.add_data
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.set_measure_basis
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.set_preparation_basis
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit
#: qiskit.ignis.verification.tomography.marginal_counts
#: qiskit.ignis.verification.tomography.process_tomography_circuits
#: qiskit.ignis.verification.tomography.state_tomography_circuits
#: qiskit.providers.BaseProvider.backends
#: qiskit.providers.BaseProvider.get_backend qiskit.providers.aer.AerJob.result
#: qiskit.providers.aer.AerProvider.backends
#: qiskit.providers.aer.AerProvider.get_backend
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error
#: qiskit.providers.aer.noise.NoiseModel.add_basis_gates
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error
#: qiskit.providers.aer.noise.NoiseModel.as_dict
#: qiskit.providers.aer.noise.NoiseModel.from_dict
#: qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates
#: qiskit.providers.aer.noise.NoiseModel.to_dict
#: qiskit.providers.aer.noise.device.models.basic_device_gate_errors
#: qiskit.providers.aer.noise.device.models.basic_device_readout_errors
#: qiskit.providers.aer.noise.device.parameters.gate_error_values
#: qiskit.providers.aer.noise.device.parameters.gate_param_values
#: qiskit.providers.aer.noise.device.parameters.gate_time_values
#: qiskit.providers.aer.noise.device.parameters.readout_error_values
#: qiskit.providers.aer.noise.device.parameters.thermal_relaxation_values
#: qiskit.providers.aer.noise.errors.errorutils.kraus2instructions
#: qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction
#: qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix
#: qiskit.providers.aer.noise.errors.errorutils.standard_gate_instruction
#: qiskit.providers.aer.noise.errors.errorutils.standard_gates_instructions
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.kron
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.coherent_unitary_error
#: qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error
#: qiskit.providers.aer.noise.errors.standard_errors.kraus_error
#: qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error
#: qiskit.providers.aer.noise.errors.standard_errors.pauli_error
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.reset_error
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_basis_gates
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.as_dict
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict
#: qiskit.providers.aer.noise.noise_model.NoiseModel.set_x90_single_qubit_gates
#: qiskit.providers.aer.noise.noise_model.NoiseModel.to_dict
#: qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.channel_matrix_representation
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_channel_operation
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.flatten_matrix
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_matrices
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_quadratic_programming_matrices
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_matrix
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.prepare_honesty_constraint
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error
#: qiskit.providers.aer.utils.qobj_utils.append_instr
#: qiskit.providers.aer.utils.qobj_utils.get_instr_pos
#: qiskit.providers.aer.utils.qobj_utils.insert_instr
#: qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers
#: qiskit.providers.aer.utils.qobj_utils.snapshot_instr
#: qiskit.providers.aer.utils.qobj_utils.unitary_instr
#: qiskit.providers.basicaer.BasicAerJob.result
#: qiskit.providers.basicaer.BasicAerProvider.backends
#: qiskit.providers.basicaer.BasicAerProvider.get_backend
#: qiskit.providers.basicaer.QasmSimulatorPy.run
#: qiskit.providers.basicaer.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment
#: qiskit.providers.basicaer.UnitarySimulatorPy.run
#: qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment
#: qiskit.providers.basicaer.basicaertools.einsum_matmul_index
#: qiskit.providers.basicaer.basicaertools.einsum_vecmul_index
#: qiskit.providers.basicaer.basicaertools.single_gate_matrix
#: qiskit.providers.basicaer.basicaertools.single_gate_params
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment
#: qiskit.providers.ibmq.accountprovider.AccountProvider.backends
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_get
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_status
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_properties
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_pulse_defaults
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_get
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_run
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_cancel
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_download_qobj_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_properties
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_result_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status
#: qiskit.providers.ibmq.api_v2.rest.auth.Auth.login
#: qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get_object_storage
#: qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage
#: qiskit.providers.ibmq.api_v2.rest.job.build_url_filter
#: qiskit.providers.ibmq.api_v2.rest.root.Api.backend
#: qiskit.providers.ibmq.api_v2.rest.root.Api.circuit
#: qiskit.providers.ibmq.api_v2.rest.root.Api.job
#: qiskit.providers.ibmq.api_v2.rest.root.Api.jobs
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job_object_storage
#: qiskit.providers.ibmq.api_v2.session.RetrySession.request
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.random_uniform
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc
#: qiskit.providers.ibmq.credentials.configrc.remove_credentials
#: qiskit.providers.ibmq.credentials.configrc.store_credentials
#: qiskit.providers.ibmq.credentials.configrc.write_qiskit_rc
#: qiskit.providers.ibmq.credentials.discover_credentials
#: qiskit.providers.ibmq.credentials.updater.update_credentials
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.properties
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.update_account
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.job_id
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result
#: qiskit.providers.ibmq.job.utils.build_error_report
#: qiskit.providers.ibmq.job.utils.is_job_queued
#: qiskit.providers.ibmq.least_busy
#: qiskit.providers.ibmq.utils.deprecation.deprecated
#: qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config
#: qiskit.providers.providerutils.filter_backends
#: qiskit.providers.providerutils.resolve_backend_name qiskit.pulse.CmdDef.add
#: qiskit.pulse.CmdDef.has qiskit.pulse.CmdDef.pop
#: qiskit.pulse.Instruction.append qiskit.pulse.Instruction.ch_duration
#: qiskit.pulse.Instruction.ch_start_time qiskit.pulse.Instruction.ch_stop_time
#: qiskit.pulse.Instruction.draw qiskit.pulse.Instruction.insert
#: qiskit.pulse.Instruction.shift qiskit.pulse.Instruction.union
#: qiskit.pulse.LoConfig.add_lo_range qiskit.pulse.LoConfig.channel_lo
#: qiskit.pulse.LoConfig.check_lo qiskit.pulse.LoRange.includes
#: qiskit.pulse.SamplePulse.draw qiskit.pulse.Schedule.append
#: qiskit.pulse.Schedule.ch_duration qiskit.pulse.Schedule.ch_start_time
#: qiskit.pulse.Schedule.ch_stop_time qiskit.pulse.Schedule.draw
#: qiskit.pulse.Schedule.insert qiskit.pulse.Schedule.shift
#: qiskit.pulse.Schedule.union qiskit.pulse.ScheduleComponent.append
#: qiskit.pulse.ScheduleComponent.insert qiskit.pulse.ScheduleComponent.union
#: qiskit.pulse.Snapshot.append qiskit.pulse.Snapshot.ch_duration
#: qiskit.pulse.Snapshot.ch_start_time qiskit.pulse.Snapshot.ch_stop_time
#: qiskit.pulse.Snapshot.draw qiskit.pulse.Snapshot.insert
#: qiskit.pulse.Snapshot.shift qiskit.pulse.Snapshot.union
#: qiskit.pulse.cmd_def.CmdDef.add qiskit.pulse.cmd_def.CmdDef.has
#: qiskit.pulse.cmd_def.CmdDef.pop
#: qiskit.pulse.commands.instruction.Instruction.append
#: qiskit.pulse.commands.instruction.Instruction.ch_duration
#: qiskit.pulse.commands.instruction.Instruction.ch_start_time
#: qiskit.pulse.commands.instruction.Instruction.ch_stop_time
#: qiskit.pulse.commands.instruction.Instruction.draw
#: qiskit.pulse.commands.instruction.Instruction.insert
#: qiskit.pulse.commands.instruction.Instruction.shift
#: qiskit.pulse.commands.instruction.Instruction.union
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw
#: qiskit.pulse.configuration.LoConfig.add_lo_range
#: qiskit.pulse.configuration.LoConfig.channel_lo
#: qiskit.pulse.configuration.LoConfig.check_lo
#: qiskit.pulse.configuration.LoRange.includes
#: qiskit.pulse.interfaces.ScheduleComponent.append
#: qiskit.pulse.interfaces.ScheduleComponent.insert
#: qiskit.pulse.interfaces.ScheduleComponent.union qiskit.pulse.ops.append
#: qiskit.pulse.ops.flatten qiskit.pulse.ops.insert qiskit.pulse.ops.shift
#: qiskit.pulse.ops.union qiskit.pulse.pulse_lib.continuous.constant
#: qiskit.pulse.pulse_lib.continuous.cos qiskit.pulse.pulse_lib.continuous.drag
#: qiskit.pulse.pulse_lib.continuous.gaussian
#: qiskit.pulse.pulse_lib.continuous.gaussian_deriv
#: qiskit.pulse.pulse_lib.continuous.gaussian_square
#: qiskit.pulse.pulse_lib.continuous.sawtooth
#: qiskit.pulse.pulse_lib.continuous.sin
#: qiskit.pulse.pulse_lib.continuous.square
#: qiskit.pulse.pulse_lib.continuous.triangle
#: qiskit.pulse.pulse_lib.continuous.zero
#: qiskit.pulse.pulse_lib.discrete.constant qiskit.pulse.pulse_lib.discrete.cos
#: qiskit.pulse.pulse_lib.discrete.drag
#: qiskit.pulse.pulse_lib.discrete.gaussian
#: qiskit.pulse.pulse_lib.discrete.gaussian_deriv
#: qiskit.pulse.pulse_lib.discrete.gaussian_square
#: qiskit.pulse.pulse_lib.discrete.sawtooth qiskit.pulse.pulse_lib.discrete.sin
#: qiskit.pulse.pulse_lib.discrete.square
#: qiskit.pulse.pulse_lib.discrete.triangle
#: qiskit.pulse.pulse_lib.discrete.zero qiskit.pulse.samplers.decorators.left
#: qiskit.pulse.samplers.decorators.midpoint
#: qiskit.pulse.samplers.decorators.right
#: qiskit.pulse.samplers.decorators.sampler
#: qiskit.pulse.timeslots.Interval.has_overlap
#: qiskit.pulse.timeslots.Interval.shift qiskit.pulse.timeslots.Timeslot.shift
#: qiskit.pulse.timeslots.TimeslotCollection.ch_duration
#: qiskit.pulse.timeslots.TimeslotCollection.ch_start_time
#: qiskit.pulse.timeslots.TimeslotCollection.ch_stop_time
#: qiskit.pulse.timeslots.TimeslotCollection.is_mergeable_with
#: qiskit.pulse.timeslots.TimeslotCollection.merged
#: qiskit.pulse.timeslots.TimeslotCollection.shift
#: qiskit.qobj.PulseLibraryItemSchema.dump
#: qiskit.qobj.PulseLibraryItemSchema.dump_additional_data
#: qiskit.qobj.PulseLibraryItemSchema.dumps
#: qiskit.qobj.PulseLibraryItemSchema.handle_error
#: qiskit.qobj.PulseLibraryItemSchema.load
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data
#: qiskit.qobj.PulseLibraryItemSchema.loads
#: qiskit.qobj.PulseLibraryItemSchema.validate
#: qiskit.qobj.PulseQobjInstructionSchema.dump
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data
#: qiskit.qobj.PulseQobjInstructionSchema.dumps
#: qiskit.qobj.PulseQobjInstructionSchema.handle_error
#: qiskit.qobj.PulseQobjInstructionSchema.load
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data
#: qiskit.qobj.PulseQobjInstructionSchema.loads
#: qiskit.qobj.PulseQobjInstructionSchema.validate
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_acquire
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_drive
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_frame_change
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_persistent_value
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_snapshot
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.bind_pulse
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_acquire
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_frame_change
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_persistent_value
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_snapshot
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel
#: qiskit.qobj.utils.validate_qobj_against_schema
#: qiskit.qobj.validate_qobj_against_schema qiskit.quantum_info.Chi.add
#: qiskit.quantum_info.Chi.compose qiskit.quantum_info.Chi.expand
#: qiskit.quantum_info.Chi.multiply qiskit.quantum_info.Chi.power
#: qiskit.quantum_info.Chi.subtract qiskit.quantum_info.Chi.tensor
#: qiskit.quantum_info.Choi.add qiskit.quantum_info.Choi.compose
#: qiskit.quantum_info.Choi.expand qiskit.quantum_info.Choi.multiply
#: qiskit.quantum_info.Choi.power qiskit.quantum_info.Choi.subtract
#: qiskit.quantum_info.Choi.tensor qiskit.quantum_info.Kraus.add
#: qiskit.quantum_info.Kraus.compose qiskit.quantum_info.Kraus.expand
#: qiskit.quantum_info.Kraus.multiply qiskit.quantum_info.Kraus.power
#: qiskit.quantum_info.Kraus.subtract qiskit.quantum_info.Kraus.tensor
#: qiskit.quantum_info.Operator.add qiskit.quantum_info.Operator.compose
#: qiskit.quantum_info.Operator.expand qiskit.quantum_info.Operator.multiply
#: qiskit.quantum_info.Operator.power qiskit.quantum_info.Operator.subtract
#: qiskit.quantum_info.Operator.tensor qiskit.quantum_info.PTM
#: qiskit.quantum_info.PTM.add qiskit.quantum_info.PTM.compose
#: qiskit.quantum_info.PTM.expand qiskit.quantum_info.PTM.multiply
#: qiskit.quantum_info.PTM.power qiskit.quantum_info.PTM.subtract
#: qiskit.quantum_info.PTM.tensor qiskit.quantum_info.Pauli.append_paulis
#: qiskit.quantum_info.Pauli.delete_qubits qiskit.quantum_info.Pauli.from_label
#: qiskit.quantum_info.Pauli.insert_paulis qiskit.quantum_info.Pauli.kron
#: qiskit.quantum_info.Pauli.pauli_single qiskit.quantum_info.Pauli.random
#: qiskit.quantum_info.Pauli.sgn_prod qiskit.quantum_info.Pauli.update_x
#: qiskit.quantum_info.Pauli.update_z qiskit.quantum_info.Stinespring.add
#: qiskit.quantum_info.Stinespring.compose
#: qiskit.quantum_info.Stinespring.expand
#: qiskit.quantum_info.Stinespring.multiply
#: qiskit.quantum_info.Stinespring.power
#: qiskit.quantum_info.Stinespring.subtract
#: qiskit.quantum_info.Stinespring.tensor qiskit.quantum_info.SuperOp.add
#: qiskit.quantum_info.SuperOp.compose qiskit.quantum_info.SuperOp.expand
#: qiskit.quantum_info.SuperOp.multiply qiskit.quantum_info.SuperOp.power
#: qiskit.quantum_info.SuperOp.subtract qiskit.quantum_info.SuperOp.tensor
#: qiskit.quantum_info.analyzation.average.average_data
#: qiskit.quantum_info.analyzation.make_observable.make_dict_observable
#: qiskit.quantum_info.basis_state
#: qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
#: qiskit.quantum_info.operators.channel.chi.Chi.add
#: qiskit.quantum_info.operators.channel.chi.Chi.compose
#: qiskit.quantum_info.operators.channel.chi.Chi.expand
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply
#: qiskit.quantum_info.operators.channel.chi.Chi.power
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor
#: qiskit.quantum_info.operators.channel.choi.Choi.add
#: qiskit.quantum_info.operators.channel.choi.Choi.compose
#: qiskit.quantum_info.operators.channel.choi.Choi.expand
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply
#: qiskit.quantum_info.operators.channel.choi.Choi.power
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor
#: qiskit.quantum_info.operators.channel.ptm.PTM
#: qiskit.quantum_info.operators.channel.ptm.PTM.add
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply
#: qiskit.quantum_info.operators.channel.ptm.PTM.power
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor
#: qiskit.quantum_info.operators.measures.process_fidelity
#: qiskit.quantum_info.operators.operator.Operator.add
#: qiskit.quantum_info.operators.operator.Operator.compose
#: qiskit.quantum_info.operators.operator.Operator.expand
#: qiskit.quantum_info.operators.operator.Operator.multiply
#: qiskit.quantum_info.operators.operator.Operator.power
#: qiskit.quantum_info.operators.operator.Operator.subtract
#: qiskit.quantum_info.operators.operator.Operator.tensor
#: qiskit.quantum_info.operators.pauli.Pauli.append_paulis
#: qiskit.quantum_info.operators.pauli.Pauli.delete_qubits
#: qiskit.quantum_info.operators.pauli.Pauli.from_label
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis
#: qiskit.quantum_info.operators.pauli.Pauli.kron
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single
#: qiskit.quantum_info.operators.pauli.Pauli.random
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod
#: qiskit.quantum_info.operators.pauli.Pauli.update_x
#: qiskit.quantum_info.operators.pauli.Pauli.update_z
#: qiskit.quantum_info.operators.pauli.pauli_group
#: qiskit.quantum_info.operators.quaternion.Quaternion.normalize
#: qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation
#: qiskit.quantum_info.operators.quaternion.quaternion_from_euler
#: qiskit.quantum_info.pauli_group qiskit.quantum_info.process_fidelity
#: qiskit.quantum_info.projector qiskit.quantum_info.purity
#: qiskit.quantum_info.random.utils.random_density_matrix
#: qiskit.quantum_info.random.utils.random_state
#: qiskit.quantum_info.random.utils.random_unitary
#: qiskit.quantum_info.random_density_matrix qiskit.quantum_info.random_state
#: qiskit.quantum_info.random_unitary qiskit.quantum_info.state_fidelity
#: qiskit.quantum_info.states.measures.state_fidelity
#: qiskit.quantum_info.states.states.basis_state
#: qiskit.quantum_info.states.states.projector
#: qiskit.quantum_info.states.states.purity
#: qiskit.quantum_info.synthesis.euler_angles_1q
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q
#: qiskit.result.Result.data qiskit.result.Result.get_counts
#: qiskit.result.Result.get_memory qiskit.result.Result.get_statevector
#: qiskit.result.Result.get_unitary qiskit.result.ResultError
#: qiskit.result.exceptions.ResultError qiskit.result.postprocess.format_counts
#: qiskit.result.postprocess.format_counts_memory
#: qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
#: qiskit.result.postprocess.format_level_2_memory
#: qiskit.result.postprocess.format_statevector
#: qiskit.result.postprocess.format_unitary
#: qiskit.test.base.QiskitTestCase.assertDictAlmostEqual
#: qiskit.test.utils.setup_test_logging qiskit.tools.compile
#: qiskit.tools.compiler.compile qiskit.tools.events.TextProgressBar.start
#: qiskit.tools.events.TextProgressBar.time_remaining_est
#: qiskit.tools.events.progressbar.BaseProgressBar.start
#: qiskit.tools.events.progressbar.BaseProgressBar.time_remaining_est
#: qiskit.tools.events.progressbar.TextProgressBar.start
#: qiskit.tools.jupyter.backend_monitor.config_tab
#: qiskit.tools.jupyter.backend_monitor.detailed_map
#: qiskit.tools.jupyter.backend_monitor.gates_tab
#: qiskit.tools.jupyter.backend_monitor.job_history
#: qiskit.tools.jupyter.backend_monitor.plot_job_history
#: qiskit.tools.jupyter.backend_monitor.qubits_tab
#: qiskit.tools.jupyter.progressbar.HTMLProgressBar.start
#: qiskit.tools.monitor.backend_monitor qiskit.tools.monitor.job_monitor
#: qiskit.tools.parallel.parallel_map qiskit.tools.parallel_map
#: qiskit.tools.qcvv.fitters.plot_coherence
#: qiskit.tools.qcvv.fitters.plot_rb_data qiskit.tools.qcvv.fitters.rb_epc
#: qiskit.tools.qcvv.fitters.shape_rb_data
#: qiskit.tools.qcvv.tomography.TomographyBasis.meas_gate
#: qiskit.tools.qcvv.tomography.TomographyBasis.prep_gate
#: qiskit.tools.qcvv.tomography.build_wigner_circuits
#: qiskit.tools.qcvv.tomography.count_keys
#: qiskit.tools.qcvv.tomography.create_tomography_circuits
#: qiskit.tools.qcvv.tomography.fit_tomography_data
#: qiskit.tools.qcvv.tomography.marginal_counts
#: qiskit.tools.qcvv.tomography.state_tomography_set
#: qiskit.tools.qcvv.tomography.tomography_basis
#: qiskit.tools.qcvv.tomography.tomography_circuit_names
#: qiskit.tools.qcvv.tomography.tomography_data
#: qiskit.tools.qcvv.tomography.tomography_set
#: qiskit.tools.qcvv.tomography.wigner_data qiskit.tools.qi.qi.choi_to_rauli
#: qiskit.tools.qi.qi.chop qiskit.tools.qi.qi.concurrence
#: qiskit.tools.qi.qi.devectorize qiskit.tools.qi.qi.entanglement_of_formation
#: qiskit.tools.qi.qi.entropy qiskit.tools.qi.qi.mutual_information
#: qiskit.tools.qi.qi.outer qiskit.tools.qi.qi.partial_trace
#: qiskit.tools.qi.qi.purity qiskit.tools.qi.qi.shannon_entropy
#: qiskit.tools.qi.qi.vectorize qiskit.transpiler.CouplingMap.distance
#: qiskit.transpiler.CouplingMap.reduce
#: qiskit.transpiler.FlowController.controller_factory
#: qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_dict qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_tuplelist qiskit.transpiler.PassManager.append
#: qiskit.transpiler.PassManager.run
#: qiskit.transpiler.coupling.CouplingMap.distance
#: qiskit.transpiler.coupling.CouplingMap.reduce
#: qiskit.transpiler.passes.CXCancellation.run
#: qiskit.transpiler.passes.CheckCXDirection.run
#: qiskit.transpiler.passes.CheckMap.run
#: qiskit.transpiler.passes.CommutativeCancellation.run
#: qiskit.transpiler.passes.Decompose.run
#: qiskit.transpiler.passes.DenseLayout.run
#: qiskit.transpiler.passes.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.FullAncillaAllocation.run
#: qiskit.transpiler.passes.LegacySwap.run
#: qiskit.transpiler.passes.LookaheadSwap.run
#: qiskit.transpiler.passes.StochasticSwap.run
#: qiskit.transpiler.passes.TrivialLayout.run
#: qiskit.transpiler.passes.Unroll3qOrMore.run
#: qiskit.transpiler.passes.Unroller.run
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation.run
#: qiskit.transpiler.passes.mapping.check_cx_direction.CheckCXDirection.run
#: qiskit.transpiler.passes.mapping.check_map.CheckMap.run
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection.add
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.to_layout
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout
#: qiskit.transpiler.passes.mapping.dense_layout.DenseLayout.run
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run
#: qiskit.transpiler.passes.mapping.stochastic_swap.gates_to_idx
#: qiskit.transpiler.passes.mapping.stochastic_swap.regtuple_to_numeric
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout.run
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager_simulator
#: qiskit.transpiler.preset_passmanagers.default_pass_manager
#: qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator
#: qiskit.transpiler.preset_passmanagers.level0.level_0_pass_manager
#: qiskit.transpiler.preset_passmanagers.level1.level_1_pass_manager
#: qiskit.transpiler.preset_passmanagers.level2.level_2_pass_manager
#: qiskit.transpiler.preset_passmanagers.level3.level_3_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_0_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_1_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_2_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_3_pass_manager
#: qiskit.transpiler.transpile qiskit.transpiler.transpile_circuit
#: qiskit.transpiler.transpile_dag qiskit.transpiler.transpiler.transpile
#: qiskit.transpiler.transpiler.transpile_dag qiskit.validation.BaseSchema.dump
#: qiskit.validation.BaseSchema.dump_additional_data
#: qiskit.validation.BaseSchema.dumps qiskit.validation.BaseSchema.handle_error
#: qiskit.validation.BaseSchema.load
#: qiskit.validation.BaseSchema.load_additional_data
#: qiskit.validation.BaseSchema.loads qiskit.validation.BaseSchema.validate
#: qiskit.validation.ModelTypeValidator.serialize
#: qiskit.validation.base.BaseSchema.dump_additional_data
#: qiskit.validation.base.BaseSchema.load_additional_data
#: qiskit.validation.fields.Boolean qiskit.validation.fields.Date
#: qiskit.validation.fields.DateTime qiskit.validation.fields.Email
#: qiskit.validation.fields.Float qiskit.validation.fields.Integer
#: qiskit.validation.fields.Number qiskit.validation.fields.Raw
#: qiskit.validation.fields.String qiskit.validation.fields.Url
#: qiskit.validation.fields.containers.List
#: qiskit.validation.fields.containers.Nested
#: qiskit.validation.fields.polymorphic.ByAttribute
#: qiskit.validation.fields.polymorphic.ByType
#: qiskit.validation.fields.polymorphic.TryFrom
#: qiskit.validation.jsonschema.schema_validation.validate_json_against_schema
#: qiskit.visualization.bloch.Bloch.add_annotation
#: qiskit.visualization.bloch.Bloch.add_vectors
#: qiskit.visualization.bloch.Bloch.save
#: qiskit.visualization.bloch.Bloch.set_label_convention
#: qiskit.visualization.circuit_drawer
#: qiskit.visualization.circuit_visualization.circuit_drawer
#: qiskit.visualization.counts_visualization.hamming_distance
#: qiskit.visualization.counts_visualization.plot_histogram
#: qiskit.visualization.dag_drawer
#: qiskit.visualization.dag_visualization.dag_drawer
#: qiskit.visualization.gate_map.plot_gate_map
#: qiskit.visualization.interactive.iplot_bloch_multivector
#: qiskit.visualization.interactive.iplot_blochsphere.iplot_bloch_multivector
#: qiskit.visualization.interactive.iplot_cities.iplot_state_city
#: qiskit.visualization.interactive.iplot_hinton.iplot_state_hinton
#: qiskit.visualization.interactive.iplot_histogram
#: qiskit.visualization.interactive.iplot_paulivec.iplot_state_paulivec
#: qiskit.visualization.interactive.iplot_qsphere.iplot_state_qsphere
#: qiskit.visualization.interactive.iplot_qsphere.lex_index
#: qiskit.visualization.interactive.iplot_qsphere.n_choose_k
#: qiskit.visualization.interactive.iplot_state
#: qiskit.visualization.interactive.iplot_state_city
#: qiskit.visualization.interactive.iplot_state_hinton
#: qiskit.visualization.interactive.iplot_state_paulivec
#: qiskit.visualization.interactive.iplot_state_qsphere
#: qiskit.visualization.interpolation.cubic_spline
#: qiskit.visualization.interpolation.interp1d
#: qiskit.visualization.interpolation.linear
#: qiskit.visualization.interpolation.step_wise
#: qiskit.visualization.matplotlib.EventsOutputChannels.add_instruction
#: qiskit.visualization.matplotlib.EventsOutputChannels.to_table
#: qiskit.visualization.matplotlib.SamplePulseDrawer.draw
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw
#: qiskit.visualization.plot_bloch_multivector
#: qiskit.visualization.plot_bloch_vector qiskit.visualization.plot_gate_map
#: qiskit.visualization.plot_histogram qiskit.visualization.plot_state
#: qiskit.visualization.plot_state_city qiskit.visualization.plot_state_hinton
#: qiskit.visualization.plot_state_paulivec
#: qiskit.visualization.plot_state_qsphere qiskit.visualization.pulse_drawer
#: qiskit.visualization.pulse_visualization.pulse_drawer
#: qiskit.visualization.state_visualization.lex_index
#: qiskit.visualization.state_visualization.n_choose_k
#: qiskit.visualization.state_visualization.plot_bloch_multivector
#: qiskit.visualization.state_visualization.plot_bloch_vector
#: qiskit.visualization.state_visualization.plot_state
#: qiskit.visualization.state_visualization.plot_state_city
#: qiskit.visualization.state_visualization.plot_state_hinton
#: qiskit.visualization.state_visualization.plot_state_paulivec
#: qiskit.visualization.state_visualization.plot_state_qsphere
msgid "パラメータ"
msgstr ""

#: of qiskit.aqua.Operator.chop:7 qiskit.aqua.operator.Operator.chop:7
msgid "threshold chops the paulis"
msgstr ""

#: of qiskit.aqua.Operator.coloring:1 qiskit.aqua.operator.Operator.coloring:1
msgid "Getter of method of grouping paulis"
msgstr ""

#: of qiskit.aqua.Operator.construct_evaluation_circuit:1
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit:1
msgid "Construct the circuits for evaluation."
msgstr ""

#: of qiskit.aqua.Operator.construct_evaluation_circuit:3
#: qiskit.aqua.Operator.eval:6 qiskit.aqua.Operator.evaluate_with_result:3
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit:3
#: qiskit.aqua.operator.Operator.eval:6
#: qiskit.aqua.operator.Operator.evaluate_with_result:3
msgid "representation of operator, including paulis, grouped_paulis and matrix"
msgstr ""

#: of qiskit.aqua.Operator.construct_evaluation_circuit:5
#: qiskit.aqua.Operator.eval:8
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit:5
#: qiskit.aqua.operator.Operator.eval:8 qiskit.aqua.utils.find_regs_by_name:3
#: qiskit.aqua.utils.run_circuits.find_regs_by_name:3
msgid "the quantum circuit."
msgstr ""

#: of qiskit.aqua.Operator.construct_evaluation_circuit:7
#: qiskit.aqua.Operator.eval:10 qiskit.aqua.Operator.evaluate_with_result:7
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit:7
#: qiskit.aqua.operator.Operator.eval:10
#: qiskit.aqua.operator.Operator.evaluate_with_result:7
msgid "backend selection for quantum machine."
msgstr ""

#: of qiskit.aqua.Operator.construct_evaluation_circuit:9
#: qiskit.aqua.Operator.evaluate_with_result:11
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit:9
#: qiskit.aqua.operator.Operator.evaluate_with_result:11
msgid ""
"if aer_provider is used, we can do faster evaluation for pauli mode on "
"statevector simualtion"
msgstr ""

#: ../../docstring of qiskit.aqua.Operator.construct_evaluation_circuit
#: qiskit.aqua.Operator.construct_evolution_circuit qiskit.aqua.Operator.eval
#: qiskit.aqua.Operator.evaluate_with_result qiskit.aqua.Operator.evolve
#: qiskit.aqua.Operator.find_Z2_symmetries
#: qiskit.aqua.Operator.get_flat_pauli_list qiskit.aqua.Operator.is_empty
#: qiskit.aqua.Operator.kernel_F2 qiskit.aqua.Operator.load_from_dict
#: qiskit.aqua.Operator.load_from_file qiskit.aqua.Operator.num_qubits
#: qiskit.aqua.Operator.print_operators qiskit.aqua.Operator.qubit_tapering
#: qiskit.aqua.Operator.representations qiskit.aqua.Operator.row_echelon_F2
#: qiskit.aqua.Operator.save_to_dict
#: qiskit.aqua.Operator.two_qubit_reduced_operator
#: qiskit.aqua.QiskitAqua.run_algorithm_to_json
#: qiskit.aqua.QuantumAlgorithm.run qiskit.aqua.QuantumInstance.execute
#: qiskit.aqua.QuantumInstance.maybe_refresh_cals_matrix
#: qiskit.aqua._discover.get_pluggable_class
#: qiskit.aqua._discover.get_pluggable_configuration
#: qiskit.aqua._discover.local_pluggables
#: qiskit.aqua._logging.get_qiskit_aqua_logging
#: qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.EOH.construct_circuit
#: qiskit.aqua.algorithms.Grover.construct_circuit
#: qiskit.aqua.algorithms.HHL.construct_circuit
#: qiskit.aqua.algorithms.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.IQPE.construct_circuit
#: qiskit.aqua.algorithms.QGAN.init_params
#: qiskit.aqua.algorithms.QPE.construct_circuit
#: qiskit.aqua.algorithms.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.QSVM.predict qiskit.aqua.algorithms.QSVM.test
#: qiskit.aqua.algorithms.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.SVM_Classical.predict
#: qiskit.aqua.algorithms.SVM_Classical.test
#: qiskit.aqua.algorithms.Shor.construct_circuit
#: qiskit.aqua.algorithms.Simon.construct_circuit
#: qiskit.aqua.algorithms.VQC.construct_circuit
#: qiskit.aqua.algorithms.VQC.predict qiskit.aqua.algorithms.VQC.test
#: qiskit.aqua.algorithms.VQE.construct_circuit
#: qiskit.aqua.algorithms.VQE.init_params
#: qiskit.aqua.algorithms.VQE.print_settings
#: qiskit.aqua.algorithms.adaptive.QGAN.init_params
#: qiskit.aqua.algorithms.adaptive.VQAlgorithm.find_minimum
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.VQC.predict
#: qiskit.aqua.algorithms.adaptive.VQC.test
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit
#: qiskit.aqua.algorithms.adaptive.VQE.init_params
#: qiskit.aqua.algorithms.adaptive.VQE.print_settings
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.init_params
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.init_params
#: qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm.find_minimum
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.init_params
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.print_settings
#: qiskit.aqua.algorithms.classical.SVM_Classical.predict
#: qiskit.aqua.algorithms.classical.SVM_Classical.test
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.variable
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.predict
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.test
#: qiskit.aqua.algorithms.many_sample.EOH.construct_circuit
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.many_sample.QSVM.predict
#: qiskit.aqua.algorithms.many_sample.QSVM.test
#: qiskit.aqua.algorithms.many_sample.eoh.eoh.EOH.construct_circuit
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.predict
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.single_sample.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.single_sample.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.single_sample.Grover.construct_circuit
#: qiskit.aqua.algorithms.single_sample.HHL.construct_circuit
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.QPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.Shor.construct_circuit
#: qiskit.aqua.algorithms.single_sample.Simon.construct_circuit
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation.construct_circuit
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.BernsteinVazirani.construct_circuit
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.DeutschJozsa.construct_circuit
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover.construct_circuit
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.construct_circuit
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.construct_circuit
#: qiskit.aqua.algorithms.single_sample.simon.simon.Simon.construct_circuit
#: qiskit.aqua.circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.ESOP.construct_circuit
#: qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit
#: qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit
#: qiskit.aqua.circuits.statevector_circuit.StateVectorCircuit.construct_circuit
#: qiskit.aqua.components.eigs.Eigenvalues.construct_circuit
#: qiskit.aqua.components.eigs.Eigenvalues.construct_inverse
#: qiskit.aqua.components.eigs.EigsQPE.construct_circuit
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_circuit
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_inverse
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.construct_circuit
#: qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit
#: qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit
#: qiskit.aqua.components.feature_maps.data_mapping.self_product
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector.construct_circuit
#: qiskit.aqua.components.feature_maps.self_product
#: qiskit.aqua.components.initial_states.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.Zero.construct_circuit
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit
#: qiskit.aqua.components.iqfts.IQFT.construct_circuit
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit
#: qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.predict
#: qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.test
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.predict
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.test
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.predict
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.test
#: qiskit.aqua.components.optimizers.ADAM.optimize
#: qiskit.aqua.components.optimizers.AQGD.converged
#: qiskit.aqua.components.optimizers.AQGD.deriv
#: qiskit.aqua.components.optimizers.AQGD.optimize
#: qiskit.aqua.components.optimizers.CG.optimize
#: qiskit.aqua.components.optimizers.COBYLA.optimize
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize
#: qiskit.aqua.components.optimizers.Optimizer.gradient_num_diff
#: qiskit.aqua.components.optimizers.Optimizer.optimize
#: qiskit.aqua.components.optimizers.POWELL.optimize
#: qiskit.aqua.components.optimizers.P_BFGS.optimize
#: qiskit.aqua.components.optimizers.SLSQP.optimize
#: qiskit.aqua.components.optimizers.SPSA.optimize
#: qiskit.aqua.components.optimizers.TNC.optimize
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize
#: qiskit.aqua.components.optimizers.aqgd.AQGD.converged
#: qiskit.aqua.components.optimizers.aqgd.AQGD.deriv
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize
#: qiskit.aqua.components.optimizers.cg.CG.optimize
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize
#: qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.gradient_num_diff
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize
#: qiskit.aqua.components.oracles.CustomCircuitOracle.construct_circuit
#: qiskit.aqua.components.oracles.LogicalExpressionOracle.construct_circuit
#: qiskit.aqua.components.oracles.Oracle.construct_circuit
#: qiskit.aqua.components.oracles.TruthTableOracle.construct_circuit
#: qiskit.aqua.components.oracles.custom_circuit_oracle.CustomCircuitOracle.construct_circuit
#: qiskit.aqua.components.oracles.logical_expression_oracle.LogicalExpressionOracle.construct_circuit
#: qiskit.aqua.components.oracles.oracle.Oracle.construct_circuit
#: qiskit.aqua.components.oracles.truth_table_oracle.TruthTableOracle.construct_circuit
#: qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers
#: qiskit.aqua.components.oracles.truth_table_oracle.get_prime_implicants
#: qiskit.aqua.components.qfts.QFT.construct_circuit
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit
#: qiskit.aqua.components.reciprocals.LongDivision.construct_circuit
#: qiskit.aqua.components.reciprocals.LongDivision.sv_to_resvec
#: qiskit.aqua.components.reciprocals.LookupRotation.construct_circuit
#: qiskit.aqua.components.reciprocals.LookupRotation.sv_to_resvec
#: qiskit.aqua.components.reciprocals.Reciprocal.construct_circuit
#: qiskit.aqua.components.reciprocals.Reciprocal.sv_to_resvec
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.construct_circuit
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.sv_to_resvec
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.construct_circuit
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.sv_to_resvec
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.construct_circuit
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.sv_to_resvec
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.init_params
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.init_params
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.init_params
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.init_params
#: qiskit.aqua.components.variational_forms.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.VariationalForm.construct_circuit
#: qiskit.aqua.components.variational_forms.VariationalForm.num_parameters
#: qiskit.aqua.components.variational_forms.VariationalForm.num_qubits
#: qiskit.aqua.components.variational_forms.VariationalForm.parameter_bounds
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.construct_circuit
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.num_parameters
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.num_qubits
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.parameter_bounds
#: qiskit.aqua.execute_algorithm qiskit.aqua.get_backend_from_provider
#: qiskit.aqua.get_backends_from_provider qiskit.aqua.get_pluggable_class
#: qiskit.aqua.get_pluggable_configuration
#: qiskit.aqua.get_provider_from_backend qiskit.aqua.get_qiskit_aqua_logging
#: qiskit.aqua.local_pluggables
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit
#: qiskit.aqua.operator.Operator.construct_evolution_circuit
#: qiskit.aqua.operator.Operator.eval
#: qiskit.aqua.operator.Operator.evaluate_with_result
#: qiskit.aqua.operator.Operator.evolve
#: qiskit.aqua.operator.Operator.find_Z2_symmetries
#: qiskit.aqua.operator.Operator.get_flat_pauli_list
#: qiskit.aqua.operator.Operator.is_empty
#: qiskit.aqua.operator.Operator.kernel_F2
#: qiskit.aqua.operator.Operator.load_from_dict
#: qiskit.aqua.operator.Operator.load_from_file
#: qiskit.aqua.operator.Operator.num_qubits
#: qiskit.aqua.operator.Operator.print_operators
#: qiskit.aqua.operator.Operator.qubit_tapering
#: qiskit.aqua.operator.Operator.representations
#: qiskit.aqua.operator.Operator.row_echelon_F2
#: qiskit.aqua.operator.Operator.save_to_dict
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator
#: qiskit.aqua.parser.BaseParser.add_section_properties
#: qiskit.aqua.parser.BaseParser.delete_section
#: qiskit.aqua.parser.BaseParser.delete_section_properties
#: qiskit.aqua.parser.BaseParser.delete_section_property
#: qiskit.aqua.parser.BaseParser.get_section
#: qiskit.aqua.parser.BaseParser.get_section_property
#: qiskit.aqua.parser.BaseParser.set_section
#: qiskit.aqua.parser.BaseParser.set_section_properties
#: qiskit.aqua.parser.BaseParser.set_section_property
#: qiskit.aqua.parser.JSONSchema.allows_additional_properties
#: qiskit.aqua.parser.JSONSchema.check_property_value
#: qiskit.aqua.parser.JSONSchema.check_section_value
#: qiskit.aqua.parser.JSONSchema.get_algorithm_problems
#: qiskit.aqua.parser.JSONSchema.get_property_default_value
#: qiskit.aqua.parser.JSONSchema.get_property_default_values
#: qiskit.aqua.parser.JSONSchema.get_property_types
#: qiskit.aqua.parser.JSONSchema.get_section_default_properties
#: qiskit.aqua.parser.JSONSchema.get_section_types
#: qiskit.aqua.parser.JSONSchema.get_value
#: qiskit.aqua.parser.JSONSchema.validate_property
#: qiskit.aqua.parser.base_parser.BaseParser.add_section_properties
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_properties
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_property
#: qiskit.aqua.parser.base_parser.BaseParser.get_section
#: qiskit.aqua.parser.base_parser.BaseParser.get_section_property
#: qiskit.aqua.parser.base_parser.BaseParser.set_section
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_properties
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_property
#: qiskit.aqua.parser.json_schema.JSONSchema.allows_additional_properties
#: qiskit.aqua.parser.json_schema.JSONSchema.check_property_value
#: qiskit.aqua.parser.json_schema.JSONSchema.check_section_value
#: qiskit.aqua.parser.json_schema.JSONSchema.get_algorithm_problems
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_value
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_values
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_types
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_default_properties
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_types
#: qiskit.aqua.parser.json_schema.JSONSchema.get_value
#: qiskit.aqua.parser.json_schema.JSONSchema.validate_property
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json
#: qiskit.aqua.qiskit_aqua.execute_algorithm
#: qiskit.aqua.qiskit_aqua.run_algorithm
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json
#: qiskit.aqua.quantum_instance.QuantumInstance.execute
#: qiskit.aqua.quantum_instance.QuantumInstance.maybe_refresh_cals_matrix
#: qiskit.aqua.run_algorithm qiskit.aqua.run_algorithm_to_json
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_covariance_matrix
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_mean_vector
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_covariance_matrix
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_mean_vector
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_similarity_matrix
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.init_from_input
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider.init_from_input
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider.init_from_input
#: qiskit.aqua.translators.ising.clique.get_clique_qubitops
#: qiskit.aqua.translators.ising.clique.get_graph_solution
#: qiskit.aqua.translators.ising.clique.get_gset_result
#: qiskit.aqua.translators.ising.clique.parse_gset_format
#: qiskit.aqua.translators.ising.clique.random_graph
#: qiskit.aqua.translators.ising.clique.sample_most_likely
#: qiskit.aqua.translators.ising.clique.satisfy_or_not
#: qiskit.aqua.translators.ising.docplex.get_qubitops
#: qiskit.aqua.translators.ising.docplex.sample_most_likely
#: qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops
#: qiskit.aqua.translators.ising.exact_cover.get_solution
#: qiskit.aqua.translators.ising.exact_cover.random_number_list
#: qiskit.aqua.translators.ising.exact_cover.read_numbers_from_file
#: qiskit.aqua.translators.ising.exact_cover.sample_most_likely
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops
#: qiskit.aqua.translators.ising.graph_partition.get_graph_solution
#: qiskit.aqua.translators.ising.graph_partition.get_gset_result
#: qiskit.aqua.translators.ising.graph_partition.objective_value
#: qiskit.aqua.translators.ising.graph_partition.parse_gset_format
#: qiskit.aqua.translators.ising.graph_partition.random_graph
#: qiskit.aqua.translators.ising.graph_partition.sample_most_likely
#: qiskit.aqua.translators.ising.max_cut.get_graph_solution
#: qiskit.aqua.translators.ising.max_cut.get_gset_result
#: qiskit.aqua.translators.ising.max_cut.get_max_cut_qubitops
#: qiskit.aqua.translators.ising.max_cut.max_cut_value
#: qiskit.aqua.translators.ising.max_cut.parse_gset_format
#: qiskit.aqua.translators.ising.max_cut.random_graph
#: qiskit.aqua.translators.ising.max_cut.sample_most_likely
#: qiskit.aqua.translators.ising.partition.get_partition_qubitops
#: qiskit.aqua.translators.ising.partition.partition_value
#: qiskit.aqua.translators.ising.partition.random_number_list
#: qiskit.aqua.translators.ising.partition.read_numbers_from_file
#: qiskit.aqua.translators.ising.partition.sample_most_likely
#: qiskit.aqua.translators.ising.portfolio.random_model
#: qiskit.aqua.translators.ising.portfolio.sample_most_likely
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value
#: qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops
#: qiskit.aqua.translators.ising.set_packing.get_solution
#: qiskit.aqua.translators.ising.set_packing.random_number_list
#: qiskit.aqua.translators.ising.set_packing.read_numbers_from_file
#: qiskit.aqua.translators.ising.set_packing.sample_most_likely
#: qiskit.aqua.translators.ising.stable_set.get_graph_solution
#: qiskit.aqua.translators.ising.stable_set.get_stable_set_qubitops
#: qiskit.aqua.translators.ising.stable_set.parse_gset_format
#: qiskit.aqua.translators.ising.stable_set.random_graph
#: qiskit.aqua.translators.ising.stable_set.sample_most_likely
#: qiskit.aqua.translators.ising.stable_set.stable_set_value
#: qiskit.aqua.translators.ising.tsp.get_tsp_qubitops
#: qiskit.aqua.translators.ising.tsp.get_tsp_solution
#: qiskit.aqua.translators.ising.tsp.parse_tsplib_format
#: qiskit.aqua.translators.ising.tsp.random_tsp
#: qiskit.aqua.translators.ising.tsp.sample_most_likely
#: qiskit.aqua.translators.ising.tsp.tsp_feasible
#: qiskit.aqua.translators.ising.tsp.tsp_value
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution
#: qiskit.aqua.translators.ising.vertex_cover.check_full_edge_coverage
#: qiskit.aqua.translators.ising.vertex_cover.get_graph_solution
#: qiskit.aqua.translators.ising.vertex_cover.get_gset_result
#: qiskit.aqua.translators.ising.vertex_cover.get_vertex_cover_qubitops
#: qiskit.aqua.translators.ising.vertex_cover.parse_gset_format
#: qiskit.aqua.translators.ising.vertex_cover.random_graph
#: qiskit.aqua.translators.ising.vertex_cover.sample_most_likely
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend
#: qiskit.aqua.utils.backend_utils.is_aer_provider
#: qiskit.aqua.utils.backend_utils.is_aer_statevector_backend
#: qiskit.aqua.utils.backend_utils.is_basicaer_provider
#: qiskit.aqua.utils.backend_utils.is_ibmq_provider
#: qiskit.aqua.utils.backend_utils.is_local_backend
#: qiskit.aqua.utils.backend_utils.is_simulator_backend
#: qiskit.aqua.utils.backend_utils.is_statevector_backend
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.compile_and_run_circuits
#: qiskit.aqua.utils.compile_circuits
#: qiskit.aqua.utils.controlled_circuit.get_controlled_circuit
#: qiskit.aqua.utils.convert_dict_to_json
#: qiskit.aqua.utils.convert_json_to_dict
#: qiskit.aqua.utils.dataset_helper.get_feature_dimension
#: qiskit.aqua.utils.dataset_helper.get_num_classes
#: qiskit.aqua.utils.dataset_helper.map_label_to_class_name
#: qiskit.aqua.utils.dataset_helper.reduce_dim_to_via_pca
#: qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels
#: qiskit.aqua.utils.entangler_map.get_entangler_map
#: qiskit.aqua.utils.entangler_map.validate_entangler_map
#: qiskit.aqua.utils.find_regs_by_name qiskit.aqua.utils.get_entangler_map
#: qiskit.aqua.utils.get_feature_dimension
#: qiskit.aqua.utils.get_measured_qubits_from_qobj
#: qiskit.aqua.utils.get_num_classes
#: qiskit.aqua.utils.get_subsystem_density_matrix
#: qiskit.aqua.utils.get_subsystems_counts
#: qiskit.aqua.utils.json_utils.convert_dict_to_json
#: qiskit.aqua.utils.json_utils.convert_json_to_dict
#: qiskit.aqua.utils.map_label_to_class_name
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits_from_qobj
#: qiskit.aqua.utils.measurement_error_mitigation.mitigate_measurement_error
#: qiskit.aqua.utils.mitigate_measurement_error qiskit.aqua.utils.optimize_svm
#: qiskit.aqua.utils.qp_solver.optimize_svm qiskit.aqua.utils.random_h1_body
#: qiskit.aqua.utils.random_h2_body qiskit.aqua.utils.random_hermitian
#: qiskit.aqua.utils.random_matrix_generator.limit_entries
#: qiskit.aqua.utils.random_matrix_generator.limit_paulis
#: qiskit.aqua.utils.random_matrix_generator.random_diag
#: qiskit.aqua.utils.random_matrix_generator.random_h1_body
#: qiskit.aqua.utils.random_matrix_generator.random_h2_body
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_non_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_unitary
#: qiskit.aqua.utils.random_non_hermitian qiskit.aqua.utils.random_unitary
#: qiskit.aqua.utils.reduce_dim_to_via_pca
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits
#: qiskit.aqua.utils.run_circuits.compile_circuits
#: qiskit.aqua.utils.run_circuits.find_regs_by_name
#: qiskit.aqua.utils.run_circuits.run_qobjs qiskit.aqua.utils.run_qobjs
#: qiskit.aqua.utils.split_dataset_to_data_and_labels
#: qiskit.aqua.utils.subsystem.get_subsystem_density_matrix
#: qiskit.aqua.utils.subsystem.get_subsystem_fidelity
#: qiskit.aqua.utils.subsystem.get_subsystems_counts
#: qiskit.aqua.utils.tensor_product.tensorproduct
#: qiskit.aqua.utils.tensorproduct qiskit.aqua.utils.validate_entangler_map
#: qiskit.assembler.assemble_circuits qiskit.assembler.assemble_schedules
#: qiskit.assembler.disassemble
#: qiskit.chemistry.FermionicOperator.fermion_mode_elimination
#: qiskit.chemistry.FermionicOperator.fermion_mode_freezing
#: qiskit.chemistry.FermionicOperator.mapping
#: qiskit.chemistry.FermionicOperator.total_angular_momentum
#: qiskit.chemistry.FermionicOperator.total_magnetization
#: qiskit.chemistry.FermionicOperator.total_particle_number
#: qiskit.chemistry.MP2Info.mp2_delta qiskit.chemistry.MP2Info.mp2_energy
#: qiskit.chemistry.MP2Info.mp2_get_term_info
#: qiskit.chemistry.MP2Info.mp2_terms qiskit.chemistry.QMolecule.mo_to_spin
#: qiskit.chemistry.QMolecule.onee_to_spin
#: qiskit.chemistry.QMolecule.oneeints2mo
#: qiskit.chemistry.QMolecule.twoe_to_spin
#: qiskit.chemistry.QMolecule.twoeints2mo qiskit.chemistry.QiskitChemistry.run
#: qiskit.chemistry._logging.get_qiskit_chemistry_logging
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit
#: qiskit.chemistry.bksf.bksf_mapping
#: qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list
#: qiskit.chemistry.bksf.edge_operator_aij
#: qiskit.chemistry.bksf.edge_operator_bi
#: qiskit.chemistry.bksf.generate_fermions
#: qiskit.chemistry.bksf.number_operator qiskit.chemistry.bksf.vacuum_operator
#: qiskit.chemistry.core.ChemistryOperator.init_params
#: qiskit.chemistry.core.ChemistryOperator.process_algorithm_result
#: qiskit.chemistry.core.ChemistryOperator.run
#: qiskit.chemistry.core.Hamiltonian.init_params
#: qiskit.chemistry.core.Hamiltonian.run
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_class
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_configuration
#: qiskit.chemistry.core._discover_chemoperator.register_chemistry_operator
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.init_params
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.process_algorithm_result
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.run
#: qiskit.chemistry.core.get_chemistry_operator_class
#: qiskit.chemistry.core.get_chemistry_operator_configuration
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.init_params
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.run
#: qiskit.chemistry.core.register_chemistry_operator
#: qiskit.chemistry.drivers.BaseDriver.init_from_input
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers._basedriver.BaseDriver.init_from_input
#: qiskit.chemistry.drivers._discover_driver.get_driver_class
#: qiskit.chemistry.drivers._discover_driver.get_driver_configuration
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.get_driver_class
#: qiskit.chemistry.drivers.get_driver_configuration
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.psi4d.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver.init_from_input
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_elimination
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_freezing
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_angular_momentum
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_magnetization
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_particle_number
#: qiskit.chemistry.get_qiskit_chemistry_logging
#: qiskit.chemistry.mp2info.MP2Info.mp2_delta
#: qiskit.chemistry.mp2info.MP2Info.mp2_energy
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms
#: qiskit.chemistry.particle_hole.last_two_indices_swap
#: qiskit.chemistry.particle_hole.normal_order_integrals
#: qiskit.chemistry.particle_hole.particle_hole_transformation
#: qiskit.chemistry.particle_hole.sort
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run
#: qiskit.chemistry.qiskit_chemistry.run_driver_to_json
#: qiskit.chemistry.qiskit_chemistry.run_experiment
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin
#: qiskit.chemistry.qmolecule.QMolecule.onee_to_spin
#: qiskit.chemistry.qmolecule.QMolecule.oneeints2mo
#: qiskit.chemistry.qmolecule.QMolecule.twoe_to_spin
#: qiskit.chemistry.qmolecule.QMolecule.twoeints2mo
#: qiskit.chemistry.run_driver_to_json qiskit.chemistry.run_experiment
#: qiskit.circuit.CompositeGate.copy qiskit.circuit.CompositeGate.mirror
#: qiskit.circuit.CompositeGate.snapshot qiskit.circuit.Gate.copy
#: qiskit.circuit.Gate.inverse qiskit.circuit.Gate.mirror
#: qiskit.circuit.Instruction.copy qiskit.circuit.Instruction.inverse
#: qiskit.circuit.Instruction.mirror qiskit.circuit.Measure.copy
#: qiskit.circuit.Measure.inverse qiskit.circuit.Measure.mirror
#: qiskit.circuit.QuantumCircuit.append
#: qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.copy qiskit.circuit.QuantumCircuit.count_ops
#: qiskit.circuit.QuantumCircuit.decompose qiskit.circuit.QuantumCircuit.depth
#: qiskit.circuit.QuantumCircuit.draw
#: qiskit.circuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.QuantumCircuit.has_register
#: qiskit.circuit.QuantumCircuit.inverse qiskit.circuit.QuantumCircuit.measure
#: qiskit.circuit.QuantumCircuit.mirror
#: qiskit.circuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.QuantumCircuit.size qiskit.circuit.QuantumCircuit.snapshot
#: qiskit.circuit.QuantumCircuit.to_instruction
#: qiskit.circuit.QuantumCircuit.width qiskit.circuit.Reset.copy
#: qiskit.circuit.Reset.inverse qiskit.circuit.Reset.mirror
#: qiskit.compiler.assemble qiskit.compiler.transpile
#: qiskit.converters.ast_to_dag qiskit.converters.circuit_to_dag
#: qiskit.converters.circuit_to_instruction qiskit.converters.circuits_to_qobj
#: qiskit.converters.dag_to_circuit qiskit.converters.qobj_to_circuits
#: qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.gate_nodes qiskit.dagcircuit.DAGCircuit.node
#: qiskit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_op_nodes
#: qiskit.dagcircuit.DAGNode.semantic_eq qiskit.execute.execute
#: qiskit.extensions.Initialize.gates_to_uncompute
#: qiskit.extensions.initializer.Initialize.gates_to_uncompute
#: qiskit.extensions.simulator.Snapshot.copy
#: qiskit.extensions.simulator.Snapshot.mirror
#: qiskit.extensions.standard.Barrier.copy
#: qiskit.extensions.standard.Barrier.mirror
#: qiskit.extensions.standard.CHGate.copy
#: qiskit.extensions.standard.CHGate.mirror
#: qiskit.extensions.standard.CXBase.copy
#: qiskit.extensions.standard.CXBase.mirror
#: qiskit.extensions.standard.CnotGate.copy
#: qiskit.extensions.standard.CnotGate.mirror
#: qiskit.extensions.standard.CrzGate.copy
#: qiskit.extensions.standard.CrzGate.mirror
#: qiskit.extensions.standard.Cu1Gate.copy
#: qiskit.extensions.standard.Cu1Gate.mirror
#: qiskit.extensions.standard.Cu3Gate.copy
#: qiskit.extensions.standard.Cu3Gate.mirror
#: qiskit.extensions.standard.CyGate.copy
#: qiskit.extensions.standard.CyGate.mirror
#: qiskit.extensions.standard.CzGate.copy
#: qiskit.extensions.standard.CzGate.mirror
#: qiskit.extensions.standard.FredkinGate.copy
#: qiskit.extensions.standard.FredkinGate.mirror
#: qiskit.extensions.standard.HGate.copy
#: qiskit.extensions.standard.HGate.mirror
#: qiskit.extensions.standard.IdGate.copy
#: qiskit.extensions.standard.IdGate.mirror
#: qiskit.extensions.standard.RXGate.copy
#: qiskit.extensions.standard.RXGate.mirror
#: qiskit.extensions.standard.RYGate.copy
#: qiskit.extensions.standard.RYGate.mirror
#: qiskit.extensions.standard.RZGate.copy
#: qiskit.extensions.standard.RZGate.mirror
#: qiskit.extensions.standard.RZZGate.copy
#: qiskit.extensions.standard.RZZGate.mirror
#: qiskit.extensions.standard.SGate.copy
#: qiskit.extensions.standard.SGate.mirror
#: qiskit.extensions.standard.SdgGate.copy
#: qiskit.extensions.standard.SdgGate.mirror
#: qiskit.extensions.standard.SwapGate.copy
#: qiskit.extensions.standard.SwapGate.mirror
#: qiskit.extensions.standard.TGate.copy
#: qiskit.extensions.standard.TGate.mirror
#: qiskit.extensions.standard.TdgGate.copy
#: qiskit.extensions.standard.TdgGate.mirror
#: qiskit.extensions.standard.ToffoliGate.copy
#: qiskit.extensions.standard.ToffoliGate.mirror
#: qiskit.extensions.standard.U0Gate.copy
#: qiskit.extensions.standard.U0Gate.mirror
#: qiskit.extensions.standard.U1Gate.copy
#: qiskit.extensions.standard.U1Gate.mirror
#: qiskit.extensions.standard.U2Gate.copy
#: qiskit.extensions.standard.U2Gate.mirror
#: qiskit.extensions.standard.U3Gate.copy
#: qiskit.extensions.standard.U3Gate.mirror
#: qiskit.extensions.standard.UBase.copy
#: qiskit.extensions.standard.UBase.mirror
#: qiskit.extensions.standard.XGate.copy
#: qiskit.extensions.standard.XGate.mirror
#: qiskit.extensions.standard.YGate.copy
#: qiskit.extensions.standard.YGate.mirror
#: qiskit.extensions.standard.ZGate.copy
#: qiskit.extensions.standard.ZGate.mirror
#: qiskit.ignis.characterization.characterization_utils.pad_id_gates
#: qiskit.ignis.characterization.characterization_utils.time_to_ngates
#: qiskit.ignis.characterization.coherence.circuits.t1_circuits
#: qiskit.ignis.characterization.coherence.circuits.t2_circuits
#: qiskit.ignis.characterization.coherence.circuits.t2star_circuits
#: qiskit.ignis.characterization.coherence.t1_circuits
#: qiskit.ignis.characterization.coherence.t2_circuits
#: qiskit.ignis.characterization.coherence.t2star_circuits
#: qiskit.ignis.characterization.gates.ampcal_1Q_circuits
#: qiskit.ignis.characterization.gates.ampcal_cx_circuits
#: qiskit.ignis.characterization.gates.anglecal_1Q_circuits
#: qiskit.ignis.characterization.gates.anglecal_cx_circuits
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits
#: qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.subset_fitter
#: qiskit.ignis.mitigation.measurement.MeasurementFilter.apply
#: qiskit.ignis.mitigation.measurement.TensoredFilter.apply
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal
#: qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal
#: qiskit.ignis.mitigation.measurement.complete_meas_cal
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.apply
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.subset_fitter
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.readout_fidelity
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal
#: qiskit.ignis.verification.quantum_volume.QVFitter.quantum_volume
#: qiskit.ignis.verification.quantum_volume.QVFitter.qv_success
#: qiskit.ignis.verification.quantum_volume.circuits.qv_circuits
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.quantum_volume
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.qv_success
#: qiskit.ignis.verification.quantum_volume.qv_circuits
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.index
#: qiskit.ignis.verification.randomized_benchmarking.circuits.calc_xdata
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern
#: qiskit.ignis.verification.randomized_benchmarking.circuits.handle_length_multiplier
#: qiskit.ignis.verification.randomized_benchmarking.circuits.load_tables
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq
#: qiskit.ignis.verification.randomized_benchmarking.circuits.replace_q_indices
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford_from_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.compose_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.find_inverse_clifford_gates
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.get_quantum_circuit
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.load_clifford_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.pickle_clifford_table
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.random_clifford_gates
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.twoQ_clifford_error
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit
#: qiskit.ignis.verification.tomography.TomographyFitter.fit
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_circuit
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_circuit
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_circuit
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix
#: qiskit.ignis.verification.tomography.data.expectation_counts
#: qiskit.ignis.verification.tomography.data.marginal_counts
#: qiskit.ignis.verification.tomography.expectation_counts
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit
#: qiskit.ignis.verification.tomography.marginal_counts
#: qiskit.ignis.verification.tomography.process_tomography_circuits
#: qiskit.ignis.verification.tomography.state_tomography_circuits
#: qiskit.providers.BaseBackend.configuration qiskit.providers.BaseBackend.name
#: qiskit.providers.BaseBackend.properties
#: qiskit.providers.BaseBackend.provider qiskit.providers.BaseBackend.status
#: qiskit.providers.BaseProvider.backends
#: qiskit.providers.BaseProvider.get_backend qiskit.providers.aer.AerJob.qobj
#: qiskit.providers.aer.AerJob.result qiskit.providers.aer.AerJob.status
#: qiskit.providers.aer.AerProvider.backends
#: qiskit.providers.aer.AerProvider.get_backend
#: qiskit.providers.aer.QasmSimulator.configuration
#: qiskit.providers.aer.QasmSimulator.name
#: qiskit.providers.aer.QasmSimulator.properties
#: qiskit.providers.aer.QasmSimulator.provider
#: qiskit.providers.aer.QasmSimulator.status
#: qiskit.providers.aer.StatevectorSimulator.configuration
#: qiskit.providers.aer.StatevectorSimulator.name
#: qiskit.providers.aer.StatevectorSimulator.properties
#: qiskit.providers.aer.StatevectorSimulator.provider
#: qiskit.providers.aer.StatevectorSimulator.status
#: qiskit.providers.aer.UnitarySimulator.configuration
#: qiskit.providers.aer.UnitarySimulator.name
#: qiskit.providers.aer.UnitarySimulator.properties
#: qiskit.providers.aer.UnitarySimulator.provider
#: qiskit.providers.aer.UnitarySimulator.status
#: qiskit.providers.aer.backends.QasmSimulator.configuration
#: qiskit.providers.aer.backends.QasmSimulator.name
#: qiskit.providers.aer.backends.QasmSimulator.properties
#: qiskit.providers.aer.backends.QasmSimulator.provider
#: qiskit.providers.aer.backends.QasmSimulator.status
#: qiskit.providers.aer.backends.StatevectorSimulator.configuration
#: qiskit.providers.aer.backends.StatevectorSimulator.name
#: qiskit.providers.aer.backends.StatevectorSimulator.properties
#: qiskit.providers.aer.backends.StatevectorSimulator.provider
#: qiskit.providers.aer.backends.StatevectorSimulator.status
#: qiskit.providers.aer.backends.UnitarySimulator.configuration
#: qiskit.providers.aer.backends.UnitarySimulator.name
#: qiskit.providers.aer.backends.UnitarySimulator.properties
#: qiskit.providers.aer.backends.UnitarySimulator.provider
#: qiskit.providers.aer.backends.UnitarySimulator.status
#: qiskit.providers.aer.backends.aerbackend.AerBackend.status
#: qiskit.providers.aer.noise.NoiseModel.as_dict
#: qiskit.providers.aer.noise.NoiseModel.from_dict
#: qiskit.providers.aer.noise.NoiseModel.to_dict
#: qiskit.providers.aer.noise.device.models.basic_device_gate_errors
#: qiskit.providers.aer.noise.device.models.basic_device_noise_model
#: qiskit.providers.aer.noise.device.models.basic_device_readout_errors
#: qiskit.providers.aer.noise.device.parameters.gate_error_values
#: qiskit.providers.aer.noise.device.parameters.gate_param_values
#: qiskit.providers.aer.noise.device.parameters.gate_time_values
#: qiskit.providers.aer.noise.device.parameters.readout_error_values
#: qiskit.providers.aer.noise.device.parameters.thermal_relaxation_values
#: qiskit.providers.aer.noise.errors.errorutils.kraus2instructions
#: qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction
#: qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix
#: qiskit.providers.aer.noise.errors.errorutils.standard_gate_instruction
#: qiskit.providers.aer.noise.errors.errorutils.standard_gates_instructions
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.kron
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.coherent_unitary_error
#: qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error
#: qiskit.providers.aer.noise.errors.standard_errors.kraus_error
#: qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error
#: qiskit.providers.aer.noise.errors.standard_errors.pauli_error
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.reset_error
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.as_dict
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict
#: qiskit.providers.aer.noise.noise_model.NoiseModel.to_dict
#: qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.channel_matrix_representation
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_P
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_channel_operation
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_q
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.flatten_matrix
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_matrices
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_quadratic_programming_matrices
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_circuit
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_matrix
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.prepare_channel_operator_list
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error
#: qiskit.providers.aer.noise.utils.noise_transformation.pauli_operators
#: qiskit.providers.aer.noise.utils.noise_transformation.reset_operators
#: qiskit.providers.aer.utils.qobj_utils.append_instr
#: qiskit.providers.aer.utils.qobj_utils.get_instr_pos
#: qiskit.providers.aer.utils.qobj_utils.insert_instr
#: qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers
#: qiskit.providers.aer.utils.qobj_utils.snapshot_instr
#: qiskit.providers.aer.utils.qobj_utils.unitary_instr
#: qiskit.providers.basicaer.BasicAerJob.qobj
#: qiskit.providers.basicaer.BasicAerJob.result
#: qiskit.providers.basicaer.BasicAerJob.status
#: qiskit.providers.basicaer.BasicAerProvider.backends
#: qiskit.providers.basicaer.BasicAerProvider.get_backend
#: qiskit.providers.basicaer.QasmSimulatorPy.configuration
#: qiskit.providers.basicaer.QasmSimulatorPy.name
#: qiskit.providers.basicaer.QasmSimulatorPy.properties
#: qiskit.providers.basicaer.QasmSimulatorPy.provider
#: qiskit.providers.basicaer.QasmSimulatorPy.run
#: qiskit.providers.basicaer.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.QasmSimulatorPy.status
#: qiskit.providers.basicaer.StatevectorSimulatorPy.configuration
#: qiskit.providers.basicaer.StatevectorSimulatorPy.name
#: qiskit.providers.basicaer.StatevectorSimulatorPy.properties
#: qiskit.providers.basicaer.StatevectorSimulatorPy.provider
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment
#: qiskit.providers.basicaer.StatevectorSimulatorPy.status
#: qiskit.providers.basicaer.UnitarySimulatorPy.configuration
#: qiskit.providers.basicaer.UnitarySimulatorPy.name
#: qiskit.providers.basicaer.UnitarySimulatorPy.properties
#: qiskit.providers.basicaer.UnitarySimulatorPy.provider
#: qiskit.providers.basicaer.UnitarySimulatorPy.run
#: qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment
#: qiskit.providers.basicaer.UnitarySimulatorPy.status
#: qiskit.providers.basicaer.basicaertools.einsum_matmul_index
#: qiskit.providers.basicaer.basicaertools.einsum_vecmul_index
#: qiskit.providers.basicaer.basicaertools.single_gate_matrix
#: qiskit.providers.basicaer.basicaertools.single_gate_params
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment
#: qiskit.providers.ibmq.accountprovider.AccountProvider.backends
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_get
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_status
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_properties
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_pulse_defaults
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_get
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_run
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_cancel
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_download_qobj_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_properties
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_result_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_backends
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.api_version
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_access_token
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_service_urls
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_hubs
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_urls
#: qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status
#: qiskit.providers.ibmq.api_v2.rest.auth.Auth.login
#: qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get_object_storage
#: qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage
#: qiskit.providers.ibmq.api_v2.rest.job.build_url_filter
#: qiskit.providers.ibmq.api_v2.rest.root.Api.backend
#: qiskit.providers.ibmq.api_v2.rest.root.Api.circuit
#: qiskit.providers.ibmq.api_v2.rest.root.Api.job
#: qiskit.providers.ibmq.api_v2.rest.root.Api.jobs
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job_object_storage
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version
#: qiskit.providers.ibmq.api_v2.session.RetrySession.request
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.random_uniform
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc
#: qiskit.providers.ibmq.credentials.credentials.Credentials.connection_parameters
#: qiskit.providers.ibmq.credentials.credentials.Credentials.unique_id
#: qiskit.providers.ibmq.credentials.discover_credentials
#: qiskit.providers.ibmq.credentials.environ.read_credentials_from_environ
#: qiskit.providers.ibmq.credentials.qconfig.read_credentials_from_qconfig
#: qiskit.providers.ibmq.credentials.updater.update_credentials
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.properties
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.status
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.properties
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_provider
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.update_account
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.active_accounts
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.stored_accounts
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends
#: qiskit.providers.ibmq.job.circuitjob.CircuitJob.status
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.cancel
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.error_message
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.job_id
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.properties
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.qobj
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.queue_position
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.status
#: qiskit.providers.ibmq.job.utils.build_error_report
#: qiskit.providers.ibmq.job.utils.current_utc_time
#: qiskit.providers.ibmq.job.utils.is_job_queued
#: qiskit.providers.ibmq.least_busy
#: qiskit.providers.ibmq.utils.deprecation.deprecated
#: qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config
#: qiskit.providers.models.PulseDefaults.build_cmd_def
#: qiskit.providers.providerutils.filter_backends
#: qiskit.providers.providerutils.resolve_backend_name
#: qiskit.pulse.DeviceSpecification.create_from qiskit.pulse.Instruction.draw
#: qiskit.pulse.LoConfig.channel_lo qiskit.pulse.LoRange.includes
#: qiskit.pulse.SamplePulse.draw qiskit.pulse.Schedule.draw
#: qiskit.pulse.Snapshot.draw
#: qiskit.pulse.channels.device_specification.DeviceSpecification.create_from
#: qiskit.pulse.commands.instruction.Instruction.draw
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw
#: qiskit.pulse.configuration.LoConfig.channel_lo
#: qiskit.pulse.configuration.LoRange.includes
#: qiskit.pulse.timeslots.Interval.has_overlap
#: qiskit.pulse.timeslots.Interval.shift
#: qiskit.qobj.PulseLibraryItemSchema.dump
#: qiskit.qobj.PulseLibraryItemSchema.dump_additional_data
#: qiskit.qobj.PulseLibraryItemSchema.dumps
#: qiskit.qobj.PulseLibraryItemSchema.load
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data
#: qiskit.qobj.PulseLibraryItemSchema.loads
#: qiskit.qobj.PulseLibraryItemSchema.validate
#: qiskit.qobj.PulseQobjInstructionSchema.dump
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data
#: qiskit.qobj.PulseQobjInstructionSchema.dumps
#: qiskit.qobj.PulseQobjInstructionSchema.load
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data
#: qiskit.qobj.PulseQobjInstructionSchema.loads
#: qiskit.qobj.PulseQobjInstructionSchema.validate
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_acquire
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_drive
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_frame_change
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_persistent_value
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_snapshot
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_acquire
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_frame_change
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_persistent_value
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_snapshot
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel
#: qiskit.quantum_info.Chi.add qiskit.quantum_info.Chi.compose
#: qiskit.quantum_info.Chi.expand qiskit.quantum_info.Chi.multiply
#: qiskit.quantum_info.Chi.power qiskit.quantum_info.Chi.subtract
#: qiskit.quantum_info.Chi.tensor qiskit.quantum_info.Choi.add
#: qiskit.quantum_info.Choi.compose qiskit.quantum_info.Choi.expand
#: qiskit.quantum_info.Choi.multiply qiskit.quantum_info.Choi.power
#: qiskit.quantum_info.Choi.subtract qiskit.quantum_info.Choi.tensor
#: qiskit.quantum_info.Kraus.add qiskit.quantum_info.Kraus.compose
#: qiskit.quantum_info.Kraus.expand qiskit.quantum_info.Kraus.multiply
#: qiskit.quantum_info.Kraus.power qiskit.quantum_info.Kraus.subtract
#: qiskit.quantum_info.Kraus.tensor qiskit.quantum_info.Operator.add
#: qiskit.quantum_info.Operator.compose qiskit.quantum_info.Operator.expand
#: qiskit.quantum_info.Operator.multiply qiskit.quantum_info.Operator.power
#: qiskit.quantum_info.Operator.subtract qiskit.quantum_info.Operator.tensor
#: qiskit.quantum_info.PTM.add qiskit.quantum_info.PTM.compose
#: qiskit.quantum_info.PTM.expand qiskit.quantum_info.PTM.multiply
#: qiskit.quantum_info.PTM.power qiskit.quantum_info.PTM.subtract
#: qiskit.quantum_info.PTM.tensor qiskit.quantum_info.Pauli.append_paulis
#: qiskit.quantum_info.Pauli.delete_qubits qiskit.quantum_info.Pauli.from_label
#: qiskit.quantum_info.Pauli.insert_paulis qiskit.quantum_info.Pauli.kron
#: qiskit.quantum_info.Pauli.pauli_single qiskit.quantum_info.Pauli.random
#: qiskit.quantum_info.Pauli.sgn_prod qiskit.quantum_info.Pauli.to_label
#: qiskit.quantum_info.Pauli.to_matrix qiskit.quantum_info.Pauli.to_spmatrix
#: qiskit.quantum_info.Pauli.update_x qiskit.quantum_info.Pauli.update_z
#: qiskit.quantum_info.Stinespring.add qiskit.quantum_info.Stinespring.compose
#: qiskit.quantum_info.Stinespring.expand
#: qiskit.quantum_info.Stinespring.multiply
#: qiskit.quantum_info.Stinespring.power
#: qiskit.quantum_info.Stinespring.subtract
#: qiskit.quantum_info.Stinespring.tensor qiskit.quantum_info.SuperOp.add
#: qiskit.quantum_info.SuperOp.compose qiskit.quantum_info.SuperOp.expand
#: qiskit.quantum_info.SuperOp.multiply qiskit.quantum_info.SuperOp.power
#: qiskit.quantum_info.SuperOp.subtract qiskit.quantum_info.SuperOp.tensor
#: qiskit.quantum_info.analyzation.average.average_data
#: qiskit.quantum_info.analyzation.make_observable.make_dict_observable
#: qiskit.quantum_info.basis_state
#: qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
#: qiskit.quantum_info.operators.channel.chi.Chi.add
#: qiskit.quantum_info.operators.channel.chi.Chi.compose
#: qiskit.quantum_info.operators.channel.chi.Chi.expand
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply
#: qiskit.quantum_info.operators.channel.chi.Chi.power
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor
#: qiskit.quantum_info.operators.channel.choi.Choi.add
#: qiskit.quantum_info.operators.channel.choi.Choi.compose
#: qiskit.quantum_info.operators.channel.choi.Choi.expand
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply
#: qiskit.quantum_info.operators.channel.choi.Choi.power
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor
#: qiskit.quantum_info.operators.channel.ptm.PTM.add
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply
#: qiskit.quantum_info.operators.channel.ptm.PTM.power
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_instruction
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor
#: qiskit.quantum_info.operators.measures.process_fidelity
#: qiskit.quantum_info.operators.operator.Operator.add
#: qiskit.quantum_info.operators.operator.Operator.compose
#: qiskit.quantum_info.operators.operator.Operator.expand
#: qiskit.quantum_info.operators.operator.Operator.multiply
#: qiskit.quantum_info.operators.operator.Operator.power
#: qiskit.quantum_info.operators.operator.Operator.subtract
#: qiskit.quantum_info.operators.operator.Operator.tensor
#: qiskit.quantum_info.operators.pauli.Pauli.append_paulis
#: qiskit.quantum_info.operators.pauli.Pauli.delete_qubits
#: qiskit.quantum_info.operators.pauli.Pauli.from_label
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis
#: qiskit.quantum_info.operators.pauli.Pauli.kron
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single
#: qiskit.quantum_info.operators.pauli.Pauli.random
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod
#: qiskit.quantum_info.operators.pauli.Pauli.to_label
#: qiskit.quantum_info.operators.pauli.Pauli.to_matrix
#: qiskit.quantum_info.operators.pauli.Pauli.to_spmatrix
#: qiskit.quantum_info.operators.pauli.Pauli.update_x
#: qiskit.quantum_info.operators.pauli.Pauli.update_z
#: qiskit.quantum_info.operators.pauli.pauli_group
#: qiskit.quantum_info.operators.quaternion.Quaternion.normalize
#: qiskit.quantum_info.operators.quaternion.Quaternion.to_matrix
#: qiskit.quantum_info.operators.quaternion.Quaternion.to_zyz
#: qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation
#: qiskit.quantum_info.operators.quaternion.quaternion_from_euler
#: qiskit.quantum_info.pauli_group qiskit.quantum_info.process_fidelity
#: qiskit.quantum_info.projector qiskit.quantum_info.purity
#: qiskit.quantum_info.random.utils.random_density_matrix
#: qiskit.quantum_info.random.utils.random_state
#: qiskit.quantum_info.random.utils.random_unitary
#: qiskit.quantum_info.random_density_matrix qiskit.quantum_info.random_state
#: qiskit.quantum_info.random_unitary qiskit.quantum_info.state_fidelity
#: qiskit.quantum_info.states.measures.state_fidelity
#: qiskit.quantum_info.states.states.basis_state
#: qiskit.quantum_info.states.states.projector
#: qiskit.quantum_info.states.states.purity
#: qiskit.quantum_info.synthesis.euler_angles_1q
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q
#: qiskit.result.Result.data qiskit.result.Result.get_counts
#: qiskit.result.Result.get_memory qiskit.result.Result.get_statevector
#: qiskit.result.Result.get_unitary qiskit.result.postprocess.format_counts
#: qiskit.result.postprocess.format_counts_memory
#: qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
#: qiskit.result.postprocess.format_level_2_memory
#: qiskit.result.postprocess.format_statevector
#: qiskit.result.postprocess.format_unitary qiskit.tools.compile
#: qiskit.tools.compiler.compile
#: qiskit.tools.events.TextProgressBar.time_elapsed
#: qiskit.tools.events.TextProgressBar.time_remaining_est
#: qiskit.tools.events.progressbar.BaseProgressBar.time_elapsed
#: qiskit.tools.events.progressbar.BaseProgressBar.time_remaining_est
#: qiskit.tools.jupyter.backend_monitor.config_tab
#: qiskit.tools.jupyter.backend_monitor.detailed_map
#: qiskit.tools.jupyter.backend_monitor.gates_tab
#: qiskit.tools.jupyter.backend_monitor.job_history
#: qiskit.tools.jupyter.backend_monitor.plot_job_history
#: qiskit.tools.jupyter.backend_monitor.qubits_tab
#: qiskit.tools.parallel.parallel_map qiskit.tools.parallel_map
#: qiskit.tools.qcvv.fitters.rb_epc qiskit.tools.qcvv.fitters.shape_rb_data
#: qiskit.tools.qcvv.tomography.build_wigner_circuits
#: qiskit.tools.qcvv.tomography.count_keys
#: qiskit.tools.qcvv.tomography.create_tomography_circuits
#: qiskit.tools.qcvv.tomography.fit_tomography_data
#: qiskit.tools.qcvv.tomography.marginal_counts
#: qiskit.tools.qcvv.tomography.state_tomography_set
#: qiskit.tools.qcvv.tomography.tomography_basis
#: qiskit.tools.qcvv.tomography.tomography_circuit_names
#: qiskit.tools.qcvv.tomography.tomography_data
#: qiskit.tools.qcvv.tomography.tomography_set
#: qiskit.tools.qcvv.tomography.wigner_data qiskit.tools.qi.qi.choi_to_rauli
#: qiskit.tools.qi.qi.chop qiskit.tools.qi.qi.concurrence
#: qiskit.tools.qi.qi.devectorize qiskit.tools.qi.qi.entanglement_of_formation
#: qiskit.tools.qi.qi.entropy qiskit.tools.qi.qi.mutual_information
#: qiskit.tools.qi.qi.outer qiskit.tools.qi.qi.partial_trace
#: qiskit.tools.qi.qi.purity qiskit.tools.qi.qi.shannon_entropy
#: qiskit.tools.qi.qi.vectorize qiskit.transpiler.CouplingMap.distance
#: qiskit.transpiler.CouplingMap.get_edges qiskit.transpiler.CouplingMap.reduce
#: qiskit.transpiler.CouplingMap.shortest_undirected_path
#: qiskit.transpiler.FlowController.controller_factory
#: qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_tuplelist
#: qiskit.transpiler.Layout.generate_trivial_layout
#: qiskit.transpiler.PassManager.run
#: qiskit.transpiler.coupling.CouplingMap.distance
#: qiskit.transpiler.coupling.CouplingMap.get_edges
#: qiskit.transpiler.coupling.CouplingMap.reduce
#: qiskit.transpiler.coupling.CouplingMap.shortest_undirected_path
#: qiskit.transpiler.passes.BasicSwap.run
#: qiskit.transpiler.passes.CXCancellation.run
#: qiskit.transpiler.passes.CXDirection.run
#: qiskit.transpiler.passes.CommutativeCancellation.run
#: qiskit.transpiler.passes.Decompose.run
#: qiskit.transpiler.passes.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.FullAncillaAllocation.run
#: qiskit.transpiler.passes.LegacySwap.run
#: qiskit.transpiler.passes.LookaheadSwap.run
#: qiskit.transpiler.passes.StochasticSwap.run
#: qiskit.transpiler.passes.Unroll3qOrMore.run
#: qiskit.transpiler.passes.Unroller.run
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation.run
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap.run
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection.run
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.to_layout
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run
#: qiskit.transpiler.passes.mapping.stochastic_swap.gates_to_idx
#: qiskit.transpiler.passes.mapping.stochastic_swap.regtuple_to_numeric
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager_simulator
#: qiskit.transpiler.preset_passmanagers.default_pass_manager
#: qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator
#: qiskit.transpiler.preset_passmanagers.level0.level_0_pass_manager
#: qiskit.transpiler.preset_passmanagers.level1.level_1_pass_manager
#: qiskit.transpiler.preset_passmanagers.level2.level_2_pass_manager
#: qiskit.transpiler.preset_passmanagers.level3.level_3_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_0_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_1_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_2_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_3_pass_manager
#: qiskit.transpiler.transpile qiskit.transpiler.transpile_circuit
#: qiskit.transpiler.transpile_dag qiskit.transpiler.transpiler.transpile
#: qiskit.transpiler.transpiler.transpile_dag qiskit.util.local_hardware_info
#: qiskit.validation.BaseSchema.dump
#: qiskit.validation.BaseSchema.dump_additional_data
#: qiskit.validation.BaseSchema.dumps qiskit.validation.BaseSchema.load
#: qiskit.validation.BaseSchema.load_additional_data
#: qiskit.validation.BaseSchema.loads qiskit.validation.BaseSchema.validate
#: qiskit.validation.base.BaseSchema.dump_additional_data
#: qiskit.validation.base.BaseSchema.load_additional_data
#: qiskit.validation.base.bind_schema qiskit.validation.bind_schema
#: qiskit.visualization.circuit_drawer
#: qiskit.visualization.circuit_visualization.circuit_drawer
#: qiskit.visualization.counts_visualization.hamming_distance
#: qiskit.visualization.counts_visualization.plot_histogram
#: qiskit.visualization.dag_drawer
#: qiskit.visualization.dag_visualization.dag_drawer
#: qiskit.visualization.gate_map.plot_gate_map
#: qiskit.visualization.interactive.iplot_qsphere.lex_index
#: qiskit.visualization.interactive.iplot_qsphere.n_choose_k
#: qiskit.visualization.interpolation.cubic_spline
#: qiskit.visualization.interpolation.interp1d
#: qiskit.visualization.interpolation.linear
#: qiskit.visualization.interpolation.step_wise
#: qiskit.visualization.latex.QCircuitImage.latex
#: qiskit.visualization.matplotlib.EventsOutputChannels.is_empty
#: qiskit.visualization.matplotlib.EventsOutputChannels.to_table
#: qiskit.visualization.matplotlib.SamplePulseDrawer.draw
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw
#: qiskit.visualization.plot_bloch_multivector
#: qiskit.visualization.plot_bloch_vector qiskit.visualization.plot_gate_map
#: qiskit.visualization.plot_histogram qiskit.visualization.plot_state
#: qiskit.visualization.plot_state_city qiskit.visualization.plot_state_hinton
#: qiskit.visualization.plot_state_paulivec
#: qiskit.visualization.plot_state_qsphere qiskit.visualization.pulse_drawer
#: qiskit.visualization.pulse_visualization.pulse_drawer
#: qiskit.visualization.state_visualization.generate_facecolors
#: qiskit.visualization.state_visualization.lex_index
#: qiskit.visualization.state_visualization.n_choose_k
#: qiskit.visualization.state_visualization.plot_bloch_multivector
#: qiskit.visualization.state_visualization.plot_bloch_vector
#: qiskit.visualization.state_visualization.plot_state
#: qiskit.visualization.state_visualization.plot_state_city
#: qiskit.visualization.state_visualization.plot_state_hinton
#: qiskit.visualization.state_visualization.plot_state_paulivec
#: qiskit.visualization.state_visualization.plot_state_qsphere
#: qiskit.visualization.text.BreakWire.fillup_layer
#: qiskit.visualization.text.EmptyWire.fillup_layer
#: qiskit.visualization.text.InputWire.fillup_layer
#: qiskit.visualization.text.TextDrawing.draw_wires
#: qiskit.visualization.text.TextDrawing.lines
#: qiskit.visualization.text.TextDrawing.merge_lines
#: qiskit.visualization.text.TextDrawing.wire_names
msgid "戻り値"
msgstr ""

#: of qiskit.aqua.Operator.construct_evaluation_circuit:13
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit:13
msgid "the circuits for evaluation."
msgstr ""

#: ../../docstring of qiskit.aqua.Operator.construct_evaluation_circuit
#: qiskit.aqua.Operator.construct_evolution_circuit qiskit.aqua.Operator.eval
#: qiskit.aqua.Operator.evaluate_with_result
#: qiskit.aqua.Operator.find_Z2_symmetries
#: qiskit.aqua.Operator.get_flat_pauli_list qiskit.aqua.Operator.is_empty
#: qiskit.aqua.Operator.kernel_F2 qiskit.aqua.Operator.load_from_dict
#: qiskit.aqua.Operator.load_from_file qiskit.aqua.Operator.num_qubits
#: qiskit.aqua.Operator.print_operators qiskit.aqua.Operator.qubit_tapering
#: qiskit.aqua.Operator.representations qiskit.aqua.Operator.row_echelon_F2
#: qiskit.aqua.Operator.save_to_dict
#: qiskit.aqua.Operator.two_qubit_reduced_operator
#: qiskit.aqua.QuantumAlgorithm.run qiskit.aqua.QuantumInstance.execute
#: qiskit.aqua.QuantumInstance.maybe_refresh_cals_matrix
#: qiskit.aqua._discover.get_pluggable_class
#: qiskit.aqua._discover.get_pluggable_configuration
#: qiskit.aqua._discover.local_pluggables
#: qiskit.aqua.algorithms.EOH.construct_circuit
#: qiskit.aqua.algorithms.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.IQPE.construct_circuit
#: qiskit.aqua.algorithms.QGAN.init_params
#: qiskit.aqua.algorithms.QPE.construct_circuit
#: qiskit.aqua.algorithms.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.QSVM.predict qiskit.aqua.algorithms.QSVM.test
#: qiskit.aqua.algorithms.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.SVM_Classical.predict
#: qiskit.aqua.algorithms.SVM_Classical.test
#: qiskit.aqua.algorithms.Shor.construct_circuit
#: qiskit.aqua.algorithms.VQC.construct_circuit
#: qiskit.aqua.algorithms.VQC.predict qiskit.aqua.algorithms.VQC.test
#: qiskit.aqua.algorithms.VQE.construct_circuit
#: qiskit.aqua.algorithms.VQE.init_params
#: qiskit.aqua.algorithms.VQE.print_settings
#: qiskit.aqua.algorithms.adaptive.QGAN.init_params
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.VQC.predict
#: qiskit.aqua.algorithms.adaptive.VQC.test
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit
#: qiskit.aqua.algorithms.adaptive.VQE.init_params
#: qiskit.aqua.algorithms.adaptive.VQE.print_settings
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.init_params
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.init_params
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.init_params
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.print_settings
#: qiskit.aqua.algorithms.classical.SVM_Classical.predict
#: qiskit.aqua.algorithms.classical.SVM_Classical.test
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.add_indicator_constraint
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.add_linear_constraint
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.add_quadratic_constraint
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.variable
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.predict
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.test
#: qiskit.aqua.algorithms.many_sample.EOH.construct_circuit
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.many_sample.QSVM.predict
#: qiskit.aqua.algorithms.many_sample.QSVM.test
#: qiskit.aqua.algorithms.many_sample.eoh.eoh.EOH.construct_circuit
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.predict
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm.run
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.QPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.Shor.construct_circuit
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_hermitian
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_powerdim
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.construct_circuit
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.construct_circuit
#: qiskit.aqua.circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.ESOP.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit
#: qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit
#: qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit
#: qiskit.aqua.components.feature_maps.data_mapping.self_product
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector.construct_circuit
#: qiskit.aqua.components.feature_maps.self_product
#: qiskit.aqua.components.initial_states.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.Zero.construct_circuit
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit
#: qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.predict
#: qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.test
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.predict
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.test
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.predict
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.test
#: qiskit.aqua.components.optimizers.Optimizer.gradient_num_diff
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.gradient_num_diff
#: qiskit.aqua.components.variational_forms.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit
#: qiskit.aqua.get_backend_from_provider qiskit.aqua.get_backends_from_provider
#: qiskit.aqua.get_pluggable_class qiskit.aqua.get_pluggable_configuration
#: qiskit.aqua.get_provider_from_backend qiskit.aqua.local_pluggables
#: qiskit.aqua.operator.Operator.construct_evaluation_circuit
#: qiskit.aqua.operator.Operator.construct_evolution_circuit
#: qiskit.aqua.operator.Operator.eval
#: qiskit.aqua.operator.Operator.evaluate_with_result
#: qiskit.aqua.operator.Operator.find_Z2_symmetries
#: qiskit.aqua.operator.Operator.get_flat_pauli_list
#: qiskit.aqua.operator.Operator.is_empty
#: qiskit.aqua.operator.Operator.kernel_F2
#: qiskit.aqua.operator.Operator.load_from_dict
#: qiskit.aqua.operator.Operator.load_from_file
#: qiskit.aqua.operator.Operator.num_qubits
#: qiskit.aqua.operator.Operator.print_operators
#: qiskit.aqua.operator.Operator.qubit_tapering
#: qiskit.aqua.operator.Operator.representations
#: qiskit.aqua.operator.Operator.row_echelon_F2
#: qiskit.aqua.operator.Operator.save_to_dict
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator
#: qiskit.aqua.parser.BaseParser.add_section_properties
#: qiskit.aqua.parser.BaseParser.delete_section
#: qiskit.aqua.parser.BaseParser.delete_section_properties
#: qiskit.aqua.parser.BaseParser.delete_section_property
#: qiskit.aqua.parser.BaseParser.get_section
#: qiskit.aqua.parser.BaseParser.get_section_property
#: qiskit.aqua.parser.BaseParser.set_section
#: qiskit.aqua.parser.BaseParser.set_section_properties
#: qiskit.aqua.parser.BaseParser.set_section_property
#: qiskit.aqua.parser.base_parser.BaseParser.add_section_properties
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_properties
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_property
#: qiskit.aqua.parser.base_parser.BaseParser.get_section
#: qiskit.aqua.parser.base_parser.BaseParser.get_section_property
#: qiskit.aqua.parser.base_parser.BaseParser.set_section
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_properties
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_property
#: qiskit.aqua.quantum_instance.QuantumInstance.execute
#: qiskit.aqua.quantum_instance.QuantumInstance.maybe_refresh_cals_matrix
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_covariance_matrix
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_mean_vector
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_covariance_matrix
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_mean_vector
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_similarity_matrix
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.init_from_input
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider.init_from_input
#: qiskit.aqua.translators.ising.clique.get_clique_qubitops
#: qiskit.aqua.translators.ising.clique.get_graph_solution
#: qiskit.aqua.translators.ising.clique.get_gset_result
#: qiskit.aqua.translators.ising.clique.parse_gset_format
#: qiskit.aqua.translators.ising.clique.random_graph
#: qiskit.aqua.translators.ising.clique.sample_most_likely
#: qiskit.aqua.translators.ising.clique.satisfy_or_not
#: qiskit.aqua.translators.ising.docplex.get_qubitops
#: qiskit.aqua.translators.ising.docplex.sample_most_likely
#: qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops
#: qiskit.aqua.translators.ising.exact_cover.get_solution
#: qiskit.aqua.translators.ising.exact_cover.random_number_list
#: qiskit.aqua.translators.ising.exact_cover.read_numbers_from_file
#: qiskit.aqua.translators.ising.exact_cover.sample_most_likely
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops
#: qiskit.aqua.translators.ising.graph_partition.get_graph_solution
#: qiskit.aqua.translators.ising.graph_partition.get_gset_result
#: qiskit.aqua.translators.ising.graph_partition.objective_value
#: qiskit.aqua.translators.ising.graph_partition.parse_gset_format
#: qiskit.aqua.translators.ising.graph_partition.random_graph
#: qiskit.aqua.translators.ising.graph_partition.sample_most_likely
#: qiskit.aqua.translators.ising.max_cut.get_graph_solution
#: qiskit.aqua.translators.ising.max_cut.get_gset_result
#: qiskit.aqua.translators.ising.max_cut.get_max_cut_qubitops
#: qiskit.aqua.translators.ising.max_cut.max_cut_value
#: qiskit.aqua.translators.ising.max_cut.parse_gset_format
#: qiskit.aqua.translators.ising.max_cut.random_graph
#: qiskit.aqua.translators.ising.max_cut.sample_most_likely
#: qiskit.aqua.translators.ising.partition.get_partition_qubitops
#: qiskit.aqua.translators.ising.partition.partition_value
#: qiskit.aqua.translators.ising.partition.random_number_list
#: qiskit.aqua.translators.ising.partition.read_numbers_from_file
#: qiskit.aqua.translators.ising.partition.sample_most_likely
#: qiskit.aqua.translators.ising.portfolio.random_model
#: qiskit.aqua.translators.ising.portfolio.sample_most_likely
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value
#: qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops
#: qiskit.aqua.translators.ising.set_packing.get_solution
#: qiskit.aqua.translators.ising.set_packing.random_number_list
#: qiskit.aqua.translators.ising.set_packing.read_numbers_from_file
#: qiskit.aqua.translators.ising.set_packing.sample_most_likely
#: qiskit.aqua.translators.ising.stable_set.get_graph_solution
#: qiskit.aqua.translators.ising.stable_set.get_stable_set_qubitops
#: qiskit.aqua.translators.ising.stable_set.parse_gset_format
#: qiskit.aqua.translators.ising.stable_set.random_graph
#: qiskit.aqua.translators.ising.stable_set.sample_most_likely
#: qiskit.aqua.translators.ising.stable_set.stable_set_value
#: qiskit.aqua.translators.ising.tsp.get_tsp_qubitops
#: qiskit.aqua.translators.ising.tsp.get_tsp_solution
#: qiskit.aqua.translators.ising.tsp.parse_tsplib_format
#: qiskit.aqua.translators.ising.tsp.random_tsp
#: qiskit.aqua.translators.ising.tsp.sample_most_likely
#: qiskit.aqua.translators.ising.tsp.tsp_feasible
#: qiskit.aqua.translators.ising.tsp.tsp_value
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution
#: qiskit.aqua.translators.ising.vertex_cover.check_full_edge_coverage
#: qiskit.aqua.translators.ising.vertex_cover.get_graph_solution
#: qiskit.aqua.translators.ising.vertex_cover.get_gset_result
#: qiskit.aqua.translators.ising.vertex_cover.get_vertex_cover_qubitops
#: qiskit.aqua.translators.ising.vertex_cover.parse_gset_format
#: qiskit.aqua.translators.ising.vertex_cover.random_graph
#: qiskit.aqua.translators.ising.vertex_cover.sample_most_likely
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend
#: qiskit.aqua.utils.backend_utils.is_aer_provider
#: qiskit.aqua.utils.backend_utils.is_aer_statevector_backend
#: qiskit.aqua.utils.backend_utils.is_basicaer_provider
#: qiskit.aqua.utils.backend_utils.is_ibmq_provider
#: qiskit.aqua.utils.backend_utils.is_local_backend
#: qiskit.aqua.utils.backend_utils.is_simulator_backend
#: qiskit.aqua.utils.backend_utils.is_statevector_backend
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.compile_and_run_circuits
#: qiskit.aqua.utils.compile_circuits qiskit.aqua.utils.convert_dict_to_json
#: qiskit.aqua.utils.convert_json_to_dict
#: qiskit.aqua.utils.dataset_helper.get_feature_dimension
#: qiskit.aqua.utils.dataset_helper.get_num_classes
#: qiskit.aqua.utils.dataset_helper.map_label_to_class_name
#: qiskit.aqua.utils.dataset_helper.reduce_dim_to_via_pca
#: qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels
#: qiskit.aqua.utils.find_regs_by_name qiskit.aqua.utils.get_feature_dimension
#: qiskit.aqua.utils.get_measured_qubits_from_qobj
#: qiskit.aqua.utils.get_num_classes
#: qiskit.aqua.utils.json_utils.convert_dict_to_json
#: qiskit.aqua.utils.json_utils.convert_json_to_dict
#: qiskit.aqua.utils.map_label_to_class_name
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits_from_qobj
#: qiskit.aqua.utils.measurement_error_mitigation.mitigate_measurement_error
#: qiskit.aqua.utils.mitigate_measurement_error qiskit.aqua.utils.optimize_svm
#: qiskit.aqua.utils.qp_solver.optimize_svm qiskit.aqua.utils.random_h1_body
#: qiskit.aqua.utils.random_h2_body qiskit.aqua.utils.random_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_diag
#: qiskit.aqua.utils.random_matrix_generator.random_h1_body
#: qiskit.aqua.utils.random_matrix_generator.random_h2_body
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_non_hermitian
#: qiskit.aqua.utils.random_matrix_generator.random_unitary
#: qiskit.aqua.utils.random_non_hermitian qiskit.aqua.utils.random_unitary
#: qiskit.aqua.utils.reduce_dim_to_via_pca
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits
#: qiskit.aqua.utils.run_circuits.compile_circuits
#: qiskit.aqua.utils.run_circuits.find_regs_by_name
#: qiskit.aqua.utils.run_circuits.run_qobjs qiskit.aqua.utils.run_qobjs
#: qiskit.aqua.utils.split_dataset_to_data_and_labels
#: qiskit.aqua.utils.tensor_product.tensorproduct
#: qiskit.aqua.utils.tensorproduct qiskit.assembler.assemble_circuits
#: qiskit.assembler.assemble_schedules qiskit.assembler.disassemble
#: qiskit.chemistry.FermionicOperator.fermion_mode_elimination
#: qiskit.chemistry.FermionicOperator.fermion_mode_freezing
#: qiskit.chemistry.FermionicOperator.mapping
#: qiskit.chemistry.FermionicOperator.total_angular_momentum
#: qiskit.chemistry.FermionicOperator.total_magnetization
#: qiskit.chemistry.FermionicOperator.total_particle_number
#: qiskit.chemistry.MP2Info.mp2_delta qiskit.chemistry.MP2Info.mp2_energy
#: qiskit.chemistry.MP2Info.mp2_get_term_info
#: qiskit.chemistry.MP2Info.mp2_terms
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit
#: qiskit.chemistry.bksf.bksf_mapping
#: qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list
#: qiskit.chemistry.bksf.edge_operator_aij
#: qiskit.chemistry.bksf.edge_operator_bi
#: qiskit.chemistry.bksf.generate_fermions
#: qiskit.chemistry.bksf.number_operator qiskit.chemistry.bksf.vacuum_operator
#: qiskit.chemistry.core.ChemistryOperator.init_params
#: qiskit.chemistry.core.ChemistryOperator.run
#: qiskit.chemistry.core.Hamiltonian.init_params
#: qiskit.chemistry.core.Hamiltonian.run
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_class
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_configuration
#: qiskit.chemistry.core._discover_chemoperator.register_chemistry_operator
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.init_params
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.run
#: qiskit.chemistry.core.get_chemistry_operator_class
#: qiskit.chemistry.core.get_chemistry_operator_configuration
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.init_params
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.run
#: qiskit.chemistry.core.register_chemistry_operator
#: qiskit.chemistry.drivers.BaseDriver.init_from_input
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers._basedriver.BaseDriver.init_from_input
#: qiskit.chemistry.drivers._discover_driver.get_driver_class
#: qiskit.chemistry.drivers._discover_driver.get_driver_configuration
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver.init_from_input
#: qiskit.chemistry.drivers.get_driver_class
#: qiskit.chemistry.drivers.get_driver_configuration
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver.init_from_input
#: qiskit.chemistry.drivers.psi4d.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver.init_from_input
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver.init_from_input
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver.init_from_input
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver.init_from_input
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_elimination
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_freezing
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_angular_momentum
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_magnetization
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_particle_number
#: qiskit.chemistry.mp2info.MP2Info.mp2_delta
#: qiskit.chemistry.mp2info.MP2Info.mp2_energy
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms
#: qiskit.chemistry.particle_hole.last_two_indices_swap
#: qiskit.chemistry.particle_hole.normal_order_integrals
#: qiskit.chemistry.particle_hole.particle_hole_transformation
#: qiskit.chemistry.particle_hole.sort qiskit.circuit.CompositeGate.copy
#: qiskit.circuit.CompositeGate.mirror qiskit.circuit.CompositeGate.snapshot
#: qiskit.circuit.Gate.copy qiskit.circuit.Gate.inverse
#: qiskit.circuit.Gate.mirror qiskit.circuit.Instruction.copy
#: qiskit.circuit.Instruction.inverse qiskit.circuit.Instruction.mirror
#: qiskit.circuit.Measure.copy qiskit.circuit.Measure.inverse
#: qiskit.circuit.Measure.mirror qiskit.circuit.QuantumCircuit.append
#: qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.copy qiskit.circuit.QuantumCircuit.count_ops
#: qiskit.circuit.QuantumCircuit.decompose qiskit.circuit.QuantumCircuit.depth
#: qiskit.circuit.QuantumCircuit.draw
#: qiskit.circuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.QuantumCircuit.has_register
#: qiskit.circuit.QuantumCircuit.inverse qiskit.circuit.QuantumCircuit.measure
#: qiskit.circuit.QuantumCircuit.mirror
#: qiskit.circuit.QuantumCircuit.num_connected_components
#: qiskit.circuit.QuantumCircuit.size qiskit.circuit.QuantumCircuit.snapshot
#: qiskit.circuit.QuantumCircuit.to_instruction
#: qiskit.circuit.QuantumCircuit.width qiskit.circuit.Reset.copy
#: qiskit.circuit.Reset.inverse qiskit.circuit.Reset.mirror
#: qiskit.compiler.assemble qiskit.compiler.transpile
#: qiskit.converters.ast_to_dag qiskit.converters.circuit_to_dag
#: qiskit.converters.circuit_to_instruction qiskit.converters.circuits_to_qobj
#: qiskit.converters.dag_to_circuit qiskit.converters.qobj_to_circuits
#: qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.gate_nodes qiskit.dagcircuit.DAGCircuit.node
#: qiskit.dagcircuit.DAGCircuit.op_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_nodes
#: qiskit.dagcircuit.DAGCircuit.topological_op_nodes
#: qiskit.dagcircuit.DAGNode.semantic_eq qiskit.execute.execute
#: qiskit.extensions.Initialize.gates_to_uncompute
#: qiskit.extensions.initializer.Initialize.gates_to_uncompute
#: qiskit.extensions.simulator.Snapshot.copy
#: qiskit.extensions.simulator.Snapshot.mirror
#: qiskit.extensions.standard.Barrier.copy
#: qiskit.extensions.standard.Barrier.mirror
#: qiskit.extensions.standard.CHGate.copy
#: qiskit.extensions.standard.CHGate.mirror
#: qiskit.extensions.standard.CXBase.copy
#: qiskit.extensions.standard.CXBase.mirror
#: qiskit.extensions.standard.CnotGate.copy
#: qiskit.extensions.standard.CnotGate.mirror
#: qiskit.extensions.standard.CrzGate.copy
#: qiskit.extensions.standard.CrzGate.mirror
#: qiskit.extensions.standard.Cu1Gate.copy
#: qiskit.extensions.standard.Cu1Gate.mirror
#: qiskit.extensions.standard.Cu3Gate.copy
#: qiskit.extensions.standard.Cu3Gate.mirror
#: qiskit.extensions.standard.CyGate.copy
#: qiskit.extensions.standard.CyGate.mirror
#: qiskit.extensions.standard.CzGate.copy
#: qiskit.extensions.standard.CzGate.mirror
#: qiskit.extensions.standard.FredkinGate.copy
#: qiskit.extensions.standard.FredkinGate.mirror
#: qiskit.extensions.standard.HGate.copy
#: qiskit.extensions.standard.HGate.mirror
#: qiskit.extensions.standard.IdGate.copy
#: qiskit.extensions.standard.IdGate.mirror
#: qiskit.extensions.standard.RXGate.copy
#: qiskit.extensions.standard.RXGate.mirror
#: qiskit.extensions.standard.RYGate.copy
#: qiskit.extensions.standard.RYGate.mirror
#: qiskit.extensions.standard.RZGate.copy
#: qiskit.extensions.standard.RZGate.mirror
#: qiskit.extensions.standard.RZZGate.copy
#: qiskit.extensions.standard.RZZGate.mirror
#: qiskit.extensions.standard.SGate.copy
#: qiskit.extensions.standard.SGate.mirror
#: qiskit.extensions.standard.SdgGate.copy
#: qiskit.extensions.standard.SdgGate.mirror
#: qiskit.extensions.standard.SwapGate.copy
#: qiskit.extensions.standard.SwapGate.mirror
#: qiskit.extensions.standard.TGate.copy
#: qiskit.extensions.standard.TGate.mirror
#: qiskit.extensions.standard.TdgGate.copy
#: qiskit.extensions.standard.TdgGate.mirror
#: qiskit.extensions.standard.ToffoliGate.copy
#: qiskit.extensions.standard.ToffoliGate.mirror
#: qiskit.extensions.standard.U0Gate.copy
#: qiskit.extensions.standard.U0Gate.mirror
#: qiskit.extensions.standard.U1Gate.copy
#: qiskit.extensions.standard.U1Gate.mirror
#: qiskit.extensions.standard.U2Gate.copy
#: qiskit.extensions.standard.U2Gate.mirror
#: qiskit.extensions.standard.U3Gate.copy
#: qiskit.extensions.standard.U3Gate.mirror
#: qiskit.extensions.standard.UBase.copy
#: qiskit.extensions.standard.UBase.mirror
#: qiskit.extensions.standard.XGate.copy
#: qiskit.extensions.standard.XGate.mirror
#: qiskit.extensions.standard.YGate.copy
#: qiskit.extensions.standard.YGate.mirror
#: qiskit.extensions.standard.ZGate.copy
#: qiskit.extensions.standard.ZGate.mirror
#: qiskit.ignis.characterization.characterization_utils.pad_id_gates
#: qiskit.ignis.characterization.characterization_utils.time_to_ngates
#: qiskit.ignis.verification.quantum_volume.circuits.qv_circuits
#: qiskit.ignis.verification.quantum_volume.qv_circuits
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit
#: qiskit.providers.BaseBackend.configuration qiskit.providers.BaseBackend.name
#: qiskit.providers.BaseBackend.properties
#: qiskit.providers.BaseBackend.provider qiskit.providers.BaseBackend.status
#: qiskit.providers.BaseProvider.backends
#: qiskit.providers.BaseProvider.get_backend qiskit.providers.aer.AerJob.qobj
#: qiskit.providers.aer.AerJob.result qiskit.providers.aer.AerJob.status
#: qiskit.providers.aer.AerProvider.backends
#: qiskit.providers.aer.AerProvider.get_backend
#: qiskit.providers.aer.QasmSimulator.configuration
#: qiskit.providers.aer.QasmSimulator.name
#: qiskit.providers.aer.QasmSimulator.properties
#: qiskit.providers.aer.QasmSimulator.provider
#: qiskit.providers.aer.QasmSimulator.status
#: qiskit.providers.aer.StatevectorSimulator.configuration
#: qiskit.providers.aer.StatevectorSimulator.name
#: qiskit.providers.aer.StatevectorSimulator.properties
#: qiskit.providers.aer.StatevectorSimulator.provider
#: qiskit.providers.aer.StatevectorSimulator.status
#: qiskit.providers.aer.UnitarySimulator.configuration
#: qiskit.providers.aer.UnitarySimulator.name
#: qiskit.providers.aer.UnitarySimulator.properties
#: qiskit.providers.aer.UnitarySimulator.provider
#: qiskit.providers.aer.UnitarySimulator.status
#: qiskit.providers.aer.backends.QasmSimulator.configuration
#: qiskit.providers.aer.backends.QasmSimulator.name
#: qiskit.providers.aer.backends.QasmSimulator.properties
#: qiskit.providers.aer.backends.QasmSimulator.provider
#: qiskit.providers.aer.backends.QasmSimulator.status
#: qiskit.providers.aer.backends.StatevectorSimulator.configuration
#: qiskit.providers.aer.backends.StatevectorSimulator.name
#: qiskit.providers.aer.backends.StatevectorSimulator.properties
#: qiskit.providers.aer.backends.StatevectorSimulator.provider
#: qiskit.providers.aer.backends.StatevectorSimulator.status
#: qiskit.providers.aer.backends.UnitarySimulator.configuration
#: qiskit.providers.aer.backends.UnitarySimulator.name
#: qiskit.providers.aer.backends.UnitarySimulator.properties
#: qiskit.providers.aer.backends.UnitarySimulator.provider
#: qiskit.providers.aer.backends.UnitarySimulator.status
#: qiskit.providers.aer.backends.aerbackend.AerBackend.status
#: qiskit.providers.aer.noise.NoiseModel.as_dict
#: qiskit.providers.aer.noise.NoiseModel.from_dict
#: qiskit.providers.aer.noise.NoiseModel.to_dict
#: qiskit.providers.aer.noise.device.models.basic_device_gate_errors
#: qiskit.providers.aer.noise.device.models.basic_device_noise_model
#: qiskit.providers.aer.noise.device.models.basic_device_readout_errors
#: qiskit.providers.aer.noise.device.parameters.gate_error_values
#: qiskit.providers.aer.noise.device.parameters.gate_param_values
#: qiskit.providers.aer.noise.device.parameters.gate_time_values
#: qiskit.providers.aer.noise.device.parameters.readout_error_values
#: qiskit.providers.aer.noise.device.parameters.thermal_relaxation_values
#: qiskit.providers.aer.noise.errors.errorutils.kraus2instructions
#: qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction
#: qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix
#: qiskit.providers.aer.noise.errors.errorutils.standard_gate_instruction
#: qiskit.providers.aer.noise.errors.errorutils.standard_gates_instructions
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.kron
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.coherent_unitary_error
#: qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error
#: qiskit.providers.aer.noise.errors.standard_errors.kraus_error
#: qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error
#: qiskit.providers.aer.noise.errors.standard_errors.pauli_error
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.reset_error
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.as_dict
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict
#: qiskit.providers.aer.noise.noise_model.NoiseModel.to_dict
#: qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.channel_matrix_representation
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_P
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_channel_operation
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_q
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.flatten_matrix
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_matrices
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_quadratic_programming_matrices
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_circuit
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_matrix
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.prepare_channel_operator_list
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error
#: qiskit.providers.aer.noise.utils.noise_transformation.pauli_operators
#: qiskit.providers.aer.noise.utils.noise_transformation.reset_operators
#: qiskit.providers.aer.utils.qobj_utils.append_instr
#: qiskit.providers.aer.utils.qobj_utils.get_instr_pos
#: qiskit.providers.aer.utils.qobj_utils.insert_instr
#: qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers
#: qiskit.providers.aer.utils.qobj_utils.snapshot_instr
#: qiskit.providers.aer.utils.qobj_utils.unitary_instr
#: qiskit.providers.basicaer.BasicAerJob.qobj
#: qiskit.providers.basicaer.BasicAerJob.result
#: qiskit.providers.basicaer.BasicAerJob.status
#: qiskit.providers.basicaer.BasicAerProvider.backends
#: qiskit.providers.basicaer.BasicAerProvider.get_backend
#: qiskit.providers.basicaer.QasmSimulatorPy.configuration
#: qiskit.providers.basicaer.QasmSimulatorPy.name
#: qiskit.providers.basicaer.QasmSimulatorPy.properties
#: qiskit.providers.basicaer.QasmSimulatorPy.provider
#: qiskit.providers.basicaer.QasmSimulatorPy.run
#: qiskit.providers.basicaer.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.QasmSimulatorPy.status
#: qiskit.providers.basicaer.StatevectorSimulatorPy.configuration
#: qiskit.providers.basicaer.StatevectorSimulatorPy.name
#: qiskit.providers.basicaer.StatevectorSimulatorPy.properties
#: qiskit.providers.basicaer.StatevectorSimulatorPy.provider
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment
#: qiskit.providers.basicaer.StatevectorSimulatorPy.status
#: qiskit.providers.basicaer.UnitarySimulatorPy.configuration
#: qiskit.providers.basicaer.UnitarySimulatorPy.name
#: qiskit.providers.basicaer.UnitarySimulatorPy.properties
#: qiskit.providers.basicaer.UnitarySimulatorPy.provider
#: qiskit.providers.basicaer.UnitarySimulatorPy.run
#: qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment
#: qiskit.providers.basicaer.UnitarySimulatorPy.status
#: qiskit.providers.basicaer.basicaertools.einsum_matmul_index
#: qiskit.providers.basicaer.basicaertools.einsum_vecmul_index
#: qiskit.providers.basicaer.basicaertools.single_gate_matrix
#: qiskit.providers.basicaer.basicaertools.single_gate_params
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment
#: qiskit.providers.ibmq.accountprovider.AccountProvider.backends
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_get
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_status
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_properties
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_pulse_defaults
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_get
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_run
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_cancel
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_download_qobj_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_properties
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_result_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_status
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit_object_storage
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_backends
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.api_version
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_access_token
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_service_urls
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_hubs
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_urls
#: qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status
#: qiskit.providers.ibmq.api_v2.rest.auth.Auth.login
#: qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get_object_storage
#: qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage
#: qiskit.providers.ibmq.api_v2.rest.job.build_url_filter
#: qiskit.providers.ibmq.api_v2.rest.root.Api.backend
#: qiskit.providers.ibmq.api_v2.rest.root.Api.circuit
#: qiskit.providers.ibmq.api_v2.rest.root.Api.job
#: qiskit.providers.ibmq.api_v2.rest.root.Api.jobs
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job_object_storage
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version
#: qiskit.providers.ibmq.api_v2.session.RetrySession.request
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.random_uniform
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc
#: qiskit.providers.ibmq.credentials.credentials.Credentials.connection_parameters
#: qiskit.providers.ibmq.credentials.credentials.Credentials.unique_id
#: qiskit.providers.ibmq.credentials.discover_credentials
#: qiskit.providers.ibmq.credentials.environ.read_credentials_from_environ
#: qiskit.providers.ibmq.credentials.qconfig.read_credentials_from_qconfig
#: qiskit.providers.ibmq.credentials.updater.update_credentials
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.properties
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.status
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_provider
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.update_account
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.active_accounts
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.stored_accounts
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends
#: qiskit.providers.ibmq.job.circuitjob.CircuitJob.status
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.cancel
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.error_message
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.job_id
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.properties
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.qobj
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.queue_position
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.status
#: qiskit.providers.ibmq.job.utils.build_error_report
#: qiskit.providers.ibmq.job.utils.current_utc_time
#: qiskit.providers.ibmq.job.utils.is_job_queued
#: qiskit.providers.ibmq.least_busy
#: qiskit.providers.ibmq.utils.deprecation.deprecated
#: qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config
#: qiskit.providers.models.PulseDefaults.build_cmd_def
#: qiskit.providers.providerutils.filter_backends
#: qiskit.providers.providerutils.resolve_backend_name
#: qiskit.pulse.DeviceSpecification.create_from qiskit.pulse.Instruction.draw
#: qiskit.pulse.LoRange.includes qiskit.pulse.SamplePulse.draw
#: qiskit.pulse.Schedule.draw qiskit.pulse.Snapshot.draw
#: qiskit.pulse.channels.device_specification.DeviceSpecification.create_from
#: qiskit.pulse.commands.instruction.Instruction.draw
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw
#: qiskit.pulse.configuration.LoRange.includes
#: qiskit.pulse.timeslots.Interval.has_overlap
#: qiskit.pulse.timeslots.Interval.shift
#: qiskit.qobj.PulseLibraryItemSchema.dump
#: qiskit.qobj.PulseLibraryItemSchema.dump_additional_data
#: qiskit.qobj.PulseLibraryItemSchema.dumps
#: qiskit.qobj.PulseLibraryItemSchema.load
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data
#: qiskit.qobj.PulseLibraryItemSchema.loads
#: qiskit.qobj.PulseLibraryItemSchema.validate
#: qiskit.qobj.PulseQobjInstructionSchema.dump
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data
#: qiskit.qobj.PulseQobjInstructionSchema.dumps
#: qiskit.qobj.PulseQobjInstructionSchema.load
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data
#: qiskit.qobj.PulseQobjInstructionSchema.loads
#: qiskit.qobj.PulseQobjInstructionSchema.validate
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_acquire
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_drive
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_frame_change
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_persistent_value
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_snapshot
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_acquire
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_frame_change
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_persistent_value
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_snapshot
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel
#: qiskit.quantum_info.Chi.add qiskit.quantum_info.Chi.compose
#: qiskit.quantum_info.Chi.expand qiskit.quantum_info.Chi.multiply
#: qiskit.quantum_info.Chi.power qiskit.quantum_info.Chi.subtract
#: qiskit.quantum_info.Chi.tensor qiskit.quantum_info.Choi.add
#: qiskit.quantum_info.Choi.compose qiskit.quantum_info.Choi.expand
#: qiskit.quantum_info.Choi.multiply qiskit.quantum_info.Choi.power
#: qiskit.quantum_info.Choi.subtract qiskit.quantum_info.Choi.tensor
#: qiskit.quantum_info.Kraus.add qiskit.quantum_info.Kraus.compose
#: qiskit.quantum_info.Kraus.expand qiskit.quantum_info.Kraus.multiply
#: qiskit.quantum_info.Kraus.power qiskit.quantum_info.Kraus.subtract
#: qiskit.quantum_info.Kraus.tensor qiskit.quantum_info.Operator.add
#: qiskit.quantum_info.Operator.compose qiskit.quantum_info.Operator.expand
#: qiskit.quantum_info.Operator.multiply qiskit.quantum_info.Operator.power
#: qiskit.quantum_info.Operator.subtract qiskit.quantum_info.Operator.tensor
#: qiskit.quantum_info.PTM.add qiskit.quantum_info.PTM.compose
#: qiskit.quantum_info.PTM.expand qiskit.quantum_info.PTM.multiply
#: qiskit.quantum_info.PTM.power qiskit.quantum_info.PTM.subtract
#: qiskit.quantum_info.PTM.tensor qiskit.quantum_info.Pauli.append_paulis
#: qiskit.quantum_info.Pauli.delete_qubits qiskit.quantum_info.Pauli.from_label
#: qiskit.quantum_info.Pauli.insert_paulis qiskit.quantum_info.Pauli.kron
#: qiskit.quantum_info.Pauli.pauli_single qiskit.quantum_info.Pauli.random
#: qiskit.quantum_info.Pauli.sgn_prod qiskit.quantum_info.Pauli.to_label
#: qiskit.quantum_info.Pauli.to_matrix qiskit.quantum_info.Pauli.to_spmatrix
#: qiskit.quantum_info.Pauli.update_x qiskit.quantum_info.Pauli.update_z
#: qiskit.quantum_info.Stinespring.add qiskit.quantum_info.Stinespring.compose
#: qiskit.quantum_info.Stinespring.expand
#: qiskit.quantum_info.Stinespring.multiply
#: qiskit.quantum_info.Stinespring.power
#: qiskit.quantum_info.Stinespring.subtract
#: qiskit.quantum_info.Stinespring.tensor qiskit.quantum_info.SuperOp.add
#: qiskit.quantum_info.SuperOp.compose qiskit.quantum_info.SuperOp.expand
#: qiskit.quantum_info.SuperOp.multiply qiskit.quantum_info.SuperOp.power
#: qiskit.quantum_info.SuperOp.subtract qiskit.quantum_info.SuperOp.tensor
#: qiskit.quantum_info.analyzation.average.average_data
#: qiskit.quantum_info.analyzation.make_observable.make_dict_observable
#: qiskit.quantum_info.basis_state
#: qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
#: qiskit.quantum_info.operators.channel.chi.Chi.add
#: qiskit.quantum_info.operators.channel.chi.Chi.compose
#: qiskit.quantum_info.operators.channel.chi.Chi.expand
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply
#: qiskit.quantum_info.operators.channel.chi.Chi.power
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor
#: qiskit.quantum_info.operators.channel.choi.Choi.add
#: qiskit.quantum_info.operators.channel.choi.Choi.compose
#: qiskit.quantum_info.operators.channel.choi.Choi.expand
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply
#: qiskit.quantum_info.operators.channel.choi.Choi.power
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor
#: qiskit.quantum_info.operators.channel.ptm.PTM.add
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply
#: qiskit.quantum_info.operators.channel.ptm.PTM.power
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_instruction
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor
#: qiskit.quantum_info.operators.measures.process_fidelity
#: qiskit.quantum_info.operators.operator.Operator.add
#: qiskit.quantum_info.operators.operator.Operator.compose
#: qiskit.quantum_info.operators.operator.Operator.expand
#: qiskit.quantum_info.operators.operator.Operator.multiply
#: qiskit.quantum_info.operators.operator.Operator.power
#: qiskit.quantum_info.operators.operator.Operator.subtract
#: qiskit.quantum_info.operators.operator.Operator.tensor
#: qiskit.quantum_info.operators.pauli.Pauli.append_paulis
#: qiskit.quantum_info.operators.pauli.Pauli.delete_qubits
#: qiskit.quantum_info.operators.pauli.Pauli.from_label
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis
#: qiskit.quantum_info.operators.pauli.Pauli.kron
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single
#: qiskit.quantum_info.operators.pauli.Pauli.random
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod
#: qiskit.quantum_info.operators.pauli.Pauli.to_label
#: qiskit.quantum_info.operators.pauli.Pauli.to_matrix
#: qiskit.quantum_info.operators.pauli.Pauli.to_spmatrix
#: qiskit.quantum_info.operators.pauli.Pauli.update_x
#: qiskit.quantum_info.operators.pauli.Pauli.update_z
#: qiskit.quantum_info.operators.pauli.pauli_group
#: qiskit.quantum_info.operators.quaternion.Quaternion.normalize
#: qiskit.quantum_info.operators.quaternion.Quaternion.to_matrix
#: qiskit.quantum_info.operators.quaternion.Quaternion.to_zyz
#: qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation
#: qiskit.quantum_info.operators.quaternion.quaternion_from_euler
#: qiskit.quantum_info.pauli_group qiskit.quantum_info.process_fidelity
#: qiskit.quantum_info.projector qiskit.quantum_info.purity
#: qiskit.quantum_info.random.utils.random_density_matrix
#: qiskit.quantum_info.random.utils.random_state
#: qiskit.quantum_info.random.utils.random_unitary
#: qiskit.quantum_info.random_density_matrix qiskit.quantum_info.random_state
#: qiskit.quantum_info.random_unitary qiskit.quantum_info.state_fidelity
#: qiskit.quantum_info.states.measures.state_fidelity
#: qiskit.quantum_info.states.states.basis_state
#: qiskit.quantum_info.states.states.projector
#: qiskit.quantum_info.states.states.purity
#: qiskit.quantum_info.synthesis.euler_angles_1q
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q
#: qiskit.result.Result.data qiskit.result.Result.get_counts
#: qiskit.result.Result.get_memory qiskit.result.Result.get_statevector
#: qiskit.result.Result.get_unitary qiskit.result.postprocess.format_counts
#: qiskit.result.postprocess.format_counts_memory
#: qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
#: qiskit.result.postprocess.format_level_2_memory
#: qiskit.result.postprocess.format_statevector
#: qiskit.result.postprocess.format_unitary qiskit.tools.compile
#: qiskit.tools.compiler.compile
#: qiskit.tools.events.TextProgressBar.time_elapsed
#: qiskit.tools.events.TextProgressBar.time_remaining_est
#: qiskit.tools.events.progressbar.BaseProgressBar.time_elapsed
#: qiskit.tools.events.progressbar.BaseProgressBar.time_remaining_est
#: qiskit.tools.jupyter.backend_monitor.config_tab
#: qiskit.tools.jupyter.backend_monitor.detailed_map
#: qiskit.tools.jupyter.backend_monitor.gates_tab
#: qiskit.tools.jupyter.backend_monitor.job_history
#: qiskit.tools.jupyter.backend_monitor.plot_job_history
#: qiskit.tools.jupyter.backend_monitor.qubits_tab
#: qiskit.tools.parallel.parallel_map qiskit.tools.parallel_map
#: qiskit.tools.qcvv.fitters.rb_epc qiskit.tools.qcvv.fitters.shape_rb_data
#: qiskit.tools.qcvv.tomography.build_wigner_circuits
#: qiskit.tools.qcvv.tomography.count_keys
#: qiskit.tools.qcvv.tomography.create_tomography_circuits
#: qiskit.tools.qcvv.tomography.fit_tomography_data
#: qiskit.tools.qcvv.tomography.marginal_counts
#: qiskit.tools.qcvv.tomography.state_tomography_set
#: qiskit.tools.qcvv.tomography.tomography_basis
#: qiskit.tools.qcvv.tomography.tomography_circuit_names
#: qiskit.tools.qcvv.tomography.tomography_data
#: qiskit.tools.qcvv.tomography.tomography_set
#: qiskit.tools.qcvv.tomography.wigner_data qiskit.tools.qi.qi.choi_to_rauli
#: qiskit.tools.qi.qi.chop qiskit.tools.qi.qi.concurrence
#: qiskit.tools.qi.qi.devectorize qiskit.tools.qi.qi.entanglement_of_formation
#: qiskit.tools.qi.qi.entropy qiskit.tools.qi.qi.mutual_information
#: qiskit.tools.qi.qi.outer qiskit.tools.qi.qi.partial_trace
#: qiskit.tools.qi.qi.purity qiskit.tools.qi.qi.shannon_entropy
#: qiskit.tools.qi.qi.vectorize qiskit.transpiler.CouplingMap.distance
#: qiskit.transpiler.CouplingMap.get_edges qiskit.transpiler.CouplingMap.reduce
#: qiskit.transpiler.CouplingMap.shortest_undirected_path
#: qiskit.transpiler.FlowController.controller_factory
#: qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_tuplelist
#: qiskit.transpiler.Layout.generate_trivial_layout
#: qiskit.transpiler.PassManager.run
#: qiskit.transpiler.coupling.CouplingMap.distance
#: qiskit.transpiler.coupling.CouplingMap.get_edges
#: qiskit.transpiler.coupling.CouplingMap.reduce
#: qiskit.transpiler.coupling.CouplingMap.shortest_undirected_path
#: qiskit.transpiler.passes.BasicSwap.run
#: qiskit.transpiler.passes.CXCancellation.run
#: qiskit.transpiler.passes.CXDirection.run
#: qiskit.transpiler.passes.CommutativeCancellation.run
#: qiskit.transpiler.passes.Decompose.run
#: qiskit.transpiler.passes.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.FullAncillaAllocation.run
#: qiskit.transpiler.passes.LegacySwap.run
#: qiskit.transpiler.passes.LookaheadSwap.run
#: qiskit.transpiler.passes.StochasticSwap.run
#: qiskit.transpiler.passes.Unroll3qOrMore.run
#: qiskit.transpiler.passes.Unroller.run
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation.run
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap.run
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection.run
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.to_layout
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run
#: qiskit.transpiler.passes.mapping.stochastic_swap.gates_to_idx
#: qiskit.transpiler.passes.mapping.stochastic_swap.regtuple_to_numeric
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager_simulator
#: qiskit.transpiler.preset_passmanagers.default_pass_manager
#: qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator
#: qiskit.transpiler.preset_passmanagers.level0.level_0_pass_manager
#: qiskit.transpiler.preset_passmanagers.level1.level_1_pass_manager
#: qiskit.transpiler.preset_passmanagers.level2.level_2_pass_manager
#: qiskit.transpiler.preset_passmanagers.level3.level_3_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_0_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_1_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_2_pass_manager
#: qiskit.transpiler.preset_passmanagers.level_3_pass_manager
#: qiskit.transpiler.transpile qiskit.transpiler.transpile_circuit
#: qiskit.transpiler.transpile_dag qiskit.transpiler.transpiler.transpile
#: qiskit.transpiler.transpiler.transpile_dag qiskit.util.local_hardware_info
#: qiskit.validation.BaseSchema.dump
#: qiskit.validation.BaseSchema.dump_additional_data
#: qiskit.validation.BaseSchema.dumps qiskit.validation.BaseSchema.load
#: qiskit.validation.BaseSchema.load_additional_data
#: qiskit.validation.BaseSchema.loads qiskit.validation.BaseSchema.validate
#: qiskit.validation.base.BaseSchema.dump_additional_data
#: qiskit.validation.base.BaseSchema.load_additional_data
#: qiskit.validation.base.bind_schema qiskit.validation.bind_schema
#: qiskit.visualization.circuit_drawer
#: qiskit.visualization.circuit_visualization.circuit_drawer
#: qiskit.visualization.counts_visualization.hamming_distance
#: qiskit.visualization.counts_visualization.plot_histogram
#: qiskit.visualization.dag_drawer
#: qiskit.visualization.dag_visualization.dag_drawer
#: qiskit.visualization.gate_map.plot_gate_map
#: qiskit.visualization.interactive.iplot_qsphere.lex_index
#: qiskit.visualization.interactive.iplot_qsphere.n_choose_k
#: qiskit.visualization.interpolation.cubic_spline
#: qiskit.visualization.interpolation.interp1d
#: qiskit.visualization.interpolation.linear
#: qiskit.visualization.interpolation.step_wise
#: qiskit.visualization.latex.QCircuitImage.latex
#: qiskit.visualization.matplotlib.EventsOutputChannels.is_empty
#: qiskit.visualization.matplotlib.EventsOutputChannels.to_table
#: qiskit.visualization.matplotlib.SamplePulseDrawer.draw
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw
#: qiskit.visualization.plot_bloch_multivector
#: qiskit.visualization.plot_bloch_vector qiskit.visualization.plot_gate_map
#: qiskit.visualization.plot_histogram qiskit.visualization.plot_state
#: qiskit.visualization.plot_state_city qiskit.visualization.plot_state_hinton
#: qiskit.visualization.plot_state_paulivec
#: qiskit.visualization.plot_state_qsphere qiskit.visualization.pulse_drawer
#: qiskit.visualization.pulse_visualization.pulse_drawer
#: qiskit.visualization.state_visualization.generate_facecolors
#: qiskit.visualization.state_visualization.lex_index
#: qiskit.visualization.state_visualization.n_choose_k
#: qiskit.visualization.state_visualization.plot_bloch_multivector
#: qiskit.visualization.state_visualization.plot_bloch_vector
#: qiskit.visualization.state_visualization.plot_state
#: qiskit.visualization.state_visualization.plot_state_city
#: qiskit.visualization.state_visualization.plot_state_hinton
#: qiskit.visualization.state_visualization.plot_state_paulivec
#: qiskit.visualization.state_visualization.plot_state_qsphere
#: qiskit.visualization.text.BreakWire.fillup_layer
#: qiskit.visualization.text.EmptyWire.fillup_layer
#: qiskit.visualization.text.InputWire.fillup_layer
#: qiskit.visualization.text.TextDrawing.draw_wires
#: qiskit.visualization.text.TextDrawing.lines
#: qiskit.visualization.text.TextDrawing.merge_lines
#: qiskit.visualization.text.TextDrawing.wire_names
msgid "戻り値の型"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:1
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:1
msgid "Construct the evolution circuit according to the supplied specification."
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:3
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:3
msgid "The list of pauli terms corresponding to a single time slice to be evolved"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:5
#: qiskit.aqua.Operator.evolve:4
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:5
#: qiskit.aqua.operator.Operator.evolve:4
msgid "The evolution time"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:7
#: qiskit.aqua.Operator.evolve:9
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:7
#: qiskit.aqua.operator.Operator.evolve:9
msgid "The number of time slices for the expansion"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:9
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:9
msgid "The Qiskit QuantumRegister corresponding to the qubits of the system"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:11
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:11
msgid ""
"The optional Qiskit QuantumRegister corresponding to the control qubits "
"for the state_registers of the system"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:14
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:14
msgid "The index of the qubit of the control ancillary_registers to use"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:16
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:16
msgid "The power to which the unitary operator is to be raised"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:18
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:18
msgid "boolean flag for indicating only using basis gates when building circuit."
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:20
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:20
msgid ""
"boolean flag for indicating using shallow qc.data reference repetition "
"for slicing"
msgstr ""

#: of qiskit.aqua.Operator.construct_evolution_circuit:23
#: qiskit.aqua.operator.Operator.construct_evolution_circuit:23
msgid "The Qiskit QuantumCircuit corresponding to specified evolution."
msgstr ""

#: of qiskit.aqua.Operator.convert:1 qiskit.aqua.operator.Operator.convert:1
msgid ""
"A wrapper for conversion among all representations. Note that, if the "
"output target is already there, it will skip the conversion. The result "
"is stored back into its property directly."
msgstr ""

#: of qiskit.aqua.Operator.convert:5 qiskit.aqua.operator.Operator.convert:5
msgid ""
"case-insensitive input format, should be one of \"paulis\", "
"\"grouped_paulis\", \"matrix\""
msgstr ""

#: of qiskit.aqua.Operator.convert:8 qiskit.aqua.operator.Operator.convert:8
msgid ""
"case-insensitive output format, should be one of \"paulis\", "
"\"grouped_paulis\", \"matrix\""
msgstr ""

#: of qiskit.aqua.Operator.convert:11 qiskit.aqua.operator.Operator.convert:11
msgid "convert to targeted format regardless its present."
msgstr ""

#: of qiskit.aqua.Operator.convert qiskit.aqua.Operator.print_operators
#: qiskit.aqua._discover.deregister_pluggable
#: qiskit.aqua._discover.get_pluggable_class
#: qiskit.aqua._discover.get_pluggable_configuration
#: qiskit.aqua._discover.local_pluggables
#: qiskit.aqua.algorithms.adaptive.VQAlgorithm.find_minimum
#: qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm.find_minimum
#: qiskit.aqua.components.initial_states.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.Zero.construct_circuit
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit
#: qiskit.aqua.components.variational_forms.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit
#: qiskit.aqua.deregister_pluggable qiskit.aqua.get_backend_from_provider
#: qiskit.aqua.get_backends_from_provider qiskit.aqua.get_pluggable_class
#: qiskit.aqua.get_pluggable_configuration
#: qiskit.aqua.get_provider_from_backend qiskit.aqua.local_pluggables
#: qiskit.aqua.operator.Operator.convert
#: qiskit.aqua.operator.Operator.print_operators
#: qiskit.aqua.parser.BaseParser.get_section
#: qiskit.aqua.parser.base_parser.BaseParser.get_section
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.compile_and_run_circuits
#: qiskit.aqua.utils.compile_circuits
#: qiskit.aqua.utils.entangler_map.get_entangler_map
#: qiskit.aqua.utils.entangler_map.validate_entangler_map
#: qiskit.aqua.utils.get_entangler_map
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits
#: qiskit.aqua.utils.run_circuits.compile_circuits
#: qiskit.aqua.utils.run_circuits.run_qobjs qiskit.aqua.utils.run_qobjs
#: qiskit.aqua.utils.validate_entangler_map qiskit.assembler.assemble_schedules
#: qiskit.chemistry.FermionicOperator.mapping
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit
#: qiskit.chemistry.core._discover_chemoperator.deregister_chemistry_operator
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_class
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_configuration
#: qiskit.chemistry.core._discover_chemoperator.register_chemistry_operator
#: qiskit.chemistry.core.deregister_chemistry_operator
#: qiskit.chemistry.core.get_chemistry_operator_class
#: qiskit.chemistry.core.get_chemistry_operator_configuration
#: qiskit.chemistry.core.register_chemistry_operator
#: qiskit.chemistry.drivers._discover_driver.deregister_driver
#: qiskit.chemistry.drivers._discover_driver.get_driver_class
#: qiskit.chemistry.drivers._discover_driver.get_driver_configuration
#: qiskit.chemistry.drivers.deregister_driver
#: qiskit.chemistry.drivers.get_driver_class
#: qiskit.chemistry.drivers.get_driver_configuration
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping
#: qiskit.circuit.CompositeGate.snapshot qiskit.circuit.Gate.inverse
#: qiskit.circuit.Instruction.inverse qiskit.circuit.Measure.inverse
#: qiskit.circuit.QuantumCircuit.append
#: qiskit.circuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.QuantumCircuit.draw qiskit.circuit.QuantumCircuit.inverse
#: qiskit.circuit.QuantumCircuit.measure qiskit.circuit.QuantumCircuit.snapshot
#: qiskit.circuit.Reset.inverse qiskit.compiler.assemble
#: qiskit.compiler.transpile qiskit.converters.ast_to_dag
#: qiskit.converters.circuit_to_instruction
#: qiskit.dagcircuit.DAGCircuit.apply_operation_back
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front
#: qiskit.dagcircuit.DAGCircuit.compose_back
#: qiskit.dagcircuit.DAGCircuit.compose_front
#: qiskit.dagcircuit.DAGCircuit.depth
#: qiskit.dagcircuit.DAGCircuit.nodes_on_wire
#: qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag qiskit.execute.execute
#: qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.plot_qv_data
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data
#: qiskit.providers.BaseProvider.get_backend qiskit.providers.aer.AerJob.result
#: qiskit.providers.aer.AerJob.status qiskit.providers.aer.AerJob.submit
#: qiskit.providers.aer.AerProvider.get_backend
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error
#: qiskit.providers.aer.noise.NoiseModel.from_dict
#: qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates
#: qiskit.providers.aer.noise.errors.errorutils.kraus2instructions
#: qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction
#: qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor
#: qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error
#: qiskit.providers.aer.noise.errors.standard_errors.kraus_error
#: qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error
#: qiskit.providers.aer.noise.errors.standard_errors.pauli_error
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error
#: qiskit.providers.aer.noise.errors.standard_errors.reset_error
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict
#: qiskit.providers.aer.noise.noise_model.NoiseModel.set_x90_single_qubit_gates
#: qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error
#: qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers
#: qiskit.providers.aer.utils.qobj_utils.unitary_instr
#: qiskit.providers.basicaer.BasicAerJob.result
#: qiskit.providers.basicaer.BasicAerJob.status
#: qiskit.providers.basicaer.BasicAerJob.submit
#: qiskit.providers.basicaer.BasicAerProvider.get_backend
#: qiskit.providers.basicaer.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment
#: qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment
#: qiskit.providers.basicaer.basicaertools.single_gate_params
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job
#: qiskit.providers.ibmq.api.utils.Credentials.obtain_token
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status
#: qiskit.providers.ibmq.api_v2.session.RetrySession.request
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc
#: qiskit.providers.ibmq.credentials.configrc.remove_credentials
#: qiskit.providers.ibmq.credentials.qconfig.read_credentials_from_qconfig
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.status
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_provider
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_account
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.delete_accounts
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.disable_accounts
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.load_accounts
#: qiskit.providers.ibmq.job.circuitjob.CircuitJob.status
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.cancel
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.status
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.submit
#: qiskit.providers.ibmq.least_busy
#: qiskit.providers.providerutils.resolve_backend_name qiskit.pulse.CmdDef.get
#: qiskit.pulse.CmdDef.get_parameters qiskit.pulse.CmdDef.pop
#: qiskit.pulse.DeviceSpecification.create_from
#: qiskit.pulse.LoConfig.channel_lo qiskit.pulse.LoConfig.check_lo
#: qiskit.pulse.channels.device_specification.DeviceSpecification.create_from
#: qiskit.pulse.cmd_def.CmdDef.get qiskit.pulse.cmd_def.CmdDef.get_parameters
#: qiskit.pulse.cmd_def.CmdDef.pop
#: qiskit.pulse.commands.pulse_decorators.functional_pulse
#: qiskit.pulse.configuration.LoConfig.channel_lo
#: qiskit.pulse.configuration.LoConfig.check_lo qiskit.pulse.functional_pulse
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel
#: qiskit.quantum_info.Chi.add qiskit.quantum_info.Chi.compose
#: qiskit.quantum_info.Chi.expand qiskit.quantum_info.Chi.multiply
#: qiskit.quantum_info.Chi.power qiskit.quantum_info.Chi.subtract
#: qiskit.quantum_info.Chi.tensor qiskit.quantum_info.Choi.add
#: qiskit.quantum_info.Choi.compose qiskit.quantum_info.Choi.expand
#: qiskit.quantum_info.Choi.multiply qiskit.quantum_info.Choi.power
#: qiskit.quantum_info.Choi.subtract qiskit.quantum_info.Choi.tensor
#: qiskit.quantum_info.Kraus.add qiskit.quantum_info.Kraus.compose
#: qiskit.quantum_info.Kraus.expand qiskit.quantum_info.Kraus.multiply
#: qiskit.quantum_info.Kraus.power qiskit.quantum_info.Kraus.subtract
#: qiskit.quantum_info.Kraus.tensor qiskit.quantum_info.Operator.add
#: qiskit.quantum_info.Operator.compose qiskit.quantum_info.Operator.expand
#: qiskit.quantum_info.Operator.multiply qiskit.quantum_info.Operator.power
#: qiskit.quantum_info.Operator.subtract qiskit.quantum_info.Operator.tensor
#: qiskit.quantum_info.PTM qiskit.quantum_info.PTM.add
#: qiskit.quantum_info.PTM.compose qiskit.quantum_info.PTM.expand
#: qiskit.quantum_info.PTM.multiply qiskit.quantum_info.PTM.power
#: qiskit.quantum_info.PTM.subtract qiskit.quantum_info.PTM.tensor
#: qiskit.quantum_info.Pauli.from_label qiskit.quantum_info.Pauli.insert_paulis
#: qiskit.quantum_info.Pauli.update_x qiskit.quantum_info.Pauli.update_z
#: qiskit.quantum_info.Stinespring.add qiskit.quantum_info.Stinespring.compose
#: qiskit.quantum_info.Stinespring.expand
#: qiskit.quantum_info.Stinespring.multiply
#: qiskit.quantum_info.Stinespring.power
#: qiskit.quantum_info.Stinespring.subtract
#: qiskit.quantum_info.Stinespring.tensor qiskit.quantum_info.SuperOp.add
#: qiskit.quantum_info.SuperOp.compose qiskit.quantum_info.SuperOp.expand
#: qiskit.quantum_info.SuperOp.multiply qiskit.quantum_info.SuperOp.power
#: qiskit.quantum_info.SuperOp.subtract qiskit.quantum_info.SuperOp.tensor
#: qiskit.quantum_info.operators.base_operator.BaseOperator.add
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor
#: qiskit.quantum_info.operators.channel.chi.Chi.add
#: qiskit.quantum_info.operators.channel.chi.Chi.compose
#: qiskit.quantum_info.operators.channel.chi.Chi.expand
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply
#: qiskit.quantum_info.operators.channel.chi.Chi.power
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor
#: qiskit.quantum_info.operators.channel.choi.Choi.add
#: qiskit.quantum_info.operators.channel.choi.Choi.compose
#: qiskit.quantum_info.operators.channel.choi.Choi.expand
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply
#: qiskit.quantum_info.operators.channel.choi.Choi.power
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor
#: qiskit.quantum_info.operators.channel.ptm.PTM
#: qiskit.quantum_info.operators.channel.ptm.PTM.add
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply
#: qiskit.quantum_info.operators.channel.ptm.PTM.power
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_instruction
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor
#: qiskit.quantum_info.operators.measures.process_fidelity
#: qiskit.quantum_info.operators.operator.Operator.add
#: qiskit.quantum_info.operators.operator.Operator.compose
#: qiskit.quantum_info.operators.operator.Operator.expand
#: qiskit.quantum_info.operators.operator.Operator.multiply
#: qiskit.quantum_info.operators.operator.Operator.power
#: qiskit.quantum_info.operators.operator.Operator.subtract
#: qiskit.quantum_info.operators.operator.Operator.tensor
#: qiskit.quantum_info.operators.pauli.Pauli.from_label
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis
#: qiskit.quantum_info.operators.pauli.Pauli.update_x
#: qiskit.quantum_info.operators.pauli.Pauli.update_z
#: qiskit.quantum_info.operators.pauli.pauli_group
#: qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation
#: qiskit.quantum_info.pauli_group qiskit.quantum_info.process_fidelity
#: qiskit.quantum_info.random.utils.random_density_matrix
#: qiskit.quantum_info.random.utils.random_unitary
#: qiskit.quantum_info.random_density_matrix qiskit.quantum_info.random_unitary
#: qiskit.quantum_info.synthesis.euler_angles_1q
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q
#: qiskit.result.Result.data qiskit.result.Result.get_counts
#: qiskit.result.Result.get_memory qiskit.result.Result.get_statevector
#: qiskit.result.Result.get_unitary
#: qiskit.result.postprocess.format_level_0_memory
#: qiskit.result.postprocess.format_level_1_memory
#: qiskit.test.base.QiskitTestCase.assertDictAlmostEqual qiskit.tools.compile
#: qiskit.tools.compiler.compile qiskit.tools.monitor.backend_monitor
#: qiskit.tools.monitor.job_monitor qiskit.tools.parallel.parallel_map
#: qiskit.tools.parallel_map qiskit.tools.qcvv.fitters.plot_coherence
#: qiskit.tools.qcvv.fitters.plot_rb_data
#: qiskit.tools.qcvv.tomography.build_wigner_circuits
#: qiskit.tools.qcvv.tomography.create_tomography_circuits
#: qiskit.tools.qcvv.tomography.fit_tomography_data
#: qiskit.tools.qcvv.tomography.tomography_set qiskit.tools.qi.qi.concurrence
#: qiskit.tools.qi.qi.devectorize qiskit.tools.qi.qi.partial_trace
#: qiskit.tools.qi.qi.vectorize qiskit.transpiler.AnalysisPass.run
#: qiskit.transpiler.CouplingMap.add_physical_qubit
#: qiskit.transpiler.CouplingMap.distance qiskit.transpiler.CouplingMap.reduce
#: qiskit.transpiler.CouplingMap.shortest_undirected_path
#: qiskit.transpiler.FlowController.controller_factory
#: qiskit.transpiler.FlowController.remove_flow_controller
#: qiskit.transpiler.Layout.combine_into_edge_map
#: qiskit.transpiler.Layout.from_intlist
#: qiskit.transpiler.Layout.from_tuplelist qiskit.transpiler.Layout.swap
#: qiskit.transpiler.PassManager.append
#: qiskit.transpiler.TransformationPass.run
#: qiskit.transpiler.basepasses.BasePass.run
#: qiskit.transpiler.coupling.CouplingMap.add_physical_qubit
#: qiskit.transpiler.coupling.CouplingMap.distance
#: qiskit.transpiler.coupling.CouplingMap.reduce
#: qiskit.transpiler.coupling.CouplingMap.shortest_undirected_path
#: qiskit.transpiler.passes.BasicSwap.run
#: qiskit.transpiler.passes.CXDirection.run
#: qiskit.transpiler.passes.CommutativeCancellation.run
#: qiskit.transpiler.passes.CountOps.run
#: qiskit.transpiler.passes.DAGFixedPoint.run
#: qiskit.transpiler.passes.DenseLayout.run qiskit.transpiler.passes.Depth.run
#: qiskit.transpiler.passes.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.FixedPoint.run
#: qiskit.transpiler.passes.FullAncillaAllocation.run
#: qiskit.transpiler.passes.LegacySwap.run
#: qiskit.transpiler.passes.LookaheadSwap.run
#: qiskit.transpiler.passes.MergeAdjacentBarriers.run
#: qiskit.transpiler.passes.NumTensorFactors.run
#: qiskit.transpiler.passes.ResourceEstimation.run
#: qiskit.transpiler.passes.SetLayout.run qiskit.transpiler.passes.Size.run
#: qiskit.transpiler.passes.StochasticSwap.run
#: qiskit.transpiler.passes.TrivialLayout.run
#: qiskit.transpiler.passes.Unroll3qOrMore.run
#: qiskit.transpiler.passes.Unroller.run qiskit.transpiler.passes.Width.run
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run
#: qiskit.transpiler.passes.count_ops.CountOps.run
#: qiskit.transpiler.passes.dag_fixed_point.DAGFixedPoint.run
#: qiskit.transpiler.passes.fixed_point.FixedPoint.run
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap.run
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection.run
#: qiskit.transpiler.passes.mapping.dense_layout.DenseLayout.run
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run
#: qiskit.transpiler.passes.mapping.set_layout.SetLayout.run
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout.run
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers.run
#: qiskit.transpiler.passes.num_tensor_factors.NumTensorFactors.run
#: qiskit.transpiler.passes.resource_estimation.ResourceEstimation.run
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run
#: qiskit.transpiler.transpile qiskit.transpiler.transpile_circuit
#: qiskit.transpiler.transpiler.transpile
#: qiskit.validation.ModelTypeValidator.deserialize
#: qiskit.validation.ModelTypeValidator.serialize
#: qiskit.validation.base.bind_schema qiskit.validation.bind_schema
#: qiskit.validation.jsonschema.schema_validation.validate_json_against_schema
#: qiskit.visualization.bloch.Bloch.add_annotation
#: qiskit.visualization.bloch.Bloch.set_label_convention
#: qiskit.visualization.circuit_drawer
#: qiskit.visualization.circuit_visualization.circuit_drawer
#: qiskit.visualization.counts_visualization.hamming_distance
#: qiskit.visualization.counts_visualization.plot_histogram
#: qiskit.visualization.dag_drawer
#: qiskit.visualization.dag_visualization.dag_drawer
#: qiskit.visualization.gate_map.plot_gate_map
#: qiskit.visualization.interactive.iplot_histogram
#: qiskit.visualization.interactive.iplot_qsphere.lex_index
#: qiskit.visualization.interactive.iplot_state
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw
#: qiskit.visualization.plot_bloch_multivector
#: qiskit.visualization.plot_bloch_vector qiskit.visualization.plot_gate_map
#: qiskit.visualization.plot_histogram qiskit.visualization.plot_state
#: qiskit.visualization.plot_state_city qiskit.visualization.plot_state_hinton
#: qiskit.visualization.plot_state_paulivec
#: qiskit.visualization.plot_state_qsphere qiskit.visualization.pulse_drawer
#: qiskit.visualization.pulse_visualization.pulse_drawer
#: qiskit.visualization.state_visualization.lex_index
#: qiskit.visualization.state_visualization.plot_bloch_multivector
#: qiskit.visualization.state_visualization.plot_bloch_vector
#: qiskit.visualization.state_visualization.plot_state
#: qiskit.visualization.state_visualization.plot_state_city
#: qiskit.visualization.state_visualization.plot_state_hinton
#: qiskit.visualization.state_visualization.plot_state_paulivec
#: qiskit.visualization.state_visualization.plot_state_qsphere
#: qiskit.visualization.text.TextDrawing.build_layers
msgid "例外"
msgstr ""

#: of qiskit.aqua.Operator.convert:14 qiskit.aqua.operator.Operator.convert:14
msgid "if the unsupported output_format is specified."
msgstr ""

#: of qiskit.aqua.Operator.copy:1 qiskit.aqua.operator.Operator.copy:1
msgid "Get a copy of self."
msgstr ""

#: of qiskit.aqua.Operator.eval:1 qiskit.aqua.operator.Operator.eval:1
msgid ""
"Supporting three ways to evaluate the given circuits with the operator. "
"1. If `input_circuit` is a numpy.ndarray, it will directly perform inner "
"product with the operator. 2. If `backend` is a statevector simulator, "
"use quantum backend to get statevector            and then evaluate with "
"the operator. 3. Other cases: it use with quanutm backend (simulator or "
"real quantum machine),            to obtain the mean and standard "
"deviation of measured results."
msgstr ""

#: of qiskit.aqua.Operator.eval:12 qiskit.aqua.operator.Operator.eval:12
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter:7
#: qiskit.aqua.utils.compile_and_run_circuits:10
#: qiskit.aqua.utils.compile_circuits:10
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:7
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:10
#: qiskit.aqua.utils.run_circuits.compile_circuits:10
msgid "configuration for backend"
msgstr ""

#: of qiskit.aqua.Operator.eval:14 qiskit.aqua.operator.Operator.eval:14
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter:9
#: qiskit.aqua.utils.compile_and_run_circuits:12
#: qiskit.aqua.utils.compile_circuits:12
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:9
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:12
#: qiskit.aqua.utils.run_circuits.compile_circuits:12
msgid "configuration for compilation"
msgstr ""

#: of qiskit.aqua.Operator.eval:16 qiskit.aqua.operator.Operator.eval:16
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter:11
#: qiskit.aqua.utils.compile_and_run_circuits:14
#: qiskit.aqua.utils.compile_circuits:14
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:11
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:14
#: qiskit.aqua.utils.run_circuits.compile_circuits:14
msgid "configuration for running a circuit"
msgstr ""

#: of qiskit.aqua.Operator.eval:18 qiskit.aqua.operator.Operator.eval:18
msgid ""
"the setting to retrieve results from quantum backend, including timeout "
"and wait."
msgstr ""

#: of qiskit.aqua.Operator.eval:23 qiskit.aqua.operator.Operator.eval:23
msgid "mean and standard deviation of avg"
msgstr ""

#: of qiskit.aqua.Operator.evaluate_with_result:1
#: qiskit.aqua.operator.Operator.evaluate_with_result:1
msgid "Use the executed result with operator to get the evaluated value."
msgstr ""

#: of qiskit.aqua.Operator.evaluate_with_result:5
#: qiskit.aqua.operator.Operator.evaluate_with_result:5
msgid "the quantum circuits."
msgstr ""

#: of qiskit.aqua.Operator.evaluate_with_result:9
#: qiskit.aqua.operator.Operator.evaluate_with_result:9
msgid "the result from the backend."
msgstr ""

#: of qiskit.aqua.Operator.evaluate_with_result:15
#: qiskit.aqua.operator.Operator.evaluate_with_result:15
msgid "the mean value float: the standard deviation"
msgstr ""

#: of qiskit.aqua.Operator.evolve:1 qiskit.aqua.operator.Operator.evolve:1
msgid ""
"Carry out the eoh evolution for the operator under supplied "
"specifications."
msgstr ""

#: of qiskit.aqua.Operator.evolve:3 qiskit.aqua.operator.Operator.evolve:3
msgid "The initial state for the evolution"
msgstr ""

#: of qiskit.aqua.Operator.evolve:6 qiskit.aqua.operator.Operator.evolve:6
msgid ""
"The mode under which the evolution is carried out. Currently only support"
" 'matrix' or 'circuit'"
msgstr ""

#: of qiskit.aqua.Operator.evolve:11 qiskit.aqua.operator.Operator.evolve:11
msgid "The QuantumRegister to build the QuantumCircuit off of"
msgstr ""

#: of qiskit.aqua.Operator.evolve:13 qiskit.aqua.operator.Operator.evolve:13
msgid ""
"The mode under which the expansion is to be done. Currently support "
"'trotter', which follows the expansion as discussed in "
"http://science.sciencemag.org/content/273/5278/1073, and 'suzuki', which "
"corresponds to the discussion in https://arxiv.org/pdf/quant-"
"ph/0508139.pdf"
msgstr ""

#: of qiskit.aqua.Operator.evolve:19 qiskit.aqua.operator.Operator.evolve:19
msgid "The order for suzuki expansion"
msgstr ""

#: of qiskit.aqua.Operator.evolve:22 qiskit.aqua.operator.Operator.evolve:22
msgid ""
"Depending on the evo_mode specified, either return the matrix vector "
"multiplication result or the constructed QuantumCircuit."
msgstr ""

#: of qiskit.aqua.Operator.find_Z2_symmetries:1
#: qiskit.aqua.operator.Operator.find_Z2_symmetries:1
msgid "Finds Z2 Pauli-type symmetries of an Operator"
msgstr ""

#: of qiskit.aqua.Operator.find_Z2_symmetries:3
#: qiskit.aqua.operator.Operator.find_Z2_symmetries:3
msgid ""
"the list of Pauli objects representing the Z2 symmetries [Pauli]: the "
"list of single - qubit Pauli objects to construct the Cliffors operators "
"[Operators]: the list of Clifford unitaries to block diagonalize Operator"
" [int]: the list of support of the single-qubit Pauli objects used to "
"build the clifford operators"
msgstr ""

#: of qiskit.aqua.Operator.get_flat_pauli_list:1
#: qiskit.aqua.operator.Operator.get_flat_pauli_list:1
msgid "Get the flat list of paulis"
msgstr ""

#: of qiskit.aqua.Operator.get_flat_pauli_list:3
#: qiskit.aqua.operator.Operator.get_flat_pauli_list:3
msgid "The list of pauli terms"
msgstr ""

#: of qiskit.aqua.Operator.grouped_paulis:1
#: qiskit.aqua.operator.Operator.grouped_paulis:1
#: qiskit.aqua.utils.PauliGraph.grouped_paulis:1
#: qiskit.aqua.utils.pauli_graph.PauliGraph.grouped_paulis:1
msgid "Getter of grouped Pauli list."
msgstr ""

#: of qiskit.aqua.Operator.is_empty:1 qiskit.aqua.operator.Operator.is_empty:1
msgid "Check Operator is empty or not."
msgstr ""

#: of qiskit.aqua.Operator.is_empty:3 qiskit.aqua.operator.Operator.is_empty:3
msgid "is empty?"
msgstr ""

#: of qiskit.aqua.Operator.kernel_F2:1
#: qiskit.aqua.operator.Operator.kernel_F2:1
msgid "Computes the kernel of a binary matrix on the binary finite field"
msgstr ""

#: of qiskit.aqua.Operator.kernel_F2:3 qiskit.aqua.Operator.row_echelon_F2:4
#: qiskit.aqua.operator.Operator.kernel_F2:3
#: qiskit.aqua.operator.Operator.row_echelon_F2:4
msgid "binary matrix"
msgstr ""

#: of qiskit.aqua.Operator.kernel_F2:6
#: qiskit.aqua.operator.Operator.kernel_F2:6
msgid "the list of kernel vectors"
msgstr ""

#: of qiskit.aqua.Operator.load_from_dict:1
#: qiskit.aqua.operator.Operator.load_from_dict:1
msgid ""
"Load paulis in a dict to construct an Operator,         the dict must be "
"represented as follows: label and coeff (real and imag).         E.g.:"
"            {'paulis':                [                    {'label': "
"'IIII',                     'coeff': {'real': -0.33562957575267038, "
"'imag': 0.0}},                    {'label': 'ZIII',                     "
"'coeff': {'real': 0.28220597164664896, 'imag': 0.0}},"
"                     ...                 ]             } :param "
"dictionary: dictionary, which contains a list of Paulis and coefficients."
" :type dictionary: dict :param before_04: support the format < 0.4. :type"
" before_04: bool"
msgstr ""

#: of qiskit.aqua.Operator.load_from_dict:7
#: qiskit.aqua.Operator.load_from_file:8
#: qiskit.aqua.operator.Operator.load_from_dict:7
#: qiskit.aqua.operator.Operator.load_from_file:8
msgid "the loaded operator."
msgstr ""

#: of qiskit.aqua.Operator.load_from_file:1
#: qiskit.aqua.operator.Operator.load_from_file:1
msgid "Load paulis in a file to construct an Operator."
msgstr ""

#: of qiskit.aqua.Operator.load_from_file:3
#: qiskit.aqua.operator.Operator.load_from_file:3
msgid "path to the file, which contains a list of Paulis and coefficients."
msgstr ""

#: of qiskit.aqua.Operator.load_from_file:5
#: qiskit.aqua.operator.Operator.load_from_file:5
msgid "support the format < 0.4."
msgstr ""

#: of qiskit.aqua.Operator.matrix:1 qiskit.aqua.operator.Operator.matrix:1
msgid ""
"Getter of matrix; if matrix is diagonal, diagonal matrix is returned "
"instead."
msgstr ""

#: of qiskit.aqua.Operator.num_qubits:1
#: qiskit.aqua.operator.Operator.num_qubits:1
msgid "number of qubits required for the operator."
msgstr ""

#: of qiskit.aqua.Operator.num_qubits:3
#: qiskit.aqua.operator.Operator.num_qubits:3
#: qiskit.chemistry.particle_hole.normal_order_integrals:4
#: qiskit.chemistry.particle_hole.particle_hole_transformation:3
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern:5
#: qiskit.quantum_info.operators.pauli.pauli_group:7
#: qiskit.quantum_info.pauli_group:7
msgid "number of qubits"
msgstr ""

#: of qiskit.aqua.Operator.paulis:1 qiskit.aqua.operator.Operator.paulis:1
msgid "Getter of Pauli list."
msgstr ""

#: of qiskit.aqua.Operator.print_operators:1
#: qiskit.aqua.operator.Operator.print_operators:1
msgid "Print out the paulis in the selected representation."
msgstr ""

#: of qiskit.aqua.Operator.print_operators:3
#: qiskit.aqua.operator.Operator.print_operators:3
msgid "\"paulis\", \"grouped_paulis\", \"matrix\""
msgstr ""

#: of qiskit.aqua.Operator.print_operators:6
#: qiskit.aqua.operator.Operator.print_operators:6
msgid "a formated operator."
msgstr ""

#: of qiskit.aqua.Operator.print_operators:9
#: qiskit.aqua.operator.Operator.print_operators:9
msgid "if `print_format` is not supported."
msgstr ""

#: of qiskit.aqua.Operator.qubit_tapering:1
#: qiskit.aqua.operator.Operator.qubit_tapering:1
msgid ""
"Builds an Operator which has a number of qubits tapered off, based on a "
"block-diagonal Operator built using a list of cliffords. The block-"
"diagonal subspace is an input parameter, set through the list "
"tapering_values, which takes values +/- 1."
msgstr ""

#: of qiskit.aqua.Operator.qubit_tapering:6
#: qiskit.aqua.operator.Operator.qubit_tapering:6
msgid "the target operator to be tapered"
msgstr ""

#: of qiskit.aqua.Operator.qubit_tapering:8
#: qiskit.aqua.operator.Operator.qubit_tapering:8
msgid "list of unitary Clifford transformation"
msgstr ""

#: of qiskit.aqua.Operator.qubit_tapering:10
#: qiskit.aqua.operator.Operator.qubit_tapering:10
msgid "position of the single-qubit operators that anticommute"
msgstr ""

#: of qiskit.aqua.Operator.qubit_tapering:13
#: qiskit.aqua.operator.Operator.qubit_tapering:13
msgid "array of +/- 1 used to select the subspace. Length"
msgstr ""

#: of qiskit.aqua.Operator.qubit_tapering:17
#: qiskit.aqua.operator.Operator.qubit_tapering:17
msgid "the tapered operator, or empty operator if the `operator` is empty."
msgstr ""

#: of qiskit.aqua.Operator.representations:1
#: qiskit.aqua.operator.Operator.representations:1
msgid "Return the available representations in the Operator."
msgstr ""

#: of qiskit.aqua.Operator.representations:3
#: qiskit.aqua.operator.Operator.representations:3
msgid "available representations ([str])"
msgstr ""

#: of qiskit.aqua.Operator.row_echelon_F2:1
#: qiskit.aqua.operator.Operator.row_echelon_F2:1
msgid ""
"Computes the row Echelon form of a binary matrix on the binary finite "
"field"
msgstr ""

#: of qiskit.aqua.Operator.row_echelon_F2:7
#: qiskit.aqua.operator.Operator.row_echelon_F2:7
msgid "matrix_in in Echelon row form"
msgstr ""

#: of qiskit.aqua.Operator.save_to_dict:1
#: qiskit.aqua.operator.Operator.save_to_dict:1
msgid "Save operator to a dict in pauli representation."
msgstr ""

#: of qiskit.aqua.Operator.save_to_dict:3
#: qiskit.aqua.operator.Operator.save_to_dict:3
msgid "a dictionary contains an operator with pauli representation."
msgstr ""

#: of qiskit.aqua.Operator.save_to_file:1
#: qiskit.aqua.operator.Operator.save_to_file:1
msgid "Save operator to a file in pauli representation."
msgstr ""

#: of qiskit.aqua.Operator.save_to_file:3
#: qiskit.aqua.operator.Operator.save_to_file:3
msgid "path to the file"
msgstr ""

#: of qiskit.aqua.Operator.scaling_coeff:1
#: qiskit.aqua.operator.Operator.scaling_coeff:1
msgid "Constant scale the coefficient in an operator."
msgstr ""

#: of qiskit.aqua.Operator.scaling_coeff:3
#: qiskit.aqua.operator.Operator.scaling_coeff:3
msgid ""
"Note that: the behavior of scaling in paulis (grouped_paulis) might be "
"different from matrix"
msgstr ""

#: of qiskit.aqua.Operator.scaling_coeff:5
#: qiskit.aqua.operator.Operator.scaling_coeff:5
msgid "the sacling factor"
msgstr ""

#: of qiskit.aqua.Operator.two_qubit_reduced_operator:1
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator:1
msgid ""
"Eliminates the central and last qubit in a list of Pauli that has "
"diagonal operators (Z,I) at those positions"
msgstr ""

#: of qiskit.aqua.Operator.two_qubit_reduced_operator:4
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator:4
msgid ""
"Chemistry specific method: It can be used to taper two qubits in parity "
"and binary-tree mapped fermionic Hamiltonians when the spin orbitals are "
"ordered in two spin sectors, (block spin order) according to the number "
"of particles in the system."
msgstr ""

#: of qiskit.aqua.Operator.two_qubit_reduced_operator:9
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator:9
msgid "number of fermionic particles"
msgstr ""

#: of qiskit.aqua.Operator.two_qubit_reduced_operator:11
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator:11
#: qiskit.chemistry.FermionicOperator.mapping:9
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping:9
msgid "threshold for Pauli simplification"
msgstr ""

#: of qiskit.aqua.Operator.two_qubit_reduced_operator:14
#: qiskit.aqua.operator.Operator.two_qubit_reduced_operator:14
msgid "a new operator whose qubit number is reduced by 2."
msgstr ""

#: of qiskit.aqua.Operator.zeros_coeff_elimination:1
#: qiskit.aqua.operator.Operator.zeros_coeff_elimination:1
msgid "Elinminate paulis or grouped paulis whose coefficients are zeros."
msgstr ""

#: of qiskit.aqua.Operator.zeros_coeff_elimination:3
#: qiskit.aqua.operator.Operator.zeros_coeff_elimination:3
msgid ""
"The difference from `_simplify_paulis` method is that, this method will "
"not remove duplicated paulis."
msgstr ""

#: of qiskit.aqua.QuantumAlgorithm:1 qiskit.aqua.algorithms.QuantumAlgorithm:1
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm:1
#: qiskit.aqua.components.eigs.Eigenvalues:1
#: qiskit.aqua.components.eigs.eigs.Eigenvalues:1
#: qiskit.aqua.components.feature_maps.FeatureMap:1
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap:1
#: qiskit.aqua.components.initial_states.InitialState:1
#: qiskit.aqua.components.initial_states.initial_state.InitialState:1
#: qiskit.aqua.components.iqfts.IQFT:1 qiskit.aqua.components.iqfts.iqft.IQFT:1
#: qiskit.aqua.components.multiclass_extensions.MulticlassExtension:1
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension:1
#: qiskit.aqua.components.neural_networks.DiscriminativeNetwork:1
#: qiskit.aqua.components.neural_networks.GenerativeNetwork:1
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork:1
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork:1
#: qiskit.aqua.components.optimizers.Optimizer:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer:1
#: qiskit.aqua.components.oracles.Oracle:1
#: qiskit.aqua.components.oracles.oracle.Oracle:1
#: qiskit.aqua.components.qfts.QFT:1 qiskit.aqua.components.qfts.qft.QFT:1
#: qiskit.aqua.components.reciprocals.Reciprocal:1
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal:1
#: qiskit.aqua.components.variational_forms.VariationalForm:1
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm:1
#: qiskit.aqua.input.AlgorithmInput:1
#: qiskit.aqua.input.algorithm_input.AlgorithmInput:1
msgid "ベースクラス: :class:`qiskit.aqua.pluggable.Pluggable`"
msgstr ""

#: of qiskit.aqua.QuantumAlgorithm:1 qiskit.aqua.algorithms.QuantumAlgorithm:1
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm:1
msgid "Base class for Algorithms."
msgstr ""

#: of qiskit.aqua.QuantumAlgorithm.random:1
#: qiskit.aqua.algorithms.QuantumAlgorithm.random:1
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm.random:1
#: qiskit.aqua.qiskit_aqua_globals.QiskitAquaGlobals.random:1
msgid "Return a numpy random."
msgstr ""

#: of qiskit.aqua.QuantumAlgorithm.run:1
#: qiskit.aqua.algorithms.QuantumAlgorithm.run:1
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm.run:1
msgid "Execute the algorithm with selected backend."
msgstr ""

#: of qiskit.aqua.QuantumAlgorithm.run:3
#: qiskit.aqua.algorithms.QuantumAlgorithm.run:3
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm.run:3
msgid "the experiemental setting."
msgstr ""

#: of qiskit.aqua.QuantumAlgorithm.run:6
#: qiskit.aqua.algorithms.QuantumAlgorithm.run:6
#: qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm.run:6
msgid "results of an algorithm."
msgstr ""

#: of qiskit.aqua.PluggableType:1 qiskit.aqua._discover.PluggableType:1
#: qiskit.aqua.translators.data_providers._base_data_provider.DataType:1
#: qiskit.aqua.translators.data_providers._base_data_provider.StockMarket:1
#: qiskit.chemistry.ChemistryProblem:1 qiskit.chemistry.core.QubitMappingType:1
#: qiskit.chemistry.core.TransformationType:1
#: qiskit.chemistry.core.hamiltonian.QubitMappingType:1
#: qiskit.chemistry.core.hamiltonian.TransformationType:1
#: qiskit.chemistry.drivers.BasisType:1 qiskit.chemistry.drivers.UnitsType:1
#: qiskit.chemistry.drivers._basedriver.UnitsType:1
#: qiskit.chemistry.drivers.pyquanted.BasisType:1
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.BasisType:1
#: qiskit.chemistry.qiskit_chemistry_problem.ChemistryProblem:1
#: qiskit.providers.JobStatus:1 qiskit.providers.ibmq.apiconstants.ApiJobKind:1
#: qiskit.providers.ibmq.apiconstants.ApiJobStatus:1 qiskit.test.utils.Path:1
msgid "ベースクラス: :class:`enum.Enum`"
msgstr ""

#: of qiskit.aqua.PluggableType:1 qiskit.aqua._discover.PluggableType:1
#: qiskit.aqua.components.optimizers.Optimizer.SupportLevel:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.SupportLevel:1
#: qiskit.aqua.translators.data_providers._base_data_provider.DataType:1
#: qiskit.aqua.translators.data_providers._base_data_provider.StockMarket:1
#: qiskit.chemistry.ChemistryProblem:1 qiskit.chemistry.core.QubitMappingType:1
#: qiskit.chemistry.core.TransformationType:1
#: qiskit.chemistry.core.hamiltonian.QubitMappingType:1
#: qiskit.chemistry.core.hamiltonian.TransformationType:1
#: qiskit.chemistry.drivers.BasisType:1 qiskit.chemistry.drivers.UnitsType:1
#: qiskit.chemistry.drivers._basedriver.UnitsType:1
#: qiskit.chemistry.drivers.pyquanted.BasisType:1
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.BasisType:1
#: qiskit.chemistry.qiskit_chemistry_problem.ChemistryProblem:1
msgid "An enumeration."
msgstr ""

#: of qiskit.aqua._discover.refresh_pluggables:1
#: qiskit.aqua.refresh_pluggables:1
msgid "Attempts to rediscover all pluggable modules"
msgstr ""

#: of qiskit.aqua.QuantumInstance:1
#: qiskit.aqua.quantum_instance.QuantumInstance:1
msgid "Quantum Backend including execution setting."
msgstr ""

#: of qiskit.aqua.QuantumInstance.backend:1
#: qiskit.aqua.quantum_instance.QuantumInstance.backend:1
msgid "Return BaseBackend backend object."
msgstr ""

#: of qiskit.aqua.QuantumInstance.backend_config:1
#: qiskit.aqua.quantum_instance.QuantumInstance.backend_config:1
msgid "Getter of backend_config."
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
#: of qiskit.aqua.QuantumInstance.backend_name:1
#: qiskit.aqua.quantum_instance.QuantumInstance.backend_name:1
#: qiskit.providers.BaseBackend.name:1
#: qiskit.providers.aer.QasmSimulator.name:1
#: qiskit.providers.aer.StatevectorSimulator.name:1
#: qiskit.providers.aer.UnitarySimulator.name:1
#: qiskit.providers.aer.backends.QasmSimulator.name:1
#: qiskit.providers.aer.backends.StatevectorSimulator.name:1
#: qiskit.providers.aer.backends.UnitarySimulator.name:1
#: qiskit.providers.basicaer.QasmSimulatorPy.name:1
#: qiskit.providers.basicaer.StatevectorSimulatorPy.name:1
#: qiskit.providers.basicaer.UnitarySimulatorPy.name:1
msgid "Return backend name."
msgstr ""

#: of qiskit.aqua.QuantumInstance.backend_options:1
#: qiskit.aqua.quantum_instance.QuantumInstance.backend_options:1
msgid "Getter of backend_options."
msgstr ""

#: of qiskit.aqua.QuantumInstance.circuit_summary:1
#: qiskit.aqua.quantum_instance.QuantumInstance.circuit_summary:1
msgid "Getter of circuit summary."
msgstr ""

#: of qiskit.aqua.QuantumInstance.compile_config:1
#: qiskit.aqua.quantum_instance.QuantumInstance.compile_config:1
msgid "Getter of compile_config."
msgstr ""

#: of qiskit.aqua.QuantumInstance.execute:1
#: qiskit.aqua.quantum_instance.QuantumInstance.execute:1
msgid "A wrapper to interface with quantum backend."
msgstr ""

#: of qiskit.aqua.QuantumInstance.execute:3
#: qiskit.aqua.quantum_instance.QuantumInstance.execute:3
#: qiskit.aqua.utils.compile_and_run_circuits:6
#: qiskit.aqua.utils.compile_circuits:6
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:6
#: qiskit.aqua.utils.run_circuits.compile_circuits:6
msgid "circuits to execute"
msgstr ""

#: of qiskit.aqua.QuantumInstance.execute:6
#: qiskit.aqua.quantum_instance.QuantumInstance.execute:6
#: qiskit.aqua.utils.compile_and_run_circuits:29
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:29
#: qiskit.aqua.utils.run_circuits.run_qobjs:19 qiskit.aqua.utils.run_qobjs:19
#: qiskit.providers.aer.AerJob.result:9
#: qiskit.providers.basicaer.BasicAerJob.result:9
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result:21
msgid "Result object"
msgstr ""

#: of qiskit.aqua.QuantumInstance.is_local:1
#: qiskit.aqua.quantum_instance.QuantumInstance.is_local:1
#: qiskit.aqua.utils.backend_utils.is_local_backend:1
msgid "Return True if backend is a local backend."
msgstr ""

#: of qiskit.aqua.QuantumInstance.is_simulator:1
#: qiskit.aqua.quantum_instance.QuantumInstance.is_simulator:1
#: qiskit.aqua.utils.backend_utils.is_simulator_backend:1
msgid "Return True if backend is a simulator."
msgstr ""

#: of qiskit.aqua.QuantumInstance.is_statevector:1
#: qiskit.aqua.quantum_instance.QuantumInstance.is_statevector:1
msgid "Return True if backend is a statevector-type simulator."
msgstr ""

#: of qiskit.aqua.QuantumInstance.maybe_refresh_cals_matrix:1
#: qiskit.aqua.quantum_instance.QuantumInstance.maybe_refresh_cals_matrix:1
msgid "Calculate the time difference from the query of last time."
msgstr ""

#: of qiskit.aqua.QuantumInstance.maybe_refresh_cals_matrix:3
#: qiskit.aqua.quantum_instance.QuantumInstance.maybe_refresh_cals_matrix:3
msgid "whether or not refresh the cals_matrix"
msgstr ""

#: of qiskit.aqua.QuantumInstance.noise_config:1
#: qiskit.aqua.quantum_instance.QuantumInstance.noise_config:1
msgid "Getter of noise_config."
msgstr ""

#: of qiskit.aqua.QuantumInstance.qjob_config:1
#: qiskit.aqua.quantum_instance.QuantumInstance.qjob_config:1
msgid "Getter of qjob_config."
msgstr ""

#: of qiskit.aqua.QuantumInstance.run_config:1
#: qiskit.aqua.quantum_instance.QuantumInstance.run_config:1
msgid "Getter of run_config."
msgstr ""

#: of qiskit.aqua.QuantumInstance.set_config:1
#: qiskit.aqua.quantum_instance.QuantumInstance.set_config:1
msgid "Set configurations for the quantum instance."
msgstr ""

#: of qiskit.aqua.QuantumInstance.shared_circuits:1
#: qiskit.aqua.quantum_instance.QuantumInstance.shared_circuits:1
msgid "Getter of shared_circuits."
msgstr ""

#: of qiskit.aqua.get_backends_from_provider:1
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider:1
msgid "Backends access method."
msgstr ""

#: of qiskit.aqua.get_backend_from_provider:3
#: qiskit.aqua.get_backends_from_provider:3
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider:3
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider:3
msgid "Fullname of provider instance global property or class"
msgstr ""

#: of qiskit.aqua.get_backends_from_provider:6
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider:6
msgid "backend names"
msgstr ""

#: of qiskit.aqua.get_backend_from_provider:11
#: qiskit.aqua.get_backends_from_provider:9
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider:11
#: qiskit.aqua.utils.backend_utils.get_backends_from_provider:9
msgid "Invalid provider name or failed to find provider"
msgstr ""

#: of qiskit.aqua.get_backend_from_provider:1
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider:1
msgid "Backend access method."
msgstr ""

#: of qiskit.aqua.get_backend_from_provider:5
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider:5
msgid "name of backend for this provider"
msgstr ""

#: of qiskit.aqua.get_backend_from_provider:8
#: qiskit.aqua.utils.backend_utils.get_backend_from_provider:8
msgid "backend object"
msgstr ""

#: of qiskit.aqua.register_ibmq_and_get_known_providers:1
#: qiskit.aqua.utils.backend_utils.register_ibmq_and_get_known_providers:1
msgid "Gets known local providers and registers IBMQ."
msgstr ""

#: of qiskit.aqua.get_provider_from_backend:1
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend:1
msgid "Attempts to find a known provider that provides this backend."
msgstr ""

#: of qiskit.aqua.get_provider_from_backend:3
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend:3
msgid "backend object or backend name"
msgstr ""

#: of qiskit.aqua.get_provider_from_backend:6
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend:6
msgid "provider name"
msgstr ""

#: of qiskit.aqua.get_provider_from_backend:9
#: qiskit.aqua.utils.backend_utils.get_provider_from_backend:9
msgid "Failed to find provider"
msgstr ""

#: of qiskit.aqua.enable_ibmq_account:1
#: qiskit.aqua.utils.backend_utils.enable_ibmq_account:1
msgid "Enable IBMQ account, if not alreay enabled."
msgstr ""

#: of qiskit.aqua.disable_ibmq_account:1
#: qiskit.aqua.utils.backend_utils.disable_ibmq_account:1
msgid "Disable IBMQ account."
msgstr ""

#: of qiskit.aqua._discover.local_pluggables_types:1
#: qiskit.aqua.local_pluggables_types:1
msgid "Accesses all pluggable types :returns: pluggable types :rtype: types"
msgstr ""

#: of qiskit.aqua._discover.local_pluggables:1 qiskit.aqua.local_pluggables:1
msgid ""
"Accesses pluggable names :param pluggable_type: The pluggable type :type "
"pluggable_type: PluggableType or str"
msgstr ""

#: of qiskit.aqua._discover.local_pluggables:5 qiskit.aqua.local_pluggables:5
msgid "pluggable names"
msgstr ""

#: of qiskit.aqua._discover.local_pluggables:8 qiskit.aqua.local_pluggables:8
msgid "if the tyoe is not registered"
msgstr ""

#: of qiskit.aqua._discover.get_pluggable_class:1
#: qiskit.aqua.get_pluggable_class:1
msgid ""
"Accesses pluggable class :param pluggable_type: The pluggable type :type "
"pluggable_type: PluggableType or str :param pluggable_name: The pluggable"
" name :type pluggable_name: str"
msgstr ""

#: of qiskit.aqua._discover.get_pluggable_class:7
#: qiskit.aqua.get_pluggable_class:7
msgid "pluggable class"
msgstr ""

#: of qiskit.aqua._discover.deregister_pluggable:7
#: qiskit.aqua._discover.get_pluggable_class:10
#: qiskit.aqua._discover.get_pluggable_configuration:10
#: qiskit.aqua.deregister_pluggable:7 qiskit.aqua.get_pluggable_class:10
#: qiskit.aqua.get_pluggable_configuration:10
#: qiskit.chemistry.core._discover_chemoperator.deregister_chemistry_operator:5
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_class:8
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_configuration:8
#: qiskit.chemistry.core.deregister_chemistry_operator:5
#: qiskit.chemistry.core.get_chemistry_operator_class:8
#: qiskit.chemistry.core.get_chemistry_operator_configuration:8
msgid "if the class is not registered"
msgstr ""

#: of qiskit.aqua._discover.get_pluggable_configuration:1
#: qiskit.aqua.get_pluggable_configuration:1
msgid ""
"Accesses pluggable configuration :param pluggable_type: The pluggable "
"type :type pluggable_type: PluggableType or str :param pluggable_name: "
"The pluggable name :type pluggable_name: str"
msgstr ""

#: of qiskit.aqua._discover.get_pluggable_configuration:7
#: qiskit.aqua.get_pluggable_configuration:7
msgid "pluggable configuration"
msgstr ""

#: of qiskit.aqua._discover.register_pluggable:1
#: qiskit.aqua.register_pluggable:1
msgid "Registers a pluggable class :param cls: Pluggable class. :type cls: object"
msgstr ""

#: of qiskit.aqua._discover.register_pluggable:5
#: qiskit.aqua.algorithms.QGAN.set_discriminator:3
#: qiskit.aqua.algorithms.QGAN.set_generator:7
#: qiskit.aqua.algorithms.adaptive.QGAN.set_discriminator:3
#: qiskit.aqua.algorithms.adaptive.QGAN.set_generator:7
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_discriminator:3
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_generator:7
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_discriminator:3
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_generator:7
#: qiskit.aqua.components.neural_networks.DiscriminativeNetwork.set_seed:4
#: qiskit.aqua.components.neural_networks.GenerativeNetwork.set_seed:4
#: qiskit.aqua.components.neural_networks.QuantumGenerator.set_seed:4
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.set_seed:4
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork.set_seed:4
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.set_seed:4
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.set_probabilities:4
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.set_probabilities:4
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.set_probabilities:4
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.set_probabilities:4
#: qiskit.aqua.parser.BaseParser.set_section_data:6
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_data:6
#: qiskit.aqua.register_pluggable:5
#: qiskit.chemistry.drivers._discover_driver.register_driver:5
#: qiskit.chemistry.drivers.register_driver:5
#: qiskit.pulse.samplers.decorators:64 qiskit.pulse.samplers.decorators:99
#: qiskit.tools.qcvv.tomography.process_tomography_set:40
msgid "Returns:"
msgstr ""

#: of qiskit.aqua._discover.register_pluggable:6
#: qiskit.aqua.register_pluggable:6
msgid "name: pluggable name"
msgstr ""

#: of qiskit.aqua._discover.deregister_pluggable:1
#: qiskit.aqua.deregister_pluggable:1
msgid ""
"Deregisters a pluggable class :param pluggable_type: The pluggable type "
":type pluggable_type: PluggableType :param pluggable_name: The pluggable "
"name :type pluggable_name: str"
msgstr ""

#: of qiskit.aqua.QiskitAqua:1 qiskit.aqua.qiskit_aqua.QiskitAqua:1
msgid "Main Aqua class."
msgstr ""

#: of qiskit.aqua.QiskitAqua.algorithm_input:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.algorithm_input:1
msgid "Return Algorithm Input."
msgstr ""

#: of qiskit.aqua.QiskitAqua.json_result:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.json_result:1
msgid "Return Experiment Result as JSON."
msgstr ""

#: of qiskit.aqua.QiskitAqua.params:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.params:1
msgid "Return Aqua params."
msgstr ""

#: of qiskit.aqua.QiskitAqua.parser:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.parser:1
msgid "Return Aqua parser."
msgstr ""

#: of qiskit.aqua.QiskitAqua.quantum_algorithm:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.quantum_algorithm:1
msgid "Return Qusntum Algorithm."
msgstr ""

#: of qiskit.aqua.QiskitAqua.quantum_instance:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.quantum_instance:1
msgid "Return Quantum Instance."
msgstr ""

#: of qiskit.aqua.QiskitAqua.result:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.result:1
msgid "Return Experiment Result."
msgstr ""

#: of qiskit.aqua.QiskitAqua.run_algorithm_to_json:1
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json:1
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json:1
#: qiskit.aqua.run_algorithm_to_json:1
msgid "Run algorithm as named in params."
msgstr ""

#: of qiskit.aqua.QiskitAqua.run_algorithm_to_json:3
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json:3
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json:3
#: qiskit.aqua.run_algorithm_to_json:3
msgid ""
"Using params and algo_input as input data and save the combined input as "
"a json file. This json is self-contained and can later be used as a basis"
" to call run_algorithm"
msgstr ""

#: of qiskit.aqua.QiskitAqua.run_algorithm_to_json:7
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json:7
#: qiskit.aqua.qiskit_aqua.run_algorithm:6
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json:7 qiskit.aqua.run_algorithm:6
#: qiskit.aqua.run_algorithm_to_json:7
msgid "Dictionary of params for algo and dependent objects"
msgstr ""

#: of qiskit.aqua.QiskitAqua.run_algorithm_to_json:9
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json:9
#: qiskit.aqua.qiskit_aqua.run_algorithm:8
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json:9 qiskit.aqua.run_algorithm:8
#: qiskit.aqua.run_algorithm_to_json:9
msgid ""
"Main input data for algorithm. Optional, an algo may run entirely from "
"params"
msgstr ""

#: of qiskit.aqua.QiskitAqua.run_algorithm_to_json:11
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json:11
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json:11
#: qiskit.aqua.run_algorithm_to_json:11
msgid "Name of file in which json should be saved"
msgstr ""

#: of qiskit.aqua.QiskitAqua.run_algorithm_to_json:14
#: qiskit.aqua.qiskit_aqua.QiskitAqua.run_algorithm_to_json:14
#: qiskit.aqua.qiskit_aqua.run_algorithm_to_json:14
#: qiskit.aqua.run_algorithm_to_json:14
#: qiskit.chemistry.qiskit_chemistry.run_driver_to_json:8
#: qiskit.chemistry.run_driver_to_json:8
msgid "Result dictionary containing the jsonfile name"
msgstr ""

#: of qiskit.aqua.execute_algorithm:1
#: qiskit.aqua.qiskit_aqua.execute_algorithm:1
msgid ""
"Execute the supplied algorithm using the supplied backend or "
"QuantumInstance that was built using a backend."
msgstr ""

#: of qiskit.aqua.execute_algorithm:4
#: qiskit.aqua.qiskit_aqua.execute_algorithm:4
msgid "A quantum algorithm i.e. a concrete sub-class"
msgstr ""

#: of qiskit.aqua.execute_algorithm:7
#: qiskit.aqua.qiskit_aqua.execute_algorithm:7
msgid "The backend i.e. quantum simulator or real device"
msgstr ""

#: of qiskit.aqua.execute_algorithm:10
#: qiskit.aqua.qiskit_aqua.execute_algorithm:10
msgid ""
"optional arguments that can be used when supplying a Basebackend which "
"will be passed"
msgstr ""

#: of qiskit.aqua.execute_algorithm:13
#: qiskit.aqua.qiskit_aqua.execute_algorithm:13
#: qiskit.aqua.qiskit_aqua.run_algorithm:15 qiskit.aqua.run_algorithm:15
msgid "Result dictionary containing result of algorithm computation"
msgstr ""

#: of qiskit.aqua.qiskit_aqua.run_algorithm:1 qiskit.aqua.run_algorithm:1
msgid ""
"Run algorithm as named in params. The input params being the declarative "
"form of a dictionary/json."
msgstr ""

#: of qiskit.aqua.qiskit_aqua.run_algorithm:4 qiskit.aqua.run_algorithm:4
msgid ""
"Using params and algo_input as input data and returning a result "
"dictionary"
msgstr ""

#: of qiskit.aqua.qiskit_aqua.run_algorithm:10 qiskit.aqua.run_algorithm:10
msgid "False for regular python dictionary return, True for json conversion"
msgstr ""

#: of qiskit.aqua.qiskit_aqua.run_algorithm:12 qiskit.aqua.run_algorithm:12
msgid "the experiemental settings to be used in place of backend name"
msgstr ""

#: of qiskit.aqua._logging.get_logging_level:1 qiskit.aqua.get_logging_level:1
#: qiskit.chemistry._logging.get_logging_level:1
#: qiskit.chemistry.get_logging_level:1
msgid "get level for the named logger."
msgstr ""

#: of qiskit.aqua._logging.build_logging_config:1
#: qiskit.aqua.build_logging_config:1
msgid ""
"Creates a the configuration dict of the named loggers using the default "
"SDK configuration provided by `_ALGO_LOGGING_CONFIG`:"
msgstr ""

#: of qiskit.aqua._logging.build_logging_config:4
#: qiskit.aqua.build_logging_config:4
#: qiskit.chemistry._logging.build_logging_config:4
#: qiskit.chemistry.build_logging_config:4
msgid "console logging using a custom format for levels != level parameter."
msgstr ""

#: of qiskit.aqua._logging.build_logging_config:5
#: qiskit.aqua.build_logging_config:5
#: qiskit.chemistry._logging.build_logging_config:5
#: qiskit.chemistry.build_logging_config:5
msgid "console logging with simple format for level parameter."
msgstr ""

#: of qiskit.aqua._logging.build_logging_config:6
#: qiskit.aqua.build_logging_config:6
#: qiskit.chemistry._logging.build_logging_config:6
#: qiskit.chemistry.build_logging_config:6
msgid "set logger level to level parameter."
msgstr ""

#: of qiskit.aqua._logging.build_logging_config:8
#: qiskit.aqua._logging.get_qiskit_aqua_logging:3
#: qiskit.aqua._logging.set_qiskit_aqua_logging:3
#: qiskit.aqua.build_logging_config:8 qiskit.aqua.get_qiskit_aqua_logging:3
#: qiskit.aqua.set_qiskit_aqua_logging:3
#: qiskit.chemistry._logging.build_logging_config:8
#: qiskit.chemistry._logging.get_qiskit_chemistry_logging:3
#: qiskit.chemistry.build_logging_config:8
#: qiskit.chemistry.get_qiskit_chemistry_logging:3
msgid "logging level"
msgstr ""

#: of qiskit.aqua._logging.build_logging_config:10
#: qiskit.aqua._logging.set_qiskit_aqua_logging:5
#: qiskit.aqua.build_logging_config:10 qiskit.aqua.set_qiskit_aqua_logging:5
#: qiskit.chemistry._logging.build_logging_config:10
#: qiskit.chemistry._logging.set_qiskit_chemistry_logging:5
#: qiskit.chemistry.build_logging_config:10
#: qiskit.chemistry.set_qiskit_chemistry_logging:5
msgid "file to receive logging data"
msgstr ""

#: of qiskit.aqua._logging.set_logging_config:1
#: qiskit.aqua.set_logging_config:1
#: qiskit.chemistry._logging.set_logging_config:1
#: qiskit.chemistry.set_logging_config:1
msgid "Update logger configurations using a SDK default one."
msgstr ""

#: of qiskit.aqua._logging.set_logging_config:5
#: qiskit.aqua.set_logging_config:5
#: qiskit.chemistry._logging.set_logging_config:5
#: qiskit.chemistry.set_logging_config:5
msgid ""
"This function modifies the configuration of the standard logging system "
"for the loggers, and might interfere with custom logger configurations."
msgstr ""

#: of qiskit.aqua._logging.get_qiskit_aqua_logging:1
#: qiskit.aqua.get_qiskit_aqua_logging:1
msgid "Returns the current Aqua logging level"
msgstr ""

#: of qiskit.aqua._logging.set_qiskit_aqua_logging:1
#: qiskit.aqua.set_qiskit_aqua_logging:1
msgid "Updates the Aqua logging with the appropriate logging level"
msgstr ""

#: ../../api/qiskit.aqua._credentials_preferences.rst:2
msgid "qiskit.aqua.\\_credentials\\_preferences module"
msgstr ""

#: ../../api/qiskit.aqua._discover.rst:2
msgid "qiskit.aqua.\\_discover module"
msgstr ""

#: of qiskit.aqua._discover:1
msgid "Methods for pluggable objects discovery, registration, information"
msgstr ""

#: of qiskit.aqua._discover.RegisteredPluggable:1
#: qiskit.aqua.translators.ising.tsp.TspData:1
#: qiskit.chemistry.core._discover_chemoperator.RegisteredChemOp:1
#: qiskit.chemistry.drivers._discover_driver.RegisteredDriver:1
#: qiskit.providers.ibmq.credentials.hubgroupproject.HubGroupProject:1
#: qiskit.visualization.matplotlib.Register:1
msgid "ベースクラス: :class:`tuple`"
msgstr ""

#: of qiskit.aqua._discover.RegisteredPluggable.cls:1
#: qiskit.aqua.translators.ising.tsp.TspData.dim:1
#: qiskit.chemistry.core._discover_chemoperator.RegisteredChemOp.cls:1
#: qiskit.chemistry.drivers._discover_driver.RegisteredDriver.cls:1
#: qiskit.providers.ibmq.credentials.hubgroupproject.HubGroupProject.group:1
#: qiskit.visualization.matplotlib.Register.index:1
msgid "Alias for field number 1"
msgstr ""

#: of qiskit.aqua._discover.RegisteredPluggable.configuration:1
#: qiskit.aqua.translators.ising.tsp.TspData.coord:1
#: qiskit.chemistry.core._discover_chemoperator.RegisteredChemOp.configuration:1
#: qiskit.chemistry.drivers._discover_driver.RegisteredDriver.configuration:1
#: qiskit.providers.ibmq.credentials.hubgroupproject.HubGroupProject.project:1
msgid "Alias for field number 2"
msgstr ""

#: of qiskit.aqua._discover.RegisteredPluggable.name:1
#: qiskit.aqua.translators.ising.tsp.TspData.name:1
#: qiskit.chemistry.core._discover_chemoperator.RegisteredChemOp.name:1
#: qiskit.chemistry.drivers._discover_driver.RegisteredDriver.name:1
#: qiskit.providers.ibmq.credentials.hubgroupproject.HubGroupProject.hub:1
#: qiskit.visualization.matplotlib.Register.reg:1
msgid "Alias for field number 0"
msgstr ""

#: ../../api/qiskit.aqua._logging.rst:2
msgid "qiskit.aqua.\\_logging module"
msgstr ""

#: of qiskit.aqua._logging:1 qiskit.chemistry._logging:1 qiskit.tools.logging:1
msgid "Utilities for logging."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.rst:2
msgid "qiskit.aqua.algorithms package"
msgstr ""

#: of qiskit.aqua.algorithms.VQC:1 qiskit.aqua.algorithms.VQE:1
#: qiskit.aqua.algorithms.adaptive.VQC:1 qiskit.aqua.algorithms.adaptive.VQE:1
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC:1
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE:1
msgid "ベースクラス: :class:`qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm`"
msgstr ""

#: of qiskit.aqua.algorithms.VQE:1 qiskit.aqua.algorithms.adaptive.VQE:1
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE:1
msgid "The Variational Quantum Eigensolver algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.VQE:3 qiskit.aqua.algorithms.adaptive.VQE:3
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE:3
msgid "See https://arxiv.org/abs/1304.3061"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:1
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit:1
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit:1
msgid "Generate the circuits."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:3
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit:3
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit:3
msgid "parameters for variational form."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:5
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit:5
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit:5
msgid "backend object."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:7
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit:7
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit:7
msgid ""
"is backend from AerProvider, if True and mode is paulis, single circuit "
"is generated."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.construct_circuit:11
#: qiskit.aqua.algorithms.adaptive.VQE.construct_circuit:11
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.construct_circuit:11
msgid "the generated circuits with Hamiltonian."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.init_params:1
#: qiskit.aqua.algorithms.QPE.init_params:1
#: qiskit.aqua.algorithms.Shor.init_params:1
#: qiskit.aqua.algorithms.VQE.init_params:1
#: qiskit.aqua.algorithms.adaptive.VQE.init_params:1
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.init_params:1
#: qiskit.aqua.algorithms.single_sample.IQPE.init_params:1
#: qiskit.aqua.algorithms.single_sample.QPE.init_params:1
#: qiskit.aqua.algorithms.single_sample.Shor.init_params:1
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.init_params:1
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.init_params:1
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.init_params:1
#: qiskit.aqua.components.neural_networks.QuantumGenerator.init_params:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.init_params:1
msgid "Initialize via parameters dictionary and algorithm input instance."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.init_params:3
#: qiskit.aqua.algorithms.IQPE.init_params:3
#: qiskit.aqua.algorithms.QAOA.init_params:3
#: qiskit.aqua.algorithms.QPE.init_params:3
#: qiskit.aqua.algorithms.Shor.init_params:3
#: qiskit.aqua.algorithms.VQE.init_params:3
#: qiskit.aqua.algorithms.adaptive.QAOA.init_params:3
#: qiskit.aqua.algorithms.adaptive.VQE.init_params:3
#: qiskit.aqua.algorithms.adaptive.qaoa.qaoa.QAOA.init_params:3
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.init_params:3
#: qiskit.aqua.algorithms.single_sample.HHL.init_params:3
#: qiskit.aqua.algorithms.single_sample.IQPE.init_params:3
#: qiskit.aqua.algorithms.single_sample.QPE.init_params:3
#: qiskit.aqua.algorithms.single_sample.Shor.init_params:3
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.init_params:3
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.init_params:3
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.init_params:3
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.init_params:3
#: qiskit.aqua.components.eigs.EigsQPE.init_params:3
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.init_params:3
#: qiskit.aqua.components.neural_networks.QuantumGenerator.init_params:3
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.init_params:3
#: qiskit.chemistry.core.ChemistryOperator.init_params:3
#: qiskit.chemistry.core.Hamiltonian.init_params:3
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.init_params:3
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.init_params:3
msgid "parameters dictionary"
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.init_params:4
#: qiskit.aqua.algorithms.QAOA.init_params:5
#: qiskit.aqua.algorithms.QPE.init_params:4
#: qiskit.aqua.algorithms.VQE.init_params:5
#: qiskit.aqua.algorithms.adaptive.QAOA.init_params:5
#: qiskit.aqua.algorithms.adaptive.VQE.init_params:5
#: qiskit.aqua.algorithms.adaptive.qaoa.qaoa.QAOA.init_params:5
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.init_params:5
#: qiskit.aqua.algorithms.single_sample.IQPE.init_params:4
#: qiskit.aqua.algorithms.single_sample.QPE.init_params:4
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.init_params:4
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.init_params:4
msgid "EnergyInput instance"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.init_params:8
#: qiskit.aqua.algorithms.adaptive.VQE.init_params:8
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.init_params:8
msgid "vqe object"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.print_settings:1
#: qiskit.aqua.algorithms.adaptive.VQE.print_settings:1
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.print_settings:1
msgid "Preparing the setting of VQE into a string."
msgstr ""

#: of qiskit.aqua.algorithms.VQE.print_settings:3
#: qiskit.aqua.algorithms.adaptive.VQE.print_settings:3
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.print_settings:3
msgid "the formatted setting of VQE"
msgstr ""

#: of qiskit.aqua.algorithms.VQE.setting:1
#: qiskit.aqua.algorithms.adaptive.VQE.setting:1
#: qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE.setting:1
msgid "Prepare the setting of VQE as a string."
msgstr ""

#: of qiskit.aqua.algorithms.QAOA:1 qiskit.aqua.algorithms.adaptive.QAOA:1
#: qiskit.aqua.algorithms.adaptive.qaoa.qaoa.QAOA:1
msgid "ベースクラス: :class:`qiskit.aqua.algorithms.adaptive.vqe.vqe.VQE`"
msgstr ""

#: of qiskit.aqua.algorithms.QAOA:1 qiskit.aqua.algorithms.adaptive.QAOA:1
#: qiskit.aqua.algorithms.adaptive.qaoa.qaoa.QAOA:1
msgid "The Quantum Approximate Optimization Algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.QAOA:3 qiskit.aqua.algorithms.adaptive.QAOA:3
#: qiskit.aqua.algorithms.adaptive.qaoa.qaoa.QAOA:3
msgid "See https://arxiv.org/abs/1411.4028"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.init_params:1
#: qiskit.aqua.algorithms.QAOA.init_params:1
#: qiskit.aqua.algorithms.adaptive.QAOA.init_params:1
#: qiskit.aqua.algorithms.adaptive.qaoa.qaoa.QAOA.init_params:1
#: qiskit.aqua.algorithms.single_sample.HHL.init_params:1
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.init_params:1
#: qiskit.aqua.components.eigs.EigsQPE.init_params:1
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.init_params:1
msgid "Initialize via parameters dictionary and algorithm input instance"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:1
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit:1
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:1
msgid "Construct circuit based on data and parameters in variational form."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:3
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit:3
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:3
msgid "1-D array with D dimension"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:5
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit:5
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:5
msgid "list of 1-D array, parameters sets for variational form"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:7
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit:7
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:7
msgid "flag to add measurement"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.construct_circuit:10
#: qiskit.aqua.algorithms.adaptive.VQC.construct_circuit:10
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.construct_circuit:10
msgid "the circuit"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:1
#: qiskit.aqua.algorithms.adaptive.VQC.predict:1
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:1
msgid "Predict the labels for the data."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:3
#: qiskit.aqua.algorithms.adaptive.VQC.predict:3
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:3
msgid "NxD array, N is number of data, D is data dimension"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:9
#: qiskit.aqua.algorithms.QSVM.predict:6 qiskit.aqua.algorithms.QSVM.test:8
#: qiskit.aqua.algorithms.QSVM.train:8 qiskit.aqua.algorithms.VQC.predict:5
#: qiskit.aqua.algorithms.VQC.test:7 qiskit.aqua.algorithms.VQC.train:7
#: qiskit.aqua.algorithms.adaptive.VQC.predict:5
#: qiskit.aqua.algorithms.adaptive.VQC.test:7
#: qiskit.aqua.algorithms.adaptive.VQC.train:7
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:5
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:7
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:7
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix:9
#: qiskit.aqua.algorithms.many_sample.QSVM.predict:6
#: qiskit.aqua.algorithms.many_sample.QSVM.test:8
#: qiskit.aqua.algorithms.many_sample.QSVM.train:8
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix:9
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.predict:6
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test:8
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.train:8
msgid "quantum backend with all setting"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:7 qiskit.aqua.algorithms.VQC.test:9
#: qiskit.aqua.algorithms.VQC.train:9
#: qiskit.aqua.algorithms.adaptive.VQC.predict:7
#: qiskit.aqua.algorithms.adaptive.VQC.test:9
#: qiskit.aqua.algorithms.adaptive.VQC.train:9
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:7
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:9
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:9
msgid "the size of each minibatched accuracy evalutation"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:9 qiskit.aqua.algorithms.VQC.test:11
#: qiskit.aqua.algorithms.adaptive.VQC.predict:9
#: qiskit.aqua.algorithms.adaptive.VQC.test:11
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:9
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:11
msgid "list of parameters to populate in the variational form"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.predict:12
#: qiskit.aqua.algorithms.adaptive.VQC.predict:12
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.predict:12
msgid ""
"for each data point, generates the predicted probability for each class "
"list: for each data point, generates the predicted label (that with the "
"highest prob)"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:1
#: qiskit.aqua.algorithms.adaptive.VQC.test:1
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:1
msgid ""
"Predict the labels for the data, and test against with ground truth "
"labels."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:3
#: qiskit.aqua.algorithms.adaptive.VQC.test:3
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:3
msgid "NxD array, N is number of data and D is data dimension"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:5 qiskit.aqua.algorithms.VQC.train:5
#: qiskit.aqua.algorithms.adaptive.VQC.test:5
#: qiskit.aqua.algorithms.adaptive.VQC.train:5
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:5
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:5
msgid "Nx1 array, N is number of data"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.test:14
#: qiskit.aqua.algorithms.adaptive.VQC.test:14
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.test:14
msgid "classification accuracy"
msgstr ""

#: of qiskit.aqua.algorithms.VQC.train:1
#: qiskit.aqua.algorithms.adaptive.VQC.train:1
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:1
msgid "Train the models, and save results."
msgstr ""

#: of qiskit.aqua.algorithms.VQC.train:3
#: qiskit.aqua.algorithms.adaptive.VQC.train:3
#: qiskit.aqua.algorithms.adaptive.vqc.vqc.VQC.train:3
msgid "NxD array, N is number of data and D is dimension"
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation:1
#: qiskit.aqua.algorithms.BernsteinVazirani:1
#: qiskit.aqua.algorithms.DeutschJozsa:1 qiskit.aqua.algorithms.EOH:1
#: qiskit.aqua.algorithms.ExactEigensolver:1
#: qiskit.aqua.algorithms.ExactLSsolver:1 qiskit.aqua.algorithms.Grover:1
#: qiskit.aqua.algorithms.HHL:1 qiskit.aqua.algorithms.IQPE:1
#: qiskit.aqua.algorithms.QGAN:1 qiskit.aqua.algorithms.QPE:1
#: qiskit.aqua.algorithms.QSVM:1 qiskit.aqua.algorithms.SVM_Classical:1
#: qiskit.aqua.algorithms.Shor:1 qiskit.aqua.algorithms.Simon:1
#: qiskit.aqua.algorithms.adaptive.QGAN:1
#: qiskit.aqua.algorithms.adaptive.VQAlgorithm:1
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN:1
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN:1
#: qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm:1
#: qiskit.aqua.algorithms.classical.ExactEigensolver:1
#: qiskit.aqua.algorithms.classical.ExactLSsolver:1
#: qiskit.aqua.algorithms.classical.SVM_Classical:1
#: qiskit.aqua.algorithms.classical.cplex.cplex_ising.CPLEX_Ising:1
#: qiskit.aqua.algorithms.classical.exact_eigen_solver.exact_eigen_solver.ExactEigensolver:1
#: qiskit.aqua.algorithms.classical.exact_ls_solver.exact_ls_solver.ExactLSsolver:1
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical:1
#: qiskit.aqua.algorithms.many_sample.EOH:1
#: qiskit.aqua.algorithms.many_sample.QSVM:1
#: qiskit.aqua.algorithms.many_sample.eoh.eoh.EOH:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM:1
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation:1
#: qiskit.aqua.algorithms.single_sample.BernsteinVazirani:1
#: qiskit.aqua.algorithms.single_sample.DeutschJozsa:1
#: qiskit.aqua.algorithms.single_sample.Grover:1
#: qiskit.aqua.algorithms.single_sample.HHL:1
#: qiskit.aqua.algorithms.single_sample.IQPE:1
#: qiskit.aqua.algorithms.single_sample.QPE:1
#: qiskit.aqua.algorithms.single_sample.Shor:1
#: qiskit.aqua.algorithms.single_sample.Simon:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation:1
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.BernsteinVazirani:1
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.DeutschJozsa:1
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover:1
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL:1
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE:1
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE:1
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor:1
#: qiskit.aqua.algorithms.single_sample.simon.simon.Simon:1
msgid "ベースクラス: :class:`qiskit.aqua.algorithms.quantum_algorithm.QuantumAlgorithm`"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN:1 qiskit.aqua.algorithms.adaptive.QGAN:1
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN:1
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN:1
msgid "Quantum Generative Adversarial Network."
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.init_params:1
#: qiskit.aqua.algorithms.adaptive.QGAN.init_params:1
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.init_params:1
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.init_params:1
msgid ""
"Initialize qGAN via parameters dictionary and algorithm input instance. "
":param params: parameters dictionary :param algo_input: Input instance"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.init_params:5
#: qiskit.aqua.algorithms.adaptive.QGAN.init_params:5
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.init_params:5
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.init_params:5
msgid "qgan object"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_discriminator:1
#: qiskit.aqua.algorithms.adaptive.QGAN.set_discriminator:1
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_discriminator:1
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_discriminator:1
msgid "Initialize discriminator."
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:1
#: qiskit.aqua.algorithms.adaptive.QGAN.set_generator:1
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_generator:1
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_generator:1
msgid ""
"Initialize generator. :param generator_circuit: VariationalForm, "
"parametrized quantum circuit which sets the structure of the quantum"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:3
#: qiskit.aqua.algorithms.adaptive.QGAN.set_generator:3
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_generator:3
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_generator:3
msgid "generator"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:4
#: qiskit.aqua.algorithms.adaptive.QGAN.set_generator:4
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_generator:4
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_generator:4
msgid "array, initial parameters for the generator circuit"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.set_generator:5
#: qiskit.aqua.algorithms.adaptive.QGAN.set_generator:5
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.set_generator:5
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.set_generator:5
msgid "Optimizer, optimizer to be used for the training of the generator"
msgstr ""

#: of qiskit.aqua.algorithms.QGAN.train:1
#: qiskit.aqua.algorithms.adaptive.QGAN.train:1
#: qiskit.aqua.algorithms.adaptive.qgan.QGAN.train:1
#: qiskit.aqua.algorithms.adaptive.qgan.qgan.QGAN.train:1
msgid "Train the qGAN"
msgstr ""

#: of qiskit.aqua.algorithms.ExactEigensolver:1
#: qiskit.aqua.algorithms.classical.ExactEigensolver:1
#: qiskit.aqua.algorithms.classical.exact_eigen_solver.exact_eigen_solver:1
#: qiskit.aqua.algorithms.classical.exact_eigen_solver.exact_eigen_solver.ExactEigensolver:1
msgid "The Exact Eigensolver algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.EOH.init_params:1
#: qiskit.aqua.algorithms.ExactEigensolver.init_params:1
#: qiskit.aqua.algorithms.classical.ExactEigensolver.init_params:1
#: qiskit.aqua.algorithms.classical.exact_eigen_solver.exact_eigen_solver.ExactEigensolver.init_params:1
#: qiskit.aqua.algorithms.many_sample.EOH.init_params:1
#: qiskit.aqua.algorithms.many_sample.eoh.eoh.EOH.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: EnergyInput instance"
msgstr ""

#: of qiskit.aqua.algorithms.ExactLSsolver:1
#: qiskit.aqua.algorithms.classical.ExactLSsolver:1
#: qiskit.aqua.algorithms.classical.exact_ls_solver.exact_ls_solver:1
#: qiskit.aqua.algorithms.classical.exact_ls_solver.exact_ls_solver.ExactLSsolver:1
msgid "The Exact LinearSystem algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.ExactLSsolver.init_params:1
#: qiskit.aqua.algorithms.classical.ExactLSsolver.init_params:1
#: qiskit.aqua.algorithms.classical.exact_ls_solver.exact_ls_solver.ExactLSsolver.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: LinearSystemInput "
"instance"
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical:1
#: qiskit.aqua.algorithms.classical.SVM_Classical:1
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical:1
msgid ""
"The classical svm interface. Internally, it will run the binary "
"classification or multiclass classification based on how many classes the"
" data have."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.load_model:1
#: qiskit.aqua.algorithms.SVM_Classical.load_model:1
#: qiskit.aqua.algorithms.classical.SVM_Classical.load_model:1
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.load_model:1
#: qiskit.aqua.algorithms.many_sample.QSVM.load_model:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.load_model:1
msgid "Load a model from a file path."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.load_model:3
#: qiskit.aqua.algorithms.SVM_Classical.load_model:3
#: qiskit.aqua.algorithms.classical.SVM_Classical.load_model:3
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.load_model:3
#: qiskit.aqua.algorithms.many_sample.QSVM.load_model:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.load_model:3
msgid "tthe path of the saved model."
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.predict:1
#: qiskit.aqua.algorithms.classical.SVM_Classical.predict:1
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.predict:1
msgid ""
"predict using the svm :param data: NxD array, where N is the number of "
"data,"
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.predict:3
#: qiskit.aqua.algorithms.SVM_Classical.test:3
#: qiskit.aqua.algorithms.SVM_Classical.train:3
#: qiskit.aqua.algorithms.classical.SVM_Classical.predict:3
#: qiskit.aqua.algorithms.classical.SVM_Classical.test:3
#: qiskit.aqua.algorithms.classical.SVM_Classical.train:3
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.predict:3
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.test:3
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.train:3
msgid "D is the feature dimension."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.predict:9
#: qiskit.aqua.algorithms.SVM_Classical.predict:6
#: qiskit.aqua.algorithms.classical.SVM_Classical.predict:6
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.predict:6
#: qiskit.aqua.algorithms.many_sample.QSVM.predict:9
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.predict:9
#: qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.predict:5
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.predict:5
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.predict:5
msgid "predicted labels, Nx1 array"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.save_model:1
#: qiskit.aqua.algorithms.SVM_Classical.save_model:1
#: qiskit.aqua.algorithms.classical.SVM_Classical.save_model:1
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.save_model:1
#: qiskit.aqua.algorithms.many_sample.QSVM.save_model:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.save_model:1
msgid "Save the model to a file path."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.save_model:3
#: qiskit.aqua.algorithms.SVM_Classical.save_model:3
#: qiskit.aqua.algorithms.classical.SVM_Classical.save_model:3
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.save_model:3
#: qiskit.aqua.algorithms.many_sample.QSVM.save_model:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.save_model:3
msgid "a path to save the model."
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.test:1
#: qiskit.aqua.algorithms.classical.SVM_Classical.test:1
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.test:1
msgid "test the svm :param data: NxD array, where N is the number of data,"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.test:6 qiskit.aqua.algorithms.QSVM.train:6
#: qiskit.aqua.algorithms.SVM_Classical.test:5
#: qiskit.aqua.algorithms.SVM_Classical.train:5
#: qiskit.aqua.algorithms.classical.SVM_Classical.test:5
#: qiskit.aqua.algorithms.classical.SVM_Classical.train:5
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.test:5
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.train:5
#: qiskit.aqua.algorithms.many_sample.QSVM.test:6
#: qiskit.aqua.algorithms.many_sample.QSVM.train:6
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test:6
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.train:6
msgid "Nx1 array, where N is the number of data"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.test:11
#: qiskit.aqua.algorithms.SVM_Classical.test:8
#: qiskit.aqua.algorithms.classical.SVM_Classical.test:8
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.test:8
#: qiskit.aqua.algorithms.many_sample.QSVM.test:11
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test:11
#: qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.test:7
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.test:7
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.test:7
msgid "accuracy"
msgstr ""

#: of qiskit.aqua.algorithms.SVM_Classical.train:1
#: qiskit.aqua.algorithms.classical.SVM_Classical.train:1
#: qiskit.aqua.algorithms.classical.svm.svm_classical.SVM_Classical.train:1
msgid "train the svm :param data: NxD array, where N is the number of data,"
msgstr ""

#: of qiskit.aqua.algorithms.EOH:1 qiskit.aqua.algorithms.many_sample.EOH:1
#: qiskit.aqua.algorithms.many_sample.eoh.eoh.EOH:1
msgid "The Quantum EOH (Evolution of Hamiltonian) algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.EOH.construct_circuit:1
#: qiskit.aqua.algorithms.many_sample.EOH.construct_circuit:1
#: qiskit.aqua.algorithms.many_sample.eoh.eoh.EOH.construct_circuit:1
#: qiskit.aqua.components.iqfts.IQFT.construct_circuit:1
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit:1
#: qiskit.aqua.components.qfts.QFT.construct_circuit:1
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit:1
msgid "Construct the circuit."
msgstr ""

#: of qiskit.aqua.algorithms.EOH.construct_circuit:3
#: qiskit.aqua.algorithms.many_sample.EOH.construct_circuit:3
#: qiskit.aqua.algorithms.many_sample.eoh.eoh.EOH.construct_circuit:3
msgid "the circuit."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM:1 qiskit.aqua.algorithms.many_sample.QSVM:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM:1
msgid "Quantum SVM method."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM:3 qiskit.aqua.algorithms.many_sample.QSVM:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM:3
msgid ""
"Internally, it will run the binary classification or multiclass "
"classification based on how many classes the data have."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:1
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_circuit:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_circuit:1
msgid "Generate inner product of x1 and x2 with the given feature map."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:3
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_circuit:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_circuit:3
msgid "The dimension of x1 and x2 must be the same."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:5
#: qiskit.aqua.algorithms.QSVM.construct_circuit:7
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_circuit:5
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_circuit:7
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_circuit:5
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_circuit:7
msgid "data points, 1-D array, dimension is D"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_circuit:9
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_circuit:9
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_circuit:9
msgid "add measurement gates at the end"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:1
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix:1
msgid ""
"Construct kernel matrix, if x2_vec is None, self-innerproduct is "
"conducted."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:3
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix:3
msgid ""
"data points, 2-D array, N1xD, where N1 is the number of data, D is the "
"feature dimension"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:6
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix:6
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix:6
msgid ""
"data points, 2-D array, N2xD, where N2 is the number of data, D is the "
"feature dimension"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.construct_kernel_matrix:12
#: qiskit.aqua.algorithms.many_sample.QSVM.construct_kernel_matrix:12
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.construct_kernel_matrix:12
msgid "2-D matrix, N1xN2"
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.init_params:1
#: qiskit.aqua.algorithms.many_sample.QSVM.init_params:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.init_params:1
msgid "Constructor from params."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.predict:1
#: qiskit.aqua.algorithms.many_sample.QSVM.predict:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.predict:1
msgid "Predict using the svm."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.predict:3 qiskit.aqua.algorithms.QSVM.test:3
#: qiskit.aqua.algorithms.QSVM.train:3
#: qiskit.aqua.algorithms.many_sample.QSVM.predict:3
#: qiskit.aqua.algorithms.many_sample.QSVM.test:3
#: qiskit.aqua.algorithms.many_sample.QSVM.train:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.predict:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test:3
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.train:3
msgid "NxD array, where N is the number of data, D is the feature dimension."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.test:1
#: qiskit.aqua.algorithms.many_sample.QSVM.test:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.test:1
msgid "Test the svm."
msgstr ""

#: of qiskit.aqua.algorithms.QSVM.train:1
#: qiskit.aqua.algorithms.many_sample.QSVM.train:1
#: qiskit.aqua.algorithms.many_sample.qsvm.qsvm.QSVM.train:1
msgid "Train the svm."
msgstr ""

#: of qiskit.aqua.algorithms.Grover:1
#: qiskit.aqua.algorithms.single_sample.Grover:1
#: qiskit.aqua.algorithms.single_sample.grover.grover:1
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover:1
msgid "The Grover's Search algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.Grover:3
#: qiskit.aqua.algorithms.single_sample.Grover:3
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover:3
msgid ""
"If the `num_iterations` param is specified, the amplitude amplification "
"iteration will be built as specified."
msgstr ""

#: of qiskit.aqua.algorithms.Grover:5
#: qiskit.aqua.algorithms.single_sample.Grover:5
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover:5
msgid ""
"If the `incremental` mode is specified, which indicates that the optimal "
"`num_iterations` isn't known in advance, a multi-round schedule will be "
"followed with incremental trial `num_iterations` values. The "
"implementation follows Section 4 of Boyer et al. <https://arxiv.org/abs"
"/quant-ph/9605034>"
msgstr ""

#: of qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit:1
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit:1
#: qiskit.aqua.algorithms.Grover.construct_circuit:1
#: qiskit.aqua.algorithms.Simon.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.BernsteinVazirani.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.DeutschJozsa.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.Grover.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.Simon.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.BernsteinVazirani.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.DeutschJozsa.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.simon.simon.Simon.construct_circuit:1
msgid "Construct the quantum circuit"
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit:3
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit:3
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit:3
#: qiskit.aqua.algorithms.Grover.construct_circuit:3
#: qiskit.aqua.algorithms.IQPE.construct_circuit:9
#: qiskit.aqua.algorithms.QPE.construct_circuit:3
#: qiskit.aqua.algorithms.Shor.construct_circuit:3
#: qiskit.aqua.algorithms.Simon.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.BernsteinVazirani.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.DeutschJozsa.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.Grover.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit:9
#: qiskit.aqua.algorithms.single_sample.QPE.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.Shor.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.Simon.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.BernsteinVazirani.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.DeutschJozsa.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit:9
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.simon.simon.Simon.construct_circuit:3
#: qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:9
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit:9
msgid "Boolean flag to indicate if measurement should be included in the circuit."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit:6
#: qiskit.aqua.algorithms.BernsteinVazirani.construct_circuit:6
#: qiskit.aqua.algorithms.DeutschJozsa.construct_circuit:6
#: qiskit.aqua.algorithms.Grover.construct_circuit:6
#: qiskit.aqua.algorithms.HHL.construct_circuit:7
#: qiskit.aqua.algorithms.Simon.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.BernsteinVazirani.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.DeutschJozsa.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.Grover.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.HHL.construct_circuit:7
#: qiskit.aqua.algorithms.single_sample.Simon.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.BernsteinVazirani.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.DeutschJozsa.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.construct_circuit:7
#: qiskit.aqua.algorithms.single_sample.simon.simon.Simon.construct_circuit:6
#: qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:12
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit:12
#: qiskit.aqua.components.eigs.EigsQPE.construct_circuit:8
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.construct_circuit:8
msgid "the QuantumCircuit object for the constructed circuit"
msgstr ""

#: of qiskit.aqua.algorithms.Grover.init_params:1
#: qiskit.aqua.algorithms.single_sample.Grover.init_params:1
#: qiskit.aqua.algorithms.single_sample.grover.grover.Grover.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: input instance"
msgstr ""

#: of qiskit.aqua.algorithms.IQPE:1 qiskit.aqua.algorithms.single_sample.IQPE:1
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE:1
msgid "The Iterative Quantum Phase Estimation algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE:3 qiskit.aqua.algorithms.single_sample.IQPE:3
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE:3
msgid "See https://arxiv.org/abs/quant-ph/0610214"
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit:1
msgid "Construct the kth iteration Quantum Phase Estimation circuit."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit:3
msgid ""
"For details of parameters, please see Fig. 2 in https://arxiv.org/pdf"
"/quant-ph/0610214.pdf."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:5
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit:5
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit:5
msgid "the iteration idx."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:7
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit:7
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit:7
msgid "the feedback angle."
msgstr ""

#: of qiskit.aqua.algorithms.IQPE.construct_circuit:12
#: qiskit.aqua.algorithms.single_sample.IQPE.construct_circuit:12
#: qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.IQPE.construct_circuit:12
msgid "the quantum circuit per iteration"
msgstr ""

#: of qiskit.aqua.algorithms.QPE:1 qiskit.aqua.algorithms.single_sample.QPE:1
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE:1
msgid "The Quantum Phase Estimation algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.QPE.construct_circuit:1
#: qiskit.aqua.algorithms.Shor.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.QPE.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.Shor.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.construct_circuit:1
#: qiskit.aqua.circuits.CNF.construct_circuit:1
#: qiskit.aqua.circuits.DNF.construct_circuit:1
#: qiskit.aqua.circuits.ESOP.construct_circuit:1
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:1
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:1
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:1
msgid "Construct circuit."
msgstr ""

#: of qiskit.aqua.algorithms.QPE.construct_circuit:6
#: qiskit.aqua.algorithms.Shor.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.QPE.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.Shor.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.qpe.qpe.QPE.construct_circuit:6
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.construct_circuit:6
#: qiskit.aqua.circuits.CNF.construct_circuit:16
#: qiskit.aqua.circuits.DNF.construct_circuit:16
#: qiskit.aqua.circuits.ESOP.construct_circuit:16
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:16
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:16
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:16
msgid "quantum circuit."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation:1
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation:1
msgid "The Amplitude Estimation algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation.construct_circuit:1
msgid "Construct the Amplitude Estimation quantum circuit."
msgstr ""

#: of qiskit.aqua.algorithms.AmplitudeEstimation.init_params:1
#: qiskit.aqua.algorithms.single_sample.AmplitudeEstimation.init_params:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.AmplitudeEstimation.init_params:1
msgid ""
"Initialize via parameters dictionary and algorithm input instance :param "
"params: parameters dictionary :param algo_input: Input instance"
msgstr ""

#: of qiskit.aqua.algorithms.Simon:1
#: qiskit.aqua.algorithms.single_sample.Simon:1
#: qiskit.aqua.algorithms.single_sample.simon.simon.Simon:1
msgid "The Simon algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.DeutschJozsa:1
#: qiskit.aqua.algorithms.single_sample.DeutschJozsa:1
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj:1
#: qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.DeutschJozsa:1
msgid "The Deutsch-Jozsa algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.BernsteinVazirani:1
#: qiskit.aqua.algorithms.single_sample.BernsteinVazirani:1
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv:1
#: qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.BernsteinVazirani:1
msgid "The Bernstein-Vazirani algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.HHL:1 qiskit.aqua.algorithms.single_sample.HHL:1
#: qiskit.aqua.algorithms.single_sample.hhl.hhl:1
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL:1
msgid "The HHL algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.HHL:3 qiskit.aqua.algorithms.single_sample.HHL:3
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL:3
msgid ""
"The quantum circuit for this algorithm is returned by `generate_circuit`."
" Running the algorithm will execute the circuit and return the result "
"vector, measured (real hardware backend) or derived (qasm_simulator) via "
"state tomography or calculated from the statevector "
"(statevector_simulator)."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.HHL.construct_circuit:1
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.construct_circuit:1
msgid "Construct the HHL circuit."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.HHL.construct_circuit:3
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.construct_circuit:3
msgid "indicate whether measurement on ancillary qubit should be performed"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:1
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_hermitian:1
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_hermitian:1
msgid ""
"Expand a non-hermitian matrix A to a hermitian matrix by [[0, A.H], [A, "
"0]] and expand vector b to [b.conj, b]."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:4
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim:5
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_hermitian:4
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_powerdim:5
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_hermitian:4
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_powerdim:5
msgid "the input matrix"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:6
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim:7
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_hermitian:6
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_powerdim:7
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_hermitian:6
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_powerdim:7
msgid "the input vector"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_hermitian:9
#: qiskit.aqua.algorithms.HHL.expand_to_powerdim:10
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_hermitian:9
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_powerdim:10
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_hermitian:9
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_powerdim:10
msgid "the expanded matrix vector (np.array): the expanded vector"
msgstr ""

#: of qiskit.aqua.algorithms.HHL.expand_to_powerdim:1
#: qiskit.aqua.algorithms.single_sample.HHL.expand_to_powerdim:1
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.expand_to_powerdim:1
msgid ""
"Expand a matrix to the next-larger 2**n dimensional matrix with ones on "
"the diagonal and zeros on the off-diagonal and expand the vector with "
"zeros accordingly."
msgstr ""

#: of qiskit.aqua.algorithms.HHL.init_params:4
#: qiskit.aqua.algorithms.single_sample.HHL.init_params:4
#: qiskit.aqua.algorithms.single_sample.hhl.hhl.HHL.init_params:4
msgid "LinearSystemInput instance"
msgstr ""

#: of qiskit.aqua.algorithms.Shor:1 qiskit.aqua.algorithms.single_sample.Shor:1
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor:1
msgid "The Shor's Factoring algorithm."
msgstr ""

#: of qiskit.aqua.algorithms.Shor:3 qiskit.aqua.algorithms.single_sample.Shor:3
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor:3
msgid "Adapted from https://github.com/ttlion/ShorAlgQiskit"
msgstr ""

#: of qiskit.aqua.algorithms.Shor.init_params:4
#: qiskit.aqua.algorithms.single_sample.Shor.init_params:4
#: qiskit.aqua.algorithms.single_sample.shor.shor.Shor.init_params:4
msgid "input instance"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.rst:2
msgid "qiskit.aqua.algorithms.adaptive package"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.VQAlgorithm:1
#: qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm:1
msgid "The Variational Quantum Algorithm Base Class."
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.VQAlgorithm.find_minimum:1
#: qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm.find_minimum:1
msgid "Optimize to find the minimum cost value."
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.VQAlgorithm.find_minimum:3
#: qiskit.aqua.algorithms.adaptive.vq_algorithm.VQAlgorithm.find_minimum:3
msgid "Optimized variational parameters, and corresponding minimum cost value."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.qaoa.rst:2
msgid "qiskit.aqua.algorithms.adaptive.qaoa package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.qaoa.qaoa.rst:2
msgid "qiskit.aqua.algorithms.adaptive.qaoa.qaoa module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.qaoa.var_form.rst:2
msgid "qiskit.aqua.algorithms.adaptive.qaoa.var\\_form module"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.qaoa.var_form.QAOAVarForm:1
msgid "Global X phases and parameterized problem hamiltonian."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.qgan.rst:2
msgid "qiskit.aqua.algorithms.adaptive.qgan package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.qgan.qgan.rst:2
msgid "qiskit.aqua.algorithms.adaptive.qgan.qgan module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.vq_algorithm.rst:2
msgid "qiskit.aqua.algorithms.adaptive.vq\\_algorithm module"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vq_algorithm:1
msgid ""
"The Variational Quantum Algorithm Base Class. This class can be used an "
"interface for working with Variation Quantum Algorithms, such as VQE, "
"QAOA, or VSVM, and also provides helper utilities for implementing new "
"variational algorithms. Writing a new variational algorithm is a simple "
"as extending this class, implementing a cost function for the new "
"algorithm to pass to the optimizer, and running the find_minimum() "
"function below to begin the optimization. Alternatively, all of the "
"functions below can be overridden to opt-out of this infrastructure but "
"still meet the interface requirements."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.vqc.rst:2
msgid "qiskit.aqua.algorithms.adaptive.vqc package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.vqc.vqc.rst:2
msgid "qiskit.aqua.algorithms.adaptive.vqc.vqc module"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:1
msgid ""
"Classes = 2: - If odd number of qubits we use majority vote - If even "
"number of qubits we use parity Classes = 3 - We use part-parity"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:6
msgid "{ex. for 2 qubits: [00], [01,10], [11] would be the three labels}"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:7
msgid "measured key"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.assign_label:9
#: qiskit.aqua.utils.dataset_helper.get_num_classes:6
#: qiskit.aqua.utils.get_num_classes:6
msgid "number of classes"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate:1
msgid ""
"Calculate cross entropy # shots is kept since it may be needed in future."
" :param shots: the number of shots used in quantum computing :type shots:"
" int :param probs: NxK array, N is the number of data and K is the number"
" of class :type probs: numpy.ndarray :param gt_labels: Nx1 array :type "
"gt_labels: numpy.ndarray"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate:10
msgid "cross entropy loss between estimated probs and gt_labels"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:1
msgid "Calculate sigmoid cross entropy"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:3
msgid "the number of shots used in quantum computing"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:5
msgid "NxK array, N is the number of data and K is the number of class"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:7
#: qiskit.aqua.utils.dataset_helper.map_label_to_class_name:3
#: qiskit.aqua.utils.map_label_to_class_name:3 qiskit.aqua.utils.optimize_svm:8
#: qiskit.aqua.utils.qp_solver.optimize_svm:8
msgid "Nx1 array"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.cost_estimate_sigmoid:10
msgid "sigmoid cross entropy loss between estimated probs and gt_labels"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities:1
msgid ""
"Return the probabilities of given measured counts :param counts: N data "
"and each with a dict recording the counts :type counts: [dict] :param "
"num_classes: number of classes :type num_classes: int"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqc.vqc.return_probabilities:7
msgid "NxK array"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.vqe.rst:2
msgid "qiskit.aqua.algorithms.adaptive.vqe package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.adaptive.vqe.vqe.rst:2
msgid "qiskit.aqua.algorithms.adaptive.vqe.vqe module"
msgstr ""

#: of qiskit.aqua.algorithms.adaptive.vqe.vqe:1
msgid ""
"The Variational Quantum Eigensolver algorithm. See "
"https://arxiv.org/abs/1304.3061"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.rst:2
msgid "qiskit.aqua.algorithms.classical package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.cplex.rst:2
msgid "qiskit.aqua.algorithms.classical.cplex package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.cplex.cplex_ising.rst:2
msgid "qiskit.aqua.algorithms.classical.cplex.cplex\\_ising module"
msgstr ""

#: of qiskit.aqua.algorithms.classical.cplex.cplex_ising:1
msgid ""
"CPLEX Ising algorithm; uses IBM CPLEX backend for Ising Hamiltonian "
"solution"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.cplex.simple_cplex.rst:2
msgid "qiskit.aqua.algorithms.classical.cplex.simple\\_cplex module"
msgstr ""

#: of qiskit.aqua.algorithms.classical.cplex.simple_cplex:1
msgid "Simple Python Wrapper for CPLEX"
msgstr ""

#: of
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.variable:1
msgid "variable name"
msgstr ""

#: of
#: qiskit.aqua.algorithms.classical.cplex.simple_cplex.SimpleCPLEX.variable:3
msgid "variable index in CPLEX model"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.exact_eigen_solver.rst:2
msgid "qiskit.aqua.algorithms.classical.exact\\_eigen\\_solver package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.exact_eigen_solver.exact_eigen_solver.rst:2
msgid ""
"qiskit.aqua.algorithms.classical.exact\\_eigen\\_solver.exact\\_eigen\\_solver"
" module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.exact_ls_solver.rst:2
msgid "qiskit.aqua.algorithms.classical.exact\\_ls\\_solver package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.exact_ls_solver.exact_ls_solver.rst:2
msgid ""
"qiskit.aqua.algorithms.classical.exact\\_ls\\_solver.exact\\_ls\\_solver "
"module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.svm.rst:2
msgid "qiskit.aqua.algorithms.classical.svm package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.svm._rbf_svc_estimator.rst:2
msgid "qiskit.aqua.algorithms.classical.svm.\\_rbf\\_svc\\_estimator module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.svm._svm_classical_abc.rst:2
msgid "qiskit.aqua.algorithms.classical.svm.\\_svm\\_classical\\_abc module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.svm._svm_classical_binary.rst:2
msgid "qiskit.aqua.algorithms.classical.svm.\\_svm\\_classical\\_binary module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.svm._svm_classical_multiclass.rst:2
msgid ""
"qiskit.aqua.algorithms.classical.svm.\\_svm\\_classical\\_multiclass "
"module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.classical.svm.svm_classical.rst:2
msgid "qiskit.aqua.algorithms.classical.svm.svm\\_classical module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.eoh.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.eoh package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.eoh.eoh.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.eoh.eoh module"
msgstr ""

#: of qiskit.aqua.algorithms.many_sample.eoh.eoh:1
msgid "The Quantum Dynamics algorithm."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.qsvm.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.qsvm package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.qsvm._qsvm_abc.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.qsvm.\\_qsvm\\_abc module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.qsvm._qsvm_binary.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.qsvm.\\_qsvm\\_binary module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.qsvm._qsvm_estimator.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.qsvm.\\_qsvm\\_estimator module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.qsvm._qsvm_multiclass.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.qsvm.\\_qsvm\\_multiclass module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.many_sample.qsvm.qsvm.rst:2
msgid "qiskit.aqua.algorithms.many\\_sample.qsvm.qsvm module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.quantum_algorithm.rst:2
msgid "qiskit.aqua.algorithms.quantum\\_algorithm module"
msgstr ""

#: of qiskit.aqua.algorithms.quantum_algorithm:1
msgid "This module implements the abstract base class for algorithm modules."
msgstr ""

#: of qiskit.aqua.algorithms.quantum_algorithm:3
msgid ""
"To create add-on algorithm modules subclass the QuantumAlgorithm class in"
" this module. Doing so requires that the required algorithm interface is "
"implemented."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.amplitude_estimation.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.amplitude\\_estimation package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.amplitude\\_estimation.ae module"
msgstr ""

#: of qiskit.aqua.algorithms.single_sample.amplitude_estimation.ae:1
msgid "The Amplitude Estimation Algorithm."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.rst:2
msgid ""
"qiskit.aqua.algorithms.single\\_sample.amplitude\\_estimation.q\\_factory"
" module"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.S0Factory:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.SPsi0Factory:1
#: qiskit.aqua.circuits.FixedValueComparator:1
#: qiskit.aqua.circuits.LinearYRotation:1
#: qiskit.aqua.circuits.PiecewiseLinearYRotation:1
#: qiskit.aqua.circuits.WeightedSumOperator:1
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator:1
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation:1
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation:1
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator:1
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective:1
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective:1
msgid "ベースクラス: :class:`qiskit.aqua.utils.circuit_factory.CircuitFactory`"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.S0Factory.build:1
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.SPsi0Factory.build:1
#: qiskit.aqua.circuits.FixedValueComparator.build:1
#: qiskit.aqua.circuits.LinearYRotation.build:1
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:1
#: qiskit.aqua.circuits.WeightedSumOperator.build:1
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator.build:1
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation.build:1
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.build:1
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator.build:1
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel.build:1
#: qiskit.aqua.components.uncertainty_models.MultivariateDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.UniformDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel.build:1
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.build:1
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.build:1
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta.build:1
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue.build:1
#: qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue.build:1
#: qiskit.aqua.components.uncertainty_problems.MultivariateProblem.build:1
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective.build:1
#: qiskit.aqua.components.uncertainty_problems.UnivariateProblem.build:1
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta.build:1
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue.build:1
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue.build:1
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem.build:1
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective.build:1
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem.build:1
#: qiskit.aqua.utils.CircuitFactory.build:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build:1
msgid "Adds corresponding sub-circuit to given circuit"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build:3
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build_controlled:3
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.S0Factory.build:3
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.SPsi0Factory.build:3
#: qiskit.aqua.circuits.FixedValueComparator.build:3
#: qiskit.aqua.circuits.LinearYRotation.build:3
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:3
#: qiskit.aqua.circuits.WeightedSumOperator.build:3
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator.build:3
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation.build:3
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.build:3
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator.build:3
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel.build:3
#: qiskit.aqua.components.uncertainty_models.MultivariateDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.UniformDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel.build:3
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.build:3
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.build:3
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta.build:3
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue.build:3
#: qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue.build:3
#: qiskit.aqua.components.uncertainty_problems.MultivariateProblem.build:3
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective.build:3
#: qiskit.aqua.components.uncertainty_problems.UnivariateProblem.build:3
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta.build:3
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue.build:3
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue.build:3
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem.build:3
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective.build:3
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem.build:3
#: qiskit.aqua.utils.CircuitFactory.build:3
#: qiskit.aqua.utils.CircuitFactory.build_controlled:3
#: qiskit.aqua.utils.CircuitFactory.build_controlled_inverse:3
#: qiskit.aqua.utils.CircuitFactory.build_inverse:3
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build:3
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled:3
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse:3
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_inverse:3
msgid "quantum circuit"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build:4
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build_controlled:4
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.S0Factory.build:4
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.SPsi0Factory.build:4
#: qiskit.aqua.circuits.FixedValueComparator.build:4
#: qiskit.aqua.circuits.LinearYRotation.build:4
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:4
#: qiskit.aqua.circuits.WeightedSumOperator.build:4
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator.build:4
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation.build:4
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.build:4
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator.build:4
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel.build:4
#: qiskit.aqua.components.uncertainty_models.MultivariateDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.UniformDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel.build:4
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.build:4
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.build:4
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta.build:4
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue.build:4
#: qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue.build:4
#: qiskit.aqua.components.uncertainty_problems.MultivariateProblem.build:4
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective.build:4
#: qiskit.aqua.components.uncertainty_problems.UnivariateProblem.build:4
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta.build:4
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue.build:4
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue.build:4
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem.build:4
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective.build:4
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem.build:4
#: qiskit.aqua.utils.CircuitFactory.build:4
#: qiskit.aqua.utils.CircuitFactory.build_controlled:4
#: qiskit.aqua.utils.CircuitFactory.build_controlled_inverse:4
#: qiskit.aqua.utils.CircuitFactory.build_inverse:4
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build:4
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled:4
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse:4
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_inverse:4
msgid "list of qubits (has to be same length as self._num_qubits)"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build:5
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build_controlled:6
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.S0Factory.build:5
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.SPsi0Factory.build:5
#: qiskit.aqua.circuits.FixedValueComparator.build:5
#: qiskit.aqua.circuits.LinearYRotation.build:5
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:5
#: qiskit.aqua.circuits.WeightedSumOperator.build:5
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator.build:5
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation.build:5
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.build:5
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator.build:5
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel.build:5
#: qiskit.aqua.components.uncertainty_models.MultivariateDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.UniformDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel.build:5
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.build:5
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.build:5
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta.build:5
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue.build:5
#: qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue.build:5
#: qiskit.aqua.components.uncertainty_problems.MultivariateProblem.build:5
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective.build:5
#: qiskit.aqua.components.uncertainty_problems.UnivariateProblem.build:5
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta.build:5
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue.build:5
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue.build:5
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem.build:5
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective.build:5
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem.build:5
#: qiskit.aqua.utils.CircuitFactory.build:5
#: qiskit.aqua.utils.CircuitFactory.build_controlled:6
#: qiskit.aqua.utils.CircuitFactory.build_controlled_inverse:6
#: qiskit.aqua.utils.CircuitFactory.build_inverse:5
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build:5
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled:6
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse:6
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_inverse:5
msgid "list of ancilla qubits (or None if none needed)"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build:6
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.S0Factory.build:6
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.SPsi0Factory.build:6
#: qiskit.aqua.circuits.FixedValueComparator.build:6
#: qiskit.aqua.circuits.LinearYRotation.build:6
#: qiskit.aqua.circuits.PiecewiseLinearYRotation.build:6
#: qiskit.aqua.circuits.WeightedSumOperator.build:6
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator.build:6
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation.build:6
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.build:6
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator.build:6
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel.build:6
#: qiskit.aqua.components.uncertainty_models.MultivariateDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.UniformDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel.build:6
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.build:6
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.build:6
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta.build:6
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue.build:6
#: qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue.build:6
#: qiskit.aqua.components.uncertainty_problems.MultivariateProblem.build:6
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective.build:6
#: qiskit.aqua.components.uncertainty_problems.UnivariateProblem.build:6
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta.build:6
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue.build:6
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue.build:6
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem.build:6
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective.build:6
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem.build:6
#: qiskit.aqua.utils.CircuitFactory.build:6
#: qiskit.aqua.utils.CircuitFactory.build_inverse:6
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build:6
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_inverse:6
msgid "parameters for circuit"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build_controlled:1
#: qiskit.aqua.utils.CircuitFactory.build_controlled:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled:1
msgid "Adds corresponding controlled sub-circuit to given circuit"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build_controlled:5
#: qiskit.aqua.utils.CircuitFactory.build_controlled:5
#: qiskit.aqua.utils.CircuitFactory.build_controlled_inverse:5
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled:5
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse:5
msgid "control qubit"
msgstr ""

#: of
#: qiskit.aqua.algorithms.single_sample.amplitude_estimation.q_factory.QFactory.build_controlled:7
#: qiskit.aqua.utils.CircuitFactory.build_controlled:7
#: qiskit.aqua.utils.CircuitFactory.build_controlled_inverse:7
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled:7
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse:7
msgid "use basis gates for expansion of controlled circuit"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_0_reflection.rst:2
msgid ""
"qiskit.aqua.algorithms.single\\_sample.amplitude\\_estimation.s\\_0\\_reflection"
" module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.amplitude_estimation.s_psi_0_reflection.rst:2
msgid ""
"qiskit.aqua.algorithms.single\\_sample.amplitude\\_estimation.s\\_psi\\_0\\_reflection"
" module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.bernstein_vazirani.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.bernstein\\_vazirani package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.bernstein_vazirani.bv.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.bernstein\\_vazirani.bv module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.deutsch_jozsa.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.deutsch\\_jozsa package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.deutsch_jozsa.dj.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.deutsch\\_jozsa.dj module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.grover.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.grover package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.grover.grover.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.grover.grover module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.hhl.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.hhl package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.hhl.hhl.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.hhl.hhl module"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.iterative_qpe.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.iterative\\_qpe package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.iterative\\_qpe.iqpe module"
msgstr ""

#: of qiskit.aqua.algorithms.single_sample.iterative_qpe.iqpe:1
msgid ""
"The Iterative Quantum Phase Estimation Algorithm. See "
"https://arxiv.org/abs/quant-ph/0610214"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.qpe.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.qpe package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.qpe.qpe.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.qpe.qpe module"
msgstr ""

#: of qiskit.aqua.algorithms.single_sample.qpe.qpe:1
msgid "The Quantum Phase Estimation Algorithm."
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.shor.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.shor package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.shor.shor.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.shor.shor module"
msgstr ""

#: of qiskit.aqua.algorithms.single_sample.shor.shor:1
msgid ""
"The Shor's Factoring algorithm.  This implementation is based on the "
"following paper: Stephane Beauregard, \"Circuit for Shor's algorithm "
"using 2n+3 qubits\", Quantum Information and Computation, Vol. 3, No. 2 "
"(2003) pp. 175-185"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.simon.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.simon package"
msgstr ""

#: ../../api/qiskit.aqua.algorithms.single_sample.simon.simon.rst:2
msgid "qiskit.aqua.algorithms.single\\_sample.simon.simon module"
msgstr ""

#: of qiskit.aqua.algorithms.single_sample.simon.simon:1
msgid "Simon's algorithm."
msgstr ""

#: ../../api/qiskit.aqua.aqua_error.rst:2
msgid "qiskit.aqua.aqua\\_error module"
msgstr ""

#: of qiskit.aqua.aqua_error:1
msgid "Exception for errors raised by Aqua."
msgstr ""

#: ../../api/qiskit.aqua.circuits.rst:2
msgid "qiskit.aqua.circuits package"
msgstr ""

#: of qiskit.aqua.circuits.CNF:1 qiskit.aqua.circuits.DNF:1
#: qiskit.aqua.circuits.ESOP:1
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF:1
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF:1
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.circuits.boolean_logical_circuits.BooleanLogicNormalForm`"
msgstr ""

#: of qiskit.aqua.circuits.CNF:1
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF:1
msgid "Class for constructing circuits for Conjunctive Normal Forms"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:3
#: qiskit.aqua.circuits.DNF.construct_circuit:3
#: qiskit.aqua.circuits.ESOP.construct_circuit:3
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:3
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:3
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:3
msgid "The optional circuit to extend from"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:5
#: qiskit.aqua.circuits.DNF.construct_circuit:5
#: qiskit.aqua.circuits.ESOP.construct_circuit:5
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:5
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:5
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:5
msgid "The optional quantum register to use for problem variables"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:7
#: qiskit.aqua.circuits.DNF.construct_circuit:7
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:7
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:7
msgid "The optional quantum register to use for problem clauses"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:9
#: qiskit.aqua.circuits.DNF.construct_circuit:9
#: qiskit.aqua.circuits.ESOP.construct_circuit:7
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:9
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:9
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:7
msgid "The optional quantum register to use for holding the output"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:11
#: qiskit.aqua.circuits.DNF.construct_circuit:11
#: qiskit.aqua.circuits.ESOP.construct_circuit:11
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:11
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:11
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:11
msgid "The optional quantum register to use as ancilla"
msgstr ""

#: of qiskit.aqua.circuits.CNF.construct_circuit:13
#: qiskit.aqua.circuits.DNF.construct_circuit:13
#: qiskit.aqua.circuits.ESOP.construct_circuit:13
#: qiskit.aqua.circuits.boolean_logical_circuits.CNF.construct_circuit:13
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF.construct_circuit:13
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:13
msgid "The mode to use for building Multiple-Control Toffoli"
msgstr ""

#: of qiskit.aqua.circuits.DNF:1
#: qiskit.aqua.circuits.boolean_logical_circuits.DNF:1
msgid "Class for constructing circuits for Disjunctive Normal Forms"
msgstr ""

#: of qiskit.aqua.circuits.ESOP:1
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP:1
msgid "Class for constructing circuits for Exclusive Sum of Products"
msgstr ""

#: of qiskit.aqua.circuits.ESOP.construct_circuit:9
#: qiskit.aqua.circuits.boolean_logical_circuits.ESOP.construct_circuit:9
msgid "The index of the output register to write to"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:1
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit:1
msgid "Construct the Phase Estimation circuit"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:3
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit:3
msgid "the optional register to use for the quantum state"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:5
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit:5
msgid "the optional register to use for the ancillary measurement qubits"
msgstr ""

#: of qiskit.aqua.circuits.PhaseEstimationCircuit.construct_circuit:7
#: qiskit.aqua.circuits.phase_estimation_circuit.PhaseEstimationCircuit.construct_circuit:7
msgid "an optional auxiliary quantum register"
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:1
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:1
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit:1
#: qiskit.aqua.circuits.statevector_circuit.StateVectorCircuit.construct_circuit:1
msgid "Construct the circuit representing the desired state vector."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:3
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:3
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit:3
#: qiskit.aqua.circuits.statevector_circuit.StateVectorCircuit.construct_circuit:3
msgid "The optional circuit to extend from."
msgstr ""

#: of qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:5
#: qiskit.aqua.circuits.statevector_circuit.StateVectorCircuit.construct_circuit:5
msgid "The optional register to construct the circuit with."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:15
#: qiskit.aqua.circuits.StateVectorCircuit.construct_circuit:8
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit:15
#: qiskit.aqua.circuits.statevector_circuit.StateVectorCircuit.construct_circuit:8
msgid "QuantumCircuit."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:5
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit:5
msgid "The optional qubits to construct the circuit with."
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:7
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit:7
msgid "degree of approximation for the desired circuit"
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:9
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit:9
msgid "Boolean flag to indicate Inverse Quantum Fourier Transform"
msgstr ""

#: of qiskit.aqua.circuits.FourierTransformCircuits.construct_circuit:11
#: qiskit.aqua.circuits.fourier_transform_circuits.FourierTransformCircuits.construct_circuit:11
msgid ""
"Boolean flag to specify if swaps should be included to align the qubit "
"order of input and output. The output qubits would be in reversed order "
"without the swaps."
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:1
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator:1
msgid "Fixed Value Comparator."
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:3
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator:3
msgid ""
"Operator compares basis states |i>_n against a classically given fixed "
"value L and flips a target qubit if i >= L (or < depending on "
"parameters):"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:5
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator:5
msgid "|i>_n|0> --> |i>_n|1> if i >= L else |i>|0>"
msgstr ""

#: of qiskit.aqua.circuits.FixedValueComparator:7
#: qiskit.aqua.circuits.fixed_value_comparator.FixedValueComparator:7
msgid ""
"Operator is based on two's complement implementation of binary "
"subtraction but only uses carry bits and no actual result bits. If the "
"most significant carry bit (= results bit) is 1, the \"\">=\" condition "
"is True otherwise it is False."
msgstr ""

#: of qiskit.aqua.circuits.LinearYRotation:1
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation:1
msgid ""
"Linearly-controlled Y rotation. For a register of state qubits |x> and a "
"target qubit |0> this operator acts as:"
msgstr ""

#: of qiskit.aqua.circuits.LinearYRotation:4
#: qiskit.aqua.circuits.linear_y_rotation.LinearYRotation:4
msgid "|x>|0> --> |x>( cos(slope * x + offset)|0> + sin(slope * x + offset)|1> )"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:1
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation:1
msgid ""
"Piecewise-linearly-controlled Y rotation. For a piecewise linear (not "
"necessarily continuous) function f(x), a state qubit register |x> and a "
"target qubit |0>, this operator acts as"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:4
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation:4
msgid "|x>|0> --> |x> ( cos( f(x) )|0> + sin( f(x) )|1> )"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:6
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation:6
msgid ""
"The function f(x) is defined through breakpoints, slopes and offsets as "
"follows. Suppose the breakpoints { x_0, ..., x_J } are a subset of [0,  "
"2^n-1], where n is the number of state qubits. Further on, denote the "
"corresponding slopes and offsets by a_j, b_j respectively. Then f(x) is "
"defined as:"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:11
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation:11
msgid ""
"x < x_0            --> f(x) = 0 x_j <= x < x_{j+1} --> f(x) = a_j * (x - "
"x_j) + b_j"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation:14
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation:14
msgid "where we implicitly assume x_{J+1} = 2^n."
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation.evaluate:1
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.evaluate:1
msgid ""
"Classically evaluate the piecewise linear rotation :param x: value to be "
"evaluated at :type x: float"
msgstr ""

#: of qiskit.aqua.circuits.PiecewiseLinearYRotation.evaluate:5
#: qiskit.aqua.circuits.piecewise_linear_y_rotation.PiecewiseLinearYRotation.evaluate:5
msgid "Returns: value of piecewise linear function at x"
msgstr ""

#: of qiskit.aqua.circuits.WeightedSumOperator:1
#: qiskit.aqua.circuits.weighted_sum_operator.WeightedSumOperator:1
msgid "Adds q^T * w to separate register for non-negative integer weights w"
msgstr ""

#: ../../api/qiskit.aqua.circuits.boolean_logical_circuits.rst:2
msgid "qiskit.aqua.circuits.boolean\\_logical\\_circuits module"
msgstr ""

#: of qiskit.aqua.circuits.boolean_logical_circuits:1
msgid "Boolean Logical DNF, CNF, and ESOP Circuits."
msgstr ""

#: ../../api/qiskit.aqua.circuits.fixed_value_comparator.rst:2
msgid "qiskit.aqua.circuits.fixed\\_value\\_comparator module"
msgstr ""

#: ../../api/qiskit.aqua.circuits.fourier_transform_circuits.rst:2
msgid "qiskit.aqua.circuits.fourier\\_transform\\_circuits module"
msgstr ""

#: of qiskit.aqua.circuits.fourier_transform_circuits:1
msgid "Quantum Fourier Transform Circuit."
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.rst:2
msgid "qiskit.aqua.circuits.gates package"
msgstr ""

#: of qiskit.aqua.circuits.gates.mcu1:1
#: qiskit.aqua.circuits.gates.multi_control_u1_gate.mcu1:1
msgid ""
"Apply Multiple-Controlled U1 gate :param theta: angle theta :param "
"control_qubits: The list of control qubits :param target_qubit: The "
"target qubit"
msgstr ""

#: of qiskit.aqua.circuits.gates.mcu3:1
#: qiskit.aqua.circuits.gates.multi_control_u3_gate.mcu3:1
msgid ""
"Apply Multiple-Controlled U3 gate :param theta: angle theta :param phi: "
"angle phi :param lam: angle lambda :param control_qubits: The list of "
"control qubits :param target_qubit: The target qubit"
msgstr ""

#: of qiskit.aqua.circuits.gates.mct:1
#: qiskit.aqua.circuits.gates.multi_control_toffoli_gate.mct:1
msgid ""
"Apply Multiple-Control Toffoli operation :param q_controls: The list of "
"control qubits :param q_target: The target qubit :param q_ancilla: The "
"list of ancillary qubits :param mode: The implementation mode to use "
":type mode: string"
msgstr ""

#: of qiskit.aqua.circuits.gates.mcmt:1
#: qiskit.aqua.circuits.gates.multi_control_multi_target_gate.mcmt:1
msgid ""
"Apply a Multi-Control, Multi-Target using a generic gate. It can also be "
"used to implement a generic Multi-Control gate, as the target could also "
"be of length 1. :param q_controls: The list of control qubits :param "
"q_ancillae: The list of ancillary qubits :param single_control_gate_fun: "
"The single control gate function (e.g QuantumCircuit.cz or "
"QuantumCircuit.ch) :param q_targets: A list of qubits or a "
"QuantumRegister to which the gate function should be applied. :param "
"mode: The implementation mode to use (at the moment, only the basic mode "
"is supported) :type mode: string"
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and:1
#: qiskit.aqua.circuits.gates.logical_and:1
msgid "Build a collective conjunction (AND) circuit in place using mct."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and:3
#: qiskit.aqua.circuits.gates.logical_and:3
msgid "The QuantumCircuit object to build the conjunction on."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and:5
#: qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or:5
#: qiskit.aqua.circuits.gates.logical_and:5
#: qiskit.aqua.circuits.gates.logical_or:5
msgid "The QuantumRegister holding the variable qubits."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and:7
#: qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or:7
#: qiskit.aqua.circuits.gates.logical_and:7
#: qiskit.aqua.circuits.gates.logical_or:7
msgid "A list of +1/-1/0 to mark negations or omissions of qubits."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and:9
#: qiskit.aqua.circuits.gates.logical_and:9
msgid "The target qubit to hold the conjunction result."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and:11
#: qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or:11
#: qiskit.aqua.circuits.gates.logical_and:11
#: qiskit.aqua.circuits.gates.logical_or:11
msgid "The ancillary QuantumRegister for building the mct."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_and:13
#: qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or:13
#: qiskit.aqua.circuits.gates.logical_and:13
#: qiskit.aqua.circuits.gates.logical_or:13
msgid "The mct building mode."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or:1
#: qiskit.aqua.circuits.gates.logical_or:1
msgid "Build a collective disjunction (OR) circuit in place using mct."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or:3
#: qiskit.aqua.circuits.gates.logical_or:3
msgid "The QuantumCircuit object to build the disjunction on."
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates.logical_or:9
#: qiskit.aqua.circuits.gates.logical_or:9
msgid "The target qubit to hold the disjunction result."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.aqua.circuits.gates.ch:1
#: qiskit.aqua.circuits.gates.controlled_hadamard_gate.ch:1
#: qiskit.circuit.QuantumCircuit.ch:1
msgid "Apply Controlled-Hadamard (ch) Gate."
msgstr ""

#: of qiskit.aqua.circuits.gates.ch:3
#: qiskit.aqua.circuits.gates.controlled_hadamard_gate.ch:3
#: qiskit.circuit.QuantumCircuit.ch:3
msgid ""
"Note that this implementation of the ch uses a single cx gate, which is "
"more efficient than what's currently provided in Terra."
msgstr ""

#: of qiskit.aqua.circuits.gates.ch:6
#: qiskit.aqua.circuits.gates.controlled_hadamard_gate.ch:6
#: qiskit.aqua.circuits.gates.controlled_ry_gates.cry:3
#: qiskit.aqua.circuits.gates.controlled_ry_gates.mcry:3
#: qiskit.aqua.circuits.gates.cry:3 qiskit.aqua.circuits.gates.mcry:3
#: qiskit.circuit.QuantumCircuit.ch:6
msgid "The circuit to apply the ch gate on."
msgstr ""

#: of qiskit.aqua.circuits.gates.ch:8
#: qiskit.aqua.circuits.gates.controlled_hadamard_gate.ch:8
#: qiskit.aqua.circuits.gates.controlled_ry_gates.cry:7
#: qiskit.aqua.circuits.gates.cry:7 qiskit.circuit.QuantumCircuit.ch:8
msgid "The control qubit."
msgstr ""

#: of qiskit.aqua.circuits.gates.ch:10
#: qiskit.aqua.circuits.gates.controlled_hadamard_gate.ch:10
#: qiskit.aqua.circuits.gates.controlled_ry_gates.cry:9
#: qiskit.aqua.circuits.gates.controlled_ry_gates.mcry:9
#: qiskit.aqua.circuits.gates.cry:9 qiskit.aqua.circuits.gates.mcry:9
#: qiskit.circuit.QuantumCircuit.ch:10
msgid "The target qubit."
msgstr ""

#: of qiskit.aqua.circuits.gates.controlled_ry_gates.cry:1
#: qiskit.aqua.circuits.gates.cry:1
msgid "Apply Controlled-RY (cry) Gate."
msgstr ""

#: of qiskit.aqua.circuits.gates.controlled_ry_gates.cry:5
#: qiskit.aqua.circuits.gates.controlled_ry_gates.mcry:5
#: qiskit.aqua.circuits.gates.cry:5 qiskit.aqua.circuits.gates.mcry:5
msgid "The rotation angle."
msgstr ""

#: of qiskit.aqua.circuits.gates.controlled_ry_gates.mcry:1
#: qiskit.aqua.circuits.gates.mcry:1
msgid "Apply Multiple-Control RY (mcry) Gate."
msgstr ""

#: of qiskit.aqua.circuits.gates.controlled_ry_gates.mcry:7
#: qiskit.aqua.circuits.gates.mcry:7
msgid "The control qubits."
msgstr ""

#: of qiskit.aqua.circuits.gates.controlled_ry_gates.mcry:11
#: qiskit.aqua.circuits.gates.mcry:11
msgid "The ancillary qubits."
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.boolean_logical_gates.rst:2
msgid "qiskit.aqua.circuits.gates.boolean\\_logical\\_gates module"
msgstr ""

#: of qiskit.aqua.circuits.gates.boolean_logical_gates:1
msgid "The Boolean Logical AND and OR Gates."
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.controlled_hadamard_gate.rst:2
msgid "qiskit.aqua.circuits.gates.controlled\\_hadamard\\_gate module"
msgstr ""

#: of qiskit.aqua.circuits.gates.controlled_hadamard_gate:1
msgid "Controlled-Hadamard (ch) Gate."
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.controlled_ry_gates.rst:2
msgid "qiskit.aqua.circuits.gates.controlled\\_ry\\_gates module"
msgstr ""

#: of qiskit.aqua.circuits.gates.controlled_ry_gates:1
msgid "Controlled-RY (cry) and Multiple-Control RY (mcry) Gates"
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.multi_control_multi_target_gate.rst:2
msgid "qiskit.aqua.circuits.gates.multi\\_control\\_multi\\_target\\_gate module"
msgstr ""

#: of qiskit.aqua.circuits.gates.multi_control_multi_target_gate:1
msgid "Multiple-Control, Multiple-Target Gate."
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.multi_control_toffoli_gate.rst:2
msgid "qiskit.aqua.circuits.gates.multi\\_control\\_toffoli\\_gate module"
msgstr ""

#: of qiskit.aqua.circuits.gates.multi_control_toffoli_gate:1
msgid "Multiple-Control Toffoli Gate."
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.multi_control_u1_gate.rst:2
msgid "qiskit.aqua.circuits.gates.multi\\_control\\_u1\\_gate module"
msgstr ""

#: of qiskit.aqua.circuits.gates.multi_control_u1_gate:1
msgid "Multiple-Control U1 gate. Not using ancillary qubits."
msgstr ""

#: ../../api/qiskit.aqua.circuits.gates.multi_control_u3_gate.rst:2
msgid "qiskit.aqua.circuits.gates.multi\\_control\\_u3\\_gate module"
msgstr ""

#: of qiskit.aqua.circuits.gates.multi_control_u3_gate:1
msgid "Multiple-Control U3 gate. Not using ancillary qubits."
msgstr ""

#: ../../api/qiskit.aqua.circuits.linear_y_rotation.rst:2
msgid "qiskit.aqua.circuits.linear\\_y\\_rotation module"
msgstr ""

#: ../../api/qiskit.aqua.circuits.phase_estimation_circuit.rst:2
msgid "qiskit.aqua.circuits.phase\\_estimation\\_circuit module"
msgstr ""

#: of qiskit.aqua.circuits.phase_estimation_circuit:1
msgid "Quantum Phase Estimation Circuit."
msgstr ""

#: ../../api/qiskit.aqua.circuits.piecewise_linear_y_rotation.rst:2
msgid "qiskit.aqua.circuits.piecewise\\_linear\\_y\\_rotation module"
msgstr ""

#: ../../api/qiskit.aqua.circuits.statevector_circuit.rst:2
msgid "qiskit.aqua.circuits.statevector\\_circuit module"
msgstr ""

#: of qiskit.aqua.circuits.statevector_circuit:1
msgid "Arbitrary State-Vector Circuit."
msgstr ""

#: ../../api/qiskit.aqua.circuits.weighted_sum_operator.rst:2
msgid "qiskit.aqua.circuits.weighted\\_sum\\_operator module"
msgstr ""

#: ../../api/qiskit.aqua.components.rst:2
msgid "qiskit.aqua.components package"
msgstr ""

#: ../../api/qiskit.aqua.components.eigs.rst:2
msgid "qiskit.aqua.components.eigs package"
msgstr ""

#: of qiskit.aqua.components.eigs.EigsQPE:1
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE:1
msgid "ベースクラス: :class:`qiskit.aqua.components.eigs.eigs.Eigenvalues`"
msgstr ""

#: of qiskit.aqua.components.eigs.EigsQPE:1
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE:1
msgid ""
"This class embeds a PhaseEstimationCircuit for getting the eigenvalues of"
" a matrix."
msgstr ""

#: of qiskit.aqua.components.eigs.EigsQPE:3
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE:3
msgid ""
"Specifically, this class is based on PhaseEstimationCircuit with no "
"measurements and additional handling of negative eigenvalues, e.g. for "
"HHL. It uses many parameters known from plain QPE. It depends on QFT and "
"IQFT."
msgstr ""

#: of qiskit.aqua.components.eigs.EigsQPE.construct_circuit:1
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.construct_circuit:1
msgid "Construct the eigenvalues estimation using the PhaseEstimationCircuit"
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_inverse:3
#: qiskit.aqua.components.eigs.EigsQPE.construct_circuit:3
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_inverse:3
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.construct_circuit:3
#: qiskit.aqua.components.reciprocals.LongDivision.construct_circuit:3
#: qiskit.aqua.components.reciprocals.LookupRotation.construct_circuit:3
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.construct_circuit:3
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.construct_circuit:3
msgid "consctruction mode, 'matrix' not supported"
msgstr ""

#: of qiskit.aqua.components.eigs.EigsQPE.construct_circuit:5
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.construct_circuit:5
msgid "the register to use for the quantum state"
msgstr ""

#: of qiskit.aqua.components.eigs.EigsQPE.init_params:4
#: qiskit.aqua.components.eigs.eigs_qpe.EigsQPE.init_params:4
msgid "two dimensional array which represents the operator"
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues:1
#: qiskit.aqua.components.eigs.eigs.Eigenvalues:1
msgid "Base class for eigenvalue estimation."
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues:6
#: qiskit.aqua.components.eigs.eigs.Eigenvalues:6
#: qiskit.aqua.components.feature_maps.FeatureMap:7
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap:7
#: qiskit.aqua.components.initial_states.InitialState:7
#: qiskit.aqua.components.initial_states.initial_state.InitialState:7
#: qiskit.aqua.components.iqfts.IQFT:7 qiskit.aqua.components.iqfts.iqft.IQFT:7
#: qiskit.aqua.components.multiclass_extensions.MulticlassExtension:6
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension:6
#: qiskit.aqua.components.neural_networks.GenerativeNetwork:7
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork:7
#: qiskit.aqua.components.oracles.Oracle:7
#: qiskit.aqua.components.oracles.oracle.Oracle:7
#: qiskit.aqua.components.qfts.QFT:7 qiskit.aqua.components.qfts.qft.QFT:7
#: qiskit.aqua.components.reciprocals.Reciprocal:6
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal:6
#: qiskit.aqua.components.variational_forms.VariationalForm:7
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm:7
msgid "configuration dictionary"
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_circuit:1
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_circuit:1
msgid "Construct the eigenvalue estimation quantum circuit."
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_circuit:3
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_circuit:3
#: qiskit.aqua.components.iqfts.IQFT.construct_circuit:3
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit:3
#: qiskit.aqua.components.qfts.QFT.construct_circuit:3
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit:3
#: qiskit.aqua.components.reciprocals.Reciprocal.construct_circuit:3
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.construct_circuit:3
msgid "'matrix' or 'circuit'"
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_circuit:5
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_circuit:5
msgid "register for circuit construction where eigenvalues will be stored."
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_circuit:9
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_circuit:9
msgid "QuantumCircuit object for the eigenvalue estimation circuit."
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_inverse:1
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_inverse:1
msgid "Construct the inverse eigenvalue estimation quantum circuit."
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_inverse:5
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_inverse:5
msgid "the quantum circuit to invert"
msgstr ""

#: of qiskit.aqua.components.eigs.Eigenvalues.construct_inverse:8
#: qiskit.aqua.components.eigs.eigs.Eigenvalues.construct_inverse:8
msgid "QuantumCircuit object for of the inverted eigenvalue estimation circuit."
msgstr ""

#: ../../api/qiskit.aqua.components.eigs.eigs.rst:2
msgid "qiskit.aqua.components.eigs.eigs module"
msgstr ""

#: of qiskit.aqua.components.eigs.eigs:1
msgid ""
"This module contains the definition of a base class for eigenvalue "
"estimators."
msgstr ""

#: ../../api/qiskit.aqua.components.eigs.eigs_qpe.rst:2
msgid "qiskit.aqua.components.eigs.eigs\\_qpe module"
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.rst:2
msgid "qiskit.aqua.components.feature\\_maps package"
msgstr ""

#: of qiskit.aqua.components.feature_maps.FeatureMap:1
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap:1
msgid "Base class for FeatureMap."
msgstr ""

#: of qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit:1
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit:1
#: qiskit.aqua.components.variational_forms.RY.construct_circuit:1
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit:1
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit:1
#: qiskit.aqua.components.variational_forms.VariationalForm.construct_circuit:1
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit:1
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit:1
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit:1
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.construct_circuit:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit:1
msgid "Construct the variational form, given its parameters."
msgstr ""

#: of qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit:3
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit:3
msgid "1-D array, data"
msgstr ""

#: of qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit:5
#: qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit:5
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit:5
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit:5
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector.construct_circuit:5
msgid ""
"the QuantumRegister object for the circuit, if None, generate new "
"registers with name q."
msgstr ""

#: of qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit:8
#: qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit:8
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit:8
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit:8
msgid "whether or not inverse the circuit"
msgstr ""

#: of qiskit.aqua.components.feature_maps.FeatureMap.construct_circuit:11
#: qiskit.aqua.components.feature_maps.feature_map.FeatureMap.construct_circuit:11
msgid "a quantum circuit."
msgstr ""

#: of qiskit.aqua.components.feature_maps.data_mapping.self_product:1
#: qiskit.aqua.components.feature_maps.self_product:1
msgid "Define a function map from R^n to R."
msgstr ""

#: of qiskit.aqua.components.feature_maps.data_mapping.self_product:3
#: qiskit.aqua.components.feature_maps.self_product:3
msgid "data"
msgstr ""

#: of qiskit.aqua.components.feature_maps.data_mapping.self_product:6
#: qiskit.aqua.components.feature_maps.self_product:6
msgid "the mapped value"
msgstr ""

#: of qiskit.aqua.components.feature_maps.PauliExpansion:1
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion:1
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.feature_maps.feature_map.FeatureMap`"
msgstr ""

#: of qiskit.aqua.components.feature_maps.PauliExpansion:1
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion:1
msgid ""
"Mapping data with the second order expansion followed by entangling "
"gates. Refer to https://arxiv.org/pdf/1804.11326.pdf for details."
msgstr ""

#: of qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit:1
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit:1
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector.construct_circuit:1
msgid "Construct the second order expansion based on given data."
msgstr ""

#: of qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit:3
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit:3
msgid "1-D to-be-transformed data."
msgstr ""

#: of qiskit.aqua.components.feature_maps.PauliExpansion.construct_circuit:11
#: qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion.construct_circuit:11
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector.construct_circuit:9
msgid "a quantum circuit transform data x."
msgstr ""

#: of qiskit.aqua.components.feature_maps.PauliZExpansion:1
#: qiskit.aqua.components.feature_maps.pauli_z_expansion.PauliZExpansion:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.feature_maps.pauli_expansion.PauliExpansion`"
msgstr ""

#: of qiskit.aqua.components.feature_maps.PauliZExpansion:1
#: qiskit.aqua.components.feature_maps.SecondOrderExpansion:1
#: qiskit.aqua.components.feature_maps.pauli_z_expansion.PauliZExpansion:1
#: qiskit.aqua.components.feature_maps.second_order_expansion.SecondOrderExpansion:1
msgid "Mapping data with the second order expansion followed by entangling gates."
msgstr ""

#: of qiskit.aqua.components.feature_maps.FirstOrderExpansion:3
#: qiskit.aqua.components.feature_maps.PauliZExpansion:3
#: qiskit.aqua.components.feature_maps.SecondOrderExpansion:3
#: qiskit.aqua.components.feature_maps.first_order_expansion.FirstOrderExpansion:3
#: qiskit.aqua.components.feature_maps.pauli_z_expansion.PauliZExpansion:3
#: qiskit.aqua.components.feature_maps.second_order_expansion.SecondOrderExpansion:3
msgid "Refer to https://arxiv.org/pdf/1804.11326.pdf for details."
msgstr ""

#: of qiskit.aqua.components.feature_maps.FirstOrderExpansion:1
#: qiskit.aqua.components.feature_maps.SecondOrderExpansion:1
#: qiskit.aqua.components.feature_maps.first_order_expansion.FirstOrderExpansion:1
#: qiskit.aqua.components.feature_maps.second_order_expansion.SecondOrderExpansion:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.feature_maps.pauli_z_expansion.PauliZExpansion`"
msgstr ""

#: of qiskit.aqua.components.feature_maps.FirstOrderExpansion:1
#: qiskit.aqua.components.feature_maps.first_order_expansion.FirstOrderExpansion:1
msgid "Mapping data with the first order expansion without entangling gates."
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.data_mapping.rst:2
msgid "qiskit.aqua.components.feature\\_maps.data\\_mapping module"
msgstr ""

#: of qiskit.aqua.components.feature_maps.data_mapping:1
msgid ""
"This module contains the definition of data mapping function for feature "
"map."
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.feature_map.rst:2
msgid "qiskit.aqua.components.feature\\_maps.feature\\_map module"
msgstr ""

#: of qiskit.aqua.components.feature_maps.feature_map:1
#: qiskit.aqua.components.feature_maps.first_order_expansion:1
#: qiskit.aqua.components.feature_maps.pauli_expansion:1
#: qiskit.aqua.components.feature_maps.pauli_z_expansion:1
#: qiskit.aqua.components.feature_maps.raw_feature_vector:1
#: qiskit.aqua.components.feature_maps.second_order_expansion:1
msgid ""
"This module contains the definition of a base class for feature map. "
"Several types of commonly used approaches."
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.first_order_expansion.rst:2
msgid "qiskit.aqua.components.feature\\_maps.first\\_order\\_expansion module"
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.pauli_expansion.rst:2
msgid "qiskit.aqua.components.feature\\_maps.pauli\\_expansion module"
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.pauli_z_expansion.rst:2
msgid "qiskit.aqua.components.feature\\_maps.pauli\\_z\\_expansion module"
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.raw_feature_vector.rst:2
msgid "qiskit.aqua.components.feature\\_maps.raw\\_feature\\_vector module"
msgstr ""

#: of qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector:1
msgid "Using raw feature vector as the initial state vector"
msgstr ""

#: of
#: qiskit.aqua.components.feature_maps.raw_feature_vector.RawFeatureVector.construct_circuit:3
msgid "1-D to-be-encoded data."
msgstr ""

#: ../../api/qiskit.aqua.components.feature_maps.second_order_expansion.rst:2
msgid "qiskit.aqua.components.feature\\_maps.second\\_order\\_expansion module"
msgstr ""

#: ../../api/qiskit.aqua.components.initial_states.rst:2
msgid "qiskit.aqua.components.initial\\_states package"
msgstr ""

#: of qiskit.aqua.components.initial_states.InitialState:1
#: qiskit.aqua.components.initial_states.initial_state.InitialState:1
msgid "Base class for InitialState."
msgstr ""

#: of qiskit.aqua.components.initial_states.Custom.construct_circuit:1
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit:1
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit:1
#: qiskit.aqua.components.initial_states.Zero.construct_circuit:1
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit:1
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit:1
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit:1
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit:1
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit:1
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit:1
msgid "Construct the statevector of desired initial state."
msgstr ""

#: of qiskit.aqua.components.initial_states.Custom.construct_circuit:3
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit:3
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit:3
#: qiskit.aqua.components.initial_states.Zero.construct_circuit:3
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit:3
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit:3
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit:3
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit:3
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit:3
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit:3
msgid ""
"`vector` or `circuit`. The `vector` mode produces the vector. While the "
"`circuit` constructs the quantum circuit corresponding that vector."
msgstr ""

#: of qiskit.aqua.components.initial_states.Custom.construct_circuit:7
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit:7
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit:7
#: qiskit.aqua.components.initial_states.Zero.construct_circuit:7
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit:7
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit:7
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit:7
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit:7
#: qiskit.aqua.components.reciprocals.Reciprocal.construct_circuit:5
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.construct_circuit:5
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit:7
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit:7
msgid "register for circuit construction."
msgstr ""

#: of qiskit.aqua.components.initial_states.Custom.construct_circuit:10
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit:10
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit:10
#: qiskit.aqua.components.initial_states.Zero.construct_circuit:10
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit:10
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit:10
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit:10
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit:10
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit:10
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit:10
msgid "statevector."
msgstr ""

#: of qiskit.aqua.components.initial_states.Custom.construct_circuit:13
#: qiskit.aqua.components.initial_states.InitialState.construct_circuit:13
#: qiskit.aqua.components.initial_states.VarFormBased.construct_circuit:13
#: qiskit.aqua.components.initial_states.Zero.construct_circuit:13
#: qiskit.aqua.components.initial_states.custom.Custom.construct_circuit:13
#: qiskit.aqua.components.initial_states.initial_state.InitialState.construct_circuit:13
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased.construct_circuit:13
#: qiskit.aqua.components.initial_states.zero.Zero.construct_circuit:13
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.construct_circuit:13
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.construct_circuit:13
msgid "when mode is not 'vector' or 'circuit'."
msgstr ""

#: of qiskit.aqua.components.initial_states.Custom:1
#: qiskit.aqua.components.initial_states.Zero:1
#: qiskit.aqua.components.initial_states.custom.Custom:1
#: qiskit.aqua.components.initial_states.zero.Zero:1
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock:1
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.initial_states.initial_state.InitialState`"
msgstr ""

#: of qiskit.aqua.components.initial_states.Custom:1
#: qiskit.aqua.components.initial_states.custom.Custom:1
msgid "A custom initial state."
msgstr ""

#: of qiskit.aqua.components.initial_states.VarFormBased:1
#: qiskit.aqua.components.initial_states.var_form_based.VarFormBased:1
msgid ""
"An initial state derived from a variational form. Intended to be used "
"programmatically only."
msgstr ""

#: of qiskit.aqua.components.initial_states.Zero:1
#: qiskit.aqua.components.initial_states.zero.Zero:1
msgid "A zero (null/vacuum) state."
msgstr ""

#: ../../api/qiskit.aqua.components.initial_states.custom.rst:2
msgid "qiskit.aqua.components.initial\\_states.custom module"
msgstr ""

#: ../../api/qiskit.aqua.components.initial_states.initial_state.rst:2
msgid "qiskit.aqua.components.initial\\_states.initial\\_state module"
msgstr ""

#: of qiskit.aqua.components.initial_states.initial_state:1
msgid ""
"This module contains the definition of a base class for initial states. "
"An initial state might be used by a variational form or in eoh as a trial"
" state to evolve"
msgstr ""

#: ../../api/qiskit.aqua.components.initial_states.var_form_based.rst:2
msgid "qiskit.aqua.components.initial\\_states.var\\_form\\_based module"
msgstr ""

#: ../../api/qiskit.aqua.components.initial_states.zero.rst:2
msgid "qiskit.aqua.components.initial\\_states.zero module"
msgstr ""

#: ../../api/qiskit.aqua.components.iqfts.rst:2
msgid "qiskit.aqua.components.iqfts package"
msgstr ""

#: of qiskit.aqua.components.iqfts.Standard:1
#: qiskit.aqua.components.iqfts.standard.Standard:1
msgid "ベースクラス: :class:`qiskit.aqua.components.iqfts.approximate.Approximate`"
msgstr ""

#: of qiskit.aqua.components.iqfts.Standard:1
#: qiskit.aqua.components.iqfts.standard.Standard:1
msgid "A normal standard IQFT."
msgstr ""

#: of qiskit.aqua.components.iqfts.Approximate:1
#: qiskit.aqua.components.iqfts.approximate.Approximate:1
msgid "ベースクラス: :class:`qiskit.aqua.components.iqfts.iqft.IQFT`"
msgstr ""

#: of qiskit.aqua.components.iqfts.Approximate:1
#: qiskit.aqua.components.iqfts.approximate.Approximate:1
msgid "An approximate IQFT."
msgstr ""

#: of qiskit.aqua.components.iqfts.IQFT:1
#: qiskit.aqua.components.iqfts.iqft.IQFT:1
msgid "Base class for Inverse QFT."
msgstr ""

#: of qiskit.aqua.components.iqfts.IQFT.construct_circuit:5
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit:5
#: qiskit.aqua.components.qfts.QFT.construct_circuit:5
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit:5
msgid "register or qubits to build the circuit on."
msgstr ""

#: of qiskit.aqua.components.iqfts.IQFT.construct_circuit:7
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit:7
#: qiskit.aqua.components.qfts.QFT.construct_circuit:7
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit:7
#: qiskit.aqua.components.reciprocals.Reciprocal.construct_circuit:7
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.construct_circuit:7
msgid "circuit for construction."
msgstr ""

#: of qiskit.aqua.components.iqfts.IQFT.construct_circuit:9
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit:9
#: qiskit.aqua.components.qfts.QFT.construct_circuit:9
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit:9
msgid "include the swaps."
msgstr ""

#: of qiskit.aqua.components.iqfts.IQFT.construct_circuit:12
#: qiskit.aqua.components.iqfts.iqft.IQFT.construct_circuit:12
#: qiskit.aqua.components.qfts.QFT.construct_circuit:12
#: qiskit.aqua.components.qfts.qft.QFT.construct_circuit:12
msgid "The matrix or circuit depending on the specified mode."
msgstr ""

#: ../../api/qiskit.aqua.components.iqfts.approximate.rst:2
msgid "qiskit.aqua.components.iqfts.approximate module"
msgstr ""

#: ../../api/qiskit.aqua.components.iqfts.iqft.rst:2
msgid "qiskit.aqua.components.iqfts.iqft module"
msgstr ""

#: of qiskit.aqua.components.iqfts.iqft:1
msgid ""
"This module contains the definition of a base class for inverse quantum "
"fourier transforms."
msgstr ""

#: ../../api/qiskit.aqua.components.iqfts.standard.rst:2
msgid "qiskit.aqua.components.iqfts.standard module"
msgstr ""

#: ../../api/qiskit.aqua.components.multiclass_extensions.rst:2
msgid "qiskit.aqua.components.multiclass\\_extensions package"
msgstr ""

#: of qiskit.aqua.components.multiclass_extensions.MulticlassExtension:1
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension:1
msgid "Base class for multiclass extension."
msgstr ""

#: of
#: qiskit.aqua.components.multiclass_extensions.MulticlassExtension.predict:1
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension.predict:1
msgid ""
"applying multiple estimators for prediction :param x: input points :type "
"x: numpy.ndarray"
msgstr ""

#: of qiskit.aqua.components.multiclass_extensions.MulticlassExtension.test:1
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension.test:1
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.test:1
msgid ""
"testing multiple estimators each for distinguishing a pair of classes. "
":param x: input points :type x: numpy.ndarray :param y: input labels "
":type y: numpy.ndarray"
msgstr ""

#: of qiskit.aqua.components.multiclass_extensions.MulticlassExtension.train:1
#: qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.train:1
#: qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension.train:1
msgid ""
"training multiple estimators each for distinguishing a pair of classes. "
":param x: input points :type x: numpy.ndarray :param y: input labels "
":type y: numpy.ndarray"
msgstr ""

#: ../../api/qiskit.aqua.components.multiclass_extensions.all_pairs.rst:2
msgid "qiskit.aqua.components.multiclass\\_extensions.all\\_pairs module"
msgstr ""

#: of qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs:1
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode:1
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.multiclass_extensions.multiclass_extension.MulticlassExtension`"
msgstr ""

#: of qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs:1
msgid "The multiclass extension based on the all-pairs algorithm."
msgstr ""

#: of qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.predict:1
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.predict:1
msgid ""
"applying multiple estimators for prediction :param x: NxD array :type x: "
"numpy.ndarray"
msgstr ""

#: of qiskit.aqua.components.multiclass_extensions.all_pairs.AllPairs.test:1
msgid ""
"testing multiple estimators each for distinguishing a pair of classes. "
":param X: input points :type X: numpy.ndarray :param y: input labels "
":type y: numpy.ndarray"
msgstr ""

#: ../../api/qiskit.aqua.components.multiclass_extensions.error_correcting_code.rst:2
msgid ""
"qiskit.aqua.components.multiclass\\_extensions.error\\_correcting\\_code "
"module"
msgstr ""

#: of
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode:1
msgid "the multiclass extension based on the error-correcting-code algorithm."
msgstr ""

#: of
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.predict:1
msgid ""
"Applying multiple estimators for prediction :param x: NxD array :type x: "
"numpy.ndarray"
msgstr ""

#: of
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.test:1
msgid ""
"Testing multiple estimators each for distinguishing a pair of classes. "
":param x: input points :type x: numpy.ndarray :param y: input labels "
":type y: numpy.ndarray"
msgstr ""

#: of
#: qiskit.aqua.components.multiclass_extensions.error_correcting_code.ErrorCorrectingCode.train:1
msgid ""
"Training multiple estimators each for distinguishing a pair of classes. "
":param x: input points :type x: numpy.ndarray :param y: input labels "
":type y: numpy.ndarray"
msgstr ""

#: ../../api/qiskit.aqua.components.multiclass_extensions.estimator.rst:2
msgid "qiskit.aqua.components.multiclass\\_extensions.estimator module"
msgstr ""

#: ../../api/qiskit.aqua.components.multiclass_extensions.multiclass_extension.rst:2
msgid ""
"qiskit.aqua.components.multiclass\\_extensions.multiclass\\_extension "
"module"
msgstr ""

#: ../../api/qiskit.aqua.components.multiclass_extensions.one_against_rest.rst:2
msgid "qiskit.aqua.components.multiclass\\_extensions.one\\_against\\_rest module"
msgstr ""

#: of
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest:1
msgid "the multiclass extension based on the one-against-rest algorithm."
msgstr ""

#: of
#: qiskit.aqua.components.multiclass_extensions.one_against_rest.OneAgainstRest.train:1
msgid ""
"training multiple estimators each for distinguishing a pair of classes. "
":param X: input points :type X: numpy.ndarray :param y: input labels "
":type y: numpy.ndarray"
msgstr ""

#: ../../api/qiskit.aqua.components.neural_networks.rst:2
msgid "qiskit.aqua.components.neural\\_networks package"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork:1
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork:1
msgid "Base class for discriminative Quantum or Classical Neural Networks."
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.get_label:1
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.get_label:1
msgid ""
"Apply quantum/classical neural network to the given input sample and "
"compute the respective data label :param x: Discriminator input, i.e. "
"data sample."
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.get_label:4
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.get_label:4
msgid "Returns: Computed data label"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.loss:1
#: qiskit.aqua.components.neural_networks.GenerativeNetwork.loss:1
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.loss:1
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork.loss:1
msgid "Loss function used for optimization"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.loss:3
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.loss:3
msgid "Discriminator output."
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.loss:4
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.loss:4
msgid "Label of the data point"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.loss:5
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.loss:5
msgid "Data weights."
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.loss:7
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.loss:7
msgid "Returns: Loss w.r.t to the generated data points."
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.set_seed:1
#: qiskit.aqua.components.neural_networks.GenerativeNetwork.set_seed:1
#: qiskit.aqua.components.neural_networks.QuantumGenerator.set_seed:1
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.set_seed:1
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork.set_seed:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.set_seed:1
msgid "Set seed. :param seed: int, seed"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.train:1
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.train:1
msgid ""
"Perform one training step w.r.t to the discriminator's parameters :param "
"data: array, Data batch. :param weights: array, Data sample weights. "
":param penalty: Boolean, Indicate whether or not penalty function is "
"applied to the loss function."
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.train:6
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.train:6
msgid "If no penalty function defined - depreciate"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.train:6
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.train:6
msgid ""
"quantum_instance: QuantumInstance, used to run the generator circuit. "
"Depreciated for classical network"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.train:8
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.train:8
msgid "QuantumInstance"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.train:9
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.train:9
msgid ""
"int, Number of shots for hardware or qasm execution. Depreciated for "
"classical network"
msgstr ""

#: of qiskit.aqua.components.neural_networks.DiscriminativeNetwork.train:11
#: qiskit.aqua.components.neural_networks.discriminative_network.DiscriminativeNetwork.train:11
msgid "Returns: dict, with Discriminator loss and updated parameters."
msgstr ""

#: of qiskit.aqua.components.neural_networks.GenerativeNetwork:1
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork:1
msgid "Base class for generative Quantum and Classical Neural Networks."
msgstr ""

#: of qiskit.aqua.components.neural_networks.GenerativeNetwork.get_output:1
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork.get_output:1
msgid ""
"Apply quantum/classical neural network to given input and get the "
"respective output"
msgstr ""

#: of qiskit.aqua.components.neural_networks.GenerativeNetwork.get_output:3
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork.get_output:3
msgid "Returns: Neural network output"
msgstr ""

#: of qiskit.aqua.components.neural_networks.GenerativeNetwork.train:1
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork.train:1
msgid ""
"Perform one training step w.r.t to the generator's parameters :param "
"quantum_instance: QuantumInstance, used to run the generator circuit. "
"Depreciated for classical network :param shots: int, Number of shots for "
"hardware or qasm execution. Depreciated for classical network"
msgstr ""

#: of qiskit.aqua.components.neural_networks.GenerativeNetwork.train:5
#: qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork.train:5
msgid "Returns: dict, generator loss and updated parameters."
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.neural_networks.generative_network.GenerativeNetwork`"
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator:1
msgid "Generator"
msgstr ""

#: of
#: qiskit.aqua.components.neural_networks.QuantumGenerator.construct_circuit:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.construct_circuit:1
msgid ""
"Construct generator circuit. :param quantum_instance: QuantumInstance, "
"used for running the generator circuit :param params: array or None, "
"parameters which should be used to run the generator, if None use "
"self._params"
msgstr ""

#: of
#: qiskit.aqua.components.neural_networks.QuantumGenerator.construct_circuit:5
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.construct_circuit:5
msgid "Returns: QuantumCircuit, constructed quantum circuit"
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator.get_output:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.get_output:1
msgid ""
"Get data samples from the generator. :param quantum_instance: "
"QuantumInstance, used to run the generator circuit. :param params: array "
"or None, parameters which should be used to run the generator, if None "
"use self._params :param shots: int, if not None use a number of shots "
"that is different from the number set in quantum_instance"
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator.get_output:6
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.get_output:6
msgid "Returns: array: generated samples, array: sample occurence in percentage"
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator.init_params:5
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.init_params:5
msgid "QuantumGenerator: vqe object"
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator.loss:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.loss:1
msgid ""
"Loss function :param x: array, sample label (equivalent to discriminator "
"output) :param weights: array, probability for measuring the sample"
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator.loss:5
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.loss:5
msgid "Returns:  float, loss function"
msgstr ""

#: of
#: qiskit.aqua.components.neural_networks.QuantumGenerator.set_discriminator:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.set_discriminator:1
msgid ""
"Set discriminator :param discriminator: Discriminator, Discriminator used"
" to compute the loss function."
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator.train:1
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.train:1
msgid ""
"Perform one training step w.r.t to the generator's parameters :param "
"quantum_instance: QuantumInstance, used to run the generator circuit. "
":param shots: int, Number of shots for hardware or qasm execution."
msgstr ""

#: of qiskit.aqua.components.neural_networks.QuantumGenerator.train:5
#: qiskit.aqua.components.neural_networks.quantum_generator.QuantumGenerator.train:5
msgid "Returns: dict, generator loss(float) and updated parameters (array)."
msgstr ""

#: ../../api/qiskit.aqua.components.neural_networks.classical_discriminator.rst:2
msgid "qiskit.aqua.components.neural\\_networks.classical\\_discriminator module"
msgstr ""

#: ../../api/qiskit.aqua.components.neural_networks.discriminative_network.rst:2
msgid "qiskit.aqua.components.neural\\_networks.discriminative\\_network module"
msgstr ""

#: ../../api/qiskit.aqua.components.neural_networks.generative_network.rst:2
msgid "qiskit.aqua.components.neural\\_networks.generative\\_network module"
msgstr ""

#: ../../api/qiskit.aqua.components.neural_networks.quantum_generator.rst:2
msgid "qiskit.aqua.components.neural\\_networks.quantum\\_generator module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.rst:2
msgid "qiskit.aqua.components.optimizers package"
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer:1
msgid "Base class for optimization algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.SupportLevel:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.SupportLevel:1
msgid "ベースクラス: :class:`enum.IntEnum`"
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.gradient_num_diff:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.gradient_num_diff:1
msgid ""
"We compute the gradient with the numeric differentiation in the parallel "
"way, around the point x_center. :param x_center: point around which we "
"compute the gradient :type x_center: ndarray :param f: the function of "
"which the gradient is to be computed. :type f: func :param epsilon: the "
"epsilon used in the numeric differentiation. :type epsilon: float"
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.gradient_num_diff:9
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.gradient_num_diff:9
msgid "the gradient computed"
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.init_params:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.init_params:1
msgid "Initialize with a params dictionary."
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.init_params:3
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.init_params:3
msgid ""
"A dictionary of config params as per the configuration object. Some of "
"these params get passed to scipy optimizers in an options dictionary. We "
"can specify an options array of names in config dictionary to have the "
"options dictionary automatically populated. All other config items, "
"excluding name, will be passed to init_args"
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.init_params:8
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.init_params:8
#: qiskit.chemistry.drivers._discover_driver.get_driver_configuration:5
#: qiskit.chemistry.drivers.get_driver_configuration:5
msgid "configuration dict"
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.optimize:1
#: qiskit.aqua.components.optimizers.CG.optimize:1
#: qiskit.aqua.components.optimizers.COBYLA.optimize:1
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:1
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:1
#: qiskit.aqua.components.optimizers.Optimizer.optimize:1
#: qiskit.aqua.components.optimizers.POWELL.optimize:1
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:1
#: qiskit.aqua.components.optimizers.SLSQP.optimize:1
#: qiskit.aqua.components.optimizers.SPSA.optimize:1
#: qiskit.aqua.components.optimizers.TNC.optimize:1
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:1
#: qiskit.aqua.components.optimizers.cg.CG.optimize:1
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:1
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:1
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:1
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:1
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:1
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:1
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:1
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:1
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:1
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:1
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:1
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:1
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:1
msgid "Perform optimization."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.optimize:3
#: qiskit.aqua.components.optimizers.CG.optimize:3
#: qiskit.aqua.components.optimizers.COBYLA.optimize:3
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:3
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:3
#: qiskit.aqua.components.optimizers.Optimizer.optimize:3
#: qiskit.aqua.components.optimizers.POWELL.optimize:3
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:3
#: qiskit.aqua.components.optimizers.SLSQP.optimize:3
#: qiskit.aqua.components.optimizers.SPSA.optimize:3
#: qiskit.aqua.components.optimizers.TNC.optimize:3
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:3
#: qiskit.aqua.components.optimizers.cg.CG.optimize:3
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:3
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:3
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:3
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:3
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:3
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:3
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:3
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:3
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:3
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:3
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:3
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:3
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:3
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:3
msgid "number of parameters to be optimized."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.optimize:5
#: qiskit.aqua.components.optimizers.CG.optimize:5
#: qiskit.aqua.components.optimizers.COBYLA.optimize:5
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:5
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:5
#: qiskit.aqua.components.optimizers.Optimizer.optimize:5
#: qiskit.aqua.components.optimizers.POWELL.optimize:5
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:5
#: qiskit.aqua.components.optimizers.SLSQP.optimize:5
#: qiskit.aqua.components.optimizers.SPSA.optimize:5
#: qiskit.aqua.components.optimizers.TNC.optimize:5
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:5
#: qiskit.aqua.components.optimizers.cg.CG.optimize:5
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:5
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:5
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:5
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:5
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:5
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:5
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:5
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:5
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:5
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:5
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:5
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:5
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:5
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:5
msgid "handle to a function that computes the objective function."
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:7
#: qiskit.aqua.components.optimizers.AQGD.optimize:8
#: qiskit.aqua.components.optimizers.CG.optimize:8
#: qiskit.aqua.components.optimizers.COBYLA.optimize:8
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:8
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:8
#: qiskit.aqua.components.optimizers.Optimizer.optimize:8
#: qiskit.aqua.components.optimizers.POWELL.optimize:8
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:8
#: qiskit.aqua.components.optimizers.SLSQP.optimize:8
#: qiskit.aqua.components.optimizers.SPSA.optimize:8
#: qiskit.aqua.components.optimizers.TNC.optimize:8
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:7
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:8
#: qiskit.aqua.components.optimizers.cg.CG.optimize:8
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:8
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:8
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:8
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:8
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:8
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:8
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:8
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:8
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:8
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:8
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:8
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:8
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:8
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:8
msgid ""
"handle to a function that computes the gradient of the objective "
"function, or None if not available."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.optimize:12
#: qiskit.aqua.components.optimizers.CG.optimize:12
#: qiskit.aqua.components.optimizers.COBYLA.optimize:12
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:12
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:12
#: qiskit.aqua.components.optimizers.Optimizer.optimize:12
#: qiskit.aqua.components.optimizers.POWELL.optimize:12
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:12
#: qiskit.aqua.components.optimizers.SLSQP.optimize:12
#: qiskit.aqua.components.optimizers.SPSA.optimize:12
#: qiskit.aqua.components.optimizers.TNC.optimize:12
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:12
#: qiskit.aqua.components.optimizers.cg.CG.optimize:12
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:12
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:12
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:12
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:12
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:12
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:12
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:12
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:12
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:12
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:12
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:12
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:12
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:12
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:12
msgid ""
"list of variable bounds, given as pairs (lower, upper). None means "
"unbounded."
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:13
#: qiskit.aqua.components.optimizers.AQGD.optimize:16
#: qiskit.aqua.components.optimizers.CG.optimize:16
#: qiskit.aqua.components.optimizers.COBYLA.optimize:16
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:16
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:16
#: qiskit.aqua.components.optimizers.Optimizer.optimize:16
#: qiskit.aqua.components.optimizers.POWELL.optimize:16
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:16
#: qiskit.aqua.components.optimizers.SLSQP.optimize:16
#: qiskit.aqua.components.optimizers.SPSA.optimize:16
#: qiskit.aqua.components.optimizers.TNC.optimize:16
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:13
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:16
#: qiskit.aqua.components.optimizers.cg.CG.optimize:16
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:16
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:16
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:16
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:16
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:16
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:16
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:16
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:16
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:16
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:16
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:16
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:16
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:16
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:16
msgid "initial point."
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:16
#: qiskit.aqua.components.optimizers.AQGD.optimize:19
#: qiskit.aqua.components.optimizers.CG.optimize:19
#: qiskit.aqua.components.optimizers.COBYLA.optimize:19
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:19
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:19
#: qiskit.aqua.components.optimizers.Optimizer.optimize:19
#: qiskit.aqua.components.optimizers.POWELL.optimize:19
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:19
#: qiskit.aqua.components.optimizers.SLSQP.optimize:19
#: qiskit.aqua.components.optimizers.SPSA.optimize:19
#: qiskit.aqua.components.optimizers.TNC.optimize:19
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:16
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:19
#: qiskit.aqua.components.optimizers.cg.CG.optimize:19
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:19
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:19
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:19
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:19
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:19
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:19
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:19
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:19
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:19
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:19
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:19
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:19
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:19
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:19
msgid ""
"point, value, nfev    point: is a 1D numpy.ndarray[float] containing the "
"solution    value: is a float with the objective function value    nfev: "
"number of objective function calls made if available or None"
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:20
#: qiskit.aqua.components.optimizers.AQGD.optimize:23
#: qiskit.aqua.components.optimizers.CG.optimize:23
#: qiskit.aqua.components.optimizers.COBYLA.optimize:23
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:23
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:23
#: qiskit.aqua.components.optimizers.Optimizer.optimize:23
#: qiskit.aqua.components.optimizers.POWELL.optimize:23
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:23
#: qiskit.aqua.components.optimizers.SLSQP.optimize:23
#: qiskit.aqua.components.optimizers.SPSA.optimize:23
#: qiskit.aqua.components.optimizers.TNC.optimize:23
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:20
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:23
#: qiskit.aqua.components.optimizers.cg.CG.optimize:23
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:23
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:23
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:23
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:23
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:23
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:23
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:23
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:23
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:23
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:23
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:23
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:23
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:23
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:23
msgid "point, value, nfev"
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:19
#: qiskit.aqua.components.optimizers.AQGD.optimize:22
#: qiskit.aqua.components.optimizers.CG.optimize:22
#: qiskit.aqua.components.optimizers.COBYLA.optimize:22
#: qiskit.aqua.components.optimizers.L_BFGS_B.optimize:22
#: qiskit.aqua.components.optimizers.NELDER_MEAD.optimize:22
#: qiskit.aqua.components.optimizers.Optimizer.optimize:22
#: qiskit.aqua.components.optimizers.POWELL.optimize:22
#: qiskit.aqua.components.optimizers.P_BFGS.optimize:22
#: qiskit.aqua.components.optimizers.SLSQP.optimize:22
#: qiskit.aqua.components.optimizers.SPSA.optimize:22
#: qiskit.aqua.components.optimizers.TNC.optimize:22
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:19
#: qiskit.aqua.components.optimizers.aqgd.AQGD.optimize:22
#: qiskit.aqua.components.optimizers.cg.CG.optimize:22
#: qiskit.aqua.components.optimizers.cobyla.COBYLA.optimize:22
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B.optimize:22
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD.optimize:22
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS.optimize:22
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L.optimize:22
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND.optimize:22
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH.optimize:22
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES.optimize:22
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.optimize:22
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS.optimize:22
#: qiskit.aqua.components.optimizers.powell.POWELL.optimize:22
#: qiskit.aqua.components.optimizers.slsqp.SLSQP.optimize:22
#: qiskit.aqua.components.optimizers.spsa.SPSA.optimize:22
#: qiskit.aqua.components.optimizers.tnc.TNC.optimize:22
msgid ""
"point: is a 1D numpy.ndarray[float] containing the solution value: is a "
"float with the objective function value nfev: number of objective "
"function calls made if available or None"
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.print_options:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.print_options:1
msgid "Print algorithm-specific options."
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.set_options:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.set_options:1
msgid "Sets or updates values in the options dictionary."
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.set_options:3
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.set_options:3
msgid ""
"The options dictionary may be used internally by a given optimizer to "
"pass additional optional values for the underlying optimizer/optimization"
" function used. The options dictionary may be initially populated with a "
"set of key/values when the given optimizer is constructed."
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.set_options:8
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.set_options:8
msgid "options, given as name=value."
msgstr ""

#: of qiskit.aqua.components.optimizers.Optimizer.wrap_function:1
#: qiskit.aqua.components.optimizers.optimizer.Optimizer.wrap_function:1
msgid ""
"Wrap the function to implicitly inject the args at the call of the "
"function. :param function: the target function :type function: func "
":param args: the args to be injected :type args: tuple"
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM:1
#: qiskit.aqua.components.optimizers.AQGD:1
#: qiskit.aqua.components.optimizers.CG:1
#: qiskit.aqua.components.optimizers.COBYLA:1
#: qiskit.aqua.components.optimizers.L_BFGS_B:1
#: qiskit.aqua.components.optimizers.NELDER_MEAD:1
#: qiskit.aqua.components.optimizers.POWELL:1
#: qiskit.aqua.components.optimizers.P_BFGS:1
#: qiskit.aqua.components.optimizers.SLSQP:1
#: qiskit.aqua.components.optimizers.SPSA:1
#: qiskit.aqua.components.optimizers.TNC:1
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM:1
#: qiskit.aqua.components.optimizers.aqgd.AQGD:1
#: qiskit.aqua.components.optimizers.cg.CG:1
#: qiskit.aqua.components.optimizers.cobyla.COBYLA:1
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B:1
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD:1
#: qiskit.aqua.components.optimizers.nlopts.crs.CRS:1
#: qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L:1
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND:1
#: qiskit.aqua.components.optimizers.nlopts.esch.ESCH:1
#: qiskit.aqua.components.optimizers.nlopts.isres.ISRES:1
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS:1
#: qiskit.aqua.components.optimizers.powell.POWELL:1
#: qiskit.aqua.components.optimizers.slsqp.SLSQP:1
#: qiskit.aqua.components.optimizers.spsa.SPSA:1
#: qiskit.aqua.components.optimizers.tnc.TNC:1
msgid "ベースクラス: :class:`qiskit.aqua.components.optimizers.optimizer.Optimizer`"
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM:1
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM:1
msgid ""
"Adam Kingma, Diederik & Ba, Jimmy. (2014). Adam: A Method for Stochastic "
"Optimization. International Conference on Learning Representations."
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM:5
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM:5
msgid ""
"AMSGRAD Sashank J. Reddi and Satyen Kale and Sanjiv Kumar. (2018). On the"
" Convergence of Adam and Beyond. International Conference on Learning "
"Representations."
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:1
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:1
msgid ""
"Perform optimization. :param num_vars: number of parameters to be "
"optimized. :type num_vars: int :param objective_function: handle to a "
"function that"
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:5
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:5
msgid "computes the objective function."
msgstr ""

#: of qiskit.aqua.components.optimizers.ADAM.optimize:11
#: qiskit.aqua.components.optimizers.adam_amsgrad.ADAM.optimize:11
msgid "deprecated"
msgstr ""

#: of qiskit.aqua.components.optimizers.CG:1
#: qiskit.aqua.components.optimizers.cg.CG:1
msgid "Conjugate Gradient algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.CG:3
#: qiskit.aqua.components.optimizers.cg.CG:3
msgid ""
"Uses scipy.optimize.minimize CG See "
"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
msgstr ""

#: of qiskit.aqua.components.optimizers.COBYLA:1
#: qiskit.aqua.components.optimizers.cobyla.COBYLA:1
msgid "Constrained Optimization By Linear Approximation algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.COBYLA:3
#: qiskit.aqua.components.optimizers.cobyla.COBYLA:3
msgid ""
"Uses scipy.optimize.minimize COBYLA See "
"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
msgstr ""

#: of qiskit.aqua.components.optimizers.L_BFGS_B:1
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B:1
msgid "Limited-memory BFGS algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.L_BFGS_B:3
#: qiskit.aqua.components.optimizers.P_BFGS:3
#: qiskit.aqua.components.optimizers.l_bfgs_b.L_BFGS_B:3
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS:3
msgid ""
"Uses scipy.optimize.fmin_l_bfgs_b "
"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_l_bfgs_b.html"
msgstr ""

#: of qiskit.aqua.components.optimizers.NELDER_MEAD:1
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD:1
msgid "Nelder-Mead algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.NELDER_MEAD:3
#: qiskit.aqua.components.optimizers.nelder_mead.NELDER_MEAD:3
msgid ""
"Uses scipy.optimize.minimize Nelder-Mead See "
"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
msgstr ""

#: of qiskit.aqua.components.optimizers.P_BFGS:1
#: qiskit.aqua.components.optimizers.p_bfgs.P_BFGS:1
msgid "Limited-memory BFGS algorithm. Parallel instantiations."
msgstr ""

#: of qiskit.aqua.components.optimizers.POWELL:1
#: qiskit.aqua.components.optimizers.powell.POWELL:1
msgid "Powell algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.POWELL:3
#: qiskit.aqua.components.optimizers.powell.POWELL:3
msgid ""
"Uses scipy.optimize.minimize Powell See "
"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
msgstr ""

#: of qiskit.aqua.components.optimizers.SLSQP:1
#: qiskit.aqua.components.optimizers.slsqp.SLSQP:1
msgid "Sequential Least SQuares Programming algorithm"
msgstr ""

#: of qiskit.aqua.components.optimizers.SLSQP:3
#: qiskit.aqua.components.optimizers.slsqp.SLSQP:3
msgid ""
"Uses scipy.optimize.minimize SLSQP See "
"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
msgstr ""

#: of qiskit.aqua.components.optimizers.SPSA:1
#: qiskit.aqua.components.optimizers.spsa.SPSA:1
msgid "Simultaneous Perturbation Stochastic Approximation algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.TNC:1
#: qiskit.aqua.components.optimizers.tnc.TNC:1
msgid "Truncated Newton (TNC) algorithm."
msgstr ""

#: of qiskit.aqua.components.optimizers.TNC:3
#: qiskit.aqua.components.optimizers.tnc.TNC:3
msgid ""
"Uses scipy.optimize.minimize TNC See "
"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html"
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD:1
#: qiskit.aqua.components.optimizers.aqgd.AQGD:1
msgid ""
"Analytic Quantum Gradient Descent (AQGD) optimizer class. Performs "
"optimization by gradient descent where gradients are evaluated "
"\"analytically\" using the quantum circuit evaluating the objective "
"function."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.converged:1
#: qiskit.aqua.components.optimizers.aqgd.AQGD.converged:1
msgid ""
"Determines if the objective function has converged by finding the "
"difference between the current value and the previous n values."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.converged:4
#: qiskit.aqua.components.optimizers.aqgd.AQGD.converged:4
msgid "Current value of the objective function."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.converged:6
#: qiskit.aqua.components.optimizers.aqgd.AQGD.converged:6
msgid ""
"Number of previous steps which must be within the convergence criteria in"
" order to be considered converged. Using a larger number will prevent the"
" optimizer from stopping early."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.converged:11
#: qiskit.aqua.components.optimizers.aqgd.AQGD.converged:11
msgid "(bool) Whether or not the optimization has converged."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.deriv:1
#: qiskit.aqua.components.optimizers.aqgd.AQGD.deriv:1
msgid ""
"Obtains the analytical quantum derivative of the objective function with "
"respect to the jth parameter."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.deriv:4
#: qiskit.aqua.components.optimizers.AQGD.update:3
#: qiskit.aqua.components.optimizers.aqgd.AQGD.deriv:4
#: qiskit.aqua.components.optimizers.aqgd.AQGD.update:3
msgid "Index of the parameter to compute the derivative of."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.deriv:6
#: qiskit.aqua.components.optimizers.AQGD.update:5
#: qiskit.aqua.components.optimizers.aqgd.AQGD.deriv:6
#: qiskit.aqua.components.optimizers.aqgd.AQGD.update:5
msgid "Current value of the parameters to evaluate the objective function at."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.deriv:9
#: qiskit.aqua.components.optimizers.aqgd.AQGD.deriv:9
msgid "Objective function."
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.deriv:12
#: qiskit.aqua.components.optimizers.aqgd.AQGD.deriv:12
msgid "(float) The derivative of the objective function w.r.t. j"
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.update:1
#: qiskit.aqua.components.optimizers.aqgd.AQGD.update:1
msgid "Updates the jth parameter based on the derivative and previous momentum"
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.update:8
#: qiskit.aqua.components.optimizers.aqgd.AQGD.update:8
msgid "Value of the derivative w.r.t. the jth parameter"
msgstr ""

#: of qiskit.aqua.components.optimizers.AQGD.update:10
#: qiskit.aqua.components.optimizers.aqgd.AQGD.update:10
msgid "Array containing all of the parameter momentums"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.adam_amsgrad.rst:2
msgid "qiskit.aqua.components.optimizers.adam\\_amsgrad module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.aqgd.rst:2
msgid "qiskit.aqua.components.optimizers.aqgd module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.cg.rst:2
msgid "qiskit.aqua.components.optimizers.cg module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.cobyla.rst:2
msgid "qiskit.aqua.components.optimizers.cobyla module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.l_bfgs_b.rst:2
msgid "qiskit.aqua.components.optimizers.l\\_bfgs\\_b module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nelder_mead.rst:2
msgid "qiskit.aqua.components.optimizers.nelder\\_mead module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nlopts.rst:2
msgid "qiskit.aqua.components.optimizers.nlopts package"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nlopts._nloptimizer.rst:2
msgid "qiskit.aqua.components.optimizers.nlopts.\\_nloptimizer module"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize:1
msgid "Minimize using objective function"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize:3
msgid "NLopt optimizer name"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize:4
msgid "Objective function to evaluate"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize:5
msgid "Bounds"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize:6
msgid "Initial point for optimizer"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize:7
msgid "Maximum evaluations"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts._nloptimizer.minimize:9
msgid ""
"Solution at minimum found, value at minimum found, num evaluations "
"performed"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nlopts.crs.rst:2
msgid "qiskit.aqua.components.optimizers.nlopts.crs module"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.crs.CRS:1
msgid "Controlled Random Search (CRS) with local mutation."
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.crs.CRS:3
msgid ""
"NLopt global optimizer, derivative-free "
"https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#controlled-"
"random-search-crs-with-local-mutation"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nlopts.direct_l.rst:2
msgid "qiskit.aqua.components.optimizers.nlopts.direct\\_l module"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L:1
#: qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND:1
msgid "DIRECT is the DIviding RECTangles algorithm for global optimization."
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.direct_l.DIRECT_L:3
msgid ""
"DIRECT-L is the \"locally biased\" variant NLopt global optimizer, "
"derivative-free http://nlopt.readthedocs.io/en/latest/NLopt_Algorithms"
"/#direct-and-direct-l"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nlopts.direct_l_rand.rst:2
msgid "qiskit.aqua.components.optimizers.nlopts.direct\\_l\\_rand module"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.direct_l_rand.DIRECT_L_RAND:3
msgid ""
"DIRECT-L RAND is the \"locally biased\" variant with some randomization "
"in near-tie decisions NLopt global optimizer, derivative-free "
"http://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#direct-and-"
"direct-l"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nlopts.esch.rst:2
msgid "qiskit.aqua.components.optimizers.nlopts.esch module"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.esch.ESCH:1
msgid "ESCH (evolutionary algorithm)."
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.esch.ESCH:3
msgid ""
"NLopt global optimizer, derivative-free "
"http://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#esch-"
"evolutionary-algorithm"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.nlopts.isres.rst:2
msgid "qiskit.aqua.components.optimizers.nlopts.isres module"
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.isres.ISRES:1
msgid "ISRES (Improved Stochastic Ranking Evolution Strategy)."
msgstr ""

#: of qiskit.aqua.components.optimizers.nlopts.isres.ISRES:3
msgid ""
"NLopt global optimizer, derivative-free "
"http://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/#isres-improved-"
"stochastic-ranking-evolution-strategy"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.optimizer.rst:2
msgid "qiskit.aqua.components.optimizers.optimizer module"
msgstr ""

#: of qiskit.aqua.components.optimizers.optimizer:1
msgid "Optimizer interface"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.p_bfgs.rst:2
msgid "qiskit.aqua.components.optimizers.p\\_bfgs module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.powell.rst:2
msgid "qiskit.aqua.components.optimizers.powell module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.slsqp.rst:2
msgid "qiskit.aqua.components.optimizers.slsqp module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.spsa.rst:2
msgid "qiskit.aqua.components.optimizers.spsa module"
msgstr ""

#: ../../api/qiskit.aqua.components.optimizers.tnc.rst:2
msgid "qiskit.aqua.components.optimizers.tnc module"
msgstr ""

#: ../../api/qiskit.aqua.components.oracles.rst:2
msgid "qiskit.aqua.components.oracles package"
msgstr ""

#: of qiskit.aqua.components.oracles.Oracle:1
#: qiskit.aqua.components.oracles.oracle.Oracle:1
msgid "Base class for oracles."
msgstr ""

#: of qiskit.aqua.components.oracles.CustomCircuitOracle.construct_circuit:1
#: qiskit.aqua.components.oracles.LogicalExpressionOracle.construct_circuit:1
#: qiskit.aqua.components.oracles.Oracle.construct_circuit:1
#: qiskit.aqua.components.oracles.TruthTableOracle.construct_circuit:1
#: qiskit.aqua.components.oracles.custom_circuit_oracle.CustomCircuitOracle.construct_circuit:1
#: qiskit.aqua.components.oracles.logical_expression_oracle.LogicalExpressionOracle.construct_circuit:1
#: qiskit.aqua.components.oracles.oracle.Oracle.construct_circuit:1
#: qiskit.aqua.components.oracles.truth_table_oracle.TruthTableOracle.construct_circuit:1
msgid "Construct the oracle circuit."
msgstr ""

#: of qiskit.aqua.components.oracles.CustomCircuitOracle.construct_circuit:3
#: qiskit.aqua.components.oracles.LogicalExpressionOracle.construct_circuit:3
#: qiskit.aqua.components.oracles.Oracle.construct_circuit:3
#: qiskit.aqua.components.oracles.TruthTableOracle.construct_circuit:3
#: qiskit.aqua.components.oracles.custom_circuit_oracle.CustomCircuitOracle.construct_circuit:3
#: qiskit.aqua.components.oracles.logical_expression_oracle.LogicalExpressionOracle.construct_circuit:3
#: qiskit.aqua.components.oracles.oracle.Oracle.construct_circuit:3
#: qiskit.aqua.components.oracles.truth_table_oracle.TruthTableOracle.construct_circuit:3
msgid "A quantum circuit for the oracle."
msgstr ""

#: of qiskit.aqua.components.oracles.CustomCircuitOracle:1
#: qiskit.aqua.components.oracles.LogicalExpressionOracle:1
#: qiskit.aqua.components.oracles.TruthTableOracle:1
#: qiskit.aqua.components.oracles.custom_circuit_oracle.CustomCircuitOracle:1
#: qiskit.aqua.components.oracles.logical_expression_oracle.LogicalExpressionOracle:1
#: qiskit.aqua.components.oracles.truth_table_oracle.TruthTableOracle:1
msgid "ベースクラス: :class:`qiskit.aqua.components.oracles.oracle.Oracle`"
msgstr ""

#: of qiskit.aqua.components.oracles.CustomCircuitOracle:1
#: qiskit.aqua.components.oracles.custom_circuit_oracle.CustomCircuitOracle:1
msgid "The helper class for creating oracles from user-supplied quantum circuits"
msgstr ""

#: ../../api/qiskit.aqua.components.oracles._pyeda_check.rst:2
msgid "qiskit.aqua.components.oracles.\\_pyeda\\_check module"
msgstr ""

#: of qiskit.aqua.components.oracles._pyeda_check:1
msgid "Check existence of pyeda."
msgstr ""

#: ../../api/qiskit.aqua.components.oracles.custom_circuit_oracle.rst:2
msgid "qiskit.aqua.components.oracles.custom\\_circuit\\_oracle module"
msgstr ""

#: of qiskit.aqua.components.oracles.custom_circuit_oracle:1
msgid "The Custom Circuit-based Quantum Oracle."
msgstr ""

#: ../../api/qiskit.aqua.components.oracles.logical_expression_oracle.rst:2
msgid "qiskit.aqua.components.oracles.logical\\_expression\\_oracle module"
msgstr ""

#: of qiskit.aqua.components.oracles.logical_expression_oracle:1
msgid "The General Logical Expression-based Quantum Oracle."
msgstr ""

#: ../../api/qiskit.aqua.components.oracles.oracle.rst:2
msgid "qiskit.aqua.components.oracles.oracle module"
msgstr ""

#: of qiskit.aqua.components.oracles.oracle:1
msgid "This module contains the definition of a base class for Oracle."
msgstr ""

#: ../../api/qiskit.aqua.components.oracles.truth_table_oracle.rst:2
msgid "qiskit.aqua.components.oracles.truth\\_table\\_oracle module"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle:1
msgid "The Truth Table-based Quantum Oracle."
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers:1
msgid "Use Algorithm X to get all solutions to the exact cover problem"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers:3
#, python-format
msgid "https://en.wikipedia.org/wiki/Knuth%27s_Algorithm_X"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers:5
msgid "A list of integers representing the columns to be covered"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers:7
msgid "A list of lists of integers representing the rows"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers:9
msgid "The total number of columns"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_exact_covers:12
msgid "All exact covers"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_prime_implicants:1
msgid ""
"Compute all prime implicants for a truth table using the Quine-McCluskey "
"Algorithm"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_prime_implicants:3
msgid "The list of integers corresponding to '1' outputs"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_prime_implicants:5
msgid "The list of integers corresponding to don't-cares"
msgstr ""

#: of qiskit.aqua.components.oracles.truth_table_oracle.get_prime_implicants:8
msgid "list of lists of int, representing all prime implicants"
msgstr ""

#: ../../api/qiskit.aqua.components.qfts.rst:2
msgid "qiskit.aqua.components.qfts package"
msgstr ""

#: of qiskit.aqua.components.qfts.Standard:1
#: qiskit.aqua.components.qfts.standard.Standard:1
msgid "ベースクラス: :class:`qiskit.aqua.components.qfts.approximate.Approximate`"
msgstr ""

#: of qiskit.aqua.components.qfts.Standard:1
#: qiskit.aqua.components.qfts.standard.Standard:1
msgid "A normal standard QFT."
msgstr ""

#: of qiskit.aqua.components.qfts.Approximate:1
#: qiskit.aqua.components.qfts.approximate.Approximate:1
msgid "ベースクラス: :class:`qiskit.aqua.components.qfts.qft.QFT`"
msgstr ""

#: of qiskit.aqua.components.qfts.Approximate:1
#: qiskit.aqua.components.qfts.approximate.Approximate:1
msgid "An approximate QFT."
msgstr ""

#: of qiskit.aqua.components.qfts.QFT:1 qiskit.aqua.components.qfts.qft.QFT:1
msgid "Base class for QFT."
msgstr ""

#: ../../api/qiskit.aqua.components.qfts.approximate.rst:2
msgid "qiskit.aqua.components.qfts.approximate module"
msgstr ""

#: ../../api/qiskit.aqua.components.qfts.qft.rst:2
msgid "qiskit.aqua.components.qfts.qft module"
msgstr ""

#: of qiskit.aqua.components.qfts.qft:1
msgid ""
"This module contains the definition of a base class for quantum fourier "
"transforms."
msgstr ""

#: ../../api/qiskit.aqua.components.qfts.standard.rst:2
msgid "qiskit.aqua.components.qfts.standard module"
msgstr ""

#: ../../api/qiskit.aqua.components.reciprocals.rst:2
msgid "qiskit.aqua.components.reciprocals package"
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision:1
#: qiskit.aqua.components.reciprocals.LookupRotation:1
#: qiskit.aqua.components.reciprocals.long_division.LongDivision:1
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation:1
msgid "ベースクラス: :class:`qiskit.aqua.components.reciprocals.reciprocal.Reciprocal`"
msgstr ""

#: of qiskit.aqua.components.reciprocals.LookupRotation:1
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation:1
msgid "The Lookup Rotation for Reciprocals."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LookupRotation:3
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation:3
msgid ""
"A calculation of reciprocals of eigenvalues is performed and controlled "
"rotation of ancillary qubit via a lookup method. It uses a partial table "
"lookup of rotation angles to rotate an ancillary qubit by "
"arcsin(C/lambda). Please refer to the HHL documentation for an "
"explanation of this method."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LookupRotation.construct_circuit:1
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.construct_circuit:1
msgid "Construct the Lookup Rotation circuit."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision.construct_circuit:5
#: qiskit.aqua.components.reciprocals.LookupRotation.construct_circuit:5
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.construct_circuit:5
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.construct_circuit:5
msgid "input register, typically output register of Eigenvalues"
msgstr ""

#: of qiskit.aqua.components.reciprocals.LookupRotation.construct_circuit:8
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.construct_circuit:8
msgid "QuantumCircuit containing the Lookup Rotation circuit."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision.sv_to_resvec:1
#: qiskit.aqua.components.reciprocals.LookupRotation.sv_to_resvec:1
#: qiskit.aqua.components.reciprocals.Reciprocal.sv_to_resvec:1
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.sv_to_resvec:1
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.sv_to_resvec:1
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.sv_to_resvec:1
msgid "Convert statevector to result vector."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision.sv_to_resvec:3
#: qiskit.aqua.components.reciprocals.LookupRotation.sv_to_resvec:3
#: qiskit.aqua.components.reciprocals.Reciprocal.sv_to_resvec:3
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.sv_to_resvec:3
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.sv_to_resvec:3
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.sv_to_resvec:3
msgid "The statevector from simulation."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision.sv_to_resvec:5
#: qiskit.aqua.components.reciprocals.LookupRotation.sv_to_resvec:5
#: qiskit.aqua.components.reciprocals.Reciprocal.sv_to_resvec:5
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.sv_to_resvec:5
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.sv_to_resvec:5
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.sv_to_resvec:5
msgid "Number of qubits of result register."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision.sv_to_resvec:8
#: qiskit.aqua.components.reciprocals.LookupRotation.sv_to_resvec:8
#: qiskit.aqua.components.reciprocals.Reciprocal.sv_to_resvec:8
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.sv_to_resvec:8
#: qiskit.aqua.components.reciprocals.lookup_rotation.LookupRotation.sv_to_resvec:8
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.sv_to_resvec:8
msgid "The result vector."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision:1
#: qiskit.aqua.components.reciprocals.long_division.LongDivision:1
msgid "The Long Division Rotation for Reciprocals."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision:3
#: qiskit.aqua.components.reciprocals.long_division.LongDivision:3
msgid ""
"It finds the reciprocal with long division method and rotates the "
"ancillary qubit by C/lambda. This is a first order approximation of "
"arcsin(C/lambda)."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision.construct_circuit:1
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.construct_circuit:1
msgid "Construct the Long Division Rotation circuit."
msgstr ""

#: of qiskit.aqua.components.reciprocals.LongDivision.construct_circuit:8
#: qiskit.aqua.components.reciprocals.long_division.LongDivision.construct_circuit:8
msgid "QuantumCircuit containing the Long Division Rotation circuit."
msgstr ""

#: of qiskit.aqua.components.reciprocals.Reciprocal:1
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal:1
msgid "Base class for reciprocal calculation."
msgstr ""

#: of qiskit.aqua.components.reciprocals.Reciprocal.construct_circuit:1
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.construct_circuit:1
msgid "Construct the initial state circuit."
msgstr ""

#: of qiskit.aqua.components.reciprocals.Reciprocal.construct_circuit:10
#: qiskit.aqua.components.reciprocals.reciprocal.Reciprocal.construct_circuit:10
msgid "The reciprocal circuit."
msgstr ""

#: ../../api/qiskit.aqua.components.reciprocals.long_division.rst:2
msgid "qiskit.aqua.components.reciprocals.long\\_division module"
msgstr ""

#: ../../api/qiskit.aqua.components.reciprocals.lookup_rotation.rst:2
msgid "qiskit.aqua.components.reciprocals.lookup\\_rotation module"
msgstr ""

#: of qiskit.aqua.components.reciprocals.lookup_rotation:1
msgid "Controlled rotation for the HHL algorithm based on partial table lookup"
msgstr ""

#: ../../api/qiskit.aqua.components.reciprocals.reciprocal.rst:2
msgid "qiskit.aqua.components.reciprocals.reciprocal module"
msgstr ""

#: of qiskit.aqua.components.reciprocals.reciprocal:1
msgid ""
"This module contains the definition of a base class for computing "
"reciprocals into an amplitude."
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.rst:2
msgid "qiskit.aqua.components.uncertainty\\_models package"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.UncertaintyModel:1
#: qiskit.aqua.components.uncertainty_models.uncertainty_model.UncertaintyModel:1
#: qiskit.aqua.components.uncertainty_problems.UncertaintyProblem:1
#: qiskit.aqua.components.uncertainty_problems.uncertainty_problem.UncertaintyProblem:1
msgid ""
"ベースクラス: :class:`qiskit.aqua.utils.circuit_factory.CircuitFactory`, "
":class:`qiskit.aqua.pluggable.Pluggable`, :class:`abc.ABC`"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.UncertaintyModel:1
#: qiskit.aqua.components.uncertainty_models.uncertainty_model.UncertaintyModel:1
msgid "The abstract Uncertainty Model"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.MultivariateDistribution:1
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution:1
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.uncertainty_models.uncertainty_model.UncertaintyModel`,"
" :class:`abc.ABC`"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.UnivariateDistribution:1
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution:1
msgid ""
"This module contains the definition of a base class for univariate "
"distributions. (Interface for discrete bounded uncertainty models "
"assuming an equidistant grid)"
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.pdf_to_probabilities:1
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.pdf_to_probabilities:1
msgid ""
"Takes a probability density function (pdf), and returns a truncated and "
"discretized array of probabilities corresponding to it :param pdf: "
"probability density function :type pdf: function :param low: lower bound "
"of equidistant grid :type low: float :param high: upper bound of "
"equidistant grid :type high: float :param num_values: number of grid "
"points :type num_values: int"
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.UnivariateDistribution.pdf_to_probabilities:11
#: qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution.pdf_to_probabilities:11
msgid "Returns (list): array of probabilities"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.MultivariateDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution:1
msgid ""
"This module contains the definition of a base class for multivariate "
"distributions. (Interface for discrete bounded uncertainty models "
"assuming an equidistant grid)"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.BernoulliDistribution:1
#: qiskit.aqua.components.uncertainty_models.LogNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.NormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.UniformDistribution:1
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution:1
#: qiskit.aqua.components.uncertainty_models.bernoulli_distribution.BernoulliDistribution:1
#: qiskit.aqua.components.uncertainty_models.log_normal_distribution.LogNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.normal_distribution.NormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution:1
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.uncertainty_models.univariate_distribution.UnivariateDistribution`"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.NormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.normal_distribution:1
#: qiskit.aqua.components.uncertainty_models.normal_distribution.NormalDistribution:1
msgid "The Univariate Normal Distribution."
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.LogNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.log_normal_distribution:1
#: qiskit.aqua.components.uncertainty_models.log_normal_distribution.LogNormalDistribution:1
msgid "The Univariate Log-Normal Distribution."
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.BernoulliDistribution:1
#: qiskit.aqua.components.uncertainty_models.bernoulli_distribution:1
#: qiskit.aqua.components.uncertainty_models.bernoulli_distribution.BernoulliDistribution:1
msgid "The Univariate Bernoulli Distribution."
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.UniformDistribution:1
#: qiskit.aqua.components.uncertainty_models.uniform_distribution:1
#: qiskit.aqua.components.uncertainty_models.uniform_distribution.UniformDistribution:1
msgid "The Univariate Uniform Distribution."
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel:1
#: qiskit.aqua.components.uncertainty_models.MultivariateLogNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.MultivariateNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution:1
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution:1
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel:1
#: qiskit.aqua.components.uncertainty_models.multivariate_log_normal_distribution.MultivariateLogNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_normal_distribution.MultivariateNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.uncertainty_models.multivariate_distribution.MultivariateDistribution`"
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.MultivariateNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_normal_distribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_normal_distribution.MultivariateNormalDistribution:1
msgid "The Multivariate Normal Distribution."
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.MultivariateLogNormalDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_log_normal_distribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_log_normal_distribution.MultivariateLogNormalDistribution:1
msgid "The Multivariate Log-Normal Distribution."
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.MultivariateUniformDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.MultivariateUniformDistribution:1
msgid "The Multivariate Uniform Distribution."
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution:1
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution:1
msgid "The Univariate Variational Distribution."
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.init_params:1
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.init_params:1
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.init_params:1
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.init_params:1
msgid "Initialize via parameters dictionary. :param params: parameters dictionary"
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.init_params:4
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.init_params:4
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.init_params:4
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.init_params:4
msgid "An object instance of this class"
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution.set_probabilities:1
#: qiskit.aqua.components.uncertainty_models.UnivariateVariationalDistribution.set_probabilities:1
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution.set_probabilities:1
#: qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.UnivariateVariationalDistribution.set_probabilities:1
msgid "Set Probabilities :param quantum_instance: QuantumInstance"
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.MultivariateVariationalDistribution:1
#: qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.MultivariateVariationalDistribution:1
msgid "The Multivariate Variational Distribution."
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_models.GaussianConditionalIndependenceModel:1
#: qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.GaussianConditionalIndependenceModel:1
msgid ""
"The Gaussian Conditional Independence Model for Credit Risk Reference: "
"https://arxiv.org/abs/1412.1183 Dependency between individual risk "
"variabels and latent variable is approximated linearly."
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.bernoulli_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.bernoulli\\_distribution "
"module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.gaussian_conditional_independence_model.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.gaussian\\_conditional\\_independence\\_model"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.log_normal_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.log\\_normal\\_distribution "
"module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.multivariate_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.multivariate\\_distribution "
"module"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.multivariate_distribution:1
msgid ""
"This module contains the definition of a base class for multivariate "
"distributions."
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.multivariate_log_normal_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.multivariate\\_log\\_normal\\_distribution"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.multivariate_normal_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.multivariate\\_normal\\_distribution"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.multivariate_uniform_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.multivariate\\_uniform\\_distribution"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.multivariate_variational_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.multivariate\\_variational\\_distribution"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.normal_distribution.rst:2
msgid "qiskit.aqua.components.uncertainty\\_models.normal\\_distribution module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.uncertainty_model.rst:2
msgid "qiskit.aqua.components.uncertainty\\_models.uncertainty\\_model module"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.uncertainty_model:1
msgid ""
"This module contains the definition of a base class for uncertainty "
"models. An uncertainty model could be used for constructing Amplification"
" Estimation tasks."
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.uniform_distribution.rst:2
msgid "qiskit.aqua.components.uncertainty\\_models.uniform\\_distribution module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.univariate_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.univariate\\_distribution "
"module"
msgstr ""

#: of qiskit.aqua.components.uncertainty_models.univariate_distribution:1
msgid ""
"This module contains the definition of a base class for univariate "
"distributions."
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_models.univariate_variational_distribution.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_models.univariate\\_variational\\_distribution"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.rst:2
msgid "qiskit.aqua.components.uncertainty\\_problems package"
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.UncertaintyProblem:1
#: qiskit.aqua.components.uncertainty_problems.uncertainty_problem:1
#: qiskit.aqua.components.uncertainty_problems.uncertainty_problem.UncertaintyProblem:1
msgid "The abstract Uncertainty Problem pluggable component."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta:1
#: qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue:1
#: qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue:1
#: qiskit.aqua.components.uncertainty_problems.MultivariateProblem:1
#: qiskit.aqua.components.uncertainty_problems.UnivariateProblem:1
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta:1
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue:1
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue:1
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem:1
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.uncertainty_problems.uncertainty_problem.UncertaintyProblem`"
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta:1
#: qiskit.aqua.components.uncertainty_problems.european_call_delta:1
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta:1
msgid "The European Call Option Delta."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.EuropeanCallDelta:3
#: qiskit.aqua.components.uncertainty_problems.european_call_delta.EuropeanCallDelta:3
msgid ""
"Evaluates the variance for a European call option given an uncertainty "
"model. The payoff function is f(S, K) = max(0, S - K) for a spot price S "
"and strike price K."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue:1
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value:1
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue:1
msgid "The European Call Option Expected Value."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.EuropeanCallExpectedValue:3
#: qiskit.aqua.components.uncertainty_problems.european_call_expected_value.EuropeanCallExpectedValue:3
msgid ""
"Evaluates the expected payoff for a European call option given an "
"uncertainty model. The payoff function is f(S, K) = max(0, S - K) for a "
"spot price S and strike price K."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue:1
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value:1
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue:1
msgid "The Fixed Income Expected Value."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.FixedIncomeExpectedValue:3
#: qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.FixedIncomeExpectedValue:3
msgid "Evaluates a fixed income asset with uncertain interest rates."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.MultivariateProblem:1
#: qiskit.aqua.components.uncertainty_problems.multivariate_problem.MultivariateProblem:1
msgid "Multivariate Uncertainty Problem."
msgstr ""

#: of qiskit.aqua.components.uncertainty_problems.UnivariateProblem:1
#: qiskit.aqua.components.uncertainty_problems.univariate_problem.UnivariateProblem:1
msgid "Univariate uncertainty problem."
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective:1
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective:1
msgid ""
"Univariate Piecewise Linear Objective Function, applies controlled "
"Y-rotation to target qubit. Control qubits represent integer value, and "
"rotation approximates a piecewise linear function of the amplitude f:"
msgstr ""

#: of
#: qiskit.aqua.components.uncertainty_problems.UnivariatePiecewiseLinearObjective:3
#: qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.UnivariatePiecewiseLinearObjective:3
msgid "|x>|0> --> |x>( sqrt(1 - f(x))|0> + sqrt(f(x))|1> )"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.european_call_delta.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_problems.european\\_call\\_delta "
"module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.european_call_expected_value.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_problems.european\\_call\\_expected\\_value"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.fixed_income_expected_value.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_problems.fixed\\_income\\_expected\\_value"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.multivariate_problem.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_problems.multivariate\\_problem "
"module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.uncertainty_problem.rst:2
msgid "qiskit.aqua.components.uncertainty\\_problems.uncertainty\\_problem module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.univariate_piecewise_linear_objective.rst:2
msgid ""
"qiskit.aqua.components.uncertainty\\_problems.univariate\\_piecewise\\_linear\\_objective"
" module"
msgstr ""

#: ../../api/qiskit.aqua.components.uncertainty_problems.univariate_problem.rst:2
msgid "qiskit.aqua.components.uncertainty\\_problems.univariate\\_problem module"
msgstr ""

#: ../../api/qiskit.aqua.components.variational_forms.rst:2
msgid "qiskit.aqua.components.variational\\_forms package"
msgstr ""

#: of qiskit.aqua.components.variational_forms.VariationalForm:1
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm:1
msgid "Base class for VariationalForms."
msgstr ""

#: of qiskit.aqua.components.variational_forms.RY.construct_circuit:3
#: qiskit.aqua.components.variational_forms.VariationalForm.construct_circuit:3
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit:3
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.construct_circuit:3
msgid "circuit parameters."
msgstr ""

#: of qiskit.aqua.components.variational_forms.RY.construct_circuit:5
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit:5
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit:5
#: qiskit.aqua.components.variational_forms.VariationalForm.construct_circuit:5
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit:5
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit:5
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit:5
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.construct_circuit:5
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit:5
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit:5
msgid "Quantum Register for the circuit."
msgstr ""

#: of
#: qiskit.aqua.components.variational_forms.VariationalForm.construct_circuit:8
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.construct_circuit:8
msgid "A quantum circuit."
msgstr ""

#: of qiskit.aqua.components.variational_forms.VariationalForm.num_parameters:1
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.num_parameters:1
msgid "Number of parameters of the variational form."
msgstr ""

#: of qiskit.aqua.components.variational_forms.VariationalForm.num_parameters:3
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.num_parameters:3
msgid "An integer indicating the number of parameters."
msgstr ""

#: of qiskit.aqua.components.variational_forms.VariationalForm.num_qubits:1
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.num_qubits:1
msgid "Number of qubits of the variational form."
msgstr ""

#: of qiskit.aqua.components.variational_forms.VariationalForm.num_qubits:3
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.num_qubits:3
msgid "An integer indicating the number of qubits."
msgstr ""

#: of
#: qiskit.aqua.components.variational_forms.VariationalForm.parameter_bounds:1
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.parameter_bounds:1
msgid "Parameter bounds."
msgstr ""

#: of
#: qiskit.aqua.components.variational_forms.VariationalForm.parameter_bounds:3
#: qiskit.aqua.components.variational_forms.variational_form.VariationalForm.parameter_bounds:3
msgid ""
"A list of pairs indicating the bounds, as (lower, upper). None indicates "
"an unbounded parameter in the corresponding direction. If None is "
"returned, problem is fully unbounded."
msgstr ""

#: of qiskit.aqua.components.variational_forms.RY:1
#: qiskit.aqua.components.variational_forms.RYRZ:1
#: qiskit.aqua.components.variational_forms.SwapRZ:1
#: qiskit.aqua.components.variational_forms.ry.RY:1
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ:1
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.components.variational_forms.variational_form.VariationalForm`"
msgstr ""

#: of qiskit.aqua.components.variational_forms.RY:1
#: qiskit.aqua.components.variational_forms.ry.RY:1
msgid "Layers of Y rotations followed by entangling gates."
msgstr ""

#: of qiskit.aqua.components.variational_forms.RY.construct_circuit:8
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit:8
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit:8
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit:8
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit:8
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit:8
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit:8
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit:8
msgid "a quantum circuit with given `parameters`"
msgstr ""

#: of qiskit.aqua.components.variational_forms.RY.construct_circuit:11
#: qiskit.aqua.components.variational_forms.RYRZ.construct_circuit:11
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit:11
#: qiskit.aqua.components.variational_forms.ry.RY.construct_circuit:11
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit:11
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit:11
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit:11
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit:11
msgid "the number of parameters is incorrect."
msgstr ""

#: of qiskit.aqua.components.variational_forms.RYRZ:1
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ:1
msgid "Layers of Y+Z rotations followed by entangling gates."
msgstr ""

#: of qiskit.aqua.components.variational_forms.RYRZ.construct_circuit:3
#: qiskit.aqua.components.variational_forms.SwapRZ.construct_circuit:3
#: qiskit.aqua.components.variational_forms.ryrz.RYRZ.construct_circuit:3
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ.construct_circuit:3
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.construct_circuit:3
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.construct_circuit:3
msgid "circuit parameters"
msgstr ""

#: of qiskit.aqua.components.variational_forms.SwapRZ:1
#: qiskit.aqua.components.variational_forms.swaprz.SwapRZ:1
msgid "Layers of Swap+Z rotations followed by entangling gates."
msgstr ""

#: ../../api/qiskit.aqua.components.variational_forms.ry.rst:2
msgid "qiskit.aqua.components.variational\\_forms.ry module"
msgstr ""

#: ../../api/qiskit.aqua.components.variational_forms.ryrz.rst:2
msgid "qiskit.aqua.components.variational\\_forms.ryrz module"
msgstr ""

#: ../../api/qiskit.aqua.components.variational_forms.swaprz.rst:2
msgid "qiskit.aqua.components.variational\\_forms.swaprz module"
msgstr ""

#: ../../api/qiskit.aqua.components.variational_forms.variational_form.rst:2
msgid "qiskit.aqua.components.variational\\_forms.variational\\_form module"
msgstr ""

#: of qiskit.aqua.components.variational_forms.variational_form:1
msgid ""
"This module contains the definition of a base class for variational "
"forms. Several types of commonly used ansatz."
msgstr ""

#: ../../api/qiskit.aqua.input.rst:2
msgid "qiskit.aqua.input package"
msgstr ""

#: of qiskit.aqua.input.AlgorithmInput.from_params:1
#: qiskit.aqua.input.ClassificationInput.from_params:1
#: qiskit.aqua.input.EnergyInput.from_params:1
#: qiskit.aqua.input.LinearSystemInput.from_params:1
#: qiskit.aqua.input.QGANInput.from_params:1
#: qiskit.aqua.input.algorithm_input.AlgorithmInput.from_params:1
#: qiskit.aqua.input.classification_input.ClassificationInput.from_params:1
#: qiskit.aqua.input.energy_input.EnergyInput.from_params:1
#: qiskit.aqua.input.linear_system_input.LinearSystemInput.from_params:1
#: qiskit.aqua.input.qganinput.QGANInput.from_params:1
msgid ""
"Load the dictionary into the algorithminput class fields. This dictionary"
" being that as created by to_params() :param params: A dictionary as "
"originally created by to_params()"
msgstr ""

#: of qiskit.aqua.input.AlgorithmInput.problems:1
#: qiskit.aqua.input.algorithm_input.AlgorithmInput.problems:1
msgid "Gets the set of problems that this input form supports"
msgstr ""

#: of qiskit.aqua.input.AlgorithmInput.to_params:1
#: qiskit.aqua.input.ClassificationInput.to_params:1
#: qiskit.aqua.input.EnergyInput.to_params:1
#: qiskit.aqua.input.LinearSystemInput.to_params:1
#: qiskit.aqua.input.QGANInput.to_params:1
#: qiskit.aqua.input.algorithm_input.AlgorithmInput.to_params:1
#: qiskit.aqua.input.classification_input.ClassificationInput.to_params:1
#: qiskit.aqua.input.energy_input.EnergyInput.to_params:1
#: qiskit.aqua.input.linear_system_input.LinearSystemInput.to_params:1
#: qiskit.aqua.input.qganinput.QGANInput.to_params:1
msgid ""
"Convert the derived algorithminput class fields to a dictionary where the"
" values are in a form that can be saved to json :returns: Dictionary of "
"input fields"
msgstr ""

#: of qiskit.aqua.input.ClassificationInput:1 qiskit.aqua.input.EnergyInput:1
#: qiskit.aqua.input.LinearSystemInput:1 qiskit.aqua.input.QGANInput:1
#: qiskit.aqua.input.classification_input.ClassificationInput:1
#: qiskit.aqua.input.energy_input.EnergyInput:1
#: qiskit.aqua.input.linear_system_input.LinearSystemInput:1
#: qiskit.aqua.input.qganinput.QGANInput:1
msgid "ベースクラス: :class:`qiskit.aqua.input.algorithm_input.AlgorithmInput`"
msgstr ""

#: ../../api/qiskit.aqua.input.algorithm_input.rst:2
msgid "qiskit.aqua.input.algorithm\\_input module"
msgstr ""

#: ../../api/qiskit.aqua.input.classification_input.rst:2
msgid "qiskit.aqua.input.classification\\_input module"
msgstr ""

#: ../../api/qiskit.aqua.input.energy_input.rst:2
msgid "qiskit.aqua.input.energy\\_input module"
msgstr ""

#: ../../api/qiskit.aqua.input.linear_system_input.rst:2
msgid "qiskit.aqua.input.linear\\_system\\_input module"
msgstr ""

#: ../../api/qiskit.aqua.input.qganinput.rst:2
msgid "qiskit.aqua.input.qganinput module"
msgstr ""

#: ../../api/qiskit.aqua.operator.rst:2
msgid "qiskit.aqua.operator module"
msgstr ""

#: ../../api/qiskit.aqua.parser.rst:2
msgid "qiskit.aqua.parser package"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema:1
#: qiskit.aqua.parser.json_schema.JSONSchema:1
msgid "JSON schema Utilities class."
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.allows_additional_properties:1
#: qiskit.aqua.parser.json_schema.JSONSchema.allows_additional_properties:1
msgid ""
"Returns allows additional properties flag for a schema section :param "
"section_name: schema section :type section_name: string"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.allows_additional_properties:5
#: qiskit.aqua.parser.json_schema.JSONSchema.allows_additional_properties:5
msgid "Returns allows additional properties boolean value"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.check_property_value:1
#: qiskit.aqua.parser.json_schema.JSONSchema.check_property_value:1
msgid "Check value for property name"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.check_property_value:3
#: qiskit.aqua.parser.JSONSchema.check_section_value:3
#: qiskit.aqua.parser.json_schema.JSONSchema.check_property_value:3
#: qiskit.aqua.parser.json_schema.JSONSchema.check_section_value:3
msgid "section name"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.check_property_value:5
#: qiskit.aqua.parser.json_schema.JSONSchema.check_property_value:5
msgid "property name"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.check_property_value:7
#: qiskit.aqua.parser.JSONSchema.check_section_value:5
#: qiskit.aqua.parser.json_schema.JSONSchema.check_property_value:7
#: qiskit.aqua.parser.json_schema.JSONSchema.check_section_value:5
msgid "value"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.check_property_value:10
#: qiskit.aqua.parser.JSONSchema.check_section_value:8
#: qiskit.aqua.parser.json_schema.JSONSchema.check_property_value:10
#: qiskit.aqua.parser.json_schema.JSONSchema.check_section_value:8
msgid "Returns converted value if valid"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.check_section_value:1
#: qiskit.aqua.parser.json_schema.JSONSchema.check_section_value:1
msgid "Check value for section name"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.commit_changes:1
#: qiskit.aqua.parser.json_schema.JSONSchema.commit_changes:1
msgid "Saves changes to original json schema"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.copy_section_from_aqua_schema:1
#: qiskit.aqua.parser.json_schema.JSONSchema.copy_section_from_aqua_schema:1
msgid ""
"Copy a section from aqua json schema if if exists :param section_name: "
"schema section to copy :type section_name: string"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_algorithm_problems:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_algorithm_problems:1
msgid ""
"Get algorithm problem name list :param algo_name: algorithm name :type "
"algo_name: string"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_algorithm_problems:5
#: qiskit.aqua.parser.json_schema.JSONSchema.get_algorithm_problems:5
msgid "Returns list of problem names"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_default_section_names:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_default_section_names:1
msgid "Returns default section names"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_default_sections:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_default_sections:1
msgid "Returns default sections"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_default_value:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_value:1
msgid "Returns default value for a schema section property"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_default_value:3
#: qiskit.aqua.parser.JSONSchema.get_section_default_properties:3
#: qiskit.aqua.parser.JSONSchema.get_section_types:3
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_value:3
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_default_properties:3
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_types:3
msgid "schema section"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_default_value:5
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_value:5
msgid "schema section property"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_default_value:8
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_value:8
msgid "Returns dafault value"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_default_values:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_values:1
msgid ""
"Returns default values for a schema section property :param section_name:"
" schema section :type section_name: string :param property_name: schema "
"section property :type property_name: string"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_default_values:7
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_default_values:7
msgid "Returns dafault values list"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_types:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_types:1
msgid ""
"Returns types for a schema section property :param section_name: schema "
"section :type section_name: string :param property_name: schema section "
"property :type property_name: string"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_property_types:7
#: qiskit.aqua.parser.json_schema.JSONSchema.get_property_types:7
msgid "Returns schema type list"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_section_default_properties:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_default_properties:1
msgid "Returns default properties for a schema section"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_section_default_properties:6
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_default_properties:6
msgid "Returns properties  dictionary"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_section_types:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_types:1
msgid "Returns types for a schema section"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_section_types:6
#: qiskit.aqua.parser.json_schema.JSONSchema.get_section_types:6
msgid "Returns schema tyoe array"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_value:1
#: qiskit.aqua.parser.json_schema.JSONSchema.get_value:1
msgid ""
"Returns a converted value based on schema types :param value: value :type"
" value: obj :param type: schema types :type type: array"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.get_value:7
#: qiskit.aqua.parser.json_schema.JSONSchema.get_value:7
msgid "Returns converted value"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.original_schema:1
#: qiskit.aqua.parser.json_schema.JSONSchema.original_schema:1
msgid "Returns original json schema"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.rollback_changes:1
#: qiskit.aqua.parser.json_schema.JSONSchema.rollback_changes:1
msgid "Restores schema from original json schema"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.schema:1
#: qiskit.aqua.parser.json_schema.JSONSchema.schema:1
msgid "Returns json schema"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.update_backend_schema:1
#: qiskit.aqua.parser.json_schema.JSONSchema.update_backend_schema:1
msgid "Updates backend schema"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.update_pluggable_schemas:1
#: qiskit.aqua.parser.json_schema.JSONSchema.update_pluggable_schemas:1
msgid "Updates schemas of all pluggables"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.update_pluggable_schemas:3
#: qiskit.aqua.parser.json_schema.JSONSchema.update_pluggable_schemas:3
msgid "input parser"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.validate_property:1
#: qiskit.aqua.parser.json_schema.JSONSchema.validate_property:1
msgid ""
"Validates the propery and returns error message :param sections_json: "
"sesctions :type sections_json: dict :param section_name: section name "
":type section_name: string :param property_name: property name :type "
"property_name: string"
msgstr ""

#: of qiskit.aqua.parser.JSONSchema.validate_property:9
#: qiskit.aqua.parser.json_schema.JSONSchema.validate_property:9
msgid "Returns error meessage or None"
msgstr ""

#: of qiskit.aqua.parser.BaseParser:1
#: qiskit.aqua.parser.base_parser.BaseParser:1
msgid "Base Aqua Parser."
msgstr ""

#: of qiskit.aqua.parser.BaseParser.add_section_properties:1
#: qiskit.aqua.parser.base_parser.BaseParser.add_section_properties:1
msgid ""
"Add new properties if don't exist, update the existent ones, other "
"properties are unchanged :param section_name: the name of the section, "
"case insensitive :type section_name: str :param new_properties: property "
"name: value :type new_properties: dict"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.add_section_properties:7
#: qiskit.aqua.parser.BaseParser.set_section_properties:7
#: qiskit.aqua.parser.base_parser.BaseParser.add_section_properties:7
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_properties:7
msgid "True if changed"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.delete_section:1
#: qiskit.aqua.parser.BaseParser.delete_section_properties:1
#: qiskit.aqua.parser.BaseParser.delete_section_property:1
#: qiskit.aqua.parser.BaseParser.set_section:1
#: qiskit.aqua.parser.BaseParser.set_section_property:1
#: qiskit.aqua.parser._inputparser.InputParser.delete_section:1
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section:1
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_properties:1
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_property:1
#: qiskit.aqua.parser.base_parser.BaseParser.set_section:1
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_property:1
#: qiskit.chemistry.parser.InputParser.delete_section:1
#: qiskit.chemistry.parser._inputparser.InputParser.delete_section:1
msgid "the name of the section, case insensitive"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.delete_section:4
#: qiskit.aqua.parser.BaseParser.delete_section_properties:4
#: qiskit.aqua.parser.BaseParser.delete_section_property:6
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section:4
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_properties:4
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_property:6
msgid "True if deleted"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.delete_section_property:3
#: qiskit.aqua.parser.base_parser.BaseParser.delete_section_property:3
msgid "the property name in the section"
msgstr ""

#: ../../api/qiskit.qasm.Qasm.rst:16:<autosummary>:1 of
#: qiskit.aqua.parser.BaseParser.get_filename:1
#: qiskit.aqua.parser.base_parser.BaseParser.get_filename:1
#: qiskit.qasm.Qasm.get_filename:1
msgid "Return the filename."
msgstr ""

#: of qiskit.aqua.parser.BaseParser.get_section:1
#: qiskit.aqua.parser.base_parser.BaseParser.get_section:1
msgid ""
"Return a Section by name. :param section_name: the name of the section, "
"case insensitive :type section_name: str"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.get_section:5
#: qiskit.aqua.parser.base_parser.BaseParser.get_section:5
msgid "The section with this name"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.get_section:8
#: qiskit.aqua.parser.base_parser.BaseParser.get_section:8
msgid "if the section does not exist."
msgstr ""

#: of qiskit.aqua.parser.BaseParser.get_section_names:1
#: qiskit.aqua.parser.base_parser.BaseParser.get_section_names:1
msgid "Return all the names of the sections."
msgstr ""

#: of qiskit.aqua.parser.BaseParser.get_section_property:1
#: qiskit.aqua.parser.base_parser.BaseParser.get_section_property:1
msgid ""
"Return a property by name. :param section_name: the name of the section, "
"case insensitive :type section_name: str :param property_name: the "
"property name in the section :type property_name: str :param "
"default_value: default value in case it is not found"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.get_section_property:8
#: qiskit.aqua.parser.base_parser.BaseParser.get_section_property:8
msgid "The property value"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.is_modified:1
#: qiskit.aqua.parser.base_parser.BaseParser.is_modified:1
msgid "Returns true if data has been changed"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.json_schema:1
#: qiskit.aqua.parser.base_parser.BaseParser.json_schema:1
msgid "Getter of _json_schema."
msgstr ""

#: ../../api/qiskit.qasm.Qasm.rst:16:<autosummary>:1 of
#: qiskit.aqua.parser.BaseParser.parse:1
#: qiskit.aqua.parser._inputparser.InputParser.parse:1
#: qiskit.aqua.parser.base_parser.BaseParser.parse:1
#: qiskit.chemistry.parser.InputParser.parse:1
#: qiskit.chemistry.parser._inputparser.InputParser.parse:1
#: qiskit.qasm.Qasm.parse:1
msgid "Parse the data."
msgstr ""

#: of qiskit.aqua.parser.BaseParser.set_section:4
#: qiskit.aqua.parser.base_parser.BaseParser.set_section:4
msgid "True if updated"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.set_section_data:1
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_data:1
msgid ""
"Sets a section data. :param section_name: the name of the section, case "
"insensitive :type section_name: str :param value: value to set"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.set_section_data:7
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_data:7
msgid "Bool: True if updated"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.set_section_properties:1
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_properties:1
msgid ""
"Replace all old properties with new ones :param section_name: the name of"
" the section, case insensitive :type section_name: str :param "
"new_properties: property name: value :type new_properties: dict"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.set_section_property:3
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_property:3
msgid "the name of the property"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.set_section_property:5
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_property:5
msgid "the value of the property"
msgstr ""

#: of qiskit.aqua.parser.BaseParser.set_section_property:8
#: qiskit.aqua.parser.base_parser.BaseParser.set_section_property:8
msgid "True if value changed"
msgstr ""

#: ../../api/qiskit.aqua.parser._inputparser.rst:2
msgid "qiskit.aqua.parser.\\_inputparser module"
msgstr ""

#: of qiskit.aqua.parser._inputparser.InputParser:1
#: qiskit.chemistry.parser.InputParser:1
#: qiskit.chemistry.parser._inputparser.InputParser:1
msgid "ベースクラス: :class:`qiskit.aqua.parser.base_parser.BaseParser`"
msgstr ""

#: of qiskit.aqua.parser._inputparser.InputParser:1
msgid "Aqua input Parser."
msgstr ""

#: ../../api/qiskit.aqua.parser.base_parser.rst:2
msgid "qiskit.aqua.parser.base\\_parser module"
msgstr ""

#: ../../api/qiskit.aqua.parser.json_schema.rst:2
msgid "qiskit.aqua.parser.json\\_schema module"
msgstr ""

#: ../../api/qiskit.aqua.pluggable.rst:2
msgid "qiskit.aqua.pluggable module"
msgstr ""

#: of qiskit.aqua.pluggable:1
msgid "This module implements the abstract base class for Pluggable modules."
msgstr ""

#: of qiskit.aqua.pluggable:3
msgid ""
"To create add-on pluggable modules subclass the Pluggable class in this "
"module. Doing so requires that the required pluggable interface is "
"implemented."
msgstr ""

#: ../../api/qiskit.aqua.preferences.rst:2
msgid "qiskit.aqua.preferences module"
msgstr ""

#: ../../api/qiskit.aqua.qiskit_aqua.rst:2
msgid "qiskit.aqua.qiskit\\_aqua module"
msgstr ""

#: of qiskit.aqua.qiskit_aqua:1
msgid "Algorithm functions for running etc."
msgstr ""

#: ../../api/qiskit.aqua.qiskit_aqua_globals.rst:2
msgid "qiskit.aqua.qiskit\\_aqua\\_globals module"
msgstr ""

#: of qiskit.aqua.qiskit_aqua_globals.QiskitAquaGlobals:1
msgid "Aqua class for global properties."
msgstr ""

#: of qiskit.aqua.qiskit_aqua_globals.QiskitAquaGlobals.num_processes:1
msgid "Return num processes."
msgstr ""

#: of qiskit.aqua.qiskit_aqua_globals.QiskitAquaGlobals.random_seed:1
msgid "Return random seed."
msgstr ""

#: ../../api/qiskit.aqua.quantum_instance.rst:2
msgid "qiskit.aqua.quantum\\_instance module"
msgstr ""

#: ../../api/qiskit.aqua.translators.rst:2
msgid "qiskit.aqua.translators package"
msgstr ""

#: ../../api/qiskit.aqua.translators.data_providers.rst:2
msgid "qiskit.aqua.translators.data\\_providers package"
msgstr ""

#: ../../api/qiskit.aqua.translators.data_providers._base_data_provider.rst:2
msgid "qiskit.aqua.translators.data\\_providers.\\_base\\_data\\_provider module"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider:1
msgid ""
"This module implements the abstract base class for data_provider modules "
"within Qiskit Finance."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider:4
msgid ""
"To create add-on data_provider module subclass the BaseDataProvider class"
" in this module. Doing so requires that the required driver interface is "
"implemented."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider:7
msgid ""
"To use the subclasses, please see https://github.com/Qiskit/qiskit-"
"tutorials/qiskit/finance/data_providers/time_series.ipynb"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.check_driver_valid:1
#: qiskit.chemistry.drivers.BaseDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.GaussianDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.PSI4Driver.check_driver_valid:1
#: qiskit.chemistry.drivers.PyQuanteDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.PySCFDriver.check_driver_valid:1
#: qiskit.chemistry.drivers._basedriver.BaseDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.psi4d.PSI4Driver.check_driver_valid:1
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver.check_driver_valid:1
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver.check_driver_valid:1
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver.check_driver_valid:1
msgid "Checks if driver is ready for use. Throws an exception if not"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.configuration:1
#: qiskit.chemistry.drivers.BaseDriver.configuration:1
#: qiskit.chemistry.drivers._basedriver.BaseDriver.configuration:1
msgid "Return driver configuration."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_coordinates:1
msgid "Returns random coordinates for visualisation purposes."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_covariance_matrix:1
msgid "Returns the covariance matrix."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_covariance_matrix:3
msgid "an asset-to-asset covariance matrix."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_mean_vector:1
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_covariance_matrix:1
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_mean_vector:1
msgid "Returns a vector containing the mean value of each asset."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_mean_vector:3
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_covariance_matrix:3
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_period_return_mean_vector:3
msgid "a per-asset mean vector."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_similarity_matrix:1
msgid "Returns time-series similarity matrix computed using dynamic time warping."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.get_similarity_matrix:3
msgid "an asset-to-asset similarity matrix."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.init_from_input:1
msgid "Initialize via section dictionary. N.B. Not in use at the moment."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.init_from_input:3
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider.init_from_input:3
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider.init_from_input:3
#: qiskit.chemistry.drivers.BaseDriver.init_from_input:3
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input:3
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input:3
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input:3
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input:3
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input:3
#: qiskit.chemistry.drivers._basedriver.BaseDriver.init_from_input:3
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver.init_from_input:3
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver.init_from_input:3
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver.init_from_input:3
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver.init_from_input:3
#: qiskit.chemistry.drivers.psi4d.PSI4Driver.init_from_input:3
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver.init_from_input:3
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver.init_from_input:3
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver.init_from_input:3
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver.init_from_input:3
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver.init_from_input:3
msgid "section dictionary"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.init_from_input:6
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider.init_from_input:6
#: qiskit.chemistry.drivers.BaseDriver.init_from_input:6
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input:6
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input:6
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input:6
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input:6
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input:6
#: qiskit.chemistry.drivers._basedriver.BaseDriver.init_from_input:6
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver.init_from_input:6
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver.init_from_input:6
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver.init_from_input:6
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver.init_from_input:6
#: qiskit.chemistry.drivers.psi4d.PSI4Driver.init_from_input:6
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver.init_from_input:6
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver.init_from_input:6
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver.init_from_input:6
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver.init_from_input:6
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver.init_from_input:6
msgid "Driver object"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.run:1
msgid "Loads data."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider.validate:1
msgid ""
"Validates the configuration against the input schema. N.B. Not in use at "
"the moment."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers._base_data_provider.QiskitFinanceError:1
msgid "ベースクラス: :class:`qiskit.aqua.aqua_error.AquaError`"
msgstr ""

#: ../../api/qiskit.aqua.translators.data_providers.data_on_demand_provider.rst:2
msgid ""
"qiskit.aqua.translators.data\\_providers.data\\_on\\_demand\\_provider "
"module"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider:1
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider:1
msgid ""
"ベースクラス: "
":class:`qiskit.aqua.translators.data_providers._base_data_provider.BaseDataProvider`"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider:1
msgid ""
"Python implementation of an NASDAQ Data on Demand data provider. Please "
"see: https://github.com/Qiskit/qiskit-"
"tutorials/qiskit/finance/data_providers/time_series.ipynb for "
"instructions on use, which involve obtaining a NASDAQ DOD access token."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider.init_from_input:1
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider.init_from_input:1
#: qiskit.chemistry.drivers.BaseDriver.init_from_input:1
#: qiskit.chemistry.drivers.GaussianDriver.init_from_input:1
#: qiskit.chemistry.drivers.HDF5Driver.init_from_input:1
#: qiskit.chemistry.drivers.PSI4Driver.init_from_input:1
#: qiskit.chemistry.drivers.PyQuanteDriver.init_from_input:1
#: qiskit.chemistry.drivers.PySCFDriver.init_from_input:1
#: qiskit.chemistry.drivers._basedriver.BaseDriver.init_from_input:1
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver.init_from_input:1
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver.init_from_input:1
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver.init_from_input:1
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver.init_from_input:1
#: qiskit.chemistry.drivers.psi4d.PSI4Driver.init_from_input:1
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver.init_from_input:1
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver.init_from_input:1
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver.init_from_input:1
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver.init_from_input:1
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver.init_from_input:1
msgid "Initialize via section dictionary."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers.data_on_demand_provider.DataOnDemandProvider.run:1
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider.run:1
msgid ""
"Loads data, thus enabling get_similarity_matrix and get_covariance_matrix"
" methods in the base class."
msgstr ""

#: ../../api/qiskit.aqua.translators.data_providers.exchange_data_provider.rst:2
msgid "qiskit.aqua.translators.data\\_providers.exchange\\_data\\_provider module"
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider:1
msgid ""
"Python implementation of an Exchange Data provider. Please see: "
"https://github.com/Qiskit/qiskit-"
"tutorials/qiskit/finance/data_providers/time_series.ipynb for "
"instructions on use, which involve obtaining a Quandl access token."
msgstr ""

#: of
#: qiskit.aqua.translators.data_providers.exchange_data_provider.ExchangeDataProvider.init_from_input:6
msgid "DataProvider object"
msgstr ""

#: ../../api/qiskit.aqua.translators.data_providers.random_data_provider.rst:2
msgid "qiskit.aqua.translators.data\\_providers.random\\_data\\_provider module"
msgstr ""

#: ../../api/qiskit.aqua.translators.data_providers.wikipedia_data_provider.rst:2
msgid ""
"qiskit.aqua.translators.data\\_providers.wikipedia\\_data\\_provider "
"module"
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.rst:2
msgid "qiskit.aqua.translators.ising package"
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.clique.rst:2
msgid "qiskit.aqua.translators.ising.clique module"
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:1
msgid "Generate Hamiltonian for the clique"
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:3
#: qiskit.aqua.translators.ising.clique.satisfy_or_not:5
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops:3
#: qiskit.aqua.translators.ising.graph_partition.objective_value:5
#: qiskit.aqua.translators.ising.max_cut.get_max_cut_qubitops:3
#: qiskit.aqua.translators.ising.max_cut.max_cut_value:5
#: qiskit.aqua.translators.ising.stable_set.get_stable_set_qubitops:3
#: qiskit.aqua.translators.ising.stable_set.stable_set_value:6
#: qiskit.aqua.translators.ising.tsp.tsp_value:5
#: qiskit.aqua.translators.ising.vertex_cover.check_full_edge_coverage:3
msgid "adjacency matrix."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:6
#: qiskit.aqua.translators.ising.docplex.get_qubitops:11
#: qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops:6
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops:6
#: qiskit.aqua.translators.ising.max_cut.get_max_cut_qubitops:6
#: qiskit.aqua.translators.ising.partition.get_partition_qubitops:9
#: qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops:4
#: qiskit.aqua.translators.ising.stable_set.get_stable_set_qubitops:6
#: qiskit.aqua.translators.ising.tsp.get_tsp_qubitops:8
#: qiskit.aqua.translators.ising.vertex_cover.get_vertex_cover_qubitops:5
msgid "operator for the Hamiltonian and a constant shift for the obj function."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:11
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops:11
msgid "Goals:"
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:11
msgid "can we find a complete graph of size K?"
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:13
msgid ""
"Hamiltonian: suppose Xv denotes whether v should appear in the clique "
"(Xv=1 or 0) H = Ha + Hb Ha = (K-sum_{v}{Xv})^2 Hb = K(K−1)/2 􏰏- "
"sum_{(u,v)\\in E}{XuXv}"
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:19
msgid ""
"Besides, Xv = (Zv+1)/2 By replacing Xv with Zv and simplifying it, we get"
" what we want below."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:22
msgid "Note: in practice, we use H = A*Ha + Bb,"
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:23
msgid "where A is a large constant such as 1000."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:24
msgid ""
"A is like a huge penality over the violation of Ha, which forces Ha to be"
" 0, i.e., you have exact K vertices selected. Under this assumption, Hb ="
" 0 starts to make sense, it means the subgraph constitutes a clique or "
"complete graph. Note the lowest possible value of Hb is 0."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_clique_qubitops:30
msgid ""
"Without the above assumption, Hb may be negative (say you select all). In"
" this case, one needs to use Hb^2 in the hamiltonian to minimize the "
"difference."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_graph_solution:1
#: qiskit.aqua.translators.ising.graph_partition.get_graph_solution:1
#: qiskit.aqua.translators.ising.max_cut.get_graph_solution:1
#: qiskit.aqua.translators.ising.stable_set.get_graph_solution:1
#: qiskit.aqua.translators.ising.tsp.get_tsp_solution:1
#: qiskit.aqua.translators.ising.vertex_cover.get_graph_solution:1
msgid "Get graph solution from binary string."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_graph_solution:3
#: qiskit.aqua.translators.ising.clique.get_gset_result:3
#: qiskit.aqua.translators.ising.clique.satisfy_or_not:3
#: qiskit.aqua.translators.ising.exact_cover.get_solution:1
#: qiskit.aqua.translators.ising.graph_partition.get_graph_solution:3
#: qiskit.aqua.translators.ising.graph_partition.get_gset_result:3
#: qiskit.aqua.translators.ising.graph_partition.objective_value:3
#: qiskit.aqua.translators.ising.max_cut.get_graph_solution:3
#: qiskit.aqua.translators.ising.max_cut.get_gset_result:3
#: qiskit.aqua.translators.ising.max_cut.max_cut_value:3
#: qiskit.aqua.translators.ising.partition.partition_value:3
#: qiskit.aqua.translators.ising.set_packing.get_solution:1
#: qiskit.aqua.translators.ising.stable_set.get_graph_solution:3
#: qiskit.aqua.translators.ising.tsp.get_tsp_solution:3
#: qiskit.aqua.translators.ising.tsp.tsp_feasible:3
#: qiskit.aqua.translators.ising.vertex_cover.check_full_edge_coverage:1
#: qiskit.aqua.translators.ising.vertex_cover.get_graph_solution:3
#: qiskit.aqua.translators.ising.vertex_cover.get_gset_result:3
msgid "binary string as numpy array."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_graph_solution:6
#: qiskit.aqua.translators.ising.exact_cover.get_solution:4
#: qiskit.aqua.translators.ising.graph_partition.get_graph_solution:6
#: qiskit.aqua.translators.ising.max_cut.get_graph_solution:6
#: qiskit.aqua.translators.ising.set_packing.get_solution:4
#: qiskit.aqua.translators.ising.stable_set.get_graph_solution:6
#: qiskit.aqua.translators.ising.vertex_cover.get_graph_solution:6
msgid "graph solution as binary numpy array."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_gset_result:1
#: qiskit.aqua.translators.ising.graph_partition.get_gset_result:1
#: qiskit.aqua.translators.ising.max_cut.get_gset_result:1
#: qiskit.aqua.translators.ising.vertex_cover.get_gset_result:1
msgid "Get graph solution in Gset format from binary string."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.get_gset_result:6
#: qiskit.aqua.translators.ising.graph_partition.get_gset_result:6
#: qiskit.aqua.translators.ising.max_cut.get_gset_result:6
#: qiskit.aqua.translators.ising.vertex_cover.get_gset_result:6
msgid "graph solution in Gset format."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.parse_gset_format:1
#: qiskit.aqua.translators.ising.graph_partition.parse_gset_format:1
#: qiskit.aqua.translators.ising.max_cut.parse_gset_format:1
#: qiskit.aqua.translators.ising.stable_set.parse_gset_format:1
#: qiskit.aqua.translators.ising.vertex_cover.parse_gset_format:1
msgid "Read graph in Gset format from file."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.parse_gset_format:3
#: qiskit.aqua.translators.ising.exact_cover.read_numbers_from_file:3
#: qiskit.aqua.translators.ising.graph_partition.parse_gset_format:3
#: qiskit.aqua.translators.ising.max_cut.parse_gset_format:3
#: qiskit.aqua.translators.ising.partition.read_numbers_from_file:3
#: qiskit.aqua.translators.ising.set_packing.read_numbers_from_file:3
#: qiskit.aqua.translators.ising.stable_set.parse_gset_format:3
#: qiskit.aqua.translators.ising.tsp.parse_tsplib_format:3
#: qiskit.aqua.translators.ising.vertex_cover.parse_gset_format:3
msgid "name of the file."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.parse_gset_format:6
#: qiskit.aqua.translators.ising.graph_partition.parse_gset_format:6
#: qiskit.aqua.translators.ising.max_cut.parse_gset_format:6
#: qiskit.aqua.translators.ising.stable_set.parse_gset_format:6
#: qiskit.aqua.translators.ising.vertex_cover.parse_gset_format:6
msgid "adjacency matrix as a 2D numpy array."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.random_graph:1
#: qiskit.aqua.translators.ising.graph_partition.random_graph:1
#: qiskit.aqua.translators.ising.vertex_cover.random_graph:1
msgid "Generate random Erdos-Renyi graph."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.random_graph:3
#: qiskit.aqua.translators.ising.graph_partition.random_graph:3
#: qiskit.aqua.translators.ising.max_cut.random_graph:3
#: qiskit.aqua.translators.ising.stable_set.random_graph:3
#: qiskit.aqua.translators.ising.tsp.random_tsp:3
#: qiskit.aqua.translators.ising.vertex_cover.random_graph:3
msgid "number of nodes."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.random_graph:5
#: qiskit.aqua.translators.ising.graph_partition.random_graph:5
#: qiskit.aqua.translators.ising.max_cut.random_graph:5
#: qiskit.aqua.translators.ising.vertex_cover.random_graph:5
msgid "weights will be smaller than this value, in absolute value."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.random_graph:8
#: qiskit.aqua.translators.ising.graph_partition.random_graph:8
#: qiskit.aqua.translators.ising.max_cut.random_graph:8
#: qiskit.aqua.translators.ising.stable_set.random_graph:5
#: qiskit.aqua.translators.ising.vertex_cover.random_graph:8
msgid "probability of edge appearing."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.random_graph:10
#: qiskit.aqua.translators.ising.graph_partition.random_graph:10
#: qiskit.aqua.translators.ising.max_cut.random_graph:10
#: qiskit.aqua.translators.ising.tsp.random_tsp:9
#: qiskit.aqua.translators.ising.vertex_cover.random_graph:10
msgid "name of file where to save graph."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.random_graph:12
#: qiskit.aqua.translators.ising.graph_partition.random_graph:12
#: qiskit.aqua.translators.ising.max_cut.random_graph:12
#: qiskit.aqua.translators.ising.portfolio.random_model:5
#: qiskit.aqua.translators.ising.tsp.random_tsp:11
#: qiskit.aqua.translators.ising.vertex_cover.random_graph:12
msgid "random seed - if None, will not initialize."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.random_graph:15
#: qiskit.aqua.translators.ising.graph_partition.random_graph:15
#: qiskit.aqua.translators.ising.max_cut.random_graph:15
#: qiskit.aqua.translators.ising.stable_set.random_graph:10
#: qiskit.aqua.translators.ising.vertex_cover.random_graph:15
msgid "adjacency matrix (with weights)."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.sample_most_likely:1
#: qiskit.aqua.translators.ising.docplex.sample_most_likely:1
#: qiskit.aqua.translators.ising.exact_cover.sample_most_likely:1
#: qiskit.aqua.translators.ising.max_cut.sample_most_likely:1
#: qiskit.aqua.translators.ising.partition.sample_most_likely:1
#: qiskit.aqua.translators.ising.portfolio.sample_most_likely:1
#: qiskit.aqua.translators.ising.set_packing.sample_most_likely:1
#: qiskit.aqua.translators.ising.stable_set.sample_most_likely:1
#: qiskit.aqua.translators.ising.tsp.sample_most_likely:1
msgid "Compute the most likely binary string from state vector."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.sample_most_likely:3
#: qiskit.aqua.translators.ising.exact_cover.sample_most_likely:3
#: qiskit.aqua.translators.ising.set_packing.sample_most_likely:3
msgid "number of  qubits."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.sample_most_likely:5
#: qiskit.aqua.translators.ising.docplex.sample_most_likely:3
#: qiskit.aqua.translators.ising.exact_cover.sample_most_likely:5
#: qiskit.aqua.translators.ising.max_cut.sample_most_likely:3
#: qiskit.aqua.translators.ising.partition.sample_most_likely:3
#: qiskit.aqua.translators.ising.portfolio.sample_most_likely:3
#: qiskit.aqua.translators.ising.set_packing.sample_most_likely:5
#: qiskit.aqua.translators.ising.stable_set.sample_most_likely:3
#: qiskit.aqua.translators.ising.tsp.sample_most_likely:3
msgid "state vector or counts."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.sample_most_likely:8
#: qiskit.aqua.translators.ising.docplex.sample_most_likely:6
#: qiskit.aqua.translators.ising.exact_cover.sample_most_likely:8
#: qiskit.aqua.translators.ising.graph_partition.sample_most_likely:5
#: qiskit.aqua.translators.ising.max_cut.sample_most_likely:6
#: qiskit.aqua.translators.ising.partition.sample_most_likely:6
#: qiskit.aqua.translators.ising.portfolio.sample_most_likely:6
#: qiskit.aqua.translators.ising.set_packing.sample_most_likely:8
#: qiskit.aqua.translators.ising.stable_set.sample_most_likely:6
#: qiskit.aqua.translators.ising.tsp.sample_most_likely:6
#: qiskit.aqua.translators.ising.vertex_cover.sample_most_likely:5
msgid "binary string as numpy.ndarray of ints."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.satisfy_or_not:1
#: qiskit.aqua.translators.ising.graph_partition.objective_value:1
#: qiskit.aqua.translators.ising.max_cut.max_cut_value:1
msgid "Compute the value of a cut."
msgstr ""

#: of qiskit.aqua.translators.ising.clique.satisfy_or_not:8
#: qiskit.aqua.translators.ising.graph_partition.objective_value:8
#: qiskit.aqua.translators.ising.max_cut.max_cut_value:8
#: qiskit.aqua.translators.ising.tsp.tsp_value:8
#: qiskit.aqua.translators.ising.vertex_cover.check_full_edge_coverage:6
msgid "value of the cut."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.docplex.rst:2
msgid "qiskit.aqua.translators.ising.docplex module"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:1
msgid ""
"Automatically generate Ising Hamiltonians from general models of "
"optimization problems. This program converts general models of "
"optimization problems into Ising Hamiltonian. To write models of "
"optimization problems, DOcplex (Python library for optimization problems)"
" is used in the program. (https://cdn.rawgit.com/IBMDecisionOptimization"
"/docplex-doc/master/docs/index.html)"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:6
msgid ""
"It supports models that consist of the following elements now. - Binary "
"variables. - Linear or quadratic object function. - Equality constraints."
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:10
msgid ""
"Symbols in constrains have to be equal (==). Inequality constrains (e.g. "
"x+y <= 5) are not allowed."
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:13
msgid ""
"The following is an example of use. --- # Create an instance of a model "
"and variables with DOcplex. mdl = Model(name='tsp') x = {(i,p): "
"mdl.binary_var(name='x_{0}_{1}'.format(i,p)) for i in range(num_node) for"
" p in range(num_node)}"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:19
msgid ""
"# Object function tsp_func = mdl.sum(ins.w[i,j] * x[(i,p)] * "
"x[(j,(p+1)%num_node)] for i in range(num_node) for j in range(num_node) "
"for p in range(num_node)) mdl.minimize(tsp_func)"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:23
msgid "# Constrains for i in range(num_node):"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:25
msgid "mdl.add_constraint(mdl.sum(x[(i,p)] for p in range(num_node)) == 1)"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:27
msgid "for p in range(num_node):"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:27
msgid "mdl.add_constraint(mdl.sum(x[(i,p)] for i in range(num_node)) == 1)"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:29
msgid ""
"# Call the method to convert the model into Ising Hamiltonian. qubitOp, "
"offset = get_qubitops(mdl)"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex:32
msgid ""
"# Calculate with the generated Ising Hamiltonian. ee = "
"ExactEigensolver(qubitOp, k=1) result = ee.run() print('get_qubitops') "
"print('tsp objective:', result['energy'] + offset) ---"
msgstr ""

#: of qiskit.aqua.translators.ising.docplex.get_qubitops:1
msgid "Generate Ising Hamiltonian from a model of DOcplex."
msgstr ""

#: of qiskit.aqua.translators.ising.docplex.get_qubitops:3
msgid "A model of DOcplex for a optimization problem."
msgstr ""

#: of qiskit.aqua.translators.ising.docplex.get_qubitops:5
msgid ""
"If true, the penalty coefficient is automatically defined by "
"\"_auto_define_penalty()\"."
msgstr ""

#: of qiskit.aqua.translators.ising.docplex.get_qubitops:7
msgid ""
"The default value of the penalty coefficient for the constraints. This "
"value is used if \"auto_penalty\" is False."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.exact_cover.rst:2
msgid "qiskit.aqua.translators.ising.exact\\_cover module"
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops:1
msgid "Construct the Hamiltonian for the exact solver problem"
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops:4
msgid "list of lists (i.e., subsets)"
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops:11
msgid "Assumption:"
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops:11
msgid "the union of the subsets contains all the elements to cover"
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops:14
msgid "The Hamiltonian is:"
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.get_exact_cover_qubitops:14
msgid ""
"sum_{each element e}{(1-sum_{every subset_i that contains e}{Xi})^2}, "
"where Xi (Xi=1 or 0) means whether should include the subset i."
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.random_number_list:1
#: qiskit.aqua.translators.ising.partition.random_number_list:1
#: qiskit.aqua.translators.ising.set_packing.random_number_list:1
msgid "Generate a set of positive integers within the given range."
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.random_number_list:3
#: qiskit.aqua.translators.ising.partition.random_number_list:3
#: qiskit.aqua.translators.ising.set_packing.random_number_list:3
msgid "size of the set of numbers."
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.random_number_list:5
#: qiskit.aqua.translators.ising.partition.random_number_list:5
#: qiskit.aqua.translators.ising.set_packing.random_number_list:5
msgid "maximum absolute value of the numbers."
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.random_number_list:7
#: qiskit.aqua.translators.ising.partition.random_number_list:7
#: qiskit.aqua.translators.ising.set_packing.random_number_list:7
msgid "write numbers to this file."
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.random_number_list:10
#: qiskit.aqua.translators.ising.partition.random_number_list:10
#: qiskit.aqua.translators.ising.set_packing.random_number_list:10
msgid "the list of integer numbers."
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.read_numbers_from_file:1
#: qiskit.aqua.translators.ising.partition.read_numbers_from_file:1
#: qiskit.aqua.translators.ising.set_packing.read_numbers_from_file:1
msgid "Read numbers from a file"
msgstr ""

#: of qiskit.aqua.translators.ising.exact_cover.read_numbers_from_file:6
#: qiskit.aqua.translators.ising.partition.read_numbers_from_file:6
#: qiskit.aqua.translators.ising.set_packing.read_numbers_from_file:6
msgid "list of numbers as a numpy.ndarray."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.graph_partition.rst:2
msgid "qiskit.aqua.translators.ising.graph\\_partition module"
msgstr ""

#: of
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops:1
msgid "Generate Hamiltonian for the graph partitioning"
msgstr ""

#: of
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops:11
msgid ""
"1 separate the vertices into two set of the same size 2 make sure the "
"number of edges between the two set is minimized."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.graph_partition.get_graph_partition_qubitops:13
msgid ""
"Hamiltonian: H = H_A + H_B H_A = sum\\_{(i,j)\\in E}{(1-ZiZj)/2} H_B = "
"(sum_{i}{Zi})^2 = sum_{i}{Zi^2}+sum_{i!=j}{ZiZj} H_A is for achieving "
"goal 2 and H_B is for achieving goal 1."
msgstr ""

#: of qiskit.aqua.translators.ising.graph_partition.sample_most_likely:1
#: qiskit.aqua.translators.ising.vertex_cover.sample_most_likely:1
msgid ""
"Compute the most likely binary string from state vector. :param "
"state_vector: state vector or counts. :type state_vector: numpy.ndarray "
"or dict"
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.max_cut.rst:2
msgid "qiskit.aqua.translators.ising.max\\_cut module"
msgstr ""

#: of qiskit.aqua.translators.ising.max_cut.get_max_cut_qubitops:1
msgid "Generate Hamiltonian for the max-cut problem of a graph."
msgstr ""

#: of qiskit.aqua.translators.ising.max_cut.random_graph:1
msgid "Generate random Erdos-Renyi graph for Max-Cut."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.partition.rst:2
msgid "qiskit.aqua.translators.ising.partition module"
msgstr ""

#: of qiskit.aqua.translators.ising.partition.get_partition_qubitops:1
msgid "Construct the Hamiltonian for a given Partition instance."
msgstr ""

#: of qiskit.aqua.translators.ising.partition.get_partition_qubitops:3
msgid ""
"Given a list of numbers for the Number Partitioning problem, we construct"
" the Hamiltonian described as a list of Pauli gates."
msgstr ""

#: of qiskit.aqua.translators.ising.partition.get_partition_qubitops:6
msgid "array of values."
msgstr ""

#: of qiskit.aqua.translators.ising.partition.partition_value:1
msgid "Compute the value of a partition."
msgstr ""

#: of qiskit.aqua.translators.ising.partition.partition_value:5
msgid "list of numbers in the instance."
msgstr ""

#: of qiskit.aqua.translators.ising.partition.partition_value:8
msgid "difference squared between the two sides of the number     partition."
msgstr ""

#: of qiskit.aqua.translators.ising.partition.partition_value:10
msgid "difference squared between the two sides of the number"
msgstr ""

#: of qiskit.aqua.translators.ising.partition.partition_value:11
msgid "partition."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.portfolio.rst:2
msgid "qiskit.aqua.translators.ising.portfolio module"
msgstr ""

#: of qiskit.aqua.translators.ising.portfolio.random_model:1
msgid "Generate random model (mu, sigma) for portfolio optimization problem."
msgstr ""

#: of qiskit.aqua.translators.ising.portfolio.random_model:3
msgid "number of assets."
msgstr ""

#: of qiskit.aqua.translators.ising.portfolio.random_model:8
msgid "expected return vector numpy.ndarray: covariance matrix"
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.portfolio_diversification.rst:2
msgid "qiskit.aqua.translators.ising.portfolio\\_diversification module"
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops:1
msgid "Converts an instnance of portfolio optimization into a list of Paulis."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops:3
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution:3
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value:3
msgid "an asset-to-asset similarity matrix, such as the covariance matrix."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops:5
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution:5
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value:5
msgid "the number of assets."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops:7
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution:7
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value:7
msgid "the number of clusters of assets to output."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_qubitops:10
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops:10
msgid "operator for the Hamiltonian."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution:1
msgid ""
"Tries to obtain a feasible solution (in vector form) of an instnance of "
"portfolio diversification from the results dictionary."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution:9
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution:10
msgid "a dictionary obtained by QAOA.run or VQE.run containing key 'eigvecs'."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_solution:12
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value:9
msgid "a vector describing the solution."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value:1
msgid ""
"Evaluates an objective function of an instnance of portfolio "
"diversification and its solution (in vector form)."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.portfolio_diversification.get_portfoliodiversification_value:12
msgid "cost of the solution."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.set_packing.rst:2
msgid "qiskit.aqua.translators.ising.set\\_packing module"
msgstr ""

#: of qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops:1
msgid ""
"Construct the Hamiltonian for the set packing :param list_of_subsets: "
"list of lists (i.e., subsets)"
msgstr ""

#: of qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops:8
msgid "find the maximal number of subsets which are disjoint pairwise."
msgstr ""

#: of qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops:10
msgid ""
"Hamiltonian: H = A Ha + B Hb Ha = sum_{Si and Sj overlaps}{XiXj} Hb = "
"-sum_{i}{Xi}"
msgstr ""

#: of qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops:15
msgid ""
"Ha is to ensure the disjoint condition, while Hb is to achieve the "
"maximal number. Ha is hard constraint that must be satisified. Therefore "
"A >> B. In the following, we set A=10 and B = 1"
msgstr ""

#: of qiskit.aqua.translators.ising.set_packing.get_set_packing_qubitops:19
msgid "Note Xi = (Zi + 1)/2"
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.stable_set.rst:2
msgid "qiskit.aqua.translators.ising.stable\\_set module"
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.get_stable_set_qubitops:1
msgid "Generate Hamiltonian for the maximum stable set in a graph."
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.random_graph:1
msgid "Generate a random Erdos-Renyi graph on n nodes."
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.random_graph:7
msgid "write graph to this file."
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.stable_set_value:1
msgid "Compute the value of a stable set, and its feasibility."
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.stable_set_value:3
msgid "binary string in original format -- not graph solution!."
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.stable_set_value:9
msgid "size of the stable set, and Boolean indicating     feasibility."
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.stable_set_value:11
msgid "size of the stable set, and Boolean indicating"
msgstr ""

#: of qiskit.aqua.translators.ising.stable_set.stable_set_value:12
msgid "feasibility."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.tsp.rst:2
msgid "qiskit.aqua.translators.ising.tsp module"
msgstr ""

#: of qiskit.aqua.translators.ising.tsp:1
msgid ""
"Convert symmetric TSP instances into Pauli list Deal with TSPLIB format. "
"It supports only EUC_2D edge weight type. See https://wwwproxy.iwr.uni-"
"heidelberg.de/groups/comopt/software/TSPLIB95/ and http://elib.zib.de/pub"
"/mp-testdata/tsp/tsplib/tsp/index.html Design the tsp object `w` as a "
"two-dimensional np.array e.g., w[i, j] = x means that the length of a "
"edge between i and j is x Note that the weights are symmetric, i.e., w[j,"
" i] = x always holds."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.TspData.w:1
msgid "Alias for field number 3"
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.get_tsp_qubitops:1
msgid "Generate Hamiltonian for TSP of a graph."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.get_tsp_qubitops:3
msgid "TSP data including coordinates and distances."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.get_tsp_qubitops:5
msgid "Penalty coefficient for the constraints"
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.get_tsp_solution:6
msgid "sequence of cities to traverse."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.logger:1
msgid "Instance data of TSP"
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.parse_tsplib_format:1
msgid "Read graph in TSPLIB format from file."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.parse_tsplib_format:6
#: qiskit.aqua.translators.ising.tsp.random_tsp:16
msgid "instance data."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.random_tsp:1
msgid "Generate a random instance for TSP."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.random_tsp:5
msgid "lower bound of coordinate."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.random_tsp:7
msgid "uppper bound of coordinate."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.random_tsp:13
msgid "name of an instance"
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.tsp_feasible:1
msgid "Check whether a solution is feasible or not."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.tsp_feasible:6
msgid "feasible or not."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.tsp_value:1
msgid "Compute the TSP value of a solution."
msgstr ""

#: of qiskit.aqua.translators.ising.tsp.tsp_value:3
msgid "list of cities."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.vehicle_routing.rst:2
msgid "qiskit.aqua.translators.ising.vehicle\\_routing module"
msgstr ""

#: of qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost:1
msgid ""
"Computes the cost of a solution to an instnance of a vehicle routing "
"problem."
msgstr ""

#: of qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost:3
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices:6
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops:3
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution:4
msgid "a customers-to-customers distance matrix."
msgstr ""

#: of qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost:5
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices:8
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops:5
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution:6
msgid "the number of customers."
msgstr ""

#: of qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost:7
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices:10
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops:7
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution:8
msgid "the number of vehicles available."
msgstr ""

#: of qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost:9
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution:13
msgid "a solution, i.e., a path, in its binary representation."
msgstr ""

#: of qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_cost:12
msgid "objective function value."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices:4
msgid "Constructs auxiliary matrices from a vehicle routing instance,"
msgstr ""

#: of
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices:2
msgid ""
"which represent the encoding into a binary quadratic program. This is "
"used in the construction of the qubit ops and computation of the solution"
" cost."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_matrices:13
msgid ""
"a matrix defining the interactions between variables. g (numpy.ndarray) :"
" a matrix defining the contribution from the individual variables. c "
"(float) : the constant offset."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_qubitops:1
msgid "Converts an instnance of a vehicle routing problem into a list of Paulis."
msgstr ""

#: of
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution:2
msgid "Tries to obtain a feasible solution (in vector form) of an instnance"
msgstr ""

#: of
#: qiskit.aqua.translators.ising.vehicle_routing.get_vehiclerouting_solution:2
msgid "of vehicle routing from the results dictionary."
msgstr ""

#: ../../api/qiskit.aqua.translators.ising.vertex_cover.rst:2
msgid "qiskit.aqua.translators.ising.vertex\\_cover module"
msgstr ""

#: of qiskit.aqua.translators.ising.vertex_cover.get_vertex_cover_qubitops:1
msgid ""
"Generate Hamiltonian for the vertex cover :param weight_matrix: adjacency"
" matrix. :type weight_matrix: numpy.ndarray"
msgstr ""

#: of qiskit.aqua.translators.ising.vertex_cover.get_vertex_cover_qubitops:9
msgid ""
"Goals: 1 color some vertices as red such that every edge is connected to "
"some red vertex 2 minimize the vertices to be colored as red"
msgstr ""

#: of qiskit.aqua.translators.ising.vertex_cover.get_vertex_cover_qubitops:13
msgid ""
"Hamiltonian: H = A * H_A + H_B H_A = sum\\_{(i,j)\\in E}{(1-Xi)(1-Xj)} "
"H_B = sum_{i}{Zi}"
msgstr ""

#: of qiskit.aqua.translators.ising.vertex_cover.get_vertex_cover_qubitops:18
msgid ""
"H_A is to achieve goal 1 while H_b is to achieve goal 2. H_A is hard "
"constraint so we place a huge penality on it. A=5. Note Xi = (Zi+1)/2"
msgstr ""

#: ../../api/qiskit.aqua.utils.rst:2
msgid "qiskit.aqua.utils package"
msgstr ""

#: of qiskit.aqua.utils.tensor_product.tensorproduct:1
#: qiskit.aqua.utils.tensorproduct:1
msgid "Calculate tensor product."
msgstr ""

#: of qiskit.aqua.utils.tensor_product.tensorproduct:3
#: qiskit.aqua.utils.tensorproduct:3
msgid ""
"m = tensorproduct(a,b,c,...) returns the kronecker product of its "
"arguments. Each argument should either be a tensor, or a tuple containing"
" a tensor and an integer, and tensor is put in zero-index slot. In the "
"latter case, the integer specifies the repeat count for the tensor, e.g. "
"tensorproduct(a,(b,3),c) = tensorproduct(a,b,b,b,c)."
msgstr ""

#: of qiskit.aqua.utils.tensor_product.tensorproduct:11
#: qiskit.aqua.utils.tensorproduct:11
msgid "the tensor product"
msgstr ""

#: of qiskit.aqua.utils.PauliGraph:1 qiskit.aqua.utils.pauli_graph.PauliGraph:1
msgid "Pauli Graph."
msgstr ""

#: of qiskit.aqua.utils.convert_dict_to_json:1
#: qiskit.aqua.utils.json_utils.convert_dict_to_json:1
msgid ""
"Combs recursively through a list/dictionary and finds any non-json     "
"compatible elements and converts them. E.g. complex ndarray's are     "
"converted to lists of strings. Assume that all such elements are     "
"stored in dictionaries!"
msgstr ""

#: of qiskit.aqua.utils.convert_dict_to_json:3
#: qiskit.aqua.utils.json_utils.convert_dict_to_json:3
msgid "the input dict/list"
msgstr ""

#: of qiskit.aqua.utils.convert_dict_to_json:6
#: qiskit.aqua.utils.convert_json_to_dict:5
#: qiskit.aqua.utils.json_utils.convert_dict_to_json:6
#: qiskit.aqua.utils.json_utils.convert_json_to_dict:5
msgid "Result in_item possibly modified"
msgstr ""

#: of qiskit.aqua.utils.convert_json_to_dict:1
#: qiskit.aqua.utils.json_utils.convert_json_to_dict:1
msgid ""
"Combs recursively through a list/dictionary that was loaded from json"
"     and finds any lists that were converted from ndarray and converts "
"them back :param in_item: the input dict/list :type in_item: dict or list"
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_unitary:1
#: qiskit.aqua.utils.random_unitary:1
msgid "Generate a random unitary matrix with size NxN."
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_unitary:3
#: qiskit.aqua.utils.random_unitary:3
msgid "the dimension of unitary matrix"
msgstr ""

#: of qiskit.aqua.utils.random_h1_body:6
#: qiskit.aqua.utils.random_matrix_generator.random_h1_body:6
#: qiskit.aqua.utils.random_matrix_generator.random_unitary:5
#: qiskit.aqua.utils.random_unitary:5
msgid "a 2-D matrix with np.complex data type."
msgstr ""

#: of qiskit.aqua.utils.random_h2_body:1
#: qiskit.aqua.utils.random_matrix_generator.random_h2_body:1
msgid ""
"Generate a random two body integrals. :param N: number of spin-orbitals "
"(dimentsion of h2) :type N: int :param M: number of non-zero entries "
":type M: int"
msgstr ""

#: of qiskit.aqua.utils.random_h2_body:7
#: qiskit.aqua.utils.random_matrix_generator.random_h2_body:7
msgid "a numpy 4-D tensor with np.complex data type."
msgstr ""

#: of qiskit.aqua.utils.random_h1_body:1
#: qiskit.aqua.utils.random_matrix_generator.random_h1_body:1
msgid "Generate a random one body integrals."
msgstr ""

#: of qiskit.aqua.utils.random_h1_body:3
#: qiskit.aqua.utils.random_matrix_generator.random_h1_body:3
msgid "the number of spin orbitals."
msgstr ""

#: of qiskit.aqua.utils.random_hermitian:1
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian:1
msgid ""
"Generate random hermitian (sparse) matix with given properties. Sparsity "
"is achieved by truncating Pauli matrices. Sparsity settings alternate the"
" eigenvalues due to truncation. :param N: size of matrix :type N: int "
":param eigs: list of N eigenvalues. Overrides K,"
msgstr ""

#: of qiskit.aqua.utils.random_hermitian:7
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian:7
msgid "eigrange"
msgstr ""

#: of qiskit.aqua.utils.random_hermitian:9
#: qiskit.aqua.utils.random_matrix_generator.random_diag:7
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian:9
msgid ""
"condition number. Either use only condition number K or list/tuple of (K,"
" lmin) or (K, lmin, sgn). Where lmin is the smallest eigenvalue and sign "
"+/- 1 specifies if eigenvalues can be negative."
msgstr ""

#: of qiskit.aqua.utils.random_hermitian:15
#: qiskit.aqua.utils.random_matrix_generator.random_diag:13
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian:15
msgid "[min, max] list for eigenvalue range. (default=[0, 1])"
msgstr ""

#: of qiskit.aqua.utils.random_hermitian:18
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian:18
msgid "limit for number of Pauli matrices."
msgstr ""

#: of qiskit.aqua.utils.random_hermitian:20
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian:20
#: qiskit.aqua.utils.random_matrix_generator.random_non_hermitian:18
#: qiskit.aqua.utils.random_non_hermitian:18
msgid "sparsity of matrix. Overrides trunc."
msgstr ""

#: of qiskit.aqua.utils.random_hermitian:23
#: qiskit.aqua.utils.random_matrix_generator.random_hermitian:23
msgid "hermitian matrix"
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_non_hermitian:1
#: qiskit.aqua.utils.random_non_hermitian:1
msgid ""
"Generate random (sparse) matrix with given properties (singular values). "
"Sparsity is achieved by truncating Pauli matrices. Sparsity settings "
"alternate the singular values due to truncation. :param N: size of matrix"
" :type N: int :param sings: list of N singular values."
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_non_hermitian:7
#: qiskit.aqua.utils.random_non_hermitian:7
msgid "Overrides K, srange."
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_non_hermitian:9
#: qiskit.aqua.utils.random_non_hermitian:9
msgid ""
"condition number. Either use only condition number K or list/tuple of (K,"
" lmin). Where lmin specifies the smallest singular value."
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_non_hermitian:13
#: qiskit.aqua.utils.random_non_hermitian:13
msgid "[min, max] list for singular value range, min >= 0. (default=[0, 1])."
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_non_hermitian:16
#: qiskit.aqua.utils.random_non_hermitian:16
msgid "limit of Pauli matrices."
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_non_hermitian:21
#: qiskit.aqua.utils.random_non_hermitian:21
msgid "random matrix"
msgstr ""

#: of qiskit.aqua.utils.circuit_utils.summarize_circuits:1
#: qiskit.aqua.utils.summarize_circuits:1
msgid ""
"Summarize circuits based on QuantumCircuit, and four metrics are "
"summarized."
msgstr ""

#: of qiskit.aqua.utils.circuit_utils.summarize_circuits:3
#: qiskit.aqua.utils.summarize_circuits:3
msgid ""
"Number of qubits and classical bits, and number of operations and depth "
"of circuits. The average statistic is provided if multiple circuits are "
"inputed."
msgstr ""

#: of qiskit.aqua.utils.circuit_utils.summarize_circuits:6
#: qiskit.aqua.utils.summarize_circuits:6
msgid "the to-be-summarized circuits"
msgstr ""

#: of qiskit.aqua.utils.get_subsystem_density_matrix:1
#: qiskit.aqua.utils.subsystem.get_subsystem_density_matrix:1
msgid "Compute the reduced density matrix of a quantum subsystem."
msgstr ""

#: of qiskit.aqua.utils.get_subsystem_density_matrix:3
#: qiskit.aqua.utils.subsystem.get_subsystem_density_matrix:3
#: qiskit.aqua.utils.subsystem.get_subsystem_fidelity:3
msgid "The state vector of the complete system"
msgstr ""

#: of qiskit.aqua.utils.get_subsystem_density_matrix:5
#: qiskit.aqua.utils.subsystem.get_subsystem_density_matrix:5
msgid "The indices of the qubits to be traced out."
msgstr ""

#: of qiskit.aqua.utils.get_subsystem_density_matrix:8
#: qiskit.aqua.utils.subsystem.get_subsystem_density_matrix:8
msgid "The reduced density matrix for the desired subsystem"
msgstr ""

#: of qiskit.aqua.utils.get_subsystems_counts:1
#: qiskit.aqua.utils.subsystem.get_subsystems_counts:1
msgid ""
"Extract all subsystems' counts from the single complete system count "
"dictionary."
msgstr ""

#: of qiskit.aqua.utils.get_subsystems_counts:3
#: qiskit.aqua.utils.subsystem.get_subsystems_counts:3
msgid ""
"If multiple classical registers are used to measure various parts of a "
"quantum system, Each of the measurement dictionary's keys would contain "
"spaces as delimiters to separate the various parts being measured. For "
"example, you might have three keys '11 010', '01 011' and '11 011', among"
" many other, in the count dictionary of the 5-qubit complete system, and "
"would like to get the two subsystems' counts (one 2-qubit, and the other "
"3-qubit) in order to get the counts for the 2-qubit partial measurement "
"'11' or the 3-qubit partial measurement '011'."
msgstr ""

#: of qiskit.aqua.utils.get_subsystems_counts:12
#: qiskit.aqua.utils.subsystem.get_subsystems_counts:12
msgid ""
"The measurement count dictionary of a complete system that contains "
"multiple classical registers for measurements s.t. the dictionary's keys "
"have space delimiters."
msgstr ""

#: of qiskit.aqua.utils.get_subsystems_counts:17
#: qiskit.aqua.utils.subsystem.get_subsystems_counts:17
msgid ""
"A list of measurement count dictionaries corresponding to each of the "
"subsystems measured."
msgstr ""

#: of qiskit.aqua.utils.entangler_map.get_entangler_map:1
#: qiskit.aqua.utils.get_entangler_map:1
msgid "Utility method to get an entangler map among qubits."
msgstr ""

#: of qiskit.aqua.utils.entangler_map.get_entangler_map:3
#: qiskit.aqua.utils.get_entangler_map:3
msgid ""
"'full' entangles each qubit with all the subsequent ones 'linear' "
"entangles each qubit with the next"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.get_entangler_map:6
#: qiskit.aqua.utils.get_entangler_map:6
msgid "Number of qubits for which the map is needed"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.get_entangler_map:9
#: qiskit.aqua.utils.get_entangler_map:9
msgid ""
"A map of qubit index to an array of indexes to which this should be "
"entangled"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.get_entangler_map:11
#: qiskit.aqua.utils.get_entangler_map:11
msgid "if map_type is not valid."
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:1
#: qiskit.aqua.utils.validate_entangler_map:1
msgid "Validate a user supplied entangler map and converts entries to ints."
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:3
#: qiskit.aqua.utils.validate_entangler_map:3
msgid ""
"An entangler map, keys are source qubit index (int), value is array of "
"target qubit index(es) (int)"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:6
#: qiskit.aqua.utils.validate_entangler_map:6
msgid "Number of qubits"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:8
#: qiskit.aqua.utils.validate_entangler_map:8
msgid "If we allow in two qubits can be entangled each other"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:10
#: qiskit.aqua.utils.validate_entangler_map:10
msgid "Validated/converted map"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:12
#: qiskit.aqua.utils.validate_entangler_map:12
msgid "entangler map is not list type or list of list"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:13
#: qiskit.aqua.utils.validate_entangler_map:13
msgid "the index of entangler map is out of range"
msgstr ""

#: of qiskit.aqua.utils.entangler_map.validate_entangler_map:14
#: qiskit.aqua.utils.validate_entangler_map:14
msgid "the qubits are cross-entangled."
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.get_feature_dimension:1
#: qiskit.aqua.utils.get_feature_dimension:1
msgid "Check feature dimension of a given dataset"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.get_feature_dimension:3
#: qiskit.aqua.utils.dataset_helper.get_num_classes:3
#: qiskit.aqua.utils.get_feature_dimension:3
#: qiskit.aqua.utils.get_num_classes:3
msgid "key is the class name and value is the data."
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.get_feature_dimension:6
#: qiskit.aqua.utils.get_feature_dimension:6
msgid "feature dimension, -1 denotes no data in the dataset."
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.get_num_classes:1
#: qiskit.aqua.utils.get_num_classes:1
msgid "Check number of classes in a given dataset"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:1
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:1
msgid "Split dataset to data and labels numpy array"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:3
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:3
msgid ""
"If `class_names` is given, use the desired label to class name mapping, "
"or create the mapping based on the keys in the dataset."
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:6
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:6
msgid "{'A': numpy.ndarray, 'B': numpy.ndarray, ...}"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:8
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:8
msgid "class name of dataset, {class_name: label}"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:11
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:11
msgid ""
"idx 0 is data, NxD array,             idx 1 is labels, Nx1 array, value "
"is ranged             from 0 to K-1, K is the number of classes dict: "
"{str: int}, map from class name to label"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:14
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:14
msgid "idx 0 is data, NxD array,"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:14
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:14
msgid ""
"idx 1 is labels, Nx1 array, value is ranged from 0 to K-1, K is the "
"number of classes"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.split_dataset_to_data_and_labels:16
#: qiskit.aqua.utils.split_dataset_to_data_and_labels:16
msgid "dict: {str: int}, map from class name to label"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.map_label_to_class_name:1
#: qiskit.aqua.utils.map_label_to_class_name:1
msgid "Helper converts labels (numeric) to class name (string)"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.map_label_to_class_name:5
#: qiskit.aqua.utils.map_label_to_class_name:5
msgid "a mapping form label (numeric) to class name (str)"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.map_label_to_class_name:8
#: qiskit.aqua.utils.map_label_to_class_name:8
msgid "predicted class names of each datum"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.reduce_dim_to_via_pca:1
#: qiskit.aqua.utils.reduce_dim_to_via_pca:1
msgid "Reduce the data dimension via pca"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.reduce_dim_to_via_pca:3
#: qiskit.aqua.utils.reduce_dim_to_via_pca:3
msgid "NxD array"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.reduce_dim_to_via_pca:5
#: qiskit.aqua.utils.reduce_dim_to_via_pca:5
msgid "the targeted dimension D'"
msgstr ""

#: of qiskit.aqua.utils.dataset_helper.reduce_dim_to_via_pca:8
#: qiskit.aqua.utils.reduce_dim_to_via_pca:8
msgid "NxD' array"
msgstr ""

#: of qiskit.aqua.utils.optimize_svm:1
#: qiskit.aqua.utils.qp_solver.optimize_svm:1
msgid ""
"Solving quadratic programming problem for SVM; thus, some constraints are"
" fixed."
msgstr ""

#: of qiskit.aqua.utils.optimize_svm:3
#: qiskit.aqua.utils.qp_solver.optimize_svm:3
msgid ""
"The notation is follows the equation here: "
"http://cvxopt.org/userguide/coneprog.html#quadratic-programming"
msgstr ""

#: of qiskit.aqua.utils.optimize_svm:6
#: qiskit.aqua.utils.qp_solver.optimize_svm:6
msgid "NxN array"
msgstr ""

#: of qiskit.aqua.utils.optimize_svm:10
#: qiskit.aqua.utils.qp_solver.optimize_svm:10
msgid ""
"the scaling factor to renormalize the `y`, if it is None, use L2-norm of "
"`y` for normalization"
msgstr ""

#: of qiskit.aqua.utils.optimize_svm:13
#: qiskit.aqua.utils.qp_solver.optimize_svm:13
msgid "number of iterations for QP solver"
msgstr ""

#: of qiskit.aqua.utils.optimize_svm:15
#: qiskit.aqua.utils.qp_solver.optimize_svm:15
msgid "showing the progress of QP solver"
msgstr ""

#: of qiskit.aqua.utils.optimize_svm:18
#: qiskit.aqua.utils.qp_solver.optimize_svm:18
msgid ""
"Sx1 array, where S is the number of supports numpy.ndarray: Sx1 array, "
"where S is the number of supports numpy.ndarray: Sx1 array, where S is "
"the number of supports"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory:1
msgid "Base class for CircuitFactories"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory.build_controlled_inverse:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse:1
msgid "Adds controlled inverse of corresponding sub-circuit to given circuit"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory.build_controlled_inverse_power:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_inverse_power:1
msgid ""
"Adds controlled, inverse, power of corresponding circuit. May be "
"overridden if a more efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory.build_controlled_power:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_controlled_power:1
msgid ""
"Adds controlled power of corresponding circuit. May be overridden if a "
"more efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory.build_inverse:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_inverse:1
msgid "Adds inverse of corresponding sub-circuit to given circuit"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory.build_inverse_power:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_inverse_power:1
msgid ""
"Adds inverse power of corresponding circuit. May be overridden if a more "
"efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory.build_power:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.build_power:1
msgid ""
"Adds power of corresponding circuit. May be overridden if a more "
"efficient implementation is possible"
msgstr ""

#: of qiskit.aqua.utils.CircuitFactory.num_target_qubits:1
#: qiskit.aqua.utils.circuit_factory.CircuitFactory.num_target_qubits:1
msgid "Returns the number of target qubits"
msgstr ""

#: of qiskit.aqua.utils.compile_and_run_circuits:1
#: qiskit.aqua.utils.compile_circuits:1
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:1
#: qiskit.aqua.utils.run_circuits.compile_circuits:1
#: qiskit.aqua.utils.run_circuits.run_qobjs:1 qiskit.aqua.utils.run_qobjs:1
msgid "An execution wrapper with Qiskit-Terra, with job auto recover capability."
msgstr ""

#: of qiskit.aqua.utils.compile_and_run_circuits:3
#: qiskit.aqua.utils.compile_circuits:3
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:3
#: qiskit.aqua.utils.run_circuits.compile_circuits:3
#: qiskit.aqua.utils.run_circuits.run_qobjs:3 qiskit.aqua.utils.run_qobjs:3
msgid ""
"The autorecovery feature is only applied for non-simulator backend. This "
"wraper will try to get the result no matter how long it costs."
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_aer_provider:3
#: qiskit.aqua.utils.backend_utils.is_aer_statevector_backend:3
#: qiskit.aqua.utils.backend_utils.is_basicaer_provider:3
#: qiskit.aqua.utils.backend_utils.is_ibmq_provider:3
#: qiskit.aqua.utils.backend_utils.is_local_backend:3
#: qiskit.aqua.utils.backend_utils.is_simulator_backend:3
#: qiskit.aqua.utils.backend_utils.is_statevector_backend:3
#: qiskit.aqua.utils.build_measurement_error_mitigation_fitter:5
#: qiskit.aqua.utils.compile_and_run_circuits:8
#: qiskit.aqua.utils.compile_circuits:8
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:5
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:8
#: qiskit.aqua.utils.run_circuits.compile_circuits:8
#: qiskit.aqua.utils.run_circuits.run_qobjs:8 qiskit.aqua.utils.run_qobjs:8
msgid "backend instance"
msgstr ""

#: of qiskit.aqua.utils.build_measurement_error_mitigation_fitter:13
#: qiskit.aqua.utils.compile_and_run_circuits:16
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:13
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:16
#: qiskit.aqua.utils.run_circuits.run_qobjs:10 qiskit.aqua.utils.run_qobjs:10
msgid "configuration for quantum job object"
msgstr ""

#: of qiskit.aqua.utils.build_measurement_error_mitigation_fitter:15
#: qiskit.aqua.utils.compile_and_run_circuits:18
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:15
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:18
#: qiskit.aqua.utils.run_circuits.run_qobjs:12 qiskit.aqua.utils.run_qobjs:12
msgid "configuration for simulator"
msgstr ""

#: of qiskit.aqua.utils.build_measurement_error_mitigation_fitter:17
#: qiskit.aqua.utils.compile_and_run_circuits:20
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:17
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:20
#: qiskit.aqua.utils.run_circuits.run_qobjs:14 qiskit.aqua.utils.run_qobjs:14
msgid "configuration for noise model"
msgstr ""

#: of qiskit.aqua.utils.compile_and_run_circuits:22
#: qiskit.aqua.utils.compile_circuits:16
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:22
#: qiskit.aqua.utils.run_circuits.compile_circuits:16
msgid "showing the summary of submitted circuits."
msgstr ""

#: of qiskit.aqua.utils.compile_and_run_circuits:24
#: qiskit.aqua.utils.compile_circuits:18
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:24
#: qiskit.aqua.utils.run_circuits.compile_circuits:18
msgid "A CircuitCache to use when calling compile_and_run_circuits"
msgstr ""

#: of qiskit.aqua.utils.compile_and_run_circuits:26
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:26
#: qiskit.aqua.utils.run_circuits.run_qobjs:16 qiskit.aqua.utils.run_qobjs:16
msgid "Bypass Qobj validation to decrease submission time"
msgstr ""

#: of qiskit.aqua.utils.compile_and_run_circuits:32
#: qiskit.aqua.utils.compile_circuits:24
#: qiskit.aqua.utils.run_circuits.compile_and_run_circuits:32
#: qiskit.aqua.utils.run_circuits.compile_circuits:24
#: qiskit.aqua.utils.run_circuits.run_qobjs:22 qiskit.aqua.utils.run_qobjs:22
msgid "Any error except for JobError raised by Qiskit Terra"
msgstr ""

#: of qiskit.aqua.utils.compile_circuits:21
#: qiskit.aqua.utils.run_circuits.compile_circuits:21
msgid "compiled qobj."
msgstr ""

#: of qiskit.aqua.utils.run_circuits.run_qobjs:6 qiskit.aqua.utils.run_qobjs:6
msgid "qobjs to execute"
msgstr ""

#: of qiskit.aqua.utils.find_regs_by_name:1
#: qiskit.aqua.utils.run_circuits.find_regs_by_name:1
msgid "Find the registers in the circuits."
msgstr ""

#: of qiskit.aqua.utils.find_regs_by_name:5
#: qiskit.aqua.utils.run_circuits.find_regs_by_name:5
msgid "name of register"
msgstr ""

#: of qiskit.aqua.utils.find_regs_by_name:7
#: qiskit.aqua.utils.run_circuits.find_regs_by_name:7
msgid "quantum or classical register"
msgstr ""

#: of qiskit.aqua.utils.find_regs_by_name:10
#: qiskit.aqua.utils.run_circuits.find_regs_by_name:10
msgid "if not found, return None."
msgstr ""

#: of qiskit.aqua.utils.CircuitCache.cache_circuit:1
#: qiskit.aqua.utils.circuit_cache.CircuitCache.cache_circuit:1
msgid ""
"A method for caching compiled qobjs by storing the compiled qobj and "
"constructing a mapping array from the uncompiled operations in the "
"circuit to the instructions in the qobj. Note that the \"qobjs\" list in "
"the cache dict is a list of the cached chunks, each element of which "
"contains a single qobj with as many experiments as is allowed by the "
"execution backend. E.g. if the backend allows 300 experiments per job and"
" the user wants to run 500 circuits, len(circuit_cache['qobjs']) == 2, "
"len(circuit_cache['qobjs'][0].experiments) == 300, and "
"len(circuit_cache['qobjs'][1].experiments) == 200."
msgstr ""

#: of qiskit.aqua.utils.CircuitCache.cache_circuit:11
#: qiskit.aqua.utils.circuit_cache.CircuitCache.cache_circuit:11
msgid ""
"This feature is only applied if 'circuit_caching' is True in the "
"'problem' Aqua dictionary section."
msgstr ""

#: of qiskit.aqua.utils.CircuitCache.cache_circuit:14
#: qiskit.aqua.utils.circuit_cache.CircuitCache.cache_circuit:14
msgid "A compiled qobj to be saved"
msgstr ""

#: of qiskit.aqua.utils.CircuitCache.cache_circuit:16
#: qiskit.aqua.utils.circuit_cache.CircuitCache.cache_circuit:16
msgid "The original uncompiled QuantumCircuits"
msgstr ""

#: of qiskit.aqua.utils.CircuitCache.cache_circuit:18
#: qiskit.aqua.utils.circuit_cache.CircuitCache.cache_circuit:18
msgid ""
"If a larger list of circuits was broken into chunks by run_algorithm for "
"separate runs,"
msgstr ""

#: of qiskit.aqua.utils.get_measured_qubits_from_qobj:1
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits:1
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits_from_qobj:1
msgid "Retrieve the measured qubits from transpiled circuits."
msgstr ""

#: of qiskit.aqua.utils.get_measured_qubits_from_qobj:3
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits_from_qobj:3
msgid "qobjs"
msgstr ""

#: of qiskit.aqua.utils.get_measured_qubits_from_qobj:6
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits:6
#: qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits_from_qobj:6
msgid "the qubit mapping to-be-used for measure error mitigation"
msgstr ""

#: of
#: qiskit.aqua.utils.measurement_error_mitigation.mitigate_measurement_error:1
#: qiskit.aqua.utils.mitigate_measurement_error:1
msgid "the unmitigated Result object"
msgstr ""

#: of qiskit.aqua.utils.build_measurement_error_mitigation_fitter:20
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:20
#: qiskit.aqua.utils.measurement_error_mitigation.mitigate_measurement_error:3
#: qiskit.aqua.utils.mitigate_measurement_error:3
msgid "the measurement fitter"
msgstr ""

#: of
#: qiskit.aqua.utils.measurement_error_mitigation.mitigate_measurement_error:5
#: qiskit.aqua.utils.mitigate_measurement_error:5
#: qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:9
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:9
msgid ""
"fitting method. If None, then least_squares is used. 'pseudo_inverse': "
"direct inversion of the A matrix 'least_squares': constrained to have "
"physical probabilities"
msgstr ""

#: of
#: qiskit.aqua.utils.measurement_error_mitigation.mitigate_measurement_error:10
#: qiskit.aqua.utils.mitigate_measurement_error:10
msgid "the mitigated Result"
msgstr ""

#: of qiskit.aqua.utils.build_measurement_error_mitigation_fitter:1
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:1
msgid "the measured qubit index (in the order to classical bit 0...n-1)"
msgstr ""

#: of qiskit.aqua.utils.build_measurement_error_mitigation_fitter:3
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:3
msgid "CompleteMeasFitter or TensoredMeasFitter"
msgstr ""

#: of qiskit.aqua.utils.build_measurement_error_mitigation_fitter:23
#: qiskit.aqua.utils.measurement_error_mitigation.build_measurement_error_mitigation_fitter:23
msgid "when the fitter_cls is not recognizable."
msgstr ""

#: ../../api/qiskit.aqua.utils.arithmetic.rst:2
msgid "qiskit.aqua.utils.arithmetic module"
msgstr ""

#: of qiskit.aqua.utils.arithmetic:1
msgid "Arithmetic Utilities"
msgstr ""

#: of qiskit.aqua.utils.arithmetic.is_power:1
msgid "Check if num is a perfect power in O(n^3) time, n=ceil(logN)"
msgstr ""

#: of qiskit.aqua.utils.arithmetic.is_power_of_2:1
msgid "Check if the input number is a power of 2."
msgstr ""

#: of qiskit.aqua.utils.arithmetic.log2:1
msgid ""
"Compute the log2 of the input number. Use bit operation if the input is a"
" power of 2."
msgstr ""

#: of qiskit.aqua.utils.arithmetic.next_power_of_2_base:1
msgid "Return the base of the smallest power of 2 no less than the input number"
msgstr ""

#: of qiskit.aqua.utils.arithmetic.normalize_vector:1
msgid "Normalize the input state vector."
msgstr ""

#: ../../api/qiskit.aqua.utils.backend_utils.rst:2
msgid "qiskit.aqua.utils.backend\\_utils module"
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_aer_provider:1
msgid "Detect whether or not backend is from Aer provider."
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_aer_provider:6
msgid "True is AerProvider"
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_aer_statevector_backend:1
msgid "Return True if backend object is statevector and from Aer provider."
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_aer_statevector_backend:6
#: qiskit.aqua.utils.backend_utils.is_statevector_backend:6
msgid "True is statevector"
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_basicaer_provider:1
msgid "Detect whether or not backend is from BasicAer provider."
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_basicaer_provider:6
msgid "True is BasicAer"
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_ibmq_provider:1
msgid "Detect whether or not backend is from IBMQ provider."
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_ibmq_provider:6
msgid "True is IBMQ"
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_local_backend:6
msgid "True is a local backend"
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_simulator_backend:6
msgid "True is a simulator"
msgstr ""

#: of qiskit.aqua.utils.backend_utils.is_statevector_backend:1
msgid "Return True if backend object is statevector."
msgstr ""

#: ../../api/qiskit.aqua.utils.circuit_cache.rst:2
msgid "qiskit.aqua.utils.circuit\\_cache module"
msgstr ""

#: of qiskit.aqua.utils.circuit_cache:1
msgid ""
"A utility for caching and reparameterizing circuits, rather than "
"compiling from scratch with each iteration. Note that if the circuit is "
"transpiled aggressively such that rotation parameters cannot be easily "
"mapped from the uncompiled to compiled circuit, caching will fail "
"gracefully to standard compilation. This will be noted by multiple cache "
"misses in the DEBUG log. It is generally safer to skip the transpiler "
"(aqua_dict['backend']['skip_transpiler'] = True) when using caching."
msgstr ""

#: of qiskit.aqua.utils.circuit_cache:7
msgid ""
"Caching is controlled via the aqua_dict['problem']['circuit_caching'] "
"parameter. Setting skip_qobj_deepcopy = True reuses the same qobj object "
"over and over to avoid deepcopying. It is controlled via the "
"aqua_dict['problem'][ 'skip_qobj_deepcopy'] parameter."
msgstr ""

#: of qiskit.aqua.utils.circuit_cache:11
msgid ""
"You may also specify a filename into which to store the cache as a pickle"
" file, for circuits which are expensive to compile even the first time. "
"The filename is set in aqua_dict['problem']['circuit_cache_file']. If a "
"filename is present, the system will attempt to load from the file."
msgstr ""

#: of qiskit.aqua.utils.circuit_cache:15
msgid ""
"In the event of an error, the system will fail gracefully, compile from "
"scratch, and cache the new compiled qobj and mapping in the file location"
" in pickled form. It will fail over 5 times before deciding that caching "
"should be disabled."
msgstr ""

#: ../../api/qiskit.aqua.utils.circuit_factory.rst:2
msgid "qiskit.aqua.utils.circuit\\_factory module"
msgstr ""

#: of qiskit.aqua.utils.circuit_factory:1
msgid ""
"Abstract CircuitFactory to build a circuit, along with inverse, "
"controlled and power combinations of the circuit."
msgstr ""

#: ../../api/qiskit.aqua.utils.circuit_utils.rst:2
msgid "qiskit.aqua.utils.circuit\\_utils module"
msgstr ""

#: ../../api/qiskit.aqua.utils.controlled_circuit.rst:2
msgid "qiskit.aqua.utils.controlled\\_circuit module"
msgstr ""

#: of qiskit.aqua.utils.controlled_circuit.get_controlled_circuit:1
msgid "Construct the controlled version of a given circuit."
msgstr ""

#: of qiskit.aqua.utils.controlled_circuit.get_controlled_circuit:3
msgid "the base circuit"
msgstr ""

#: of qiskit.aqua.utils.controlled_circuit.get_controlled_circuit:5
msgid "the control qubit to use"
msgstr ""

#: of qiskit.aqua.utils.controlled_circuit.get_controlled_circuit:7
msgid "the target controlled circuit to be modified in-place"
msgstr ""

#: of qiskit.aqua.utils.controlled_circuit.get_controlled_circuit:9
msgid "boolean flag to indicate whether or not only basis gates should be used"
msgstr ""

#: of qiskit.aqua.utils.controlled_circuit.get_controlled_circuit:12
msgid ""
"a QuantumCircuit object with the base circuit being controlled by "
"ctl_qubit"
msgstr ""

#: ../../api/qiskit.aqua.utils.dataset_helper.rst:2
msgid "qiskit.aqua.utils.dataset\\_helper module"
msgstr ""

#: ../../api/qiskit.aqua.utils.decimal_to_binary.rst:2
msgid "qiskit.aqua.utils.decimal\\_to\\_binary module"
msgstr ""

#: ../../api/qiskit.aqua.utils.entangler_map.rst:2
msgid "qiskit.aqua.utils.entangler\\_map module"
msgstr ""

#: of qiskit.aqua.utils.entangler_map:1
msgid ""
"This module contains the definition of creating and validating entangler "
"map based on the number of qubits."
msgstr ""

#: ../../api/qiskit.aqua.utils.json_utils.rst:2
msgid "qiskit.aqua.utils.json\\_utils module"
msgstr ""

#: of qiskit.aqua.utils.json_utils:1
msgid "Utilities for dict and json convertion."
msgstr ""

#: ../../api/qiskit.aqua.utils.measurement_error_mitigation.rst:2
msgid "qiskit.aqua.utils.measurement\\_error\\_mitigation module"
msgstr ""

#: of qiskit.aqua.utils.measurement_error_mitigation.get_measured_qubits:3
msgid "a list of transpiled circuits"
msgstr ""

#: ../../api/qiskit.aqua.utils.pauli_graph.rst:2
msgid "qiskit.aqua.utils.pauli\\_graph module"
msgstr ""

#: of qiskit.aqua.utils.pauli_graph:1
msgid "For coloring Pauli Graph for transforming paulis into grouped Paulis"
msgstr ""

#: ../../api/qiskit.aqua.utils.qp_solver.rst:2
msgid "qiskit.aqua.utils.qp\\_solver module"
msgstr ""

#: ../../api/qiskit.aqua.utils.random_matrix_generator.rst:2
msgid "qiskit.aqua.utils.random\\_matrix\\_generator module"
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.limit_entries:1
msgid ""
"Limits the number of entries of a matrix to the n highest magnitude ones."
" :param mat: Input Matrix :type mat: np.array :param n: number of "
"surviving entries (default=5) :type n: int :param sparsity: sparsity of "
"matrix :type sparsity: float < 1"
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.limit_entries:9
#: qiskit.aqua.utils.random_matrix_generator.limit_paulis:10
msgid "scipy.sparse.csr_matrix"
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.limit_paulis:1
msgid ""
"Limits the number of Pauli basis matrices of a hermitian matrix to the n "
"highest magnitude ones. :param mat: Input matrix :type mat: np.ndarray "
":param n: number of surviving Pauli matrices (default=5) :type n: int "
":param sparsity: sparsity of matrix :type sparsity: float < 1"
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_diag:1
msgid ""
"Generate random diagonal matix with given properties :param N: size of "
"matrix :type N: int :param eigs: list of N eigenvalues. Overrides K,"
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_diag:5
msgid "eigrange."
msgstr ""

#: of qiskit.aqua.utils.random_matrix_generator.random_diag:17
msgid "diagonal matrix"
msgstr ""

#: ../../api/qiskit.aqua.utils.run_circuits.rst:2
msgid "qiskit.aqua.utils.run\\_circuits module"
msgstr ""

#: ../../api/qiskit.aqua.utils.subsystem.rst:2
msgid "qiskit.aqua.utils.subsystem module"
msgstr ""

#: of qiskit.aqua.utils.subsystem.get_subsystem_fidelity:1
msgid "Compute the fidelity of the quantum subsystem."
msgstr ""

#: of qiskit.aqua.utils.subsystem.get_subsystem_fidelity:5
msgid ""
"The indices of the qubits to be traced. to trace qubits 0 and 4 "
"trace_systems = [0,4]"
msgstr ""

#: of qiskit.aqua.utils.subsystem.get_subsystem_fidelity:8
msgid "The ground-truth state vector of the subsystem"
msgstr ""

#: of qiskit.aqua.utils.subsystem.get_subsystem_fidelity:11
msgid "The subsystem fidelity"
msgstr ""

#: ../../api/qiskit.aqua.utils.tensor_product.rst:2
msgid "qiskit.aqua.utils.tensor\\_product module"
msgstr ""

#: ../../api/qiskit.aqua.version.rst:2
msgid "qiskit.aqua.version module"
msgstr ""

#: of qiskit.aqua.version:1 qiskit.chemistry.version:1
msgid "Contains the version."
msgstr ""

#: ../../api/qiskit.assembler.rst:2
msgid "qiskit.assembler package"
msgstr ""

#: of qiskit.assembler:1
msgid "Helper module for Qiskit assembler."
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:2
msgid "RunConfig"
msgstr ""

#: of qiskit.assembler.RunConfig:1 qiskit.assembler.run_config.RunConfig:1
#: qiskit.providers.models.BackendConfiguration:1
#: qiskit.providers.models.BackendProperties:1
#: qiskit.providers.models.BackendStatus:1 qiskit.providers.models.Command:1
#: qiskit.providers.models.GateConfig:1 qiskit.providers.models.JobStatus:1
#: qiskit.providers.models.PulseDefaults:1 qiskit.providers.models.UchannelLO:1
#: qiskit.qobj.PulseLibraryItem:1 qiskit.qobj.Qobj:1 qiskit.qobj.QobjConfig:1
#: qiskit.qobj.QobjExperiment:1 qiskit.qobj.QobjExperimentConfig:1
#: qiskit.qobj.QobjExperimentHeader:1 qiskit.qobj.QobjHeader:1
#: qiskit.qobj.QobjInstruction:1 qiskit.qobj.QobjMeasurementOption:1
#: qiskit.qobj.models.base.QobjConfig:1
#: qiskit.qobj.models.base.QobjExperiment:1
#: qiskit.qobj.models.base.QobjExperimentConfig:1
#: qiskit.qobj.models.base.QobjExperimentHeader:1
#: qiskit.qobj.models.base.QobjHeader:1
#: qiskit.qobj.models.base.QobjInstruction:1
#: qiskit.qobj.models.pulse.PulseLibraryItem:1
#: qiskit.qobj.models.pulse.QobjMeasurementOption:1 qiskit.result.Result:1
#: qiskit.result.models.ExperimentResult:1
#: qiskit.result.models.ExperimentResultData:1
#: qiskit.transpiler.transpile_config.TranspileConfig:1
#: qiskit.validation.base.Obj:1
msgid "ベースクラス: :class:`qiskit.validation.base.BaseModel`"
msgstr ""

#: of qiskit.assembler.RunConfig:1 qiskit.assembler.run_config.RunConfig:1
msgid "Model for RunConfig."
msgstr ""

#: of qiskit.assembler.RunConfig:3 qiskit.assembler.run_config.RunConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``RunConfigSchema``."
msgstr ""

#: of qiskit.assembler.RunConfig:8 qiskit.assembler.run_config.RunConfig:8
msgid "the number of shots."
msgstr ""

#: of qiskit.assembler.RunConfig qiskit.assembler.run_config.RunConfig
#: qiskit.providers.aer.AerJob qiskit.providers.basicaer.BasicAerJob
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob
#: qiskit.providers.models.BackendConfiguration
#: qiskit.providers.models.BackendProperties
#: qiskit.providers.models.BackendStatus qiskit.providers.models.Command
#: qiskit.providers.models.GateConfig qiskit.providers.models.JobStatus
#: qiskit.providers.models.PulseBackendConfiguration
#: qiskit.providers.models.PulseDefaults
#: qiskit.providers.models.QasmBackendConfiguration
#: qiskit.providers.models.UchannelLO qiskit.qobj.PulseLibraryItem
#: qiskit.qobj.PulseQobj qiskit.qobj.PulseQobjConfig
#: qiskit.qobj.PulseQobjExperiment qiskit.qobj.PulseQobjInstruction
#: qiskit.qobj.QasmQobj qiskit.qobj.QasmQobjExperiment
#: qiskit.qobj.QasmQobjInstruction qiskit.qobj.Qobj qiskit.qobj.QobjExperiment
#: qiskit.qobj.QobjInstruction qiskit.qobj.QobjMeasurementOption
#: qiskit.qobj.models.base.QobjExperiment
#: qiskit.qobj.models.base.QobjInstruction
#: qiskit.qobj.models.pulse.PulseLibraryItem
#: qiskit.qobj.models.pulse.PulseQobjConfig
#: qiskit.qobj.models.pulse.PulseQobjExperiment
#: qiskit.qobj.models.pulse.PulseQobjInstruction
#: qiskit.qobj.models.pulse.QobjMeasurementOption
#: qiskit.qobj.models.qasm.QasmQobjExperiment
#: qiskit.qobj.models.qasm.QasmQobjInstruction qiskit.result.Result
#: qiskit.result.models.ExperimentResult
#: qiskit.transpiler.transpile_config.TranspileConfig
#: qiskit.validation.BaseSchema qiskit.validation.BaseSchema:12
#: qiskit.validation.base.BaseSchema qiskit.validation.base.BaseSchema:12
#: qiskit.visualization.bloch.Bloch
msgid "type"
msgstr ""

#: of qiskit.assembler.RunConfig:10 qiskit.assembler.RunConfig:16
#: qiskit.assembler.RunConfig:22 qiskit.assembler.run_config.RunConfig:10
#: qiskit.assembler.run_config.RunConfig:16
#: qiskit.assembler.run_config.RunConfig:22
#: qiskit.providers.models.BackendConfiguration:21
#: qiskit.providers.models.BackendConfiguration:69
#: qiskit.providers.models.BackendStatus:28
#: qiskit.providers.models.PulseBackendConfiguration:21
#: qiskit.providers.models.PulseBackendConfiguration:69
#: qiskit.providers.models.PulseBackendConfiguration:75
#: qiskit.providers.models.PulseDefaults:23
#: qiskit.providers.models.QasmBackendConfiguration:21
#: qiskit.providers.models.QasmBackendConfiguration:69
#: qiskit.providers.models.UchannelLO:10 qiskit.qobj.PulseQobjConfig:10
#: qiskit.qobj.PulseQobjInstruction:16
#: qiskit.qobj.models.pulse.PulseQobjConfig:10
#: qiskit.qobj.models.pulse.PulseQobjInstruction:16
#: qiskit.result.models.ExperimentResult:28
#: qiskit.transpiler.transpile_config.TranspileConfig:12
#: qiskit.visualization.bloch.Bloch:26 qiskit.visualization.bloch.Bloch:44
#: qiskit.visualization.bloch.Bloch:95 qiskit.visualization.bloch.Bloch:107
msgid "int"
msgstr ""

#: of qiskit.assembler.RunConfig:14 qiskit.assembler.run_config.RunConfig:14
msgid "the max_credits to use on the IBMQ public devices."
msgstr ""

#: of qiskit.assembler.RunConfig:20 qiskit.assembler.run_config.RunConfig:20
msgid "the seed to use in the simulator"
msgstr ""

#: of qiskit.assembler.RunConfig:26 qiskit.assembler.run_config.RunConfig:26
msgid "whether to request memory from backend (per-shot readouts)"
msgstr ""

#: of qiskit.assembler.RunConfig:28 qiskit.assembler.run_config.RunConfig:28
#: qiskit.providers.models.BackendConfiguration:39
#: qiskit.providers.models.BackendConfiguration:45
#: qiskit.providers.models.BackendConfiguration:51
#: qiskit.providers.models.BackendConfiguration:57
#: qiskit.providers.models.BackendConfiguration:63
#: qiskit.providers.models.BackendStatus:22
#: qiskit.providers.models.PulseBackendConfiguration:39
#: qiskit.providers.models.PulseBackendConfiguration:45
#: qiskit.providers.models.PulseBackendConfiguration:51
#: qiskit.providers.models.PulseBackendConfiguration:57
#: qiskit.providers.models.PulseBackendConfiguration:63
#: qiskit.providers.models.QasmBackendConfiguration:39
#: qiskit.providers.models.QasmBackendConfiguration:45
#: qiskit.providers.models.QasmBackendConfiguration:51
#: qiskit.providers.models.QasmBackendConfiguration:57
#: qiskit.providers.models.QasmBackendConfiguration:63 qiskit.result.Result:35
#: qiskit.result.models.ExperimentResult:16
msgid "bool"
msgstr ""

#: of qiskit.assembler.RunConfig:32 qiskit.assembler.run_config.RunConfig:32
msgid "List of parameter bindings"
msgstr ""

#: of qiskit.assembler.RunConfig:34 qiskit.assembler.run_config.RunConfig:34
msgid "list[dict]"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:10
#: ../../api/qiskit.circuit.ClassicalRegister.rst:10
#: ../../api/qiskit.circuit.CompositeGate.rst:10
#: ../../api/qiskit.circuit.Gate.rst:10
#: ../../api/qiskit.circuit.Instruction.rst:10
#: ../../api/qiskit.circuit.Measure.rst:10
#: ../../api/qiskit.circuit.Parameter.rst:10
#: ../../api/qiskit.circuit.QuantumCircuit.rst:10
#: ../../api/qiskit.circuit.QuantumRegister.rst:10
#: ../../api/qiskit.circuit.Reset.rst:10
#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:10
#: ../../api/qiskit.dagcircuit.DAGNode.rst:10
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:10
#: ../../api/qiskit.extensions.standard.Barrier.rst:10
#: ../../api/qiskit.extensions.standard.CHGate.rst:10
#: ../../api/qiskit.extensions.standard.CXBase.rst:10
#: ../../api/qiskit.extensions.standard.CnotGate.rst:10
#: ../../api/qiskit.extensions.standard.CrzGate.rst:10
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:10
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:10
#: ../../api/qiskit.extensions.standard.CyGate.rst:10
#: ../../api/qiskit.extensions.standard.CzGate.rst:10
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:10
#: ../../api/qiskit.extensions.standard.HGate.rst:10
#: ../../api/qiskit.extensions.standard.IdGate.rst:10
#: ../../api/qiskit.extensions.standard.RXGate.rst:10
#: ../../api/qiskit.extensions.standard.RYGate.rst:10
#: ../../api/qiskit.extensions.standard.RZGate.rst:10
#: ../../api/qiskit.extensions.standard.RZZGate.rst:10
#: ../../api/qiskit.extensions.standard.SGate.rst:10
#: ../../api/qiskit.extensions.standard.SdgGate.rst:10
#: ../../api/qiskit.extensions.standard.SwapGate.rst:10
#: ../../api/qiskit.extensions.standard.TGate.rst:10
#: ../../api/qiskit.extensions.standard.TdgGate.rst:10
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:10
#: ../../api/qiskit.extensions.standard.U0Gate.rst:10
#: ../../api/qiskit.extensions.standard.U1Gate.rst:10
#: ../../api/qiskit.extensions.standard.U2Gate.rst:10
#: ../../api/qiskit.extensions.standard.U3Gate.rst:10
#: ../../api/qiskit.extensions.standard.UBase.rst:10
#: ../../api/qiskit.extensions.standard.XGate.rst:10
#: ../../api/qiskit.extensions.standard.YGate.rst:10
#: ../../api/qiskit.extensions.standard.ZGate.rst:10
#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:10
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:10
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:10
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:10
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:10
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:10
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:10
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:10
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:10
#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:10
#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:10
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:10
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:10
#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:10
#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:10
#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:10
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:10
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:10
#: ../../api/qiskit.providers.JobStatus.rst:10
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:10
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:10
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:10
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:10
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:10
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:10
#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:10
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:10
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:10
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:10
#: ../../api/qiskit.providers.models.BackendConfiguration.rst:10
#: ../../api/qiskit.providers.models.BackendProperties.rst:10
#: ../../api/qiskit.providers.models.BackendStatus.rst:10
#: ../../api/qiskit.providers.models.Command.rst:10
#: ../../api/qiskit.providers.models.GateConfig.rst:10
#: ../../api/qiskit.providers.models.JobStatus.rst:10
#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:10
#: ../../api/qiskit.providers.models.PulseDefaults.rst:10
#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:10
#: ../../api/qiskit.providers.models.UchannelLO.rst:10
#: ../../api/qiskit.pulse.Acquire.rst:10
#: ../../api/qiskit.pulse.AcquireChannel.rst:10
#: ../../api/qiskit.pulse.ControlChannel.rst:10
#: ../../api/qiskit.pulse.DeviceSpecification.rst:10
#: ../../api/qiskit.pulse.Discriminator.rst:10
#: ../../api/qiskit.pulse.DriveChannel.rst:10
#: ../../api/qiskit.pulse.FrameChange.rst:10
#: ../../api/qiskit.pulse.Instruction.rst:10
#: ../../api/qiskit.pulse.Kernel.rst:10 ../../api/qiskit.pulse.LoConfig.rst:10
#: ../../api/qiskit.pulse.LoRange.rst:10
#: ../../api/qiskit.pulse.MeasureChannel.rst:10
#: ../../api/qiskit.pulse.MemorySlot.rst:10
#: ../../api/qiskit.pulse.PersistentValue.rst:10
#: ../../api/qiskit.pulse.RegisterSlot.rst:10
#: ../../api/qiskit.pulse.SamplePulse.rst:10
#: ../../api/qiskit.pulse.Schedule.rst:10
#: ../../api/qiskit.pulse.ScheduleComponent.rst:10
#: ../../api/qiskit.pulse.Snapshot.rst:10
#: ../../api/qiskit.qobj.PulseLibraryItem.rst:10
#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:10
#: ../../api/qiskit.qobj.PulseQobj.rst:10
#: ../../api/qiskit.qobj.PulseQobjConfig.rst:10
#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:10
#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:10
#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:10
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:10
#: ../../api/qiskit.qobj.QasmQobj.rst:10
#: ../../api/qiskit.qobj.QasmQobjConfig.rst:10
#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:10
#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:10
#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:10
#: ../../api/qiskit.qobj.Qobj.rst:10 ../../api/qiskit.qobj.QobjConfig.rst:10
#: ../../api/qiskit.qobj.QobjExperiment.rst:10
#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:10
#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:10
#: ../../api/qiskit.qobj.QobjHeader.rst:10
#: ../../api/qiskit.qobj.QobjInstruction.rst:10
#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:10
#: ../../api/qiskit.quantum_info.Kraus.rst:10
#: ../../api/qiskit.quantum_info.Pauli.rst:10
#: ../../api/qiskit.quantum_info.Stinespring.rst:10
#: ../../api/qiskit.result.Result.rst:10
#: ../../api/qiskit.transpiler.AnalysisPass.rst:10
#: ../../api/qiskit.transpiler.CouplingMap.rst:10
#: ../../api/qiskit.transpiler.FlowController.rst:10
#: ../../api/qiskit.transpiler.TransformationPass.rst:10
#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:10
#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:10
#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:10
#: ../../api/qiskit.transpiler.passes.CXDirection.rst:10
#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:10
#: ../../api/qiskit.transpiler.passes.CheckMap.rst:10
#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:10
#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:10
#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:10
#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:10
#: ../../api/qiskit.transpiler.passes.CountOps.rst:10
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:10
#: ../../api/qiskit.transpiler.passes.Decompose.rst:10
#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:10
#: ../../api/qiskit.transpiler.passes.Depth.rst:10
#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:10
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:10
#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:10
#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:10
#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:10
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:10
#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:10
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:10
#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:10
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:10
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:10
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:10
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:10
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:10
#: ../../api/qiskit.transpiler.passes.Size.rst:10
#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:10
#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:10
#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:10
#: ../../api/qiskit.transpiler.passes.Unroller.rst:10
#: ../../api/qiskit.transpiler.passes.Width.rst:10
#: ../../api/qiskit.validation.BaseSchema.rst:10
#: ../../api/qiskit.validation.ModelTypeValidator.rst:10
msgid "Attributes Summary"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.assembler.RunConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.assembler.RunConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:17
#: ../../api/qiskit.circuit.ClassicalRegister.rst:17
#: ../../api/qiskit.circuit.CompositeGate.rst:18
#: ../../api/qiskit.circuit.Gate.rst:18
#: ../../api/qiskit.circuit.Instruction.rst:17
#: ../../api/qiskit.circuit.InstructionSet.rst:10
#: ../../api/qiskit.circuit.Measure.rst:17
#: ../../api/qiskit.circuit.QuantumCircuit.rst:22
#: ../../api/qiskit.circuit.QuantumRegister.rst:17
#: ../../api/qiskit.circuit.Reset.rst:17
#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:17
#: ../../api/qiskit.dagcircuit.DAGNode.rst:22
#: ../../api/qiskit.extensions.Barrier.rst:10
#: ../../api/qiskit.extensions.CHGate.rst:10
#: ../../api/qiskit.extensions.CXBase.rst:10
#: ../../api/qiskit.extensions.CnotGate.rst:10
#: ../../api/qiskit.extensions.CrzGate.rst:10
#: ../../api/qiskit.extensions.Cu1Gate.rst:10
#: ../../api/qiskit.extensions.Cu3Gate.rst:10
#: ../../api/qiskit.extensions.CyGate.rst:10
#: ../../api/qiskit.extensions.CzGate.rst:10
#: ../../api/qiskit.extensions.FredkinGate.rst:10
#: ../../api/qiskit.extensions.HGate.rst:10
#: ../../api/qiskit.extensions.IdGate.rst:10
#: ../../api/qiskit.extensions.Initialize.rst:10
#: ../../api/qiskit.extensions.RXGate.rst:10
#: ../../api/qiskit.extensions.RYGate.rst:10
#: ../../api/qiskit.extensions.RZGate.rst:10
#: ../../api/qiskit.extensions.RZZGate.rst:10
#: ../../api/qiskit.extensions.SGate.rst:10
#: ../../api/qiskit.extensions.SdgGate.rst:10
#: ../../api/qiskit.extensions.SwapGate.rst:10
#: ../../api/qiskit.extensions.TGate.rst:10
#: ../../api/qiskit.extensions.TdgGate.rst:10
#: ../../api/qiskit.extensions.ToffoliGate.rst:10
#: ../../api/qiskit.extensions.U0Gate.rst:10
#: ../../api/qiskit.extensions.U1Gate.rst:10
#: ../../api/qiskit.extensions.U2Gate.rst:10
#: ../../api/qiskit.extensions.U3Gate.rst:10
#: ../../api/qiskit.extensions.UBase.rst:10
#: ../../api/qiskit.extensions.UnitaryGate.rst:10
#: ../../api/qiskit.extensions.XGate.rst:10
#: ../../api/qiskit.extensions.YGate.rst:10
#: ../../api/qiskit.extensions.ZGate.rst:10
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:19
#: ../../api/qiskit.extensions.standard.Barrier.rst:17
#: ../../api/qiskit.extensions.standard.CHGate.rst:18
#: ../../api/qiskit.extensions.standard.CXBase.rst:18
#: ../../api/qiskit.extensions.standard.CnotGate.rst:18
#: ../../api/qiskit.extensions.standard.CrzGate.rst:18
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:18
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:18
#: ../../api/qiskit.extensions.standard.CyGate.rst:18
#: ../../api/qiskit.extensions.standard.CzGate.rst:18
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:18
#: ../../api/qiskit.extensions.standard.HGate.rst:18
#: ../../api/qiskit.extensions.standard.IdGate.rst:18
#: ../../api/qiskit.extensions.standard.RXGate.rst:18
#: ../../api/qiskit.extensions.standard.RYGate.rst:18
#: ../../api/qiskit.extensions.standard.RZGate.rst:18
#: ../../api/qiskit.extensions.standard.RZZGate.rst:18
#: ../../api/qiskit.extensions.standard.SGate.rst:18
#: ../../api/qiskit.extensions.standard.SdgGate.rst:18
#: ../../api/qiskit.extensions.standard.SwapGate.rst:18
#: ../../api/qiskit.extensions.standard.TGate.rst:18
#: ../../api/qiskit.extensions.standard.TdgGate.rst:18
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:18
#: ../../api/qiskit.extensions.standard.U0Gate.rst:18
#: ../../api/qiskit.extensions.standard.U1Gate.rst:18
#: ../../api/qiskit.extensions.standard.U2Gate.rst:18
#: ../../api/qiskit.extensions.standard.U3Gate.rst:18
#: ../../api/qiskit.extensions.standard.UBase.rst:18
#: ../../api/qiskit.extensions.standard.XGate.rst:18
#: ../../api/qiskit.extensions.standard.YGate.rst:18
#: ../../api/qiskit.extensions.standard.ZGate.rst:18
#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:24
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:24
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:24
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:24
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:24
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:24
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:24
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:24
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:24
#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:19
#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:17
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:19
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:19
#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:22
#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:21
#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:18
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:18
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:18
#: ../../api/qiskit.providers.BaseBackend.rst:10
#: ../../api/qiskit.providers.BaseJob.rst:10
#: ../../api/qiskit.providers.BaseProvider.rst:10
#: ../../api/qiskit.providers.aer.AerJob.rst:10
#: ../../api/qiskit.providers.aer.AerProvider.rst:10
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:17
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:17
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:17
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:17
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:17
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:17
#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:19
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:10
#: ../../api/qiskit.providers.basicaer.BasicAerProvider.rst:10
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:19
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:19
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:18
#: ../../api/qiskit.providers.models.BackendConfiguration.rst:17
#: ../../api/qiskit.providers.models.BackendProperties.rst:17
#: ../../api/qiskit.providers.models.BackendStatus.rst:17
#: ../../api/qiskit.providers.models.Command.rst:17
#: ../../api/qiskit.providers.models.GateConfig.rst:17
#: ../../api/qiskit.providers.models.JobStatus.rst:17
#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:17
#: ../../api/qiskit.providers.models.PulseDefaults.rst:17
#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:17
#: ../../api/qiskit.providers.models.UchannelLO.rst:17
#: ../../api/qiskit.pulse.Acquire.rst:21 ../../api/qiskit.pulse.CmdDef.rst:10
#: ../../api/qiskit.pulse.DeviceSpecification.rst:18
#: ../../api/qiskit.pulse.FrameChange.rst:19
#: ../../api/qiskit.pulse.Instruction.rst:24
#: ../../api/qiskit.pulse.LoConfig.rst:17 ../../api/qiskit.pulse.LoRange.rst:17
#: ../../api/qiskit.pulse.PersistentValue.rst:19
#: ../../api/qiskit.pulse.SamplePulse.rst:19
#: ../../api/qiskit.pulse.Schedule.rst:23
#: ../../api/qiskit.pulse.ScheduleComponent.rst:23
#: ../../api/qiskit.pulse.Snapshot.rst:26 ../../api/qiskit.qasm.Qasm.rst:10
#: ../../api/qiskit.qobj.PulseLibraryItem.rst:17
#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:19
#: ../../api/qiskit.qobj.PulseQobj.rst:17
#: ../../api/qiskit.qobj.PulseQobjConfig.rst:17
#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:17
#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:17
#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:17
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:19
#: ../../api/qiskit.qobj.QasmQobj.rst:17
#: ../../api/qiskit.qobj.QasmQobjConfig.rst:17
#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:17
#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:17
#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:17
#: ../../api/qiskit.qobj.Qobj.rst:17 ../../api/qiskit.qobj.QobjConfig.rst:17
#: ../../api/qiskit.qobj.QobjExperiment.rst:17
#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:17
#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:17
#: ../../api/qiskit.qobj.QobjHeader.rst:17
#: ../../api/qiskit.qobj.QobjInstruction.rst:17
#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:17
#: ../../api/qiskit.quantum_info.Chi.rst:10
#: ../../api/qiskit.quantum_info.Choi.rst:10
#: ../../api/qiskit.quantum_info.Kraus.rst:16
#: ../../api/qiskit.quantum_info.Operator.rst:10
#: ../../api/qiskit.quantum_info.PTM.rst:10
#: ../../api/qiskit.quantum_info.Pauli.rst:18
#: ../../api/qiskit.quantum_info.Stinespring.rst:16
#: ../../api/qiskit.quantum_info.SuperOp.rst:10
#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:10
#: ../../api/qiskit.result.Result.rst:17
#: ../../api/qiskit.tools.events.TextProgressBar.rst:10
#: ../../api/qiskit.transpiler.AnalysisPass.rst:17
#: ../../api/qiskit.transpiler.CouplingMap.rst:16
#: ../../api/qiskit.transpiler.FlowController.rst:16
#: ../../api/qiskit.transpiler.Layout.rst:10
#: ../../api/qiskit.transpiler.PassManager.rst:10
#: ../../api/qiskit.transpiler.PropertySet.rst:10
#: ../../api/qiskit.transpiler.TransformationPass.rst:17
#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:17
#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:17
#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:17
#: ../../api/qiskit.transpiler.passes.CXDirection.rst:17
#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:17
#: ../../api/qiskit.transpiler.passes.CheckMap.rst:17
#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:17
#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:17
#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:17
#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:17
#: ../../api/qiskit.transpiler.passes.CountOps.rst:17
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:17
#: ../../api/qiskit.transpiler.passes.Decompose.rst:17
#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:17
#: ../../api/qiskit.transpiler.passes.Depth.rst:17
#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:17
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:17
#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:17
#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:17
#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:17
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:17
#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:17
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:17
#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:17
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:17
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:17
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:17
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:17
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:17
#: ../../api/qiskit.transpiler.passes.Size.rst:17
#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:17
#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:17
#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:17
#: ../../api/qiskit.transpiler.passes.Unroller.rst:17
#: ../../api/qiskit.transpiler.passes.Width.rst:17
#: ../../api/qiskit.validation.BaseModel.rst:10
#: ../../api/qiskit.validation.BaseSchema.rst:19
#: ../../api/qiskit.validation.ModelTypeValidator.rst:21
msgid "Methods Summary"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.assembler.RunConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.BackendConfiguration.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.BackendProperties.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.BackendStatus.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.Command.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.GateConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.JobStatus.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.PulseDefaults.rst:24:<autosummary>:1
#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.UchannelLO.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseLibraryItem.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobj.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobj.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.Qobj.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjExperiment.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjHeader.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjInstruction.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:23:<autosummary>:1
#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
#: ../../api/qiskit.validation.BaseModel.rst:16:<autosummary>:1 of
#: qiskit.assembler.RunConfig.as_dict:1 qiskit.assembler.RunConfig.to_dict:1
#: qiskit.providers.models.BackendConfiguration.as_dict:1
#: qiskit.providers.models.BackendConfiguration.to_dict:1
#: qiskit.providers.models.BackendProperties.as_dict:1
#: qiskit.providers.models.BackendProperties.to_dict:1
#: qiskit.providers.models.BackendStatus.as_dict:1
#: qiskit.providers.models.BackendStatus.to_dict:1
#: qiskit.providers.models.Command.as_dict:1
#: qiskit.providers.models.Command.to_dict:1
#: qiskit.providers.models.GateConfig.as_dict:1
#: qiskit.providers.models.GateConfig.to_dict:1
#: qiskit.providers.models.JobStatus.as_dict:1
#: qiskit.providers.models.JobStatus.to_dict:1
#: qiskit.providers.models.PulseBackendConfiguration.as_dict:1
#: qiskit.providers.models.PulseBackendConfiguration.to_dict:1
#: qiskit.providers.models.PulseDefaults.as_dict:1
#: qiskit.providers.models.PulseDefaults.to_dict:1
#: qiskit.providers.models.QasmBackendConfiguration.as_dict:1
#: qiskit.providers.models.QasmBackendConfiguration.to_dict:1
#: qiskit.providers.models.UchannelLO.as_dict:1
#: qiskit.providers.models.UchannelLO.to_dict:1
#: qiskit.qobj.PulseLibraryItem.as_dict:1
#: qiskit.qobj.PulseLibraryItem.to_dict:1 qiskit.qobj.PulseQobj.as_dict:1
#: qiskit.qobj.PulseQobj.to_dict:1 qiskit.qobj.PulseQobjConfig.as_dict:1
#: qiskit.qobj.PulseQobjConfig.to_dict:1
#: qiskit.qobj.PulseQobjExperiment.as_dict:1
#: qiskit.qobj.PulseQobjExperiment.to_dict:1
#: qiskit.qobj.PulseQobjExperimentConfig.as_dict:1
#: qiskit.qobj.PulseQobjExperimentConfig.to_dict:1
#: qiskit.qobj.PulseQobjInstruction.as_dict:1
#: qiskit.qobj.PulseQobjInstruction.to_dict:1 qiskit.qobj.QasmQobj.as_dict:1
#: qiskit.qobj.QasmQobj.to_dict:1 qiskit.qobj.QasmQobjConfig.as_dict:1
#: qiskit.qobj.QasmQobjConfig.to_dict:1
#: qiskit.qobj.QasmQobjExperiment.as_dict:1
#: qiskit.qobj.QasmQobjExperiment.to_dict:1
#: qiskit.qobj.QasmQobjExperimentConfig.as_dict:1
#: qiskit.qobj.QasmQobjExperimentConfig.to_dict:1
#: qiskit.qobj.QasmQobjInstruction.as_dict:1
#: qiskit.qobj.QasmQobjInstruction.to_dict:1 qiskit.qobj.Qobj.as_dict:1
#: qiskit.qobj.Qobj.to_dict:1 qiskit.qobj.QobjConfig.as_dict:1
#: qiskit.qobj.QobjConfig.to_dict:1 qiskit.qobj.QobjExperiment.as_dict:1
#: qiskit.qobj.QobjExperiment.to_dict:1
#: qiskit.qobj.QobjExperimentConfig.as_dict:1
#: qiskit.qobj.QobjExperimentConfig.to_dict:1
#: qiskit.qobj.QobjExperimentHeader.as_dict:1
#: qiskit.qobj.QobjExperimentHeader.to_dict:1 qiskit.qobj.QobjHeader.as_dict:1
#: qiskit.qobj.QobjHeader.to_dict:1 qiskit.qobj.QobjInstruction.as_dict:1
#: qiskit.qobj.QobjInstruction.to_dict:1
#: qiskit.qobj.QobjMeasurementOption.as_dict:1
#: qiskit.qobj.QobjMeasurementOption.to_dict:1 qiskit.result.Result.as_dict:1
#: qiskit.result.Result.to_dict:1 qiskit.validation.BaseModel.as_dict:1
#: qiskit.validation.BaseModel.to_dict:1
#: qiskit.validation.base.BaseModel.as_dict:1
#: qiskit.validation.base.BaseModel.to_dict:1
msgid "Serialize the model into a Python dict of simple types."
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.assembler.RunConfig.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.BackendConfiguration.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.BackendProperties.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.BackendStatus.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.Command.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.GateConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.JobStatus.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.PulseDefaults.rst:24:<autosummary>:1
#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:23:<autosummary>:1
#: ../../api/qiskit.providers.models.UchannelLO.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseLibraryItem.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobj.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobj.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.Qobj.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjExperiment.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjHeader.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjInstruction.rst:23:<autosummary>:1
#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:23:<autosummary>:1
#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
#: ../../api/qiskit.validation.BaseModel.rst:16:<autosummary>:1 of
#: qiskit.assembler.RunConfig.from_dict:1
#: qiskit.providers.models.BackendConfiguration.from_dict:1
#: qiskit.providers.models.BackendProperties.from_dict:1
#: qiskit.providers.models.BackendStatus.from_dict:1
#: qiskit.providers.models.Command.from_dict:1
#: qiskit.providers.models.GateConfig.from_dict:1
#: qiskit.providers.models.JobStatus.from_dict:1
#: qiskit.providers.models.PulseBackendConfiguration.from_dict:1
#: qiskit.providers.models.PulseDefaults.from_dict:1
#: qiskit.providers.models.QasmBackendConfiguration.from_dict:1
#: qiskit.providers.models.UchannelLO.from_dict:1
#: qiskit.qobj.PulseLibraryItem.from_dict:1 qiskit.qobj.PulseQobj.from_dict:1
#: qiskit.qobj.PulseQobjConfig.from_dict:1
#: qiskit.qobj.PulseQobjExperiment.from_dict:1
#: qiskit.qobj.PulseQobjExperimentConfig.from_dict:1
#: qiskit.qobj.PulseQobjInstruction.from_dict:1
#: qiskit.qobj.QasmQobj.from_dict:1 qiskit.qobj.QasmQobjConfig.from_dict:1
#: qiskit.qobj.QasmQobjExperiment.from_dict:1
#: qiskit.qobj.QasmQobjExperimentConfig.from_dict:1
#: qiskit.qobj.QasmQobjInstruction.from_dict:1 qiskit.qobj.Qobj.from_dict:1
#: qiskit.qobj.QobjConfig.from_dict:1 qiskit.qobj.QobjExperiment.from_dict:1
#: qiskit.qobj.QobjExperimentConfig.from_dict:1
#: qiskit.qobj.QobjExperimentHeader.from_dict:1
#: qiskit.qobj.QobjHeader.from_dict:1 qiskit.qobj.QobjInstruction.from_dict:1
#: qiskit.qobj.QobjMeasurementOption.from_dict:1
#: qiskit.result.Result.from_dict:1 qiskit.validation.BaseModel.from_dict:1
#: qiskit.validation.base.BaseModel.from_dict:1
msgid "Deserialize a dict of simple types into an instance of this class."
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.assembler.RunConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:25
#: ../../api/qiskit.circuit.ClassicalRegister.rst:24
#: ../../api/qiskit.circuit.CompositeGate.rst:65
#: ../../api/qiskit.circuit.Gate.rst:30
#: ../../api/qiskit.circuit.Instruction.rst:28
#: ../../api/qiskit.circuit.Measure.rst:28
#: ../../api/qiskit.circuit.Parameter.rst:16
#: ../../api/qiskit.circuit.QuantumCircuit.rst:86
#: ../../api/qiskit.circuit.QuantumRegister.rst:24
#: ../../api/qiskit.circuit.Reset.rst:28
#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:77
#: ../../api/qiskit.dagcircuit.DAGNode.rst:29
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:30
#: ../../api/qiskit.extensions.standard.Barrier.rst:28
#: ../../api/qiskit.extensions.standard.CHGate.rst:30
#: ../../api/qiskit.extensions.standard.CXBase.rst:30
#: ../../api/qiskit.extensions.standard.CnotGate.rst:30
#: ../../api/qiskit.extensions.standard.CrzGate.rst:30
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:30
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:30
#: ../../api/qiskit.extensions.standard.CyGate.rst:30
#: ../../api/qiskit.extensions.standard.CzGate.rst:30
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:30
#: ../../api/qiskit.extensions.standard.HGate.rst:30
#: ../../api/qiskit.extensions.standard.IdGate.rst:30
#: ../../api/qiskit.extensions.standard.RXGate.rst:30
#: ../../api/qiskit.extensions.standard.RYGate.rst:30
#: ../../api/qiskit.extensions.standard.RZGate.rst:30
#: ../../api/qiskit.extensions.standard.RZZGate.rst:30
#: ../../api/qiskit.extensions.standard.SGate.rst:30
#: ../../api/qiskit.extensions.standard.SdgGate.rst:30
#: ../../api/qiskit.extensions.standard.SwapGate.rst:30
#: ../../api/qiskit.extensions.standard.TGate.rst:30
#: ../../api/qiskit.extensions.standard.TdgGate.rst:30
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:30
#: ../../api/qiskit.extensions.standard.U0Gate.rst:30
#: ../../api/qiskit.extensions.standard.U1Gate.rst:30
#: ../../api/qiskit.extensions.standard.U2Gate.rst:30
#: ../../api/qiskit.extensions.standard.U3Gate.rst:30
#: ../../api/qiskit.extensions.standard.UBase.rst:30
#: ../../api/qiskit.extensions.standard.XGate.rst:30
#: ../../api/qiskit.extensions.standard.YGate.rst:30
#: ../../api/qiskit.extensions.standard.ZGate.rst:30
#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:34
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:32
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:34
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:34
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:34
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:33
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:33
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:33
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:33
#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:27
#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:23
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:25
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:26
#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:34
#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:31
#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:27
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:27
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:27
#: ../../api/qiskit.providers.JobStatus.rst:22
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:28
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:28
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:28
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:28
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:28
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:28
#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:35
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:31
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:31
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:30
#: ../../api/qiskit.providers.models.BackendConfiguration.rst:25
#: ../../api/qiskit.providers.models.BackendProperties.rst:25
#: ../../api/qiskit.providers.models.BackendStatus.rst:25
#: ../../api/qiskit.providers.models.Command.rst:25
#: ../../api/qiskit.providers.models.GateConfig.rst:25
#: ../../api/qiskit.providers.models.JobStatus.rst:25
#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:25
#: ../../api/qiskit.providers.models.PulseDefaults.rst:26
#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:25
#: ../../api/qiskit.providers.models.UchannelLO.rst:25
#: ../../api/qiskit.pulse.Acquire.rst:28
#: ../../api/qiskit.pulse.AcquireChannel.rst:19
#: ../../api/qiskit.pulse.ControlChannel.rst:19
#: ../../api/qiskit.pulse.DeviceSpecification.rst:24
#: ../../api/qiskit.pulse.Discriminator.rst:17
#: ../../api/qiskit.pulse.DriveChannel.rst:19
#: ../../api/qiskit.pulse.FrameChange.rst:26
#: ../../api/qiskit.pulse.Instruction.rst:38
#: ../../api/qiskit.pulse.Kernel.rst:17 ../../api/qiskit.pulse.LoConfig.rst:26
#: ../../api/qiskit.pulse.LoRange.rst:23
#: ../../api/qiskit.pulse.MeasureChannel.rst:19
#: ../../api/qiskit.pulse.MemorySlot.rst:19
#: ../../api/qiskit.pulse.PersistentValue.rst:26
#: ../../api/qiskit.pulse.RegisterSlot.rst:19
#: ../../api/qiskit.pulse.SamplePulse.rst:27
#: ../../api/qiskit.pulse.Schedule.rst:37
#: ../../api/qiskit.pulse.ScheduleComponent.rst:36
#: ../../api/qiskit.pulse.Snapshot.rst:42
#: ../../api/qiskit.qobj.PulseLibraryItem.rst:25
#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:37
#: ../../api/qiskit.qobj.PulseQobj.rst:25
#: ../../api/qiskit.qobj.PulseQobjConfig.rst:25
#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:25
#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:25
#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:25
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:37
#: ../../api/qiskit.qobj.QasmQobj.rst:25
#: ../../api/qiskit.qobj.QasmQobjConfig.rst:25
#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:25
#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:25
#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:25
#: ../../api/qiskit.qobj.Qobj.rst:25 ../../api/qiskit.qobj.QobjConfig.rst:25
#: ../../api/qiskit.qobj.QobjExperiment.rst:25
#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:25
#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:25
#: ../../api/qiskit.qobj.QobjHeader.rst:25
#: ../../api/qiskit.qobj.QobjInstruction.rst:25
#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:25
#: ../../api/qiskit.quantum_info.Kraus.rst:31
#: ../../api/qiskit.quantum_info.Pauli.rst:38
#: ../../api/qiskit.quantum_info.Stinespring.rst:31
#: ../../api/qiskit.result.Result.rst:30
#: ../../api/qiskit.transpiler.AnalysisPass.rst:24
#: ../../api/qiskit.transpiler.CouplingMap.rst:30
#: ../../api/qiskit.transpiler.FlowController.rst:25
#: ../../api/qiskit.transpiler.TransformationPass.rst:24
#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:24
#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:24
#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:24
#: ../../api/qiskit.transpiler.passes.CXDirection.rst:24
#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:24
#: ../../api/qiskit.transpiler.passes.CheckMap.rst:24
#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:24
#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:24
#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:24
#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:24
#: ../../api/qiskit.transpiler.passes.CountOps.rst:24
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:24
#: ../../api/qiskit.transpiler.passes.Decompose.rst:24
#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:24
#: ../../api/qiskit.transpiler.passes.Depth.rst:24
#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:24
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:24
#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:24
#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:26
#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:24
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:24
#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:24
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:24
#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:26
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:24
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:24
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:24
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:24
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:24
#: ../../api/qiskit.transpiler.passes.Size.rst:24
#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:24
#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:24
#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:24
#: ../../api/qiskit.transpiler.passes.Unroller.rst:24
#: ../../api/qiskit.transpiler.passes.Width.rst:24
#: ../../api/qiskit.validation.BaseSchema.rst:37
#: ../../api/qiskit.validation.ModelTypeValidator.rst:31
msgid "Attributes Documentation"
msgstr ""

#: ../../api/qiskit.assembler.RunConfig.rst:30
#: ../../api/qiskit.circuit.ClassicalRegister.rst:29
#: ../../api/qiskit.circuit.CompositeGate.rst:71
#: ../../api/qiskit.circuit.Gate.rst:36
#: ../../api/qiskit.circuit.Instruction.rst:33
#: ../../api/qiskit.circuit.InstructionSet.rst:19
#: ../../api/qiskit.circuit.Measure.rst:33
#: ../../api/qiskit.circuit.QuantumCircuit.rst:96
#: ../../api/qiskit.circuit.QuantumRegister.rst:29
#: ../../api/qiskit.circuit.Reset.rst:33
#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:82
#: ../../api/qiskit.dagcircuit.DAGNode.rst:39
#: ../../api/qiskit.extensions.Barrier.rst:16
#: ../../api/qiskit.extensions.CHGate.rst:16
#: ../../api/qiskit.extensions.CXBase.rst:16
#: ../../api/qiskit.extensions.CnotGate.rst:17
#: ../../api/qiskit.extensions.CrzGate.rst:16
#: ../../api/qiskit.extensions.Cu1Gate.rst:16
#: ../../api/qiskit.extensions.Cu3Gate.rst:16
#: ../../api/qiskit.extensions.CyGate.rst:16
#: ../../api/qiskit.extensions.CzGate.rst:17
#: ../../api/qiskit.extensions.FredkinGate.rst:16
#: ../../api/qiskit.extensions.HGate.rst:17
#: ../../api/qiskit.extensions.IdGate.rst:17
#: ../../api/qiskit.extensions.Initialize.rst:16
#: ../../api/qiskit.extensions.RXGate.rst:16
#: ../../api/qiskit.extensions.RYGate.rst:16
#: ../../api/qiskit.extensions.RZGate.rst:16
#: ../../api/qiskit.extensions.RZZGate.rst:16
#: ../../api/qiskit.extensions.SGate.rst:17
#: ../../api/qiskit.extensions.SdgGate.rst:17
#: ../../api/qiskit.extensions.SwapGate.rst:17
#: ../../api/qiskit.extensions.TGate.rst:17
#: ../../api/qiskit.extensions.TdgGate.rst:17
#: ../../api/qiskit.extensions.ToffoliGate.rst:17
#: ../../api/qiskit.extensions.U0Gate.rst:17
#: ../../api/qiskit.extensions.U1Gate.rst:17
#: ../../api/qiskit.extensions.U2Gate.rst:17
#: ../../api/qiskit.extensions.U3Gate.rst:17
#: ../../api/qiskit.extensions.UBase.rst:17
#: ../../api/qiskit.extensions.UnitaryGate.rst:20
#: ../../api/qiskit.extensions.XGate.rst:17
#: ../../api/qiskit.extensions.YGate.rst:17
#: ../../api/qiskit.extensions.ZGate.rst:17
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:37
#: ../../api/qiskit.extensions.standard.Barrier.rst:33
#: ../../api/qiskit.extensions.standard.CHGate.rst:36
#: ../../api/qiskit.extensions.standard.CXBase.rst:36
#: ../../api/qiskit.extensions.standard.CnotGate.rst:36
#: ../../api/qiskit.extensions.standard.CrzGate.rst:36
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:36
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:36
#: ../../api/qiskit.extensions.standard.CyGate.rst:36
#: ../../api/qiskit.extensions.standard.CzGate.rst:36
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:36
#: ../../api/qiskit.extensions.standard.HGate.rst:36
#: ../../api/qiskit.extensions.standard.IdGate.rst:36
#: ../../api/qiskit.extensions.standard.RXGate.rst:36
#: ../../api/qiskit.extensions.standard.RYGate.rst:36
#: ../../api/qiskit.extensions.standard.RZGate.rst:36
#: ../../api/qiskit.extensions.standard.RZZGate.rst:36
#: ../../api/qiskit.extensions.standard.SGate.rst:36
#: ../../api/qiskit.extensions.standard.SdgGate.rst:36
#: ../../api/qiskit.extensions.standard.SwapGate.rst:36
#: ../../api/qiskit.extensions.standard.TGate.rst:36
#: ../../api/qiskit.extensions.standard.TdgGate.rst:36
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:36
#: ../../api/qiskit.extensions.standard.U0Gate.rst:36
#: ../../api/qiskit.extensions.standard.U1Gate.rst:36
#: ../../api/qiskit.extensions.standard.U2Gate.rst:36
#: ../../api/qiskit.extensions.standard.U3Gate.rst:36
#: ../../api/qiskit.extensions.standard.UBase.rst:36
#: ../../api/qiskit.extensions.standard.XGate.rst:36
#: ../../api/qiskit.extensions.standard.YGate.rst:36
#: ../../api/qiskit.extensions.standard.ZGate.rst:36
#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:46
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:44
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:46
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:46
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:46
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:45
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:45
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:45
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:45
#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:34
#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:28
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:32
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:33
#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:44
#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:40
#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:33
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:33
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:33
#: ../../api/qiskit.providers.BaseBackend.rst:21
#: ../../api/qiskit.providers.BaseJob.rst:21
#: ../../api/qiskit.providers.BaseProvider.rst:17
#: ../../api/qiskit.providers.aer.AerJob.rst:22
#: ../../api/qiskit.providers.aer.AerProvider.rst:17
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:33
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:33
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:33
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:33
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:33
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:33
#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:42
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:22
#: ../../api/qiskit.providers.basicaer.BasicAerProvider.rst:17
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:38
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:38
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:36
#: ../../api/qiskit.providers.models.BackendConfiguration.rst:30
#: ../../api/qiskit.providers.models.BackendProperties.rst:30
#: ../../api/qiskit.providers.models.BackendStatus.rst:30
#: ../../api/qiskit.providers.models.Command.rst:30
#: ../../api/qiskit.providers.models.GateConfig.rst:30
#: ../../api/qiskit.providers.models.JobStatus.rst:30
#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:30
#: ../../api/qiskit.providers.models.PulseDefaults.rst:31
#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:30
#: ../../api/qiskit.providers.models.UchannelLO.rst:30
#: ../../api/qiskit.pulse.Acquire.rst:37 ../../api/qiskit.pulse.CmdDef.rst:23
#: ../../api/qiskit.pulse.DeviceSpecification.rst:30
#: ../../api/qiskit.pulse.FrameChange.rst:33
#: ../../api/qiskit.pulse.Instruction.rst:50
#: ../../api/qiskit.pulse.LoConfig.rst:31 ../../api/qiskit.pulse.LoRange.rst:28
#: ../../api/qiskit.pulse.PersistentValue.rst:33
#: ../../api/qiskit.pulse.SamplePulse.rst:34
#: ../../api/qiskit.pulse.Schedule.rst:48
#: ../../api/qiskit.pulse.ScheduleComponent.rst:47
#: ../../api/qiskit.pulse.Snapshot.rst:56 ../../api/qiskit.qasm.Qasm.rst:18
#: ../../api/qiskit.qobj.PulseLibraryItem.rst:30
#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:44
#: ../../api/qiskit.qobj.PulseQobj.rst:30
#: ../../api/qiskit.qobj.PulseQobjConfig.rst:30
#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:30
#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:30
#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:30
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:44
#: ../../api/qiskit.qobj.QasmQobj.rst:30
#: ../../api/qiskit.qobj.QasmQobjConfig.rst:30
#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:30
#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:30
#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:30
#: ../../api/qiskit.qobj.Qobj.rst:30 ../../api/qiskit.qobj.QobjConfig.rst:30
#: ../../api/qiskit.qobj.QobjExperiment.rst:30
#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:30
#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:30
#: ../../api/qiskit.qobj.QobjHeader.rst:30
#: ../../api/qiskit.qobj.QobjInstruction.rst:30
#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:30
#: ../../api/qiskit.quantum_info.Chi.rst:24
#: ../../api/qiskit.quantum_info.Choi.rst:24
#: ../../api/qiskit.quantum_info.Kraus.rst:35
#: ../../api/qiskit.quantum_info.Operator.rst:27
#: ../../api/qiskit.quantum_info.PTM.rst:24
#: ../../api/qiskit.quantum_info.Pauli.rst:44
#: ../../api/qiskit.quantum_info.Stinespring.rst:35
#: ../../api/qiskit.quantum_info.SuperOp.rst:24
#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:21
#: ../../api/qiskit.result.Result.rst:35
#: ../../api/qiskit.tools.events.TextProgressBar.rst:23
#: ../../api/qiskit.transpiler.AnalysisPass.rst:29
#: ../../api/qiskit.transpiler.CouplingMap.rst:34
#: ../../api/qiskit.transpiler.FlowController.rst:29
#: ../../api/qiskit.transpiler.Layout.rst:29
#: ../../api/qiskit.transpiler.PassManager.rst:19
#: ../../api/qiskit.transpiler.PropertySet.rst:26
#: ../../api/qiskit.transpiler.TransformationPass.rst:29
#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:29
#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:29
#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:29
#: ../../api/qiskit.transpiler.passes.CXDirection.rst:29
#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:29
#: ../../api/qiskit.transpiler.passes.CheckMap.rst:29
#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:29
#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:29
#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:29
#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:29
#: ../../api/qiskit.transpiler.passes.CountOps.rst:29
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:29
#: ../../api/qiskit.transpiler.passes.Decompose.rst:29
#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:29
#: ../../api/qiskit.transpiler.passes.Depth.rst:29
#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:29
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:29
#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:29
#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:31
#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:29
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:29
#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:29
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:29
#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:31
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:29
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:29
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:29
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:29
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:29
#: ../../api/qiskit.transpiler.passes.Size.rst:29
#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:29
#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:29
#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:29
#: ../../api/qiskit.transpiler.passes.Unroller.rst:29
#: ../../api/qiskit.transpiler.passes.Width.rst:29
#: ../../api/qiskit.validation.BaseModel.rst:18
#: ../../api/qiskit.validation.BaseSchema.rst:44
#: ../../api/qiskit.validation.ModelTypeValidator.rst:40
msgid "Methods Documentation"
msgstr ""

#: of qiskit.assembler.RunConfig.from_dict:3
#: qiskit.assembler.RunConfig.to_dict:3
#: qiskit.providers.models.BackendConfiguration.from_dict:3
#: qiskit.providers.models.BackendConfiguration.to_dict:3
#: qiskit.providers.models.BackendProperties.from_dict:3
#: qiskit.providers.models.BackendProperties.to_dict:3
#: qiskit.providers.models.BackendStatus.from_dict:3
#: qiskit.providers.models.BackendStatus.to_dict:3
#: qiskit.providers.models.Command.from_dict:3
#: qiskit.providers.models.Command.to_dict:3
#: qiskit.providers.models.GateConfig.from_dict:3
#: qiskit.providers.models.GateConfig.to_dict:3
#: qiskit.providers.models.JobStatus.from_dict:3
#: qiskit.providers.models.JobStatus.to_dict:3
#: qiskit.providers.models.PulseBackendConfiguration.from_dict:3
#: qiskit.providers.models.PulseBackendConfiguration.to_dict:3
#: qiskit.providers.models.PulseDefaults.from_dict:3
#: qiskit.providers.models.PulseDefaults.to_dict:3
#: qiskit.providers.models.QasmBackendConfiguration.from_dict:3
#: qiskit.providers.models.QasmBackendConfiguration.to_dict:3
#: qiskit.providers.models.UchannelLO.from_dict:3
#: qiskit.providers.models.UchannelLO.to_dict:3
#: qiskit.qobj.PulseLibraryItem.from_dict:3
#: qiskit.qobj.PulseLibraryItem.to_dict:3 qiskit.qobj.PulseQobj.from_dict:3
#: qiskit.qobj.PulseQobj.to_dict:3 qiskit.qobj.PulseQobjConfig.from_dict:3
#: qiskit.qobj.PulseQobjConfig.to_dict:3
#: qiskit.qobj.PulseQobjExperiment.from_dict:3
#: qiskit.qobj.PulseQobjExperiment.to_dict:3
#: qiskit.qobj.PulseQobjExperimentConfig.from_dict:3
#: qiskit.qobj.PulseQobjExperimentConfig.to_dict:3
#: qiskit.qobj.PulseQobjInstruction.from_dict:3
#: qiskit.qobj.PulseQobjInstruction.to_dict:3 qiskit.qobj.QasmQobj.from_dict:3
#: qiskit.qobj.QasmQobj.to_dict:3 qiskit.qobj.QasmQobjConfig.from_dict:3
#: qiskit.qobj.QasmQobjConfig.to_dict:3
#: qiskit.qobj.QasmQobjExperiment.from_dict:3
#: qiskit.qobj.QasmQobjExperiment.to_dict:3
#: qiskit.qobj.QasmQobjExperimentConfig.from_dict:3
#: qiskit.qobj.QasmQobjExperimentConfig.to_dict:3
#: qiskit.qobj.QasmQobjInstruction.from_dict:3
#: qiskit.qobj.QasmQobjInstruction.to_dict:3 qiskit.qobj.Qobj.from_dict:3
#: qiskit.qobj.Qobj.to_dict:3 qiskit.qobj.QobjConfig.from_dict:3
#: qiskit.qobj.QobjConfig.to_dict:3 qiskit.qobj.QobjExperiment.from_dict:3
#: qiskit.qobj.QobjExperiment.to_dict:3
#: qiskit.qobj.QobjExperimentConfig.from_dict:3
#: qiskit.qobj.QobjExperimentConfig.to_dict:3
#: qiskit.qobj.QobjExperimentHeader.from_dict:3
#: qiskit.qobj.QobjExperimentHeader.to_dict:3
#: qiskit.qobj.QobjHeader.from_dict:3 qiskit.qobj.QobjHeader.to_dict:3
#: qiskit.qobj.QobjInstruction.from_dict:3
#: qiskit.qobj.QobjInstruction.to_dict:3
#: qiskit.qobj.QobjMeasurementOption.from_dict:3
#: qiskit.qobj.QobjMeasurementOption.to_dict:3 qiskit.result.Result.from_dict:3
#: qiskit.result.Result.to_dict:3 qiskit.validation.BaseModel.from_dict:3
#: qiskit.validation.BaseModel.to_dict:3
#: qiskit.validation.base.BaseModel.from_dict:3
#: qiskit.validation.base.BaseModel.to_dict:3
msgid ""
"Note that this method requires that the model is bound with "
"``@bind_schema``."
msgstr ""

#: ../../api/qiskit.assembler.assemble_circuits.rst:2
msgid "assemble_circuits"
msgstr ""

#: of qiskit.assembler.assemble_circuits:1
msgid "Assembles a list of circuits into a qobj which can be run on the backend."
msgstr ""

#: of qiskit.assembler.assemble_circuits:3
msgid "circuit(s) to assemble"
msgstr ""

#: of qiskit.assembler.assemble_circuits:5 qiskit.tools.compile:24
#: qiskit.tools.compiler.compile:24
msgid "identifier for the generated qobj"
msgstr ""

#: of qiskit.assembler.assemble_circuits:7 qiskit.converters.circuits_to_qobj:5
msgid "header to pass to the results"
msgstr ""

#: of qiskit.assembler.assemble_circuits:9
msgid "configuration of the runtime environment"
msgstr ""

#: of qiskit.assembler.assemble_circuits:12
#: qiskit.assembler.assemble_schedules:11 qiskit.converters.circuits_to_qobj:26
msgid "the Qobj to be run on the backends"
msgstr ""

#: ../../api/qiskit.assembler.assemble_schedules.rst:2
msgid "assemble_schedules"
msgstr ""

#: of qiskit.assembler.assemble_schedules:1
msgid ""
"Assembles a list of schedules into a qobj which can be run on the "
"backend. :param schedules: schedules to assemble :type schedules: "
"list[Schedule] :param qobj_id: identifier for the generated qobj :type "
"qobj_id: int :param qobj_header: header to pass to the results :type "
"qobj_header: QobjHeader :param run_config: configuration of the runtime "
"environment :type run_config: RunConfig"
msgstr ""

#: of qiskit.assembler.assemble_schedules:14
msgid "when invalid schedules or configs are provided"
msgstr ""

#: ../../api/qiskit.assembler.disassemble.rst:2
msgid "disassemble"
msgstr ""

#: of qiskit.assembler.disassemble:1
msgid "Dissasemble a qobj and return the circuits, run_config, and user header"
msgstr ""

#: of qiskit.assembler.disassemble:3
msgid "The input qobj object to dissasemble"
msgstr ""

#: of qiskit.assembler.disassemble:6
msgid ""
"A list of quantum circuits run_config (dict): The dist of the run config "
"user_qobj_header (dict): The dict of any user headers in the qobj"
msgstr ""

#: ../../api/qiskit.assembler.models.rst:2
msgid "qiskit.assembler.models module"
msgstr ""

#: of qiskit.assembler.models:1
msgid "Models for RunConfig."
msgstr ""

#: of qiskit.assembler.models.RunConfigSchema:1
#: qiskit.qobj.PulseLibraryItemSchema:1
#: qiskit.qobj.models.base.QobjConfigSchema:1
#: qiskit.qobj.models.base.QobjExperimentConfigSchema:1
#: qiskit.qobj.models.base.QobjExperimentHeaderSchema:1
#: qiskit.qobj.models.base.QobjExperimentSchema:1
#: qiskit.qobj.models.base.QobjHeaderSchema:1
#: qiskit.qobj.models.base.QobjInstructionSchema:1
#: qiskit.qobj.models.pulse.PulseLibraryItemSchema:1
#: qiskit.qobj.models.pulse.QobjMeasurementOptionSchema:1
#: qiskit.result.models.ExperimentResultDataSchema:1
#: qiskit.result.models.ExperimentResultSchema:1
#: qiskit.result.models.ResultSchema:1
#: qiskit.transpiler.models.TranspileConfigSchema:1
#: qiskit.validation.base.ObjSchema:1
msgid "ベースクラス: :class:`qiskit.validation.base.BaseSchema`"
msgstr ""

#: of qiskit.assembler.models.RunConfigSchema:1
msgid "Schema for RunConfig."
msgstr ""

#: ../../api/qiskit.assembler.run_config.rst:2
msgid "qiskit.assembler.run\\_config module"
msgstr ""

#: of qiskit.assembler.run_config:1
msgid "Models for RunConfig and its related components."
msgstr ""

#: ../../api/qiskit.chemistry.rst:2
msgid "qiskit.chemistry package"
msgstr ""

#: of qiskit.chemistry:1
msgid "Main public functionality."
msgstr ""

#: of qiskit.chemistry.QiskitChemistryError:1
#: qiskit.chemistry.qiskit_chemistry_error.QiskitChemistryError:1
msgid "Base class for errors raised by the QiskitChemistry SDK."
msgstr ""

#: of qiskit.chemistry.QMolecule:1 qiskit.chemistry.qmolecule.QMolecule:1
msgid "Molecule data class with driver information."
msgstr ""

#: of qiskit.chemistry.QMolecule.load:1
#: qiskit.chemistry.qmolecule.QMolecule.load:1
msgid "loads info saved."
msgstr ""

#: of qiskit.chemistry.QMolecule.mo_to_spin:1
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin:1
msgid "Convert one and two-body MO integrals to spin orbital basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.mo_to_spin:3
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin:3
msgid ""
"Takes one and two body integrals in molecular orbital basis and returns "
"integrals in spin orbitals"
msgstr ""

#: of qiskit.chemistry.QMolecule.mo_to_spin:6
#: qiskit.chemistry.QMolecule.onee_to_spin:6
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin:6
#: qiskit.chemistry.qmolecule.QMolecule.onee_to_spin:6
msgid "One body orbitals in molecular basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.mo_to_spin:7
#: qiskit.chemistry.QMolecule.twoe_to_spin:6
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin:7
#: qiskit.chemistry.qmolecule.QMolecule.twoe_to_spin:6
msgid "Two body orbitals in molecular basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.mo_to_spin:8
#: qiskit.chemistry.QMolecule.onee_to_spin:7
#: qiskit.chemistry.QMolecule.twoe_to_spin:7
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin:8
#: qiskit.chemistry.qmolecule.QMolecule.onee_to_spin:7
#: qiskit.chemistry.qmolecule.QMolecule.twoe_to_spin:7
msgid "Threshold value for assignments"
msgstr ""

#: of qiskit.chemistry.QMolecule.mo_to_spin:10
#: qiskit.chemistry.qmolecule.QMolecule.mo_to_spin:10
msgid "One and two body integrals in spin orbitals"
msgstr ""

#: of qiskit.chemistry.QMolecule.onee_to_spin:1
#: qiskit.chemistry.qmolecule.QMolecule.onee_to_spin:1
msgid "Convert one-body MO integrals to spin orbital basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.onee_to_spin:3
#: qiskit.chemistry.qmolecule.QMolecule.onee_to_spin:3
msgid ""
"Takes one body integrals in molecular orbital basis and returns integrals"
" in spin orbitals"
msgstr ""

#: of qiskit.chemistry.QMolecule.onee_to_spin:9
#: qiskit.chemistry.qmolecule.QMolecule.onee_to_spin:9
msgid "One body integrals in spin orbitals"
msgstr ""

#: of qiskit.chemistry.QMolecule.oneeints2mo:1
#: qiskit.chemistry.qmolecule.QMolecule.oneeints2mo:1
msgid "Converts one-body integrals from AO to MO basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.oneeints2mo:3
#: qiskit.chemistry.qmolecule.QMolecule.oneeints2mo:3
msgid "Returns one electron integrals in AO basis converted to given MO basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.oneeints2mo:5
#: qiskit.chemistry.qmolecule.QMolecule.oneeints2mo:5
msgid "N^2 one electron integrals in AO basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.oneeints2mo:6
#: qiskit.chemistry.QMolecule.twoeints2mo:6
#: qiskit.chemistry.qmolecule.QMolecule.oneeints2mo:6
#: qiskit.chemistry.qmolecule.QMolecule.twoeints2mo:6
msgid "Molecular orbital coefficients"
msgstr ""

#: of qiskit.chemistry.QMolecule.oneeints2mo:8
#: qiskit.chemistry.QMolecule.twoeints2mo:8
#: qiskit.chemistry.qmolecule.QMolecule.oneeints2mo:8
#: qiskit.chemistry.qmolecule.QMolecule.twoeints2mo:8
msgid "integrals in MO basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.save:1
#: qiskit.chemistry.qmolecule.QMolecule.save:1
msgid "Saves the info from the driver."
msgstr ""

#: of qiskit.chemistry.QMolecule.twoe_to_spin:1
#: qiskit.chemistry.qmolecule.QMolecule.twoe_to_spin:1
msgid "Convert two-body MO integrals to spin orbital basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.twoe_to_spin:3
#: qiskit.chemistry.qmolecule.QMolecule.twoe_to_spin:3
msgid ""
"Takes two body integrals in molecular orbital basis and returns integrals"
" in spin orbitals"
msgstr ""

#: of qiskit.chemistry.QMolecule.twoe_to_spin:9
#: qiskit.chemistry.qmolecule.QMolecule.twoe_to_spin:9
msgid "Two body integrals in spin orbitals"
msgstr ""

#: of qiskit.chemistry.QMolecule.twoeints2mo:1
#: qiskit.chemistry.qmolecule.QMolecule.twoeints2mo:1
msgid "Converts two-body integrals from AO to MO basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.twoeints2mo:3
#: qiskit.chemistry.qmolecule.QMolecule.twoeints2mo:3
msgid "Returns two electron integrals in AO basis converted to given MO basis"
msgstr ""

#: of qiskit.chemistry.QMolecule.twoeints2mo:5
#: qiskit.chemistry.qmolecule.QMolecule.twoeints2mo:5
msgid "N^2 two electron integrals in AO basis"
msgstr ""

#: of qiskit.chemistry.QiskitChemistry:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry:1
msgid "Main Chemistry class."
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.chemistry_result:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.chemistry_result:1
msgid "Returns Chemistry result."
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.hdf5_file:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.hdf5_file:1
msgid "Returns Chemistry hdf5 path with chemistry results, if used."
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.operator:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.operator:1
msgid "Returns Chemistry Operator."
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.parser:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.parser:1
msgid "Returns Chemistry parser."
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.qiskit_aqua:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.qiskit_aqua:1
msgid "Returns Qiskit Aqua object."
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.run:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run:1
msgid "Runs the Qiskit Chemistry experiment"
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.run:3
#: qiskit.chemistry.QiskitChemistry.run_driver:3
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run:3
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run_driver:3
#: qiskit.chemistry.qiskit_chemistry.run_driver_to_json:3
#: qiskit.chemistry.qiskit_chemistry.run_experiment:5
#: qiskit.chemistry.run_driver_to_json:3 qiskit.chemistry.run_experiment:5
msgid "Chemistry input data"
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.run:5
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run:5
#: qiskit.chemistry.qiskit_chemistry.run_experiment:7
#: qiskit.chemistry.run_experiment:7
msgid "Output data"
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.run:7
#: qiskit.chemistry.QiskitChemistry.run_driver:5
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run:7
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run_driver:5
#: qiskit.chemistry.qiskit_chemistry.run_experiment:9
#: qiskit.chemistry.run_experiment:9
msgid "the experimental settings to be used in place of backend name"
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.run:10
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run:10
msgid "result dictionary"
msgstr ""

#: of qiskit.chemistry.QiskitChemistry.run_driver:1
#: qiskit.chemistry.qiskit_chemistry.QiskitChemistry.run_driver:1
msgid "Runs the Qiskit Chemistry driver"
msgstr ""

#: of qiskit.chemistry.qiskit_chemistry.run_experiment:1
#: qiskit.chemistry.run_experiment:1
msgid "Run Chemistry from params."
msgstr ""

#: of qiskit.chemistry.qiskit_chemistry.run_experiment:3
#: qiskit.chemistry.run_experiment:3
msgid "Using params and returning a result dictionary"
msgstr ""

#: of qiskit.chemistry.qiskit_chemistry.run_experiment:12
#: qiskit.chemistry.run_experiment:12
msgid "Result dictionary containing result of chemistry computation"
msgstr ""

#: of qiskit.chemistry.qiskit_chemistry.run_driver_to_json:1
#: qiskit.chemistry.run_driver_to_json:1
msgid "Runs the Aqua Chemistry driver only"
msgstr ""

#: of qiskit.chemistry.qiskit_chemistry.run_driver_to_json:5
#: qiskit.chemistry.run_driver_to_json:5
msgid "Name of file that will contain the Aqua JSON input data"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator:1
msgid "A set of functions to map fermionic Hamiltonians to qubit Hamiltonians."
msgstr ""

#: of qiskit.chemistry.FermionicOperator:3
#: qiskit.chemistry.fermionic_operator.FermionicOperator:3
msgid ""
"References: - E. Wigner and P. Jordan., Über das Paulische "
"Äguivalenzverbot, \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:5
#: qiskit.chemistry.fermionic_operator.FermionicOperator:5
msgid "Phys., 47:631 (1928). \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:6
#: qiskit.chemistry.fermionic_operator.FermionicOperator:6
msgid "Bravyi and A. Kitaev. Fermionic quantum computation, \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:7
#: qiskit.chemistry.fermionic_operator.FermionicOperator:7
msgid "Ann. of Phys., 298(1):210–226 (2002). \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:8
#: qiskit.chemistry.fermionic_operator.FermionicOperator:8
msgid "Tranter, S. Sofia, J. Seeley, M. Kaicher, J. McClean, R. Babbush, \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:9
#: qiskit.chemistry.fermionic_operator.FermionicOperator:9
msgid ""
"P. Coveney, F. Mintert, F. Wilhelm, and P. Love. The Bravyi–Kitaev \\ "
"transformation: Properties and applications. Int. Journal of Quantum \\ "
"Chemistry, 115(19):1431–1441 (2015). \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:12
#: qiskit.chemistry.fermionic_operator.FermionicOperator:12
msgid "Bravyi, J. M. Gambetta, A. Mezzacapo, and K. Temme, \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:13
#: qiskit.chemistry.fermionic_operator.FermionicOperator:13
msgid "arXiv e-print arXiv:1701.08213 (2017). \\"
msgstr ""

#: of qiskit.chemistry.FermionicOperator:14
#: qiskit.chemistry.fermionic_operator.FermionicOperator:14
msgid "Setia, J. D. Whitfield, arXiv:1712.00446 (2017)"
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_elimination:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_elimination:1
msgid "Eliminate modes."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_elimination:3
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_elimination:3
msgid ""
"Generate a new fermionic operator with the modes in fermion_mode_array "
"deleted"
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_elimination:5
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_elimination:5
msgid "orbital index for elimination"
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_elimination:8
#: qiskit.chemistry.FermionicOperator.total_angular_momentum:6
#: qiskit.chemistry.FermionicOperator.total_magnetization:3
#: qiskit.chemistry.FermionicOperator.total_particle_number:4
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_elimination:8
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_angular_momentum:6
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_magnetization:3
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_particle_number:4
msgid "Fermionic Hamiltonian"
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_freezing:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_freezing:1
msgid "Freezing modes and extracting its energy."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_freezing:3
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_freezing:3
msgid ""
"Generate a fermionic operator with the modes in fermion_mode_array "
"deleted and provide the shifted energy after freezing."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_freezing:6
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_freezing:6
msgid "orbital index for freezing"
msgstr ""

#: of qiskit.chemistry.FermionicOperator.fermion_mode_freezing:9
#: qiskit.chemistry.fermionic_operator.FermionicOperator.fermion_mode_freezing:9
msgid "Fermionic Hamiltonian float: energy of frozen modes"
msgstr ""

#: of qiskit.chemistry.FermionicOperator.h1:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.h1:1
msgid "Getter of one body integral tensor."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.h2:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.h2:1
msgid "Getter of two body integral tensor."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.mapping:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping:1
msgid "Map fermionic operator to qubit operator."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.mapping:3
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping:3
msgid ""
"Using multiprocess to speedup the mapping, the improvement can be "
"observed when h2 is a non-sparse matrix."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.mapping:6
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping:6
msgid ""
"case-insensitive mapping type. \"jordan_wigner\", \"parity\", "
"\"bravyi_kitaev\", \"bksf\""
msgstr ""

#: of qiskit.chemistry.FermionicOperator.mapping:12
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping:12
msgid "create an Operator object in Paulis form."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.mapping:15
#: qiskit.chemistry.fermionic_operator.FermionicOperator.mapping:15
msgid "if the `map_type` can not be recognized."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.modes:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.modes:1
msgid "Getter of modes."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.particle_hole_transformation:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.particle_hole_transformation:1
msgid ""
"The 'standard' second quantized Hamiltonian can be transformed in the "
"particle-hole (p/h) picture, which makes the expansion of the trail "
"wavefunction from the HF reference state more natural. In fact, for both "
"trail wavefunctions implemented in q-lib ('heuristic' hardware efficient "
"and UCCSD) the p/h Hamiltonian improves the speed of convergence of the "
"VQE algorithm for the calculation of the electronic ground state "
"properties. For more information on the p/h formalism see: P. Barkoutsos,"
" arXiv:1805.04340(https://arxiv.org/abs/1805.04340)."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.particle_hole_transformation:10
#: qiskit.chemistry.fermionic_operator.FermionicOperator.particle_hole_transformation:10
msgid "number of particles"
msgstr ""

#: of qiskit.chemistry.FermionicOperator.total_angular_momentum:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_angular_momentum:1
msgid "Total angular momentum."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.total_angular_momentum:3
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_angular_momentum:3
msgid ""
"A data_preprocess_helper fermionic operator which can be used to evaluate"
" the total angular momentum of the given eigenstate."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.total_magnetization:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_magnetization:1
msgid ""
"A data_preprocess_helper fermionic operator which can be used to         "
"evaluate the magnetization of the given eigenstate."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.total_particle_number:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.total_particle_number:1
msgid ""
"A data_preprocess_helper fermionic operator which can be used to evaluate"
" the number of particle of the given eigenstate."
msgstr ""

#: of qiskit.chemistry.FermionicOperator.transform:1
#: qiskit.chemistry.fermionic_operator.FermionicOperator.transform:1
msgid "Transform the one and two body term based on unitary_matrix."
msgstr ""

#: of qiskit.chemistry.MP2Info:1 qiskit.chemistry.mp2info.MP2Info:1
msgid "A utility class for Moller-Plesset 2nd order (MP2) information"
msgstr ""

#: of qiskit.chemistry.MP2Info:3 qiskit.chemistry.mp2info.MP2Info:3
msgid "Each double excitation given by [i,a,j,b] has a coefficient computed using"
msgstr ""

#: of qiskit.chemistry.MP2Info:4 qiskit.chemistry.mp2info.MP2Info:4
msgid "coeff = -(2 * Tiajb - Tibja)/(oe[b] + oe[a] - oe[i] - oe[j])"
msgstr ""

#: of qiskit.chemistry.MP2Info:5 qiskit.chemistry.mp2info.MP2Info:5
msgid "where oe[] is the orbital energy"
msgstr ""

#: of qiskit.chemistry.MP2Info:8 qiskit.chemistry.mp2info.MP2Info:8
msgid "and an energy delta given by"
msgstr ""

#: of qiskit.chemistry.MP2Info:8 qiskit.chemistry.mp2info.MP2Info:8
msgid "e_delta = coeff * Tiajb"
msgstr ""

#: of qiskit.chemistry.MP2Info:10 qiskit.chemistry.mp2info.MP2Info:10
msgid ""
"All the computations are done using the molecule orbitals but the indexes"
" used in the excitation information passed in and out are in the block "
"spin orbital numbering as normally used by the chemistry stack."
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_delta:1
#: qiskit.chemistry.mp2info.MP2Info.mp2_delta:1
msgid "Get the MP2 delta energy correction for the molecule"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_delta:3
#: qiskit.chemistry.mp2info.MP2Info.mp2_delta:3
msgid "The MP2 delta energy"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_energy:1
#: qiskit.chemistry.mp2info.MP2Info.mp2_energy:1
msgid "Get the MP2 energy for the molecule"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_energy:3
#: qiskit.chemistry.mp2info.MP2Info.mp2_energy:3
msgid "The MP2 energy"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_get_term_info:1
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info:1
msgid ""
"With a reduced active space the set of used excitations can be less than "
"allowing all available excitations. Given a (sub)set of excitations in "
"the space this will return a list of correlation coefficients and a list "
"of correlation energies ordered as per the excitation list provided."
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_get_term_info:6
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info:6
msgid "A list of excitations for which to get the coeff and e_delta"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_get_term_info:8
#: qiskit.chemistry.MP2Info.mp2_terms:4
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info:8
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms:4
msgid "Whether core orbitals are frozen or not"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_get_term_info:10
#: qiskit.chemistry.MP2Info.mp2_terms:6
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info:10
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms:6
msgid "An optional list of ints indicating removed orbitals"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_get_term_info:13
#: qiskit.chemistry.mp2info.MP2Info.mp2_get_term_info:13
msgid "List of coefficients and list of energy deltas"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_terms:1
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms:1
msgid ""
"Gets the set of MP2 terms for the molecule taking into account index "
"adjustments due to frozen core and/or other orbital reduction"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_terms:9
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms:9
msgid ""
"A dictionary of excitations where the key is a string in the form       "
"from_to_from_to e.g. 0_4_6_10 and the value is a tuple of       (coeff, "
"e_delta)"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_terms:12
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms:12
msgid "A dictionary of excitations where the key is a string in the form"
msgstr ""

#: of qiskit.chemistry.MP2Info.mp2_terms:12
#: qiskit.chemistry.mp2info.MP2Info.mp2_terms:12
msgid "from_to_from_to e.g. 0_4_6_10 and the value is a tuple of (coeff, e_delta)"
msgstr ""

#: of qiskit.chemistry._logging.build_logging_config:1
#: qiskit.chemistry.build_logging_config:1
msgid ""
"Creates a the configuration dict of the named loggers using the default "
"SDK configuration provided by `_QISKIT_CHEMISTRY_LOGGING_CONFIG`:"
msgstr ""

#: of qiskit.chemistry._logging.get_qiskit_chemistry_logging:1
#: qiskit.chemistry.get_qiskit_chemistry_logging:1
msgid "Returns the current Qiskit Chemistry logging level"
msgstr ""

#: of qiskit.chemistry._logging.set_qiskit_chemistry_logging:1
#: qiskit.chemistry.set_qiskit_chemistry_logging:1
msgid "Updates the Qiskit Chemistry logging with the appropriate logging level"
msgstr ""

#: of qiskit.chemistry._logging.set_qiskit_chemistry_logging:3
#: qiskit.chemistry.set_qiskit_chemistry_logging:3
msgid "minimum severity of the messages that are displayed."
msgstr ""

#: ../../api/qiskit.chemistry._logging.rst:2
msgid "qiskit.chemistry.\\_logging module"
msgstr ""

#: ../../api/qiskit.chemistry.aqua_extensions.rst:2
msgid "qiskit.chemistry.aqua\\_extensions package"
msgstr ""

#: ../../api/qiskit.chemistry.aqua_extensions.components.rst:2
msgid "qiskit.chemistry.aqua\\_extensions.components package"
msgstr ""

#: ../../api/qiskit.chemistry.aqua_extensions.components.initial_states.rst:2
msgid "qiskit.chemistry.aqua\\_extensions.components.initial\\_states package"
msgstr ""

#: of qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock:1
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock:1
msgid "A Hartree-Fock initial state."
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.initial_states.HartreeFock.bitstr:1
#: qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.HartreeFock.bitstr:1
msgid "Getter of the bit string represented the statevector."
msgstr ""

#: ../../api/qiskit.chemistry.aqua_extensions.components.initial_states.hartree_fock.rst:2
msgid ""
"qiskit.chemistry.aqua\\_extensions.components.initial\\_states.hartree\\_fock"
" module"
msgstr ""

#: ../../api/qiskit.chemistry.aqua_extensions.components.variational_forms.rst:2
msgid "qiskit.chemistry.aqua\\_extensions.components.variational\\_forms package"
msgstr ""

#: of qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD:1
msgid ""
"This trial wavefunction is a Unitary Coupled-Cluster Single and Double "
"excitations variational form. For more information, see "
"https://arxiv.org/abs/1805.04340"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists:1
msgid "Computes single and double excitation lists"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists:3
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists:3
msgid "Total number of particles"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists:4
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists:4
msgid "Total number of spin orbitals"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists:5
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists:5
msgid ""
"List of occupied orbitals to include, indices are 0 to n where n is num "
"particles // 2"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists:7
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists:7
msgid ""
"List of unoccupied orbitals to include, indices are 0 to m where m is "
"(num_orbitals - num particles) // 2"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists:9
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists:9
msgid ""
"True to include alpha,alpha and beta,beta double excitations as well as "
"alpha,beta pairings. False includes only alpha,beta"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.compute_excitation_lists:12
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.compute_excitation_lists:12
msgid "Single and double excitation lists"
msgstr ""

#: of
#: qiskit.chemistry.aqua_extensions.components.variational_forms.UCCSD.preferred_init_points:1
#: qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.UCCSD.preferred_init_points:1
msgid "Getter of preferred initial points based on the given initial state."
msgstr ""

#: ../../api/qiskit.chemistry.aqua_extensions.components.variational_forms.uccsd.rst:2
msgid ""
"qiskit.chemistry.aqua\\_extensions.components.variational\\_forms.uccsd "
"module"
msgstr ""

#: ../../api/qiskit.chemistry.bksf.rst:2
msgid "qiskit.chemistry.bksf module"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:1
msgid ""
"Transform from InteractionOpeator to QubitOperator for Bravyi-Kitaev fast"
" algorithm."
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:3
msgid ""
"The electronic Hamiltonian is represented in terms of creation and "
"annihilation operators. These creation and annihilation operators could "
"be used to define Majorana modes as follows:"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:6
msgid "c_{2i} = a_i + a^{\\dagger}_i, c_{2i+1} = (a_i - a^{\\dagger}_{i})/(1j)"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:9
msgid "These Majorana modes can be used to define edge operators B_i and A_{ij}:"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:9
msgid "B_i=c_{2i}c_{2i+1}, A_{ij}=c_{2i}c_{2j}"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:11
msgid ""
"using these edge operators the fermionic algebra can be generated and "
"hence all the terms in the electronic Hamiltonian can be expressed in "
"terms of edge operators. The terms in electronic Hamiltonian can be "
"divided into five types (arXiv 1208.5986). We can find the edge operator "
"expression for each of those five types. For example, the excitation "
"operator term in Hamiltonian when represented in terms of edge operators "
"becomes:"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:18
msgid "a_i^{\\dagger}a_j+a_j^{\\dagger}a_i = (-1j/2)*(A_ij*B_i+B_j*A_ij)"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:19
msgid ""
"For the sake of brevity the reader is encouraged to look up the "
"expressions of other terms from the code below. The variables for edge "
"operators are chosen according to the nomenclature defined above (B_i and"
" A_ij). A detailed description of these operators and the terms of the "
"electronic Hamiltonian are provided in (arXiv 1712.00446)."
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:25
#: qiskit.chemistry.bksf.generate_fermions:3
#: qiskit.chemistry.bksf.number_operator:3
#: qiskit.chemistry.bksf.vacuum_operator:3
msgid "the fermionic operator in the second quanitzed form"
msgstr ""

#: of qiskit.chemistry.bksf.bksf_mapping:28
msgid "mapped qubit operator"
msgstr ""

#: of qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list:1
msgid "Construct edge list required for the bksf algorithm."
msgstr ""

#: of qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list:3
msgid "the fermionic operator in the second quantized form"
msgstr ""

#: of qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list:6
msgid ""
"edge_list, a 2xE matrix, where E is total number of edge                 "
"and each pair denotes (from, to)"
msgstr ""

#: of qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list:8
msgid "edge_list, a 2xE matrix, where E is total number of edge"
msgstr ""

#: of qiskit.chemistry.bksf.bravyi_kitaev_fast_edge_list:9
msgid "and each pair denotes (from, to)"
msgstr ""

#: of qiskit.chemistry.bksf.edge_operator_aij:1
msgid "Calculate the edge operator A_ij."
msgstr ""

#: of qiskit.chemistry.bksf.edge_operator_aij:3
#: qiskit.chemistry.bksf.edge_operator_bi:3
msgid "The definitions used here are consistent with arXiv:quant-ph/0003137"
msgstr ""

#: of qiskit.chemistry.bksf.edge_operator_aij:5
#: qiskit.chemistry.bksf.edge_operator_bi:5
msgid ""
"a 2xE matrix, where E is total number of edge and each pair denotes "
"(from, to)"
msgstr ""

#: of qiskit.chemistry.bksf.edge_operator_aij:8
#: qiskit.chemistry.bksf.edge_operator_aij:10
msgid "specifying the edge operator A"
msgstr ""

#: of qiskit.chemistry.bksf.edge_operator_aij:13
#: qiskit.chemistry.bksf.edge_operator_bi:11
msgid "qubit operator"
msgstr ""

#: of qiskit.chemistry.bksf.edge_operator_bi:1
msgid "Calculate the edge operator B_i."
msgstr ""

#: of qiskit.chemistry.bksf.edge_operator_bi:8
msgid "index for specifying the edge operator B."
msgstr ""

#: of qiskit.chemistry.bksf.generate_fermions:1
msgid ""
"The qubit operator for generating fermions in bravyi_kitaev_fast "
"representation."
msgstr ""

#: of qiskit.chemistry.bksf.generate_fermions:5
#: qiskit.chemistry.bksf.generate_fermions:7
msgid "index of fermions"
msgstr ""

#: of qiskit.chemistry.bksf.generate_fermions:10
#: qiskit.chemistry.bksf.number_operator:8
#: qiskit.chemistry.bksf.vacuum_operator:6
msgid "the qubit operator"
msgstr ""

#: of qiskit.chemistry.bksf.number_operator:1
msgid ""
"Find the qubit operator for the number operator in bravyi_kitaev_fast "
"representation."
msgstr ""

#: of qiskit.chemistry.bksf.number_operator:5
msgid "index, it corresponds to the mode for which number operator is required."
msgstr ""

#: of qiskit.chemistry.bksf.vacuum_operator:1
msgid "Use the stabilizers to find the vacuum state in bravyi_kitaev_fast."
msgstr ""

#: ../../api/qiskit.chemistry.core.rst:2
msgid "qiskit.chemistry.core package"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator:1
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator:1
msgid "Base class for ChemistryOperator."
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator:9
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator:9
#: qiskit.pulse.samplers.decorators:88
#: qiskit.tools.qcvv.tomography.process_tomography_set:26
#: qiskit.validation.fields.polymorphic.BasePolyField:16
msgid "Args:"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator:8
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator:8
msgid "configuration (dict): configuration dictionary"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.check_chemistry_operator_valid:1
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.check_chemistry_operator_valid:1
msgid "Checks if Chemistry Operator is ready for use. Throws an exception if not"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.init_params:1
#: qiskit.chemistry.core.Hamiltonian.init_params:1
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.init_params:1
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.init_params:1
msgid "Initialize via parameters dictionary."
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.init_params:6
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.init_params:6
msgid "Chemistry Operator object"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.process_algorithm_result:1
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.process_algorithm_result:1
msgid ""
"Takes the algorithm result and processes it as required, e.g. by "
"combination of any parts that were classically computed, for the final "
"result."
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.process_algorithm_result:5
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.process_algorithm_result:5
msgid "Result from algorithm"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.process_algorithm_result:8
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.process_algorithm_result:8
msgid "Final computation result"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.run:1
#: qiskit.chemistry.core.Hamiltonian.run:1
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.run:1
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.run:1
msgid ""
"Convert the qmolecule, according to the ChemistryOperator, into an "
"Operator that can be given to a QuantumAlgorithm"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.run:4
#: qiskit.chemistry.core.Hamiltonian.run:4
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.run:4
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.run:4
msgid "QMolecule from a chemistry driver"
msgstr ""

#: of qiskit.chemistry.core.ChemistryOperator.run:6
#: qiskit.chemistry.core.Hamiltonian.run:6
#: qiskit.chemistry.core.chemistry_operator.ChemistryOperator.run:6
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.run:6
msgid "(qubit_op, aux_ops)"
msgstr ""

#: of qiskit.chemistry.core.Hamiltonian:1
#: qiskit.chemistry.core.hamiltonian.Hamiltonian:1
msgid ""
"ベースクラス: "
":class:`qiskit.chemistry.core.chemistry_operator.ChemistryOperator`"
msgstr ""

#: of qiskit.chemistry.core.Hamiltonian:1
#: qiskit.chemistry.core.hamiltonian.Hamiltonian:1
msgid ""
"A molecular Hamiltonian operator, representing the energy of the "
"electrons and nuclei in a molecule."
msgstr ""

#: of qiskit.chemistry.core.Hamiltonian.init_params:6
#: qiskit.chemistry.core.hamiltonian.Hamiltonian.init_params:6
msgid "hamiltonian object"
msgstr ""

#: of qiskit.chemistry.core._discover_chemoperator.refresh_operators:1
#: qiskit.chemistry.core.refresh_operators:1
msgid "Attempts to rediscover all operator modules"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.register_chemistry_operator:1
#: qiskit.chemistry.core.register_chemistry_operator:1
msgid ""
"Registers a chemistry operator class :param cls: chemistry operator "
"class. :type cls: object"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.register_chemistry_operator:5
#: qiskit.chemistry.core.register_chemistry_operator:5
msgid "input name"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.register_chemistry_operator:8
#: qiskit.chemistry.core.register_chemistry_operator:8
msgid "if the class is already registered or could not be registered"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.deregister_chemistry_operator:1
#: qiskit.chemistry.core.deregister_chemistry_operator:1
msgid ""
"Deregisters a chemistry operator class :param chemistry_operator_name: "
"The chemistry operator name :type chemistry_operator_name: str"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_class:1
#: qiskit.chemistry.core.get_chemistry_operator_class:1
msgid ""
"Accesses chemistry operator class :param chemistry_operator_name: The "
"chemistry operator name :type chemistry_operator_name: str"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_class:5
#: qiskit.chemistry.core.get_chemistry_operator_class:5
msgid "chemistry operator class"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_configuration:1
#: qiskit.chemistry.core.get_chemistry_operator_configuration:1
msgid ""
"Accesses chemistry operator configuration :param chemistry_operator_name:"
" The chemistry operator name :type chemistry_operator_name: str"
msgstr ""

#: of
#: qiskit.chemistry.core._discover_chemoperator.get_chemistry_operator_configuration:5
#: qiskit.chemistry.core.get_chemistry_operator_configuration:5
msgid "chemistry operator configuration"
msgstr ""

#: of qiskit.chemistry.core._discover_chemoperator.local_chemistry_operators:1
#: qiskit.chemistry.core.local_chemistry_operators:1
msgid ""
"Accesses chemistry operator names :returns: chemistry operator names "
":rtype: names"
msgstr ""

#: ../../api/qiskit.chemistry.core._discover_chemoperator.rst:2
msgid "qiskit.chemistry.core.\\_discover\\_chemoperator module"
msgstr ""

#: of qiskit.chemistry.core._discover_chemoperator:1
msgid ""
"Methods for chemistry operators objects discovery, registration, "
"information"
msgstr ""

#: ../../api/qiskit.chemistry.core.chemistry_operator.rst:2
msgid "qiskit.chemistry.core.chemistry\\_operator module"
msgstr ""

#: of qiskit.chemistry.core.chemistry_operator:1
msgid ""
"This module contains the definition of a base class for a chemistry "
"operator. Such an operator takes a QMolecule and produces an input for a "
"quantum algorithm"
msgstr ""

#: ../../api/qiskit.chemistry.core.hamiltonian.rst:2
msgid "qiskit.chemistry.core.hamiltonian module"
msgstr ""

#: of qiskit.chemistry.core.hamiltonian:1
msgid ""
"This module implements a molecular Hamiltonian operator, representing the"
" energy of the electrons and nuclei in a molecule."
msgstr ""

#: ../../api/qiskit.chemistry.drivers.rst:2
msgid "qiskit.chemistry.drivers package"
msgstr ""

#: of qiskit.chemistry.drivers.BaseDriver:1
#: qiskit.chemistry.drivers._basedriver.BaseDriver:1
msgid "Base class for Drivers."
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.refresh_drivers:1
#: qiskit.chemistry.drivers.refresh_drivers:1
msgid "Attempts to rediscover all driver modules"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.register_driver:1
#: qiskit.chemistry.drivers.register_driver:1
msgid "Registers a driver class :param cls: Driver class. :type cls: object"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.register_driver:6
#: qiskit.chemistry.drivers.register_driver:6
msgid "name: driver name"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.deregister_driver:1
#: qiskit.chemistry.drivers.deregister_driver:1
msgid ""
"Remove driver from list of available drivers :param driver_name: name of "
"driver to unregister :type driver_name: str"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.get_driver_class:1
#: qiskit.chemistry.drivers.get_driver_class:1
msgid ""
"Return the class object for the named module. :param driver_name: the "
"module name :type driver_name: str"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.get_driver_class:5
#: qiskit.chemistry.drivers.get_driver_class:5
msgid "class object for module"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.get_driver_class:8
#: qiskit.chemistry.drivers._discover_driver.get_driver_configuration:8
#: qiskit.chemistry.drivers.get_driver_class:8
#: qiskit.chemistry.drivers.get_driver_configuration:8
msgid "if module is unavailable"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.get_driver_configuration:1
#: qiskit.chemistry.drivers.get_driver_configuration:1
msgid ""
"Return the configuration for the named module. :param driver_name: the "
"module name :type driver_name: str"
msgstr ""

#: of qiskit.chemistry.drivers._discover_driver.local_drivers:1
#: qiskit.chemistry.drivers.local_drivers:1
msgid ""
"Accesses chemistry drivers names :returns: chemistry drivers names "
":rtype: names"
msgstr ""

#: of qiskit.chemistry.drivers.GaussianDriver:1
#: qiskit.chemistry.drivers.HDF5Driver:1 qiskit.chemistry.drivers.PSI4Driver:1
#: qiskit.chemistry.drivers.PyQuanteDriver:1
#: qiskit.chemistry.drivers.PySCFDriver:1
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver:1
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver:1
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver:1
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver:1
#: qiskit.chemistry.drivers.psi4d.PSI4Driver:1
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver:1
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver:1
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver:1
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver:1
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver:1
msgid "ベースクラス: :class:`qiskit.chemistry.drivers._basedriver.BaseDriver`"
msgstr ""

#: of qiskit.chemistry.drivers.GaussianDriver:1
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver:1
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver:1
msgid "Python implementation of a Gaussian 16 driver."
msgstr ""

#: of qiskit.chemistry.drivers.GaussianDriver:3
#: qiskit.chemistry.drivers.gaussiand.GaussianDriver:3
#: qiskit.chemistry.drivers.gaussiand.gaussiandriver.GaussianDriver:3
msgid ""
"This driver uses the Gaussian open-source Gaussian 16 interfacing code in"
" order to access integrals and other electronic structure information as "
"computed by G16 for the given molecule. The job control file, as provided"
" via our input file, is augmented for our needs here such as to have it "
"output a MatrixElement file."
msgstr ""

#: of qiskit.chemistry.drivers.HDF5Driver:1
#: qiskit.chemistry.drivers.hdf5d.HDF5Driver:1
#: qiskit.chemistry.drivers.hdf5d.hdf5driver.HDF5Driver:1
msgid "Python implementation of a hdf5 driver."
msgstr ""

#: of qiskit.chemistry.drivers.PSI4Driver:1
#: qiskit.chemistry.drivers.psi4d.PSI4Driver:1
#: qiskit.chemistry.drivers.psi4d.psi4driver.PSI4Driver:1
msgid "Python implementation of a psi4 driver."
msgstr ""

#: of qiskit.chemistry.drivers.PyQuanteDriver:1
#: qiskit.chemistry.drivers.pyquanted.PyQuanteDriver:1
#: qiskit.chemistry.drivers.pyquanted.pyquantedriver.PyQuanteDriver:1
msgid "Python implementation of a PyQuante driver."
msgstr ""

#: of qiskit.chemistry.drivers.PySCFDriver:1
#: qiskit.chemistry.drivers.pyscfd.PySCFDriver:1
#: qiskit.chemistry.drivers.pyscfd.pyscfdriver.PySCFDriver:1
msgid "Python implementation of a PySCF driver."
msgstr ""

#: ../../api/qiskit.chemistry.drivers._basedriver.rst:2
msgid "qiskit.chemistry.drivers.\\_basedriver module"
msgstr ""

#: of qiskit.chemistry.drivers._basedriver:1
msgid "This module implements the abstract base class for driver modules."
msgstr ""

#: of qiskit.chemistry.drivers._basedriver:3
msgid ""
"To create add-on driver modules subclass the BaseDriver class in this "
"module. Doing so requires that the required driver interface is "
"implemented."
msgstr ""

#: ../../api/qiskit.chemistry.drivers._discover_driver.rst:2
msgid "qiskit.chemistry.drivers.\\_discover\\_driver module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.gaussiand.rst:2
msgid "qiskit.chemistry.drivers.gaussiand package"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.gaussiand.gauopen.rst:2
msgid "qiskit.chemistry.drivers.gaussiand.gauopen package"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.gaussiand.gauopen.QCMatEl.rst:2
msgid "qiskit.chemistry.drivers.gaussiand.gauopen.QCMatEl module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.gaussiand.gauopen.QCOpMat.rst:2
msgid "qiskit.chemistry.drivers.gaussiand.gauopen.QCOpMat module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.gaussiand.gaussiandriver.rst:2
msgid "qiskit.chemistry.drivers.gaussiand.gaussiandriver module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.hdf5d.rst:2
msgid "qiskit.chemistry.drivers.hdf5d package"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.hdf5d.hdf5driver.rst:2
msgid "qiskit.chemistry.drivers.hdf5d.hdf5driver module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.psi4d.rst:2
msgid "qiskit.chemistry.drivers.psi4d package"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.psi4d.psi4driver.rst:2
msgid "qiskit.chemistry.drivers.psi4d.psi4driver module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.pyquanted.rst:2
msgid "qiskit.chemistry.drivers.pyquanted package"
msgstr ""

#: of qiskit.chemistry.drivers.pyquanted.transform.transformintegrals:1
#: qiskit.chemistry.drivers.pyquanted.transformintegrals:1
msgid ""
"O(N^5) 4-index transformation of the two-electron integrals. Not as "
"efficient as it could be, since it inflates to the full rectangular "
"matrices rather than keeping them compressed. But at least it gets the "
"correct result."
msgstr ""

#: of qiskit.chemistry.drivers.pyquanted.ijkl2intindex:1
#: qiskit.chemistry.drivers.pyquanted.transform.ijkl2intindex:1
msgid "Indexing into the get2ints long array"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.pyquanted.integrals.rst:2
msgid "qiskit.chemistry.drivers.pyquanted.integrals module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.pyquanted.pyquantedriver.rst:2
msgid "qiskit.chemistry.drivers.pyquanted.pyquantedriver module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.pyquanted.transform.rst:2
msgid "qiskit.chemistry.drivers.pyquanted.transform module"
msgstr ""

#: of qiskit.chemistry.drivers.pyquanted.transform:1
msgid "This program is part of the PyQuante quantum chemistry program suite."
msgstr ""

#: of qiskit.chemistry.drivers.pyquanted.transform:3
msgid "Copyright (c) 2004, Richard P. Muller. All Rights Reserved."
msgstr ""

#: of qiskit.chemistry.drivers.pyquanted.transform:5
msgid ""
"PyQuante version 1.2 and later is covered by the modified BSD license. "
"Please see the file LICENSE that is part of this distribution."
msgstr ""

#: ../../api/qiskit.chemistry.drivers.pyscfd.rst:2
msgid "qiskit.chemistry.drivers.pyscfd package"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.pyscfd.integrals.rst:2
msgid "qiskit.chemistry.drivers.pyscfd.integrals module"
msgstr ""

#: ../../api/qiskit.chemistry.drivers.pyscfd.pyscfdriver.rst:2
msgid "qiskit.chemistry.drivers.pyscfd.pyscfdriver module"
msgstr ""

#: ../../api/qiskit.chemistry.fermionic_operator.rst:2
msgid "qiskit.chemistry.fermionic\\_operator module"
msgstr ""

#: ../../api/qiskit.chemistry.mp2info.rst:2
msgid "qiskit.chemistry.mp2info module"
msgstr ""

#: ../../api/qiskit.chemistry.parser.rst:2
msgid "qiskit.chemistry.parser package"
msgstr ""

#: of qiskit.chemistry.parser.InputParser:1
#: qiskit.chemistry.parser._inputparser.InputParser:1
msgid "Chemistry input file parser."
msgstr ""

#: ../../api/qiskit.chemistry.parser._inputparser.rst:2
msgid "qiskit.chemistry.parser.\\_inputparser module"
msgstr ""

#: ../../api/qiskit.chemistry.particle_hole.rst:2
msgid "qiskit.chemistry.particle\\_hole module"
msgstr ""

#: of qiskit.chemistry.particle_hole.last_two_indices_swap:1
msgid "Swap 2 last indices of an array"
msgstr ""

#: of qiskit.chemistry.particle_hole.last_two_indices_swap:3
#: qiskit.chemistry.particle_hole.last_two_indices_swap:6
msgid "TBD"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:1
msgid ""
"Given an operator and the rFs and rsgtu from Gaussian it produces new "
"h1,h2,id_terms usable for the generation of the Hamiltonian in Pauli "
"strings form."
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:6
msgid "number of electrons (occupied orbitals)"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:8
msgid "e.g. [i,j,k,l] indices of the term to normal order"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:10
msgid "e.g. two body terms list  ['adag', 'adag', 'a', 'a'],"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:12
msgid "['adag', 'a']"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:14
msgid ""
"e.g. rFs.dat (dim(rsgtu) = [n_qubits,n_qubits,n_qubits,n_qubits]) loaded "
"with QuTip function (qutip.fileio.qload) or numpy.array"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:17
msgid "e.g. rsgtu.dat (dim(rsgtu) = [n_qubits,n_qubits])"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:19
msgid "e.g. numpy.zeros([n_qubits, n_qubits])"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:21
msgid "e.g. numpy.zeros([n_qubits, n_qubits, n_qubits, n_qubits])"
msgstr ""

#: of qiskit.chemistry.particle_hole.normal_order_integrals:24
msgid "h1_new, h2_new, id_term"
msgstr ""

#: of qiskit.chemistry.particle_hole.particle_hole_transformation:1
msgid ""
"This function produces the necessary h1, h2, identity for work with "
"Fermionic Operators script."
msgstr ""

#: of qiskit.chemistry.particle_hole.particle_hole_transformation:5
msgid "number of electrons"
msgstr ""

#: of qiskit.chemistry.particle_hole.particle_hole_transformation:7
msgid "rFs terms from Gaussian"
msgstr ""

#: of qiskit.chemistry.particle_hole.particle_hole_transformation:9
msgid "rsgtu terms from Gaussian"
msgstr ""

#: of qiskit.chemistry.particle_hole.particle_hole_transformation:12
msgid "h1_prime, h2_prime, identities"
msgstr ""

#: of qiskit.chemistry.particle_hole.sort:1
msgid "Tool function for normal order, should not be used separately"
msgstr ""

#: of qiskit.chemistry.particle_hole.sort:3
msgid "array"
msgstr ""

#: of qiskit.chemistry.particle_hole.sort:6
msgid "integer e.g. swapped array, number of swaps"
msgstr ""

#: ../../api/qiskit.chemistry.qiskit_chemistry.rst:2
msgid "qiskit.chemistry.qiskit\\_chemistry module"
msgstr ""

#: ../../api/qiskit.chemistry.qiskit_chemistry_error.rst:2
msgid "qiskit.chemistry.qiskit\\_chemistry\\_error module"
msgstr ""

#: of qiskit.chemistry.qiskit_chemistry_error:1
msgid "Exception for errors raised by the QiskitChemistry SDK."
msgstr ""

#: ../../api/qiskit.chemistry.qiskit_chemistry_problem.rst:2
msgid "qiskit.chemistry.qiskit\\_chemistry\\_problem module"
msgstr ""

#: ../../api/qiskit.chemistry.qmolecule.rst:2
msgid "qiskit.chemistry.qmolecule module"
msgstr ""

#: ../../api/qiskit.chemistry.version.rst:2
msgid "qiskit.chemistry.version module"
msgstr ""

#: ../../api/qiskit.circuit.rst:2
msgid "qiskit.circuit package"
msgstr ""

#: of qiskit.circuit:1
msgid "Module for Circuits."
msgstr ""

#: ../../api/qiskit.circuit.ClassicalRegister.rst:2
msgid "ClassicalRegister"
msgstr ""

#: of qiskit.circuit.ClassicalRegister:1 qiskit.circuit.QuantumRegister:1
msgid "ベースクラス: :class:`qiskit.circuit.register.Register`"
msgstr ""

#: of qiskit.circuit.ClassicalRegister:1
msgid "Implement a classical register."
msgstr ""

#: ../../api/qiskit.circuit.ClassicalRegister.rst:15:<autosummary>:1
msgid ""
":obj:`instances_counter "
"<qiskit.circuit.ClassicalRegister.instances_counter>`\\"
msgstr ""

#: ../../api/qiskit.circuit.ClassicalRegister.rst:15:<autosummary>:1
msgid ":obj:`prefix <qiskit.circuit.ClassicalRegister.prefix>`\\"
msgstr ""

#: ../../api/qiskit.circuit.ClassicalRegister.rst:22:<autosummary>:1
msgid ""
":obj:`check_range <qiskit.circuit.ClassicalRegister.check_range>`\\ "
"\\(j\\)"
msgstr ""

#: ../../api/qiskit.circuit.ClassicalRegister.rst:22:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumRegister.rst:22:<autosummary>:1 of
#: qiskit.circuit.ClassicalRegister.check_range:1
#: qiskit.circuit.QuantumRegister.check_range:1
#: qiskit.circuit.register.Register.check_range:1
msgid "Check that j is a valid index into self."
msgstr ""

#: ../../api/qiskit.circuit.ClassicalRegister.rst:22:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.ClassicalRegister.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.ClassicalRegister.rst:22:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumRegister.rst:22:<autosummary>:1 of
#: qiskit.circuit.ClassicalRegister.qasm:1
#: qiskit.circuit.QuantumRegister.qasm:1
msgid "Return OPENQASM string for this register."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:2
msgid "CompositeGate"
msgstr ""

#: of qiskit.circuit.CompositeGate:1 qiskit.extensions.CHGate:1
#: qiskit.extensions.CXBase:1 qiskit.extensions.CnotGate:1
#: qiskit.extensions.CrzGate:1 qiskit.extensions.Cu1Gate:1
#: qiskit.extensions.Cu3Gate:1 qiskit.extensions.CyGate:1
#: qiskit.extensions.CzGate:1 qiskit.extensions.FredkinGate:1
#: qiskit.extensions.HGate:1 qiskit.extensions.IdGate:1
#: qiskit.extensions.RXGate:1 qiskit.extensions.RYGate:1
#: qiskit.extensions.RZGate:1 qiskit.extensions.RZZGate:1
#: qiskit.extensions.SGate:1 qiskit.extensions.SdgGate:1
#: qiskit.extensions.SwapGate:1 qiskit.extensions.TGate:1
#: qiskit.extensions.TdgGate:1 qiskit.extensions.ToffoliGate:1
#: qiskit.extensions.U0Gate:1 qiskit.extensions.U1Gate:1
#: qiskit.extensions.U2Gate:1 qiskit.extensions.U3Gate:1
#: qiskit.extensions.UBase:1 qiskit.extensions.UnitaryGate:1
#: qiskit.extensions.XGate:1 qiskit.extensions.YGate:1
#: qiskit.extensions.ZGate:1 qiskit.extensions.standard.CHGate:1
#: qiskit.extensions.standard.CXBase:1 qiskit.extensions.standard.CnotGate:1
#: qiskit.extensions.standard.CrzGate:1 qiskit.extensions.standard.Cu1Gate:1
#: qiskit.extensions.standard.Cu3Gate:1 qiskit.extensions.standard.CyGate:1
#: qiskit.extensions.standard.CzGate:1 qiskit.extensions.standard.FredkinGate:1
#: qiskit.extensions.standard.HGate:1 qiskit.extensions.standard.IdGate:1
#: qiskit.extensions.standard.RXGate:1 qiskit.extensions.standard.RYGate:1
#: qiskit.extensions.standard.RZGate:1 qiskit.extensions.standard.RZZGate:1
#: qiskit.extensions.standard.SGate:1 qiskit.extensions.standard.SdgGate:1
#: qiskit.extensions.standard.SwapGate:1 qiskit.extensions.standard.TGate:1
#: qiskit.extensions.standard.TdgGate:1
#: qiskit.extensions.standard.ToffoliGate:1 qiskit.extensions.standard.U0Gate:1
#: qiskit.extensions.standard.U1Gate:1 qiskit.extensions.standard.U2Gate:1
#: qiskit.extensions.standard.U3Gate:1 qiskit.extensions.standard.UBase:1
#: qiskit.extensions.standard.XGate:1 qiskit.extensions.standard.YGate:1
#: qiskit.extensions.standard.ZGate:1
#: qiskit.extensions.standard.ccx.ToffoliGate:1
#: qiskit.extensions.standard.ch.CHGate:1
#: qiskit.extensions.standard.crz.CrzGate:1
#: qiskit.extensions.standard.cswap.FredkinGate:1
#: qiskit.extensions.standard.cu1.Cu1Gate:1
#: qiskit.extensions.standard.cu3.Cu3Gate:1
#: qiskit.extensions.standard.cx.CnotGate:1
#: qiskit.extensions.standard.cy.CyGate:1
#: qiskit.extensions.standard.cz.CzGate:1 qiskit.extensions.standard.h.HGate:1
#: qiskit.extensions.standard.iden.IdGate:1
#: qiskit.extensions.standard.rx.RXGate:1
#: qiskit.extensions.standard.ry.RYGate:1
#: qiskit.extensions.standard.rz.RZGate:1
#: qiskit.extensions.standard.rzz.RZZGate:1
#: qiskit.extensions.standard.s.SGate:1 qiskit.extensions.standard.s.SdgGate:1
#: qiskit.extensions.standard.swap.SwapGate:1
#: qiskit.extensions.standard.t.TGate:1 qiskit.extensions.standard.t.TdgGate:1
#: qiskit.extensions.standard.u0.U0Gate:1
#: qiskit.extensions.standard.u1.U1Gate:1
#: qiskit.extensions.standard.u2.U2Gate:1
#: qiskit.extensions.standard.u3.U3Gate:1 qiskit.extensions.standard.x.XGate:1
#: qiskit.extensions.standard.y.YGate:1 qiskit.extensions.standard.z.ZGate:1
#: qiskit.extensions.unitary.UnitaryGate:1
msgid "ベースクラス: :class:`qiskit.circuit.gate.Gate`"
msgstr ""

#: of qiskit.circuit.CompositeGate:1
msgid "Composite gate, a sequence of unitary gates."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.circuit.CompositeGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:16:<autosummary>:1
#: ../../api/qiskit.circuit.Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:15:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:15:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:16:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.definition:1 qiskit.circuit.Gate.definition:1
#: qiskit.circuit.Instruction.definition:1 qiskit.circuit.Measure.definition:1
#: qiskit.circuit.Reset.definition:1
#: qiskit.extensions.simulator.Snapshot.definition:1
#: qiskit.extensions.standard.Barrier.definition:1
#: qiskit.extensions.standard.CHGate.definition:1
#: qiskit.extensions.standard.CXBase.definition:1
#: qiskit.extensions.standard.CnotGate.definition:1
#: qiskit.extensions.standard.CrzGate.definition:1
#: qiskit.extensions.standard.Cu1Gate.definition:1
#: qiskit.extensions.standard.Cu3Gate.definition:1
#: qiskit.extensions.standard.CyGate.definition:1
#: qiskit.extensions.standard.CzGate.definition:1
#: qiskit.extensions.standard.FredkinGate.definition:1
#: qiskit.extensions.standard.HGate.definition:1
#: qiskit.extensions.standard.IdGate.definition:1
#: qiskit.extensions.standard.RXGate.definition:1
#: qiskit.extensions.standard.RYGate.definition:1
#: qiskit.extensions.standard.RZGate.definition:1
#: qiskit.extensions.standard.RZZGate.definition:1
#: qiskit.extensions.standard.SGate.definition:1
#: qiskit.extensions.standard.SdgGate.definition:1
#: qiskit.extensions.standard.SwapGate.definition:1
#: qiskit.extensions.standard.TGate.definition:1
#: qiskit.extensions.standard.TdgGate.definition:1
#: qiskit.extensions.standard.ToffoliGate.definition:1
#: qiskit.extensions.standard.U0Gate.definition:1
#: qiskit.extensions.standard.U1Gate.definition:1
#: qiskit.extensions.standard.U2Gate.definition:1
#: qiskit.extensions.standard.U3Gate.definition:1
#: qiskit.extensions.standard.UBase.definition:1
#: qiskit.extensions.standard.XGate.definition:1
#: qiskit.extensions.standard.YGate.definition:1
#: qiskit.extensions.standard.ZGate.definition:1
msgid "Return definition in terms of other basic gates."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.circuit.CompositeGate.label>`\\"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:16:<autosummary>:1
#: ../../api/qiskit.circuit.Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:16:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.label:1 qiskit.circuit.Gate.label:1
#: qiskit.extensions.standard.CHGate.label:1
#: qiskit.extensions.standard.CXBase.label:1
#: qiskit.extensions.standard.CnotGate.label:1
#: qiskit.extensions.standard.CrzGate.label:1
#: qiskit.extensions.standard.Cu1Gate.label:1
#: qiskit.extensions.standard.Cu3Gate.label:1
#: qiskit.extensions.standard.CyGate.label:1
#: qiskit.extensions.standard.CzGate.label:1
#: qiskit.extensions.standard.FredkinGate.label:1
#: qiskit.extensions.standard.HGate.label:1
#: qiskit.extensions.standard.IdGate.label:1
#: qiskit.extensions.standard.RXGate.label:1
#: qiskit.extensions.standard.RYGate.label:1
#: qiskit.extensions.standard.RZGate.label:1
#: qiskit.extensions.standard.RZZGate.label:1
#: qiskit.extensions.standard.SGate.label:1
#: qiskit.extensions.standard.SdgGate.label:1
#: qiskit.extensions.standard.SwapGate.label:1
#: qiskit.extensions.standard.TGate.label:1
#: qiskit.extensions.standard.TdgGate.label:1
#: qiskit.extensions.standard.ToffoliGate.label:1
#: qiskit.extensions.standard.U0Gate.label:1
#: qiskit.extensions.standard.U1Gate.label:1
#: qiskit.extensions.standard.U2Gate.label:1
#: qiskit.extensions.standard.U3Gate.label:1
#: qiskit.extensions.standard.UBase.label:1
#: qiskit.extensions.standard.XGate.label:1
#: qiskit.extensions.standard.YGate.label:1
#: qiskit.extensions.standard.ZGate.label:1
msgid "Return gate label"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.circuit.CompositeGate.params>`\\"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:16:<autosummary>:1
#: ../../api/qiskit.circuit.Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:15:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:15:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:16:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:16:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.params:1 qiskit.circuit.Gate.params:1
#: qiskit.circuit.Instruction.params:1 qiskit.circuit.Measure.params:1
#: qiskit.circuit.Reset.params:1 qiskit.extensions.simulator.Snapshot.params:1
#: qiskit.extensions.standard.Barrier.params:1
#: qiskit.extensions.standard.CHGate.params:1
#: qiskit.extensions.standard.CXBase.params:1
#: qiskit.extensions.standard.CnotGate.params:1
#: qiskit.extensions.standard.CrzGate.params:1
#: qiskit.extensions.standard.Cu1Gate.params:1
#: qiskit.extensions.standard.Cu3Gate.params:1
#: qiskit.extensions.standard.CyGate.params:1
#: qiskit.extensions.standard.CzGate.params:1
#: qiskit.extensions.standard.FredkinGate.params:1
#: qiskit.extensions.standard.HGate.params:1
#: qiskit.extensions.standard.IdGate.params:1
#: qiskit.extensions.standard.RXGate.params:1
#: qiskit.extensions.standard.RYGate.params:1
#: qiskit.extensions.standard.RZGate.params:1
#: qiskit.extensions.standard.RZZGate.params:1
#: qiskit.extensions.standard.SGate.params:1
#: qiskit.extensions.standard.SdgGate.params:1
#: qiskit.extensions.standard.SwapGate.params:1
#: qiskit.extensions.standard.TGate.params:1
#: qiskit.extensions.standard.TdgGate.params:1
#: qiskit.extensions.standard.ToffoliGate.params:1
#: qiskit.extensions.standard.U0Gate.params:1
#: qiskit.extensions.standard.U1Gate.params:1
#: qiskit.extensions.standard.U2Gate.params:1
#: qiskit.extensions.standard.U3Gate.params:1
#: qiskit.extensions.standard.UBase.params:1
#: qiskit.extensions.standard.XGate.params:1
#: qiskit.extensions.standard.YGate.params:1
#: qiskit.extensions.standard.ZGate.params:1
msgid "return instruction params"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`append <qiskit.circuit.CompositeGate.append>`\\ \\(gate\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.append:1
msgid "Attach a gate."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`assemble <qiskit.circuit.CompositeGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.assemble:1 qiskit.circuit.Gate.assemble:1
#: qiskit.circuit.Instruction.assemble:1 qiskit.circuit.Measure.assemble:1
#: qiskit.circuit.Reset.assemble:1
#: qiskit.extensions.simulator.Snapshot.assemble:1
#: qiskit.extensions.standard.Barrier.assemble:1
#: qiskit.extensions.standard.CHGate.assemble:1
#: qiskit.extensions.standard.CXBase.assemble:1
#: qiskit.extensions.standard.CnotGate.assemble:1
#: qiskit.extensions.standard.CrzGate.assemble:1
#: qiskit.extensions.standard.Cu1Gate.assemble:1
#: qiskit.extensions.standard.Cu3Gate.assemble:1
#: qiskit.extensions.standard.CyGate.assemble:1
#: qiskit.extensions.standard.CzGate.assemble:1
#: qiskit.extensions.standard.FredkinGate.assemble:1
#: qiskit.extensions.standard.HGate.assemble:1
#: qiskit.extensions.standard.IdGate.assemble:1
#: qiskit.extensions.standard.RXGate.assemble:1
#: qiskit.extensions.standard.RYGate.assemble:1
#: qiskit.extensions.standard.RZGate.assemble:1
#: qiskit.extensions.standard.RZZGate.assemble:1
#: qiskit.extensions.standard.SGate.assemble:1
#: qiskit.extensions.standard.SdgGate.assemble:1
#: qiskit.extensions.standard.SwapGate.assemble:1
#: qiskit.extensions.standard.TGate.assemble:1
#: qiskit.extensions.standard.TdgGate.assemble:1
#: qiskit.extensions.standard.ToffoliGate.assemble:1
#: qiskit.extensions.standard.U0Gate.assemble:1
#: qiskit.extensions.standard.U1Gate.assemble:1
#: qiskit.extensions.standard.U2Gate.assemble:1
#: qiskit.extensions.standard.U3Gate.assemble:1
#: qiskit.extensions.standard.UBase.assemble:1
#: qiskit.extensions.standard.XGate.assemble:1
#: qiskit.extensions.standard.YGate.assemble:1
#: qiskit.extensions.standard.ZGate.assemble:1
msgid "Assemble a QasmQobjInstruction"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`barrier <qiskit.circuit.CompositeGate.barrier>`\\ \\(\\*qargs\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid "Apply barrier to circuit."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`c_if <qiskit.circuit.CompositeGate.c_if>`\\ \\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.c_if:1
msgid "Add classical control register."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`ccx <qiskit.circuit.CompositeGate.ccx>`\\ \\(ctl1\\, ctl2\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.ccx:1 qiskit.circuit.QuantumCircuit.ccx:1
#: qiskit.extensions.standard.ccx.ccx:1
msgid "Apply Toffoli to from ctl1 and ctl2 to tgt."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`ch <qiskit.circuit.CompositeGate.ch>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.ch:1 qiskit.extensions.standard.ch.ch:1
msgid "Apply CH from ctl to tgt."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`copy <qiskit.circuit.CompositeGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.copy:1 qiskit.circuit.Gate.copy:1
#: qiskit.circuit.Instruction.copy:1 qiskit.circuit.Measure.copy:1
#: qiskit.circuit.Reset.copy:1 qiskit.extensions.simulator.Snapshot.copy:1
#: qiskit.extensions.standard.Barrier.copy:1
#: qiskit.extensions.standard.CHGate.copy:1
#: qiskit.extensions.standard.CXBase.copy:1
#: qiskit.extensions.standard.CnotGate.copy:1
#: qiskit.extensions.standard.CrzGate.copy:1
#: qiskit.extensions.standard.Cu1Gate.copy:1
#: qiskit.extensions.standard.Cu3Gate.copy:1
#: qiskit.extensions.standard.CyGate.copy:1
#: qiskit.extensions.standard.CzGate.copy:1
#: qiskit.extensions.standard.FredkinGate.copy:1
#: qiskit.extensions.standard.HGate.copy:1
#: qiskit.extensions.standard.IdGate.copy:1
#: qiskit.extensions.standard.RXGate.copy:1
#: qiskit.extensions.standard.RYGate.copy:1
#: qiskit.extensions.standard.RZGate.copy:1
#: qiskit.extensions.standard.RZZGate.copy:1
#: qiskit.extensions.standard.SGate.copy:1
#: qiskit.extensions.standard.SdgGate.copy:1
#: qiskit.extensions.standard.SwapGate.copy:1
#: qiskit.extensions.standard.TGate.copy:1
#: qiskit.extensions.standard.TdgGate.copy:1
#: qiskit.extensions.standard.ToffoliGate.copy:1
#: qiskit.extensions.standard.U0Gate.copy:1
#: qiskit.extensions.standard.U1Gate.copy:1
#: qiskit.extensions.standard.U2Gate.copy:1
#: qiskit.extensions.standard.U3Gate.copy:1
#: qiskit.extensions.standard.UBase.copy:1
#: qiskit.extensions.standard.XGate.copy:1
#: qiskit.extensions.standard.YGate.copy:1
#: qiskit.extensions.standard.ZGate.copy:1
msgid "shallow copy of the instruction."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`crz <qiskit.circuit.CompositeGate.crz>`\\ \\(theta\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.crz:1 qiskit.circuit.QuantumCircuit.crz:1
#: qiskit.extensions.standard.crz.crz:1
msgid "Apply crz from ctl to tgt with angle theta."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`cswap <qiskit.circuit.CompositeGate.cswap>`\\ \\(ctl\\, tgt1\\, "
"tgt2\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.cswap:1 qiskit.circuit.QuantumCircuit.cswap:1
#: qiskit.extensions.standard.cswap.cswap:1
msgid "Apply Fredkin to circuit."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`cu1 <qiskit.circuit.CompositeGate.cu1>`\\ \\(theta\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.cu1:1 qiskit.circuit.QuantumCircuit.cu1:1
#: qiskit.extensions.standard.cu1.cu1:1
msgid "Apply cu1 from ctl to tgt with angle theta."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`cu3 <qiskit.circuit.CompositeGate.cu3>`\\ \\(theta\\, phi\\, lam\\,"
" ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.cu3:1 qiskit.circuit.QuantumCircuit.cu3:1
#: qiskit.extensions.standard.cu3.cu3:1
msgid "Apply cu3 from ctl to tgt with angle theta, phi, lam."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`cx <qiskit.circuit.CompositeGate.cx>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.cx:1 qiskit.circuit.QuantumCircuit.cx:1
#: qiskit.extensions.standard.cx.cx:1
msgid "Apply CX from ctl to tgt."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`cx_base <qiskit.circuit.CompositeGate.cx_base>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.cx_base:1
#: qiskit.circuit.QuantumCircuit.cx_base:1
msgid "Apply CX ctl, tgt."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`cy <qiskit.circuit.CompositeGate.cy>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.cy:1 qiskit.circuit.QuantumCircuit.cy:1
#: qiskit.extensions.standard.cy.cy:1
msgid "Apply CY to circuit."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`cz <qiskit.circuit.CompositeGate.cz>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.cz:1 qiskit.circuit.QuantumCircuit.cz:1
#: qiskit.extensions.standard.cz.cz:1
msgid "Apply CZ to circuit."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`h <qiskit.circuit.CompositeGate.h>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.h:1 qiskit.circuit.QuantumCircuit.h:1
#: qiskit.extensions.standard.h.h:1
msgid "Apply H to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`iden <qiskit.circuit.CompositeGate.iden>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.iden:1 qiskit.circuit.QuantumCircuit.iden:1
#: qiskit.extensions.standard.iden.iden:1
msgid "Apply Identity to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`instruction_list <qiskit.circuit.CompositeGate.instruction_list>`\\"
" \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.instruction_list:1
msgid "Return a list of instructions for this CompositeGate."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.CompositeGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.extensions.CHGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.CXBase.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.CnotGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.CrzGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.Cu1Gate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.Cu3Gate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.CyGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.CzGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.FredkinGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.HGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.IdGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.RXGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.RYGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.RZGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.RZZGate.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.SGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.SdgGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.SwapGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.TGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.TdgGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.ToffoliGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.U0Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.U1Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.U2Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.U3Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.UBase.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.XGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.YGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.ZGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.inverse:1 qiskit.extensions.CHGate.inverse:1
#: qiskit.extensions.CXBase.inverse:1 qiskit.extensions.CnotGate.inverse:1
#: qiskit.extensions.CrzGate.inverse:1 qiskit.extensions.Cu1Gate.inverse:1
#: qiskit.extensions.Cu3Gate.inverse:1 qiskit.extensions.CyGate.inverse:1
#: qiskit.extensions.CzGate.inverse:1 qiskit.extensions.FredkinGate.inverse:1
#: qiskit.extensions.HGate.inverse:1 qiskit.extensions.IdGate.inverse:1
#: qiskit.extensions.RXGate.inverse:1 qiskit.extensions.RYGate.inverse:1
#: qiskit.extensions.RZGate.inverse:1 qiskit.extensions.RZZGate.inverse:1
#: qiskit.extensions.SGate.inverse:1 qiskit.extensions.SdgGate.inverse:1
#: qiskit.extensions.SwapGate.inverse:1 qiskit.extensions.TGate.inverse:1
#: qiskit.extensions.TdgGate.inverse:1 qiskit.extensions.ToffoliGate.inverse:1
#: qiskit.extensions.U0Gate.inverse:1 qiskit.extensions.U1Gate.inverse:1
#: qiskit.extensions.U2Gate.inverse:1 qiskit.extensions.U3Gate.inverse:1
#: qiskit.extensions.UBase.inverse:1 qiskit.extensions.XGate.inverse:1
#: qiskit.extensions.YGate.inverse:1 qiskit.extensions.ZGate.inverse:1
#: qiskit.extensions.standard.CHGate.inverse:1
#: qiskit.extensions.standard.CXBase.inverse:1
#: qiskit.extensions.standard.CnotGate.inverse:1
#: qiskit.extensions.standard.CrzGate.inverse:1
#: qiskit.extensions.standard.Cu1Gate.inverse:1
#: qiskit.extensions.standard.Cu3Gate.inverse:1
#: qiskit.extensions.standard.CyGate.inverse:1
#: qiskit.extensions.standard.CzGate.inverse:1
#: qiskit.extensions.standard.FredkinGate.inverse:1
#: qiskit.extensions.standard.HGate.inverse:1
#: qiskit.extensions.standard.IdGate.inverse:1
#: qiskit.extensions.standard.RXGate.inverse:1
#: qiskit.extensions.standard.RYGate.inverse:1
#: qiskit.extensions.standard.RZGate.inverse:1
#: qiskit.extensions.standard.RZZGate.inverse:1
#: qiskit.extensions.standard.SGate.inverse:1
#: qiskit.extensions.standard.SdgGate.inverse:1
#: qiskit.extensions.standard.SwapGate.inverse:1
#: qiskit.extensions.standard.TGate.inverse:1
#: qiskit.extensions.standard.TdgGate.inverse:1
#: qiskit.extensions.standard.ToffoliGate.inverse:1
#: qiskit.extensions.standard.U0Gate.inverse:1
#: qiskit.extensions.standard.U1Gate.inverse:1
#: qiskit.extensions.standard.U2Gate.inverse:1
#: qiskit.extensions.standard.U3Gate.inverse:1
#: qiskit.extensions.standard.UBase.inverse:1
#: qiskit.extensions.standard.XGate.inverse:1
#: qiskit.extensions.standard.YGate.inverse:1
#: qiskit.extensions.standard.ZGate.inverse:1
#: qiskit.extensions.standard.ccx.ToffoliGate.inverse:1
#: qiskit.extensions.standard.ch.CHGate.inverse:1
#: qiskit.extensions.standard.crz.CrzGate.inverse:1
#: qiskit.extensions.standard.cswap.FredkinGate.inverse:1
#: qiskit.extensions.standard.cu1.Cu1Gate.inverse:1
#: qiskit.extensions.standard.cu3.Cu3Gate.inverse:1
#: qiskit.extensions.standard.cx.CnotGate.inverse:1
#: qiskit.extensions.standard.cy.CyGate.inverse:1
#: qiskit.extensions.standard.cz.CzGate.inverse:1
#: qiskit.extensions.standard.h.HGate.inverse:1
#: qiskit.extensions.standard.iden.IdGate.inverse:1
#: qiskit.extensions.standard.rx.RXGate.inverse:1
#: qiskit.extensions.standard.ry.RYGate.inverse:1
#: qiskit.extensions.standard.rz.RZGate.inverse:1
#: qiskit.extensions.standard.rzz.RZZGate.inverse:1
#: qiskit.extensions.standard.s.SGate.inverse:1
#: qiskit.extensions.standard.s.SdgGate.inverse:1
#: qiskit.extensions.standard.swap.SwapGate.inverse:1
#: qiskit.extensions.standard.t.TGate.inverse:1
#: qiskit.extensions.standard.t.TdgGate.inverse:1
#: qiskit.extensions.standard.u0.U0Gate.inverse:1
#: qiskit.extensions.standard.u1.U1Gate.inverse:1
#: qiskit.extensions.standard.u2.U2Gate.inverse:1
#: qiskit.extensions.standard.u3.U3Gate.inverse:1
#: qiskit.extensions.standard.x.XGate.inverse:1
#: qiskit.extensions.standard.y.YGate.inverse:1
#: qiskit.extensions.standard.z.ZGate.inverse:1
msgid "Invert this gate."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`mirror <qiskit.circuit.CompositeGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.mirror:1 qiskit.circuit.Gate.mirror:1
#: qiskit.circuit.Instruction.mirror:1 qiskit.circuit.Measure.mirror:1
#: qiskit.circuit.Reset.mirror:1 qiskit.extensions.simulator.Snapshot.mirror:1
#: qiskit.extensions.standard.Barrier.mirror:1
#: qiskit.extensions.standard.CHGate.mirror:1
#: qiskit.extensions.standard.CXBase.mirror:1
#: qiskit.extensions.standard.CnotGate.mirror:1
#: qiskit.extensions.standard.CrzGate.mirror:1
#: qiskit.extensions.standard.Cu1Gate.mirror:1
#: qiskit.extensions.standard.Cu3Gate.mirror:1
#: qiskit.extensions.standard.CyGate.mirror:1
#: qiskit.extensions.standard.CzGate.mirror:1
#: qiskit.extensions.standard.FredkinGate.mirror:1
#: qiskit.extensions.standard.HGate.mirror:1
#: qiskit.extensions.standard.IdGate.mirror:1
#: qiskit.extensions.standard.RXGate.mirror:1
#: qiskit.extensions.standard.RYGate.mirror:1
#: qiskit.extensions.standard.RZGate.mirror:1
#: qiskit.extensions.standard.RZZGate.mirror:1
#: qiskit.extensions.standard.SGate.mirror:1
#: qiskit.extensions.standard.SdgGate.mirror:1
#: qiskit.extensions.standard.SwapGate.mirror:1
#: qiskit.extensions.standard.TGate.mirror:1
#: qiskit.extensions.standard.TdgGate.mirror:1
#: qiskit.extensions.standard.ToffoliGate.mirror:1
#: qiskit.extensions.standard.U0Gate.mirror:1
#: qiskit.extensions.standard.U1Gate.mirror:1
#: qiskit.extensions.standard.U2Gate.mirror:1
#: qiskit.extensions.standard.U3Gate.mirror:1
#: qiskit.extensions.standard.UBase.mirror:1
#: qiskit.extensions.standard.XGate.mirror:1
#: qiskit.extensions.standard.YGate.mirror:1
#: qiskit.extensions.standard.ZGate.mirror:1
msgid "For a composite instruction, reverse the order of sub-gates."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`q_if <qiskit.circuit.CompositeGate.q_if>`\\ \\(\\*qregs\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.q_if:1
msgid "Add controls to this gate."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.CompositeGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.qasm:1
msgid "Return OPENQASM string."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`rx <qiskit.circuit.CompositeGate.rx>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.rx:1 qiskit.circuit.QuantumCircuit.rx:1
#: qiskit.extensions.standard.rx.rx:1
msgid "Apply Rx to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`ry <qiskit.circuit.CompositeGate.ry>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.ry:1 qiskit.circuit.QuantumCircuit.ry:1
#: qiskit.extensions.standard.ry.ry:1
msgid "Apply Ry to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`rz <qiskit.circuit.CompositeGate.rz>`\\ \\(phi\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.rz:1 qiskit.circuit.QuantumCircuit.rz:1
#: qiskit.extensions.standard.rz.rz:1
msgid "Apply Rz to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`rzz <qiskit.circuit.CompositeGate.rzz>`\\ \\(theta\\, qubit1\\, "
"qubit2\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.rzz:1 qiskit.circuit.QuantumCircuit.rzz:1
#: qiskit.extensions.standard.rzz.rzz:1
msgid "Apply RZZ to circuit."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`s <qiskit.circuit.CompositeGate.s>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.s:1 qiskit.circuit.QuantumCircuit.s:1
#: qiskit.extensions.standard.s.s:1
msgid "Apply S to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`sdg <qiskit.circuit.CompositeGate.sdg>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.sdg:1 qiskit.circuit.QuantumCircuit.sdg:1
#: qiskit.extensions.standard.s.sdg:1
msgid "Apply Sdg to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`snapshot <qiskit.circuit.CompositeGate.snapshot>`\\ \\(label\\[\\, "
"snapshot\\_type\\, qubits\\, params\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid "Take a statevector snapshot of the internal simulator representation."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`swap <qiskit.circuit.CompositeGate.swap>`\\ \\(qubit1\\, qubit2\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.swap:1 qiskit.circuit.QuantumCircuit.swap:1
#: qiskit.extensions.standard.swap.swap:1
msgid "Apply SWAP from qubit1 to qubit2."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`t <qiskit.circuit.CompositeGate.t>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.t:1 qiskit.circuit.QuantumCircuit.t:1
#: qiskit.extensions.standard.t.t:1
msgid "Apply T to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`tdg <qiskit.circuit.CompositeGate.tdg>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.tdg:1 qiskit.circuit.QuantumCircuit.tdg:1
#: qiskit.extensions.standard.t.tdg:1
msgid "Apply Tdg to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.circuit.CompositeGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.to_matrix:1 qiskit.circuit.Gate.to_matrix:1
#: qiskit.extensions.standard.CHGate.to_matrix:1
#: qiskit.extensions.standard.CXBase.to_matrix:1
#: qiskit.extensions.standard.CrzGate.to_matrix:1
#: qiskit.extensions.standard.Cu1Gate.to_matrix:1
#: qiskit.extensions.standard.Cu3Gate.to_matrix:1
#: qiskit.extensions.standard.CyGate.to_matrix:1
#: qiskit.extensions.standard.FredkinGate.to_matrix:1
#: qiskit.extensions.standard.RXGate.to_matrix:1
#: qiskit.extensions.standard.RYGate.to_matrix:1
#: qiskit.extensions.standard.RZGate.to_matrix:1
#: qiskit.extensions.standard.RZZGate.to_matrix:1
msgid "Return a Numpy.array for the gate unitary matrix."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`u0 <qiskit.circuit.CompositeGate.u0>`\\ \\(m\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.u0:1 qiskit.circuit.QuantumCircuit.u0:1
#: qiskit.extensions.standard.u0.u0:1
msgid "Apply u0 with length m to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`u1 <qiskit.circuit.CompositeGate.u1>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.u1:1 qiskit.circuit.QuantumCircuit.u1:1
#: qiskit.extensions.standard.u1.u1:1
msgid "Apply u1 with angle theta to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`u2 <qiskit.circuit.CompositeGate.u2>`\\ \\(phi\\, lam\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.u2:1 qiskit.circuit.CompositeGate.unitary:1
#: qiskit.circuit.QuantumCircuit.u2:1 qiskit.circuit.QuantumCircuit.unitary:1
#: qiskit.extensions.standard.u2.u2:1 qiskit.extensions.unitary.unitary:1
msgid "Apply u2 to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`u3 <qiskit.circuit.CompositeGate.u3>`\\ \\(theta\\, phi\\, lam\\, "
"q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.u3:1 qiskit.circuit.QuantumCircuit.u3:1
#: qiskit.extensions.standard.u3.u3:1
msgid "Apply u3 to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`u_base <qiskit.circuit.CompositeGate.u_base>`\\ \\(theta\\, phi\\, "
"lam\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.u_base:1 qiskit.circuit.QuantumCircuit.u_base:1
msgid "Apply U to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ""
":obj:`unitary <qiskit.circuit.CompositeGate.unitary>`\\ \\(obj\\, "
"qubits\\[\\, label\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`x <qiskit.circuit.CompositeGate.x>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.x:1 qiskit.circuit.QuantumCircuit.x:1
#: qiskit.extensions.standard.x.x:1
msgid "Apply X to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`y <qiskit.circuit.CompositeGate.y>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.y:1 qiskit.circuit.QuantumCircuit.y:1
#: qiskit.extensions.standard.y.y:1
msgid "Apply Y to q."
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
msgid ":obj:`z <qiskit.circuit.CompositeGate.z>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.CompositeGate.rst:63:<autosummary>:1
#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.z:1 qiskit.circuit.QuantumCircuit.z:1
#: qiskit.extensions.standard.z.z:1
msgid "Apply Z to q."
msgstr ""

#: of qiskit.circuit.CompositeGate.barrier:1
#: qiskit.circuit.QuantumCircuit.barrier:1
msgid ""
"Apply barrier to circuit. If qargs is None, applies to all the qbits. "
"Args is a list of QuantumRegister or single qubits. For QuantumRegister, "
"applies barrier to all the qubits in that register."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.CompositeGate.copy:3 qiskit.circuit.Gate.copy:3
#: qiskit.circuit.Instruction.copy:3 qiskit.circuit.Measure.copy:3
#: qiskit.circuit.QuantumCircuit.copy:1 qiskit.circuit.Reset.copy:3
#: qiskit.extensions.simulator.Snapshot.copy:3
#: qiskit.extensions.standard.Barrier.copy:3
#: qiskit.extensions.standard.CHGate.copy:3
#: qiskit.extensions.standard.CXBase.copy:3
#: qiskit.extensions.standard.CnotGate.copy:3
#: qiskit.extensions.standard.CrzGate.copy:3
#: qiskit.extensions.standard.Cu1Gate.copy:3
#: qiskit.extensions.standard.Cu3Gate.copy:3
#: qiskit.extensions.standard.CyGate.copy:3
#: qiskit.extensions.standard.CzGate.copy:3
#: qiskit.extensions.standard.FredkinGate.copy:3
#: qiskit.extensions.standard.HGate.copy:3
#: qiskit.extensions.standard.IdGate.copy:3
#: qiskit.extensions.standard.RXGate.copy:3
#: qiskit.extensions.standard.RYGate.copy:3
#: qiskit.extensions.standard.RZGate.copy:3
#: qiskit.extensions.standard.RZZGate.copy:3
#: qiskit.extensions.standard.SGate.copy:3
#: qiskit.extensions.standard.SdgGate.copy:3
#: qiskit.extensions.standard.SwapGate.copy:3
#: qiskit.extensions.standard.TGate.copy:3
#: qiskit.extensions.standard.TdgGate.copy:3
#: qiskit.extensions.standard.ToffoliGate.copy:3
#: qiskit.extensions.standard.U0Gate.copy:3
#: qiskit.extensions.standard.U1Gate.copy:3
#: qiskit.extensions.standard.U2Gate.copy:3
#: qiskit.extensions.standard.U3Gate.copy:3
#: qiskit.extensions.standard.UBase.copy:3
#: qiskit.extensions.standard.XGate.copy:3
#: qiskit.extensions.standard.YGate.copy:3
#: qiskit.extensions.standard.ZGate.copy:3
msgid ""
"name to be given to the copied circuit, if None then the name stays the "
"same"
msgstr ""

#: of qiskit.circuit.CompositeGate.copy:7 qiskit.circuit.Gate.copy:7
#: qiskit.circuit.Instruction.copy:7 qiskit.circuit.Measure.copy:7
#: qiskit.circuit.Reset.copy:7 qiskit.extensions.simulator.Snapshot.copy:7
#: qiskit.extensions.standard.Barrier.copy:7
#: qiskit.extensions.standard.CHGate.copy:7
#: qiskit.extensions.standard.CXBase.copy:7
#: qiskit.extensions.standard.CnotGate.copy:7
#: qiskit.extensions.standard.CrzGate.copy:7
#: qiskit.extensions.standard.Cu1Gate.copy:7
#: qiskit.extensions.standard.Cu3Gate.copy:7
#: qiskit.extensions.standard.CyGate.copy:7
#: qiskit.extensions.standard.CzGate.copy:7
#: qiskit.extensions.standard.FredkinGate.copy:7
#: qiskit.extensions.standard.HGate.copy:7
#: qiskit.extensions.standard.IdGate.copy:7
#: qiskit.extensions.standard.RXGate.copy:7
#: qiskit.extensions.standard.RYGate.copy:7
#: qiskit.extensions.standard.RZGate.copy:7
#: qiskit.extensions.standard.RZZGate.copy:7
#: qiskit.extensions.standard.SGate.copy:7
#: qiskit.extensions.standard.SdgGate.copy:7
#: qiskit.extensions.standard.SwapGate.copy:7
#: qiskit.extensions.standard.TGate.copy:7
#: qiskit.extensions.standard.TdgGate.copy:7
#: qiskit.extensions.standard.ToffoliGate.copy:7
#: qiskit.extensions.standard.U0Gate.copy:7
#: qiskit.extensions.standard.U1Gate.copy:7
#: qiskit.extensions.standard.U2Gate.copy:7
#: qiskit.extensions.standard.U3Gate.copy:7
#: qiskit.extensions.standard.UBase.copy:7
#: qiskit.extensions.standard.XGate.copy:7
#: qiskit.extensions.standard.YGate.copy:7
#: qiskit.extensions.standard.ZGate.copy:7
msgid ""
"a shallow copy of the current instruction, with the name   updated if it "
"was provided"
msgstr ""

#: of qiskit.circuit.CompositeGate.copy:9 qiskit.circuit.Gate.copy:9
#: qiskit.circuit.Instruction.copy:9 qiskit.circuit.Measure.copy:9
#: qiskit.circuit.Reset.copy:9 qiskit.extensions.simulator.Snapshot.copy:9
#: qiskit.extensions.standard.Barrier.copy:9
#: qiskit.extensions.standard.CHGate.copy:9
#: qiskit.extensions.standard.CXBase.copy:9
#: qiskit.extensions.standard.CnotGate.copy:9
#: qiskit.extensions.standard.CrzGate.copy:9
#: qiskit.extensions.standard.Cu1Gate.copy:9
#: qiskit.extensions.standard.Cu3Gate.copy:9
#: qiskit.extensions.standard.CyGate.copy:9
#: qiskit.extensions.standard.CzGate.copy:9
#: qiskit.extensions.standard.FredkinGate.copy:9
#: qiskit.extensions.standard.HGate.copy:9
#: qiskit.extensions.standard.IdGate.copy:9
#: qiskit.extensions.standard.RXGate.copy:9
#: qiskit.extensions.standard.RYGate.copy:9
#: qiskit.extensions.standard.RZGate.copy:9
#: qiskit.extensions.standard.RZZGate.copy:9
#: qiskit.extensions.standard.SGate.copy:9
#: qiskit.extensions.standard.SdgGate.copy:9
#: qiskit.extensions.standard.SwapGate.copy:9
#: qiskit.extensions.standard.TGate.copy:9
#: qiskit.extensions.standard.TdgGate.copy:9
#: qiskit.extensions.standard.ToffoliGate.copy:9
#: qiskit.extensions.standard.U0Gate.copy:9
#: qiskit.extensions.standard.U1Gate.copy:9
#: qiskit.extensions.standard.U2Gate.copy:9
#: qiskit.extensions.standard.U3Gate.copy:9
#: qiskit.extensions.standard.UBase.copy:9
#: qiskit.extensions.standard.XGate.copy:9
#: qiskit.extensions.standard.YGate.copy:9
#: qiskit.extensions.standard.ZGate.copy:9
msgid "a shallow copy of the current instruction, with the name"
msgstr ""

#: of qiskit.circuit.CompositeGate.copy:10 qiskit.circuit.Gate.copy:10
#: qiskit.circuit.Instruction.copy:10 qiskit.circuit.Measure.copy:10
#: qiskit.circuit.Reset.copy:10 qiskit.extensions.simulator.Snapshot.copy:10
#: qiskit.extensions.standard.Barrier.copy:10
#: qiskit.extensions.standard.CHGate.copy:10
#: qiskit.extensions.standard.CXBase.copy:10
#: qiskit.extensions.standard.CnotGate.copy:10
#: qiskit.extensions.standard.CrzGate.copy:10
#: qiskit.extensions.standard.Cu1Gate.copy:10
#: qiskit.extensions.standard.Cu3Gate.copy:10
#: qiskit.extensions.standard.CyGate.copy:10
#: qiskit.extensions.standard.CzGate.copy:10
#: qiskit.extensions.standard.FredkinGate.copy:10
#: qiskit.extensions.standard.HGate.copy:10
#: qiskit.extensions.standard.IdGate.copy:10
#: qiskit.extensions.standard.RXGate.copy:10
#: qiskit.extensions.standard.RYGate.copy:10
#: qiskit.extensions.standard.RZGate.copy:10
#: qiskit.extensions.standard.RZZGate.copy:10
#: qiskit.extensions.standard.SGate.copy:10
#: qiskit.extensions.standard.SdgGate.copy:10
#: qiskit.extensions.standard.SwapGate.copy:10
#: qiskit.extensions.standard.TGate.copy:10
#: qiskit.extensions.standard.TdgGate.copy:10
#: qiskit.extensions.standard.ToffoliGate.copy:10
#: qiskit.extensions.standard.U0Gate.copy:10
#: qiskit.extensions.standard.U1Gate.copy:10
#: qiskit.extensions.standard.U2Gate.copy:10
#: qiskit.extensions.standard.U3Gate.copy:10
#: qiskit.extensions.standard.UBase.copy:10
#: qiskit.extensions.standard.XGate.copy:10
#: qiskit.extensions.standard.YGate.copy:10
#: qiskit.extensions.standard.ZGate.copy:10
msgid "updated if it was provided"
msgstr ""

#: of qiskit.circuit.CompositeGate.instruction_list:3
msgid ""
"If the CompositeGate itself contains composites, call this method "
"recursively."
msgstr ""

#: of qiskit.circuit.CompositeGate.mirror:3 qiskit.circuit.Gate.mirror:3
#: qiskit.circuit.Instruction.mirror:3 qiskit.circuit.Measure.mirror:3
#: qiskit.circuit.Reset.mirror:3 qiskit.extensions.simulator.Snapshot.mirror:3
#: qiskit.extensions.standard.Barrier.mirror:3
#: qiskit.extensions.standard.CHGate.mirror:3
#: qiskit.extensions.standard.CXBase.mirror:3
#: qiskit.extensions.standard.CnotGate.mirror:3
#: qiskit.extensions.standard.CrzGate.mirror:3
#: qiskit.extensions.standard.Cu1Gate.mirror:3
#: qiskit.extensions.standard.Cu3Gate.mirror:3
#: qiskit.extensions.standard.CyGate.mirror:3
#: qiskit.extensions.standard.CzGate.mirror:3
#: qiskit.extensions.standard.FredkinGate.mirror:3
#: qiskit.extensions.standard.HGate.mirror:3
#: qiskit.extensions.standard.IdGate.mirror:3
#: qiskit.extensions.standard.RXGate.mirror:3
#: qiskit.extensions.standard.RYGate.mirror:3
#: qiskit.extensions.standard.RZGate.mirror:3
#: qiskit.extensions.standard.RZZGate.mirror:3
#: qiskit.extensions.standard.SGate.mirror:3
#: qiskit.extensions.standard.SdgGate.mirror:3
#: qiskit.extensions.standard.SwapGate.mirror:3
#: qiskit.extensions.standard.TGate.mirror:3
#: qiskit.extensions.standard.TdgGate.mirror:3
#: qiskit.extensions.standard.ToffoliGate.mirror:3
#: qiskit.extensions.standard.U0Gate.mirror:3
#: qiskit.extensions.standard.U1Gate.mirror:3
#: qiskit.extensions.standard.U2Gate.mirror:3
#: qiskit.extensions.standard.U3Gate.mirror:3
#: qiskit.extensions.standard.UBase.mirror:3
#: qiskit.extensions.standard.XGate.mirror:3
#: qiskit.extensions.standard.YGate.mirror:3
#: qiskit.extensions.standard.ZGate.mirror:3
msgid ""
"This is done by recursively mirroring all sub-instructions. It does not "
"invert any gate."
msgstr ""

#: of qiskit.circuit.CompositeGate.mirror:6 qiskit.circuit.Gate.mirror:6
#: qiskit.circuit.Instruction.mirror:6 qiskit.circuit.Measure.mirror:6
#: qiskit.circuit.Reset.mirror:6 qiskit.extensions.simulator.Snapshot.mirror:6
#: qiskit.extensions.standard.Barrier.mirror:6
#: qiskit.extensions.standard.CHGate.mirror:6
#: qiskit.extensions.standard.CXBase.mirror:6
#: qiskit.extensions.standard.CnotGate.mirror:6
#: qiskit.extensions.standard.CrzGate.mirror:6
#: qiskit.extensions.standard.Cu1Gate.mirror:6
#: qiskit.extensions.standard.Cu3Gate.mirror:6
#: qiskit.extensions.standard.CyGate.mirror:6
#: qiskit.extensions.standard.CzGate.mirror:6
#: qiskit.extensions.standard.FredkinGate.mirror:6
#: qiskit.extensions.standard.HGate.mirror:6
#: qiskit.extensions.standard.IdGate.mirror:6
#: qiskit.extensions.standard.RXGate.mirror:6
#: qiskit.extensions.standard.RYGate.mirror:6
#: qiskit.extensions.standard.RZGate.mirror:6
#: qiskit.extensions.standard.RZZGate.mirror:6
#: qiskit.extensions.standard.SGate.mirror:6
#: qiskit.extensions.standard.SdgGate.mirror:6
#: qiskit.extensions.standard.SwapGate.mirror:6
#: qiskit.extensions.standard.TGate.mirror:6
#: qiskit.extensions.standard.TdgGate.mirror:6
#: qiskit.extensions.standard.ToffoliGate.mirror:6
#: qiskit.extensions.standard.U0Gate.mirror:6
#: qiskit.extensions.standard.U1Gate.mirror:6
#: qiskit.extensions.standard.U2Gate.mirror:6
#: qiskit.extensions.standard.U3Gate.mirror:6
#: qiskit.extensions.standard.UBase.mirror:6
#: qiskit.extensions.standard.XGate.mirror:6
#: qiskit.extensions.standard.YGate.mirror:6
#: qiskit.extensions.standard.ZGate.mirror:6
msgid "a fresh gate with sub-gates reversed"
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:1
#: qiskit.circuit.QuantumCircuit.snapshot:1
msgid ""
"Take a statevector snapshot of the internal simulator representation. "
"Works on all qubits, and prevents reordering (like barrier)."
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:4
#: qiskit.circuit.QuantumCircuit.snapshot:4
msgid "For other types of snapshots use the Snapshot extension directly."
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:6
#: qiskit.circuit.QuantumCircuit.snapshot:6
msgid "a snapshot label to report the result"
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:8
#: qiskit.circuit.QuantumCircuit.snapshot:8
msgid "the type of the snapshot."
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:10
#: qiskit.circuit.QuantumCircuit.snapshot:10
msgid "the qubits to apply snapshot to [Default: None]."
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:12
#: qiskit.circuit.QuantumCircuit.snapshot:12
msgid "the parameters for snapshot_type [Default: None]."
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:15
#: qiskit.circuit.QuantumCircuit.snapshot:15
msgid "with attached command"
msgstr ""

#: of qiskit.circuit.CompositeGate.snapshot:18
#: qiskit.circuit.QuantumCircuit.snapshot:18
msgid "malformed command"
msgstr ""

#: of qiskit.circuit.CompositeGate.to_matrix:5 qiskit.circuit.Gate.to_matrix:5
#: qiskit.extensions.standard.CHGate.to_matrix:5
#: qiskit.extensions.standard.CXBase.to_matrix:5
#: qiskit.extensions.standard.CrzGate.to_matrix:5
#: qiskit.extensions.standard.Cu1Gate.to_matrix:5
#: qiskit.extensions.standard.Cu3Gate.to_matrix:5
#: qiskit.extensions.standard.CyGate.to_matrix:5
#: qiskit.extensions.standard.FredkinGate.to_matrix:5
#: qiskit.extensions.standard.RXGate.to_matrix:5
#: qiskit.extensions.standard.RYGate.to_matrix:5
#: qiskit.extensions.standard.RZGate.to_matrix:5
#: qiskit.extensions.standard.RZZGate.to_matrix:5
msgid ""
"If a Gate subclass does not implement this method an exception will be "
"raised when this base class method is called."
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:2
msgid "Gate"
msgstr ""

#: of qiskit.circuit.Gate:1 qiskit.circuit.Measure:1 qiskit.circuit.Reset:1
#: qiskit.extensions.Barrier:1 qiskit.extensions.Initialize:1
#: qiskit.extensions.initializer.Initialize:1
#: qiskit.extensions.simulator.Snapshot:1 qiskit.extensions.standard.Barrier:1
msgid "ベースクラス: :class:`qiskit.circuit.instruction.Instruction`"
msgstr ""

#: of qiskit.circuit.Gate:1
msgid "Unitary gate."
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.circuit.Gate.definition>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.circuit.Gate.label>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.circuit.Gate.params>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.circuit.Gate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
msgid ":obj:`c_if <qiskit.circuit.Gate.c_if>`\\ \\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1 of
#: qiskit.circuit.Gate.c_if:1 qiskit.circuit.Instruction.c_if:1
#: qiskit.circuit.Measure.c_if:1 qiskit.circuit.Reset.c_if:1
#: qiskit.extensions.simulator.Snapshot.c_if:1
#: qiskit.extensions.standard.Barrier.c_if:1
#: qiskit.extensions.standard.CHGate.c_if:1
#: qiskit.extensions.standard.CXBase.c_if:1
#: qiskit.extensions.standard.CnotGate.c_if:1
#: qiskit.extensions.standard.CrzGate.c_if:1
#: qiskit.extensions.standard.Cu1Gate.c_if:1
#: qiskit.extensions.standard.Cu3Gate.c_if:1
#: qiskit.extensions.standard.CyGate.c_if:1
#: qiskit.extensions.standard.CzGate.c_if:1
#: qiskit.extensions.standard.FredkinGate.c_if:1
#: qiskit.extensions.standard.HGate.c_if:1
#: qiskit.extensions.standard.IdGate.c_if:1
#: qiskit.extensions.standard.RXGate.c_if:1
#: qiskit.extensions.standard.RYGate.c_if:1
#: qiskit.extensions.standard.RZGate.c_if:1
#: qiskit.extensions.standard.RZZGate.c_if:1
#: qiskit.extensions.standard.SGate.c_if:1
#: qiskit.extensions.standard.SdgGate.c_if:1
#: qiskit.extensions.standard.SwapGate.c_if:1
#: qiskit.extensions.standard.TGate.c_if:1
#: qiskit.extensions.standard.TdgGate.c_if:1
#: qiskit.extensions.standard.ToffoliGate.c_if:1
#: qiskit.extensions.standard.U0Gate.c_if:1
#: qiskit.extensions.standard.U1Gate.c_if:1
#: qiskit.extensions.standard.U2Gate.c_if:1
#: qiskit.extensions.standard.U3Gate.c_if:1
#: qiskit.extensions.standard.UBase.c_if:1
#: qiskit.extensions.standard.XGate.c_if:1
#: qiskit.extensions.standard.YGate.c_if:1
#: qiskit.extensions.standard.ZGate.c_if:1
msgid "Add classical control on register classical and value val."
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.circuit.Gate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1 of
#: qiskit.circuit.Gate.inverse:1 qiskit.circuit.Instruction.inverse:1
#: qiskit.circuit.Measure.inverse:1 qiskit.circuit.Reset.inverse:1
msgid "Invert this instruction."
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.circuit.Gate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.Gate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1 of
#: qiskit.circuit.Gate.qasm:1 qiskit.circuit.Instruction.qasm:1
#: qiskit.circuit.Measure.qasm:1 qiskit.circuit.Reset.qasm:1
#: qiskit.extensions.simulator.Snapshot.qasm:1
#: qiskit.extensions.standard.Barrier.qasm:1
#: qiskit.extensions.standard.CHGate.qasm:1
#: qiskit.extensions.standard.CXBase.qasm:1
#: qiskit.extensions.standard.CnotGate.qasm:1
#: qiskit.extensions.standard.CrzGate.qasm:1
#: qiskit.extensions.standard.Cu1Gate.qasm:1
#: qiskit.extensions.standard.Cu3Gate.qasm:1
#: qiskit.extensions.standard.CyGate.qasm:1
#: qiskit.extensions.standard.CzGate.qasm:1
#: qiskit.extensions.standard.FredkinGate.qasm:1
#: qiskit.extensions.standard.HGate.qasm:1
#: qiskit.extensions.standard.IdGate.qasm:1
#: qiskit.extensions.standard.RXGate.qasm:1
#: qiskit.extensions.standard.RYGate.qasm:1
#: qiskit.extensions.standard.RZGate.qasm:1
#: qiskit.extensions.standard.RZZGate.qasm:1
#: qiskit.extensions.standard.SGate.qasm:1
#: qiskit.extensions.standard.SdgGate.qasm:1
#: qiskit.extensions.standard.SwapGate.qasm:1
#: qiskit.extensions.standard.TGate.qasm:1
#: qiskit.extensions.standard.TdgGate.qasm:1
#: qiskit.extensions.standard.ToffoliGate.qasm:1
#: qiskit.extensions.standard.U0Gate.qasm:1
#: qiskit.extensions.standard.U1Gate.qasm:1
#: qiskit.extensions.standard.U2Gate.qasm:1
#: qiskit.extensions.standard.U3Gate.qasm:1
#: qiskit.extensions.standard.UBase.qasm:1
#: qiskit.extensions.standard.XGate.qasm:1
#: qiskit.extensions.standard.YGate.qasm:1
#: qiskit.extensions.standard.ZGate.qasm:1
msgid "Return a default OpenQASM string for the instruction."
msgstr ""

#: ../../api/qiskit.circuit.Gate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.circuit.Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: of qiskit.circuit.Gate.inverse:3 qiskit.circuit.Instruction.inverse:3
#: qiskit.circuit.Measure.inverse:3 qiskit.circuit.Reset.inverse:3
msgid ""
"If the instruction is composite (i.e. has a definition), then its "
"definition will be recursively inverted."
msgstr ""

#: of qiskit.circuit.Gate.inverse:6 qiskit.circuit.Instruction.inverse:6
#: qiskit.circuit.Measure.inverse:6 qiskit.circuit.Reset.inverse:6
msgid ""
"Special instructions inheriting from Instruction can implement their own "
"inverse (e.g. T and Tdg, Barrier, etc.)"
msgstr ""

#: of qiskit.circuit.Gate.inverse:9 qiskit.circuit.Instruction.inverse:9
#: qiskit.circuit.Measure.inverse:9 qiskit.circuit.Reset.inverse:9
msgid "a fresh instruction for the inverse"
msgstr ""

#: of qiskit.circuit.Gate.inverse:12 qiskit.circuit.Instruction.inverse:12
#: qiskit.circuit.Measure.inverse:12 qiskit.circuit.Reset.inverse:12
msgid ""
"if the instruction is not composite     and an inverse has not been "
"implemented for it."
msgstr ""

#: of qiskit.circuit.Gate.qasm:3 qiskit.circuit.Instruction.qasm:3
#: qiskit.circuit.Measure.qasm:3 qiskit.circuit.Reset.qasm:3
#: qiskit.extensions.simulator.Snapshot.qasm:3
#: qiskit.extensions.standard.Barrier.qasm:3
#: qiskit.extensions.standard.CHGate.qasm:3
#: qiskit.extensions.standard.CXBase.qasm:3
#: qiskit.extensions.standard.CnotGate.qasm:3
#: qiskit.extensions.standard.CrzGate.qasm:3
#: qiskit.extensions.standard.Cu1Gate.qasm:3
#: qiskit.extensions.standard.Cu3Gate.qasm:3
#: qiskit.extensions.standard.CyGate.qasm:3
#: qiskit.extensions.standard.CzGate.qasm:3
#: qiskit.extensions.standard.FredkinGate.qasm:3
#: qiskit.extensions.standard.HGate.qasm:3
#: qiskit.extensions.standard.IdGate.qasm:3
#: qiskit.extensions.standard.RXGate.qasm:3
#: qiskit.extensions.standard.RYGate.qasm:3
#: qiskit.extensions.standard.RZGate.qasm:3
#: qiskit.extensions.standard.RZZGate.qasm:3
#: qiskit.extensions.standard.SGate.qasm:3
#: qiskit.extensions.standard.SdgGate.qasm:3
#: qiskit.extensions.standard.SwapGate.qasm:3
#: qiskit.extensions.standard.TGate.qasm:3
#: qiskit.extensions.standard.TdgGate.qasm:3
#: qiskit.extensions.standard.ToffoliGate.qasm:3
#: qiskit.extensions.standard.U0Gate.qasm:3
#: qiskit.extensions.standard.U1Gate.qasm:3
#: qiskit.extensions.standard.U2Gate.qasm:3
#: qiskit.extensions.standard.U3Gate.qasm:3
#: qiskit.extensions.standard.UBase.qasm:3
#: qiskit.extensions.standard.XGate.qasm:3
#: qiskit.extensions.standard.YGate.qasm:3
#: qiskit.extensions.standard.ZGate.qasm:3
msgid ""
"Derived instructions may override this to print in a different format "
"(e.g. measure q[0] -> c[0];)."
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:2
#: ../../api/qiskit.pulse.Instruction.rst:2
msgid "Instruction"
msgstr ""

#: of qiskit.circuit.Instruction:1
msgid "Generic quantum instruction."
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:15:<autosummary>:1
msgid ":obj:`definition <qiskit.circuit.Instruction.definition>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:15:<autosummary>:1
msgid ":obj:`params <qiskit.circuit.Instruction.params>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
msgid ":obj:`assemble <qiskit.circuit.Instruction.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
msgid ":obj:`c_if <qiskit.circuit.Instruction.c_if>`\\ \\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
msgid ":obj:`copy <qiskit.circuit.Instruction.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.Instruction.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
msgid ":obj:`mirror <qiskit.circuit.Instruction.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Instruction.rst:26:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.Instruction.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:2
msgid "InstructionSet"
msgstr ""

#: of qiskit.circuit.InstructionSet:1
msgid "Instruction collection, and their contexts."
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1
msgid ""
":obj:`add <qiskit.circuit.InstructionSet.add>`\\ \\(gate\\, qargs\\, "
"cargs\\)"
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1 of
#: qiskit.circuit.InstructionSet.add:1
msgid "Add an instruction and its context (where it's attached)."
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1
msgid ":obj:`c_if <qiskit.circuit.InstructionSet.c_if>`\\ \\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1 of
#: qiskit.circuit.InstructionSet.c_if:1
msgid "Add classical control register to all instructions."
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.InstructionSet.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1 of
#: qiskit.circuit.InstructionSet.inverse:1
msgid "Invert all instructions."
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1
msgid ":obj:`q_if <qiskit.circuit.InstructionSet.q_if>`\\ \\(\\*qregs\\)"
msgstr ""

#: ../../api/qiskit.circuit.InstructionSet.rst:17:<autosummary>:1 of
#: qiskit.circuit.InstructionSet.q_if:1
msgid "Add controls to all instructions."
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:2
msgid "Measure"
msgstr ""

#: of qiskit.circuit.Measure:1
msgid "Quantum measurement in the computational basis."
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:15:<autosummary>:1
msgid ":obj:`definition <qiskit.circuit.Measure.definition>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:15:<autosummary>:1
msgid ":obj:`params <qiskit.circuit.Measure.params>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
msgid ":obj:`assemble <qiskit.circuit.Measure.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
msgid ":obj:`c_if <qiskit.circuit.Measure.c_if>`\\ \\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
msgid ":obj:`copy <qiskit.circuit.Measure.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.Measure.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
msgid ":obj:`mirror <qiskit.circuit.Measure.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Measure.rst:26:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.Measure.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Parameter.rst:2
msgid "Parameter"
msgstr ""

#: of qiskit.circuit.Parameter:1
msgid "Parameter Class for variable parameters"
msgstr ""

#: ../../api/qiskit.circuit.Parameter.rst:14:<autosummary>:1
msgid ":obj:`name <qiskit.circuit.Parameter.name>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Parameter.rst:14:<autosummary>:1 of
#: qiskit.circuit.Parameter.name:1
msgid "Returns the name of the Parameter."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:2
msgid "QuantumCircuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit:1
msgid "Quantum circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1
msgid ":obj:`clbits <qiskit.circuit.QuantumCircuit.clbits>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.clbits:1
msgid ""
"Returns a list of classical bits in the order that the registers had been"
" added."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1
msgid ":obj:`extension_lib <qiskit.circuit.QuantumCircuit.extension_lib>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1
msgid ":obj:`header <qiskit.circuit.QuantumCircuit.header>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1
msgid ":obj:`instances <qiskit.circuit.QuantumCircuit.instances>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1
msgid ":obj:`parameters <qiskit.circuit.QuantumCircuit.parameters>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.parameters:1
msgid "convenience function to get the parameters defined in the parameter table"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1
msgid ":obj:`prefix <qiskit.circuit.QuantumCircuit.prefix>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1
msgid ":obj:`qubits <qiskit.circuit.QuantumCircuit.qubits>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:20:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.qubits:1
msgid ""
"Returns a list of quantum bits in the order that the registers had been "
"added."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`add_register <qiskit.circuit.QuantumCircuit.add_register>`\\ "
"\\(\\*regs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.add_register:1
msgid "Add registers."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`append <qiskit.circuit.QuantumCircuit.append>`\\ "
"\\(instruction\\[\\, qargs\\, cargs\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.append:1
msgid ""
"Append an instruction to the end of the circuit, modifying the circuit in"
" place."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`barrier <qiskit.circuit.QuantumCircuit.barrier>`\\ \\(\\*qargs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`bind_parameters <qiskit.circuit.QuantumCircuit.bind_parameters>`\\ "
"\\(value\\_dict\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.bind_parameters:1
msgid "Assign parameters to values yielding a new circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`ccx <qiskit.circuit.QuantumCircuit.ccx>`\\ \\(ctl1\\, ctl2\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`ch <qiskit.circuit.QuantumCircuit.ch>`\\ \\(q\\_control\\, "
"q\\_target\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`cls_instances <qiskit.circuit.QuantumCircuit.cls_instances>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cls_instances:1
msgid ""
"Return the current number of instances of this class, useful for auto "
"naming."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`cls_prefix <qiskit.circuit.QuantumCircuit.cls_prefix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.cls_prefix:1
msgid "Return the prefix to use for auto naming."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`combine <qiskit.circuit.QuantumCircuit.combine>`\\ \\(rhs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.combine:1
#: qiskit.circuit.QuantumCircuit.extend:1
msgid "Append rhs to self if self contains compatible registers."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`copy <qiskit.circuit.QuantumCircuit.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>
msgid "param name"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`count_ops <qiskit.circuit.QuantumCircuit.count_ops>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.count_ops:1
msgid "Count each operation kind in the circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`crz <qiskit.circuit.QuantumCircuit.crz>`\\ \\(theta\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`cswap <qiskit.circuit.QuantumCircuit.cswap>`\\ \\(ctl\\, tgt1\\, "
"tgt2\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`cu1 <qiskit.circuit.QuantumCircuit.cu1>`\\ \\(theta\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`cu3 <qiskit.circuit.QuantumCircuit.cu3>`\\ \\(theta\\, phi\\, "
"lam\\, ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`cx <qiskit.circuit.QuantumCircuit.cx>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`cx_base <qiskit.circuit.QuantumCircuit.cx_base>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`cy <qiskit.circuit.QuantumCircuit.cy>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`cz <qiskit.circuit.QuantumCircuit.cz>`\\ \\(ctl\\, tgt\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`decompose <qiskit.circuit.QuantumCircuit.decompose>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.decompose:1
msgid ""
"Call a decomposition pass on this circuit, to decompose one level "
"(shallow decompose)."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`depth <qiskit.circuit.QuantumCircuit.depth>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid "Return circuit depth (i.e."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`draw <qiskit.circuit.QuantumCircuit.draw>`\\ \\(\\[scale\\, "
"filename\\, style\\, output\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.draw:1
msgid "Draw the quantum circuit"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`extend <qiskit.circuit.QuantumCircuit.extend>`\\ \\(rhs\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`from_qasm_file <qiskit.circuit.QuantumCircuit.from_qasm_file>`\\ "
"\\(path\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.from_qasm_file:1
msgid "Take in a QASM file and generate a QuantumCircuit object."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`from_qasm_str <qiskit.circuit.QuantumCircuit.from_qasm_str>`\\ "
"\\(qasm\\_str\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.from_qasm_str:1
msgid "Take in a QASM string and generate a QuantumCircuit object."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`h <qiskit.circuit.QuantumCircuit.h>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`has_register <qiskit.circuit.QuantumCircuit.has_register>`\\ "
"\\(register\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.has_register:1
msgid "Test if this circuit has the register r."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`iden <qiskit.circuit.QuantumCircuit.iden>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`initialize <qiskit.circuit.QuantumCircuit.initialize>`\\ "
"\\(params\\, qubits\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.initialize:1
#: qiskit.extensions.initializer.initialize:1
msgid "Apply initialize to circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.QuantumCircuit.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.inverse:1
msgid "Invert this circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`measure <qiskit.circuit.QuantumCircuit.measure>`\\ \\(qubit\\, "
"cbit\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.measure:1
msgid "Measure quantum bit into classical bit (tuples)."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`mirror <qiskit.circuit.QuantumCircuit.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.mirror:1
msgid "Mirror the circuit by reversing the instructions."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`num_connected_components "
"<qiskit.circuit.QuantumCircuit.num_connected_components>`\\ "
"\\(\\[unitary\\_only\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.num_connected_components:1
msgid "How many non-entangled subcircuits can the circuit be factored to."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`num_tensor_factors "
"<qiskit.circuit.QuantumCircuit.num_tensor_factors>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.num_tensor_factors:1
#: qiskit.circuit.QuantumCircuit.num_unitary_factors:1
msgid ""
"Computes the number of tensor factors in the unitary (quantum) part of "
"the circuit only."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`num_unitary_factors "
"<qiskit.circuit.QuantumCircuit.num_unitary_factors>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.QuantumCircuit.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.qasm:1
msgid "Return OpenQASM string."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`reset <qiskit.circuit.QuantumCircuit.reset>`\\ \\(qubit\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.reset:1
msgid "Reset q."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`rx <qiskit.circuit.QuantumCircuit.rx>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`ry <qiskit.circuit.QuantumCircuit.ry>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`rz <qiskit.circuit.QuantumCircuit.rz>`\\ \\(phi\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`rzz <qiskit.circuit.QuantumCircuit.rzz>`\\ \\(theta\\, qubit1\\, "
"qubit2\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`s <qiskit.circuit.QuantumCircuit.s>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`sdg <qiskit.circuit.QuantumCircuit.sdg>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`size <qiskit.circuit.QuantumCircuit.size>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.size:1
msgid "Returns total number of gate operations in circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`snapshot <qiskit.circuit.QuantumCircuit.snapshot>`\\ \\(label\\[\\,"
" snapshot\\_type\\, qubits\\, params\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`swap <qiskit.circuit.QuantumCircuit.swap>`\\ \\(qubit1\\, qubit2\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`t <qiskit.circuit.QuantumCircuit.t>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`tdg <qiskit.circuit.QuantumCircuit.tdg>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`to_instruction <qiskit.circuit.QuantumCircuit.to_instruction>`\\ "
"\\(\\[parameter\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.to_instruction:1
msgid "Create an Instruction out of this circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`u0 <qiskit.circuit.QuantumCircuit.u0>`\\ \\(m\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`u1 <qiskit.circuit.QuantumCircuit.u1>`\\ \\(theta\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`u2 <qiskit.circuit.QuantumCircuit.u2>`\\ \\(phi\\, lam\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`u3 <qiskit.circuit.QuantumCircuit.u3>`\\ \\(theta\\, phi\\, lam\\, "
"q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`u_base <qiskit.circuit.QuantumCircuit.u_base>`\\ \\(theta\\, phi\\,"
" lam\\, q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ""
":obj:`unitary <qiskit.circuit.QuantumCircuit.unitary>`\\ \\(obj\\, "
"qubits\\[\\, label\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`width <qiskit.circuit.QuantumCircuit.width>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1 of
#: qiskit.circuit.QuantumCircuit.width:1
msgid "Return number of qubits plus clbits in circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`x <qiskit.circuit.QuantumCircuit.x>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`y <qiskit.circuit.QuantumCircuit.y>`\\ \\(q\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumCircuit.rst:84:<autosummary>:1
msgid ":obj:`z <qiskit.circuit.QuantumCircuit.z>`\\ \\(q\\)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:4
msgid "Instruction instance to append"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:6
msgid "qubits to attach instruction to"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:8
msgid "clbits to attach instruction to"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:11
msgid "a handle to the instruction that was just added"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.append:14
msgid ""
"if the gate is of a different shape than the wires     it is being "
"attached to."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.bind_parameters:3
msgid "{parameter: value, ...}"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.bind_parameters:6
msgid "If value_dict contains parameters not present in the circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.bind_parameters:8
msgid "copy of self with assignment substitution."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.combine:3
#: qiskit.circuit.QuantumCircuit.extend:3
msgid ""
"Two circuits are compatible if they contain the same registers or if they"
" contain different registers with unique names. The returned circuit will"
" contain all unique registers between both circuits."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.combine:8
msgid "Return self + rhs as a new object."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.copy:4
msgid ""
"a deepcopy of the current circuit, with the name updated if"
"                 it was provided"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.copy:6
msgid "a deepcopy of the current circuit, with the name updated if"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.copy:7
msgid "it was provided"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.count_ops:3
msgid "a breakdown of how many operations of each kind."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.decompose:4
msgid "a circuit one level decomposed"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:1
msgid ""
"Return circuit depth (i.e. length of critical path). This does not "
"include compiler or simulator directives such as 'barrier' or 'snapshot'."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:5
msgid "Depth of circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:9
#: qiskit.circuit.QuantumCircuit.num_tensor_factors:5
msgid "メモ"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.depth:10
msgid "The circuit depth and the DAG depth need not bt the same."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:3
msgid ""
"Using the output parameter you can specify the format. The choices are: "
"0. text: ASCII art string 1. latex: high-quality images, but heavy "
"external software dependencies 2. matplotlib: purely in Python with no "
"external dependencies"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:8
msgid "Defaults to an overcomplete basis, in order to not alter gates."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:10
#: qiskit.visualization.circuit_drawer:8
#: qiskit.visualization.circuit_visualization.circuit_drawer:8
msgid "scale of image to draw (shrink if < 1)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:12
#: qiskit.visualization.circuit_drawer:10
#: qiskit.visualization.circuit_visualization.circuit_drawer:10
msgid "file path to save image to"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:14
msgid ""
"dictionary of style or file name of style file. You can refer to the "
":ref:`Style Dict Doc <style-dict-doc>` for more information on the "
"contents."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:19
#: qiskit.visualization.circuit_drawer:18
#: qiskit.visualization.circuit_visualization.circuit_drawer:18
msgid ""
"Select the output method to use for drawing the circuit. Valid choices "
"are `text`, `latex`, `latex_source`, `mpl`. By default the 'text' drawer "
"is used unless a user config file has an alternative backend set as the "
"default. If the output is passed in that backend will always be used."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:25
#: qiskit.visualization.circuit_drawer:24
#: qiskit.visualization.circuit_visualization.circuit_drawer:24
msgid ""
"when set true show the circuit in a new window (for `mpl` this depends on"
" the matplotlib backend being used supporting this). Note when used with "
"either the `text` or the `latex_source` output type this has no effect "
"and will be silently ignored."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:31
msgid "sets the length of the lines generated by `text`"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:33
#: qiskit.visualization.circuit_drawer:37
#: qiskit.visualization.circuit_visualization.circuit_drawer:37
msgid ""
"When set to True reverse the bit order inside registers for the output "
"visualization."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:36
#: qiskit.visualization.circuit_drawer:40
#: qiskit.visualization.circuit_visualization.circuit_drawer:40
msgid "Enable/disable drawing barriers in the output circuit. Defaults to True."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:39
#: qiskit.visualization.circuit_drawer:43
#: qiskit.visualization.circuit_visualization.circuit_drawer:43
msgid ""
"Options are `left`, `right` or `none`, if anything else is supplied it "
"defaults to left justified. It refers to where gates should be placed in "
"the output circuit if there is an option. `none` results in each gate "
"being placed in its own column. Currently only supported by text drawer."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:46
msgid ""
"* PIL.Image: (output `latex`) an in-memory representation of the   image "
"of the circuit diagram. * matplotlib.figure: (output `mpl`) a matplotlib "
"figure object   for the circuit diagram. * str: (output `latex_source`). "
"The LaTeX source code. * TextDrawing: (output `text`). A drawing that can"
" be printed as   ascii art"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:48
msgid ""
"PIL.Image: (output `latex`) an in-memory representation of the image of "
"the circuit diagram."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:50
msgid ""
"matplotlib.figure: (output `mpl`) a matplotlib figure object for the "
"circuit diagram."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:52
msgid "str: (output `latex_source`). The LaTeX source code."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:53
msgid "TextDrawing: (output `text`). A drawing that can be printed as ascii art"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.draw:57
#: qiskit.visualization.circuit_drawer:60
#: qiskit.visualization.circuit_visualization.circuit_drawer:60
msgid "when an invalid output method is selected"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.extend:8
msgid "Modify and return self."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.from_qasm_file:3
msgid "Path to the file for a QASM program"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.from_qasm_file:6
#: qiskit.circuit.QuantumCircuit.from_qasm_str:6
msgid "The QuantumCircuit object for the input QASM"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.from_qasm_str:3
msgid "A QASM program string"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.has_register:3
msgid "a quantum or classical register."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.has_register:6
msgid "True if the register is contained in this circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.inverse:3
msgid "This is done by recursively inverting all gates."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.inverse:5
msgid "the inverted circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.inverse:8
msgid "if the circuit cannot be inverted."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:3
msgid "quantum register"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:5
msgid "classical register"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:8
msgid "the attached measure instruction."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.measure:11
msgid ""
"if qubit is not in this circuit or bad format;     if cbit is not in this"
" circuit or not creg."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mirror:3
msgid ""
"This is done by recursively mirroring all instructions. It does not "
"invert any gate."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.mirror:6
msgid "the mirrored circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.num_connected_components:3
msgid "Compute only unitary part of graph."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.num_connected_components:6
msgid "Number of connected components in circuit."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.num_tensor_factors:6
msgid ""
"This is here for backwards compatibility, and will be removed in a future"
" release of qiskit. You should call `num_unitary_factors` instead."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.size:3
msgid "Total number of gate operations."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:3
#: qiskit.converters.circuit_to_instruction:9
msgid ""
"For parameterized circuits, a mapping from parameters in the circuit to "
"parameters to be used in the instruction. If None, existing circuit "
"parameters will also parameterize the instruction."
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:9
msgid ""
"a composite instruction encapsulating this circuit     (can be decomposed"
" back)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:11
msgid "a composite instruction encapsulating this circuit"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.to_instruction:12
msgid "(can be decomposed back)"
msgstr ""

#: of qiskit.circuit.QuantumCircuit.width:3
msgid "Width of circuit."
msgstr ""

#: ../../api/qiskit.circuit.QuantumRegister.rst:2
msgid "QuantumRegister"
msgstr ""

#: of qiskit.circuit.QuantumRegister:1
msgid "Implement a quantum register."
msgstr ""

#: ../../api/qiskit.circuit.QuantumRegister.rst:15:<autosummary>:1
msgid ""
":obj:`instances_counter "
"<qiskit.circuit.QuantumRegister.instances_counter>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumRegister.rst:15:<autosummary>:1
msgid ":obj:`prefix <qiskit.circuit.QuantumRegister.prefix>`\\"
msgstr ""

#: ../../api/qiskit.circuit.QuantumRegister.rst:22:<autosummary>:1
msgid ":obj:`check_range <qiskit.circuit.QuantumRegister.check_range>`\\ \\(j\\)"
msgstr ""

#: ../../api/qiskit.circuit.QuantumRegister.rst:22:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.QuantumRegister.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:2
msgid "Reset"
msgstr ""

#: of qiskit.circuit.Reset:1
msgid "Qubit reset."
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:15:<autosummary>:1
msgid ":obj:`definition <qiskit.circuit.Reset.definition>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:15:<autosummary>:1
msgid ":obj:`params <qiskit.circuit.Reset.params>`\\"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
msgid ":obj:`assemble <qiskit.circuit.Reset.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
msgid ":obj:`c_if <qiskit.circuit.Reset.c_if>`\\ \\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
msgid ":obj:`copy <qiskit.circuit.Reset.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
msgid ":obj:`inverse <qiskit.circuit.Reset.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
msgid ":obj:`mirror <qiskit.circuit.Reset.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.Reset.rst:26:<autosummary>:1
msgid ":obj:`qasm <qiskit.circuit.Reset.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.circuit.decorators.rst:2
msgid "qiskit.circuit.decorators module"
msgstr ""

#: of qiskit.circuit.decorators:1
msgid ""
"This module contains decorators for expanding register objects or list of"
" qubits into a series of single qubit/cbit instructions to be handled by "
"the wrapped operation."
msgstr ""

#: ../../api/qiskit.circuit.parametertable.rst:2
msgid "qiskit.circuit.parametertable module"
msgstr ""

#: of qiskit.circuit.parametertable:1
msgid "Look-up table for varaible parameters in QuantumCircuit."
msgstr ""

#: of qiskit.circuit.parametertable.ParameterTable:1
msgid "ベースクラス: :class:`collections.abc.MutableMapping`"
msgstr ""

#: of qiskit.circuit.parametertable.ParameterTable:1
msgid "Class for managing and setting circuit parameters"
msgstr ""

#: ../../api/qiskit.circuit.register.rst:2
msgid "qiskit.circuit.register module"
msgstr ""

#: of qiskit.circuit.register:1
msgid "Base register reference object."
msgstr ""

#: of qiskit.circuit.register.Register:1
msgid "Implement a generic register."
msgstr ""

#: ../../api/qiskit.compiler.rst:2
msgid "qiskit.compiler package"
msgstr ""

#: of qiskit.compiler:1
msgid "Helper module for Qiskit compiler."
msgstr ""

#: ../../api/qiskit.compiler.assemble.rst:2
msgid "assemble"
msgstr ""

#: of qiskit.compiler.assemble:1
msgid "Assemble a list of circuits or pulse schedules into a Qobj."
msgstr ""

#: of qiskit.compiler.assemble:3
msgid ""
"This function serializes the payloads, which could be either circuits or "
"schedules, to create Qobj \"experiments\". It further annotates the "
"experiment payload with header and configurations."
msgstr ""

#: of qiskit.compiler.assemble:7 qiskit.execute.execute:5
msgid "Circuit(s) or pulse schedule(s) to execute"
msgstr ""

#: of qiskit.compiler.assemble:9
msgid ""
"If set, some runtime options are automatically grabbed from "
"backend.configuration() and backend.defaults(). If any other option is "
"explicitly set (e.g. rep_rate), it will override the backend's. If any "
"other options is set in the run_config, it will also override the "
"backend's."
msgstr ""

#: of qiskit.compiler.assemble:16 qiskit.execute.execute:73
msgid "String identifier to annotate the Qobj"
msgstr ""

#: of qiskit.compiler.assemble:18 qiskit.execute.execute:75
msgid ""
"User input that will be inserted in Qobj header, and will also be copied "
"to the corresponding Result header. Headers do not affect the run."
msgstr ""

#: of qiskit.compiler.assemble:21 qiskit.execute.execute:78
msgid "Number of repetitions of each circuit, for sampling. Default: 2014"
msgstr ""

#: of qiskit.compiler.assemble:23 qiskit.execute.execute:80
msgid ""
"If True, per-shot measurement bitstrings are returned as well (provided "
"the backend supports it). For OpenPulse jobs, only measurement level 2 "
"supports this option. Default: False"
msgstr ""

#: of qiskit.compiler.assemble:27 qiskit.execute.execute:84
msgid "Maximum credits to spend on job. Default: 10"
msgstr ""

#: of qiskit.compiler.assemble:29 qiskit.execute.execute:86
msgid "Random seed to control sampling, for when backend is a simulator"
msgstr ""

#: of qiskit.compiler.assemble:31 qiskit.execute.execute:88
msgid "List of default qubit lo frequencies"
msgstr ""

#: of qiskit.compiler.assemble:33 qiskit.execute.execute:90
msgid "List of default meas lo frequencies"
msgstr ""

#: of qiskit.compiler.assemble:35
msgid "List of drive lo ranges"
msgstr ""

#: of qiskit.compiler.assemble:37
msgid "List of meas lo ranges"
msgstr ""

#: of qiskit.compiler.assemble:39 qiskit.execute.execute:92
msgid "Union[Dict[PulseChannel, float], LoConfig]): Experiment LO configurations"
msgstr ""

#: of qiskit.compiler.assemble:41 qiskit.execute.execute:94
msgid "Set the appropriate level of the measurement output for pulse experiments."
msgstr ""

#: of qiskit.compiler.assemble:43 qiskit.execute.execute:96
msgid ""
"Level of measurement data for the backend to return For `meas_level` 0 "
"and 1:     \"single\" returns information from every shot.     \"avg\" "
"returns average measurement output (averaged over number of shots)."
msgstr ""

#: of qiskit.compiler.assemble:43 qiskit.execute.execute:96
msgid ""
"Level of measurement data for the backend to return For `meas_level` 0 "
"and 1:"
msgstr ""

#: of qiskit.compiler.assemble:45 qiskit.execute.execute:98
msgid ""
"\"single\" returns information from every shot. \"avg\" returns average "
"measurement output (averaged over number of shots)."
msgstr ""

#: of qiskit.compiler.assemble:48
msgid "List of lists, containing qubits that must be measured together."
msgstr ""

#: of qiskit.compiler.assemble:50 qiskit.execute.execute:101
msgid "Number of classical memory slots used in this job."
msgstr ""

#: of qiskit.compiler.assemble:52 qiskit.execute.execute:103
msgid "Size of each memory slot if the output is Level 0."
msgstr ""

#: of qiskit.compiler.assemble:54 qiskit.execute.execute:105
msgid ""
"repetition time of the experiment in μs. The delay between experiments "
"will be rep_time. Must be from the list provided by the device."
msgstr ""

#: of qiskit.compiler.assemble:58 qiskit.execute.execute:109
msgid ""
"Value}]): List of Parameter bindings over which the set of experiments "
"will be executed. Each list element (bind) should be of the form "
"{Parameter1: value1, Parameter2: value2, ...}. All binds will be executed"
" across all experiments, e.g. if parameter_binds is a length-n list, and "
"there are m experiments, a total of m x n experiments will be run (one "
"for each experiment/bind pair)."
msgstr ""

#: of qiskit.compiler.assemble:65 qiskit.execute.execute:116
msgid "DEPRECATED in 0.8: use ``seed_simulator`` kwarg instead"
msgstr ""

#: of qiskit.compiler.assemble:67 qiskit.execute.execute:120
msgid "DEPRECATED in 0.8: use run_config instead"
msgstr ""

#: of qiskit.compiler.assemble:69
msgid ""
"extra arguments used to configure the run (e.g. for Aer configurable "
"backends) Refer to the backend documentation for details on these "
"arguments"
msgstr ""

#: of qiskit.compiler.assemble:73
msgid ""
"a qobj which can be run on a backend. Depending on the type of input,"
"     this will be either a QasmQobj or a PulseQobj."
msgstr ""

#: of qiskit.compiler.assemble:75
msgid "a qobj which can be run on a backend. Depending on the type of input,"
msgstr ""

#: of qiskit.compiler.assemble:76
msgid "this will be either a QasmQobj or a PulseQobj."
msgstr ""

#: of qiskit.compiler.assemble:79
msgid "if the input cannot be interpreted as either circuits or schedules"
msgstr ""

#: ../../api/qiskit.compiler.transpile.rst:2
#: ../../api/qiskit.transpiler.transpile.rst:2
msgid "transpile"
msgstr ""

#: of qiskit.compiler.transpile:1
msgid ""
"transpile one or more circuits, according to some desired transpilation "
"targets."
msgstr ""

#: of qiskit.compiler.transpile:4
msgid ""
"All arguments may be given as either singleton or list. In case of list, "
"the length must be equal to the number of circuits being transpiled."
msgstr ""

#: of qiskit.compiler.transpile:7
msgid "Transpilation is done in parallel using multiprocessing."
msgstr ""

#: of qiskit.compiler.transpile:9
msgid "Circuit(s) to transpile"
msgstr ""

#: of qiskit.compiler.transpile:11
msgid ""
"If set, transpiler options are automatically grabbed from "
"backend.configuration() and backend.properties(). If any other option is "
"explicitly set (e.g. coupling_map), it will override the backend's. Note:"
" the backend arg is purely for convenience. The resulting     circuit may"
" be run on any backend as long as it is compatible."
msgstr ""

#: of qiskit.compiler.transpile:11
msgid ""
"If set, transpiler options are automatically grabbed from "
"backend.configuration() and backend.properties(). If any other option is "
"explicitly set (e.g. coupling_map), it will override the backend's. Note:"
" the backend arg is purely for convenience. The resulting"
msgstr ""

#: of qiskit.compiler.transpile:16
msgid "circuit may be run on any backend as long as it is compatible."
msgstr ""

#: of qiskit.compiler.transpile:18 qiskit.execute.execute:13
msgid ""
"List of basis gate names to unroll to. e.g:     ['u1', 'u2', 'u3', 'cx'] "
"If None, do not unroll."
msgstr ""

#: of qiskit.compiler.transpile:18 qiskit.execute.execute:13
msgid "List of basis gate names to unroll to. e.g:"
msgstr ""

#: of qiskit.compiler.transpile:20 qiskit.execute.execute:15
msgid "['u1', 'u2', 'u3', 'cx']"
msgstr ""

#: of qiskit.compiler.transpile:21 qiskit.execute.execute:16
msgid "If None, do not unroll."
msgstr ""

#: of qiskit.compiler.transpile:23 qiskit.execute.execute:18
msgid ""
"Coupling map (perhaps custom) to target in mapping. Multiple formats are "
"supported: a. CouplingMap instance  b. list     Must be given as an "
"adjacency matrix, where each entry     specifies all two-qubit "
"interactions supported by backend     e.g:         [[0, 1], [0, 3], [1, "
"2], [1, 5], [2, 5], [4, 1], [5, 3]]"
msgstr ""

#: of qiskit.compiler.transpile:23 qiskit.execute.execute:18
msgid ""
"Coupling map (perhaps custom) to target in mapping. Multiple formats are "
"supported: a. CouplingMap instance"
msgstr ""

#: of qiskit.compiler.transpile:30 qiskit.compiler.transpile:62
#: qiskit.execute.execute:25 qiskit.execute.execute:57
#: qiskit.visualization.bloch.Bloch:51 qiskit.visualization.bloch.Bloch:57
#: qiskit.visualization.bloch.Bloch:64 qiskit.visualization.bloch.Bloch:83
#: qiskit.visualization.bloch.Bloch:89 qiskit.visualization.bloch.Bloch:113
#: qiskit.visualization.bloch.Bloch:119 qiskit.visualization.bloch.Bloch:125
#: qiskit.visualization.bloch.Bloch:131 qiskit.visualization.bloch.Bloch:137
#: qiskit.visualization.bloch.Bloch:143 qiskit.visualization.bloch.Bloch:149
#: qiskit.visualization.interactive.iplot_qsphere.lex_index:7
#: qiskit.visualization.state_visualization.lex_index:7
msgid "list"
msgstr ""

#: of qiskit.compiler.transpile:28 qiskit.execute.execute:23
msgid ""
"Must be given as an adjacency matrix, where each entry specifies all two-"
"qubit interactions supported by backend e.g:"
msgstr ""

#: of qiskit.compiler.transpile:31 qiskit.execute.execute:26
msgid "[[0, 1], [0, 3], [1, 2], [1, 5], [2, 5], [4, 1], [5, 3]]"
msgstr ""

#: of qiskit.compiler.transpile:33
msgid ""
"properties returned by a backend, including information on gate errors, "
"readout errors, qubit coherence times, etc. For a backend that provides "
"this information, it can be obtained with: ``backend.properties()``"
msgstr ""

#: of qiskit.compiler.transpile:38 qiskit.execute.execute:33
msgid ""
"Initial position of virtual qubits on physical qubits. If this layout "
"makes the circuit compatible with the coupling_map constraints, it will "
"be used. The final layout is not guaranteed to be the same, as the "
"transpiler may permute qubits through swaps or other means.  Multiple "
"formats are supported: a. Layout instance  b. dict     virtual to "
"physical:         {qr[0]: 0,          qr[1]: 3,          qr[2]: 5}      "
"physical to virtual:         {0: qr[0],          3: qr[1],          5: "
"qr[2]}  c. list     virtual to physical:         [0, 3, 5]  # virtual "
"qubits are ordered (in addition to named)      physical to virtual:"
"         [qr[0], None, None, qr[1], None, qr[2]]"
msgstr ""

#: of qiskit.compiler.transpile:38 qiskit.execute.execute:33
msgid ""
"Initial position of virtual qubits on physical qubits. If this layout "
"makes the circuit compatible with the coupling_map constraints, it will "
"be used. The final layout is not guaranteed to be the same, as the "
"transpiler may permute qubits through swaps or other means."
msgstr ""

#: of qiskit.compiler.transpile:44 qiskit.execute.execute:39
msgid "Multiple formats are supported: a. Layout instance"
msgstr ""

#: of qiskit.compiler.transpile:56 qiskit.execute.execute:51
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage:13
#: qiskit.qobj.QobjMeasurementOption:16
#: qiskit.qobj.models.pulse.QobjMeasurementOption:16
msgid "dict"
msgstr ""

#: of qiskit.compiler.transpile:51 qiskit.compiler.transpile:60
#: qiskit.execute.execute:46 qiskit.execute.execute:55
#: qiskit.transpiler.Layout.from_dict:15
msgid "virtual to physical:"
msgstr ""

#: of qiskit.compiler.transpile:51 qiskit.execute.execute:46
#: qiskit.transpiler.Layout.from_dict:15
msgid "{qr[0]: 0,"
msgstr ""

#: of qiskit.compiler.transpile:50 qiskit.execute.execute:45
msgid "qr[1]: 3, qr[2]: 5}"
msgstr ""

#: of qiskit.compiler.transpile:56 qiskit.compiler.transpile:62
#: qiskit.execute.execute:51 qiskit.execute.execute:57
#: qiskit.transpiler.Layout.from_dict:19
msgid "physical to virtual:"
msgstr ""

#: of qiskit.compiler.transpile:56 qiskit.execute.execute:51
#: qiskit.transpiler.Layout.from_dict:19
msgid "{0: qr[0],"
msgstr ""

#: of qiskit.compiler.transpile:55 qiskit.execute.execute:50
msgid "3: qr[1], 5: qr[2]}"
msgstr ""

#: of qiskit.compiler.transpile:60 qiskit.execute.execute:55
msgid "[0, 3, 5]  # virtual qubits are ordered (in addition to named)"
msgstr ""

#: of qiskit.compiler.transpile:63 qiskit.execute.execute:58
msgid "[qr[0], None, None, qr[1], None, qr[2]]"
msgstr ""

#: of qiskit.compiler.transpile:65
msgid "sets random seed for the stochastic parts of the transpiler"
msgstr ""

#: of qiskit.compiler.transpile:67
msgid ""
"How much optimization to perform on the circuits. Higher levels generate "
"more optimized circuits, at the expense of longer transpilation time."
"     0: no optimization     1: light optimization     2: heavy "
"optimization     3: even heavier optimization"
msgstr ""

#: of qiskit.compiler.transpile:67 qiskit.execute.execute:62
msgid ""
"How much optimization to perform on the circuits. Higher levels generate "
"more optimized circuits, at the expense of longer transpilation time."
msgstr ""

#: of qiskit.compiler.transpile:70
msgid ""
"0: no optimization 1: light optimization 2: heavy optimization 3: even "
"heavier optimization"
msgstr ""

#: of qiskit.compiler.transpile:75
msgid ""
"The pass manager to use for a custom pipeline of transpiler passes. If "
"this arg is present, all other args will be ignored and the pass manager "
"will be used directly (Qiskit will not attempt to auto-select a pass "
"manager based on transpile options)."
msgstr ""

#: of qiskit.compiler.transpile:80 qiskit.execute.execute:118
msgid "DEPRECATED in 0.8: use ``seed_transpiler`` kwarg instead"
msgstr ""

#: of qiskit.compiler.transpile:83 qiskit.transpiler.transpile:21
#: qiskit.transpiler.transpiler.transpile:21
msgid "transpiled circuit(s)."
msgstr ""

#: of qiskit.compiler.transpile:86 qiskit.transpiler.transpile:24
#: qiskit.transpiler.transpiler.transpile:24
msgid "in case of bad inputs to transpiler or errors in passes"
msgstr ""

#: ../../api/qiskit.converters.rst:2
msgid "qiskit.converters package"
msgstr ""

#: of qiskit.converters:1 qiskit.execute:1 qiskit.tools:1
msgid "Helper module for simplified Qiskit usage."
msgstr ""

#: of qiskit.converters:3
msgid "The functions in this module provide convenience converters"
msgstr ""

#: ../../api/qiskit.converters.ast_to_dag.rst:2
msgid "ast_to_dag"
msgstr ""

#: of qiskit.converters.ast_to_dag:1
msgid "Build a ``DAGCircuit`` object from an AST ``Node`` object."
msgstr ""

#: of qiskit.converters.ast_to_dag:3
msgid "a Program Node of an AST (parser's output)"
msgstr ""

#: of qiskit.converters.ast_to_dag:6
msgid "the DAG representing an OpenQASM's AST"
msgstr ""

#: of qiskit.converters.ast_to_dag:9
msgid "if the AST is malformed."
msgstr ""

#: ../../api/qiskit.converters.circuit_to_dag.rst:2
msgid "circuit_to_dag"
msgstr ""

#: of qiskit.converters.circuit_to_dag:1
msgid "Build a ``DAGCircuit`` object from a ``QuantumCircuit``."
msgstr ""

#: of qiskit.converters.circuit_to_dag:3
#: qiskit.converters.circuit_to_instruction:7
msgid "the input circuit."
msgstr ""

#: of qiskit.converters.circuit_to_dag:6
msgid "the DAG representing the input circuit."
msgstr ""

#: ../../api/qiskit.converters.circuit_to_instruction.rst:2
msgid "circuit_to_instruction"
msgstr ""

#: of qiskit.converters.circuit_to_instruction:1
msgid "Build an ``Instruction`` object from a ``QuantumCircuit``."
msgstr ""

#: of qiskit.converters.circuit_to_instruction:3
msgid ""
"The instruction is anonymous (not tied to a named quantum register), and "
"so can be inserted into another circuit. The instruction will have the "
"same string name as the circuit."
msgstr ""

#: of qiskit.converters.circuit_to_instruction:15
msgid "if parameter_map is not compatible with circuit"
msgstr ""

#: of qiskit.converters.circuit_to_instruction:17
msgid ""
"an instruction equivalent to the action of the     input circuit. Upon "
"decomposition, this instruction will     yield the components comprising "
"the original circuit."
msgstr ""

#: of qiskit.converters.circuit_to_instruction:20
msgid "an instruction equivalent to the action of the"
msgstr ""

#: of qiskit.converters.circuit_to_instruction:20
msgid ""
"input circuit. Upon decomposition, this instruction will yield the "
"components comprising the original circuit."
msgstr ""

#: ../../api/qiskit.converters.circuits_to_qobj.rst:2
msgid "circuits_to_qobj"
msgstr ""

#: of qiskit.converters.circuits_to_qobj:1
msgid "Convert a list of circuits into a qobj."
msgstr ""

#: of qiskit.converters.circuits_to_qobj:3 qiskit.tools.compile:3
#: qiskit.tools.compiler.compile:3 qiskit.transpiler.transpile:3
#: qiskit.transpiler.transpiler.transpile:3
msgid "circuits to compile"
msgstr ""

#: of qiskit.converters.circuits_to_qobj:7 qiskit.converters.circuits_to_qobj:9
#: qiskit.converters.circuits_to_qobj:11 qiskit.converters.circuits_to_qobj:13
#: qiskit.converters.circuits_to_qobj:15 qiskit.converters.circuits_to_qobj:17
#: qiskit.converters.circuits_to_qobj:19 qiskit.converters.circuits_to_qobj:21
#: qiskit.converters.circuits_to_qobj:23
msgid "TODO: delete after qiskit-terra 0.8"
msgstr ""

#: ../../api/qiskit.converters.dag_to_circuit.rst:2
msgid "dag_to_circuit"
msgstr ""

#: of qiskit.converters.dag_to_circuit:1
msgid "Build a ``QuantumCircuit`` object from a ``DAGCircuit``."
msgstr ""

#: of qiskit.converters.dag_to_circuit:3
msgid "the input dag."
msgstr ""

#: of qiskit.converters.dag_to_circuit:6
msgid "the circuit representing the input dag."
msgstr ""

#: ../../api/qiskit.converters.qobj_to_circuits.rst:2
msgid "qobj_to_circuits"
msgstr ""

#: of qiskit.converters.qobj_to_circuits:1
msgid "Return a list of QuantumCircuit object(s) from a qobj"
msgstr ""

#: of qiskit.converters.qobj_to_circuits:3
msgid "The Qobj object to convert to QuantumCircuits"
msgstr ""

#: of qiskit.converters.qobj_to_circuits:6
msgid "A list of QuantumCircuit objects from the qobj"
msgstr ""

#: ../../api/qiskit.dagcircuit.rst:2
msgid "qiskit.dagcircuit package"
msgstr ""

#: of qiskit.dagcircuit:1
msgid "Module for DAG Circuits."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:2
msgid "DAGCircuit"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit:1
msgid "Quantum circuit as a directed acyclic graph."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit:3
msgid ""
"There are 3 types of nodes in the graph: inputs, outputs, and operations."
" The nodes are connected by directed edges that correspond to qubits and "
"bits."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:15:<autosummary>:1
msgid ":obj:`multi_graph <qiskit.dagcircuit.DAGCircuit.multi_graph>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:15:<autosummary>:1
#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid "Deprecated."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:15:<autosummary>:1
msgid ":obj:`node_counter <qiskit.dagcircuit.DAGCircuit.node_counter>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:15:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.node_counter:1
msgid "Deprecated usage to return max node id, now returns size of DAG"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`add_creg <qiskit.dagcircuit.DAGCircuit.add_creg>`\\ \\(creg\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.add_creg:1
msgid "Add all wires in a classical register."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`add_qreg <qiskit.dagcircuit.DAGCircuit.add_qreg>`\\ \\(qreg\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.add_qreg:1
msgid "Add all wires in a quantum register."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`ancestors <qiskit.dagcircuit.DAGCircuit.ancestors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.ancestors:1
msgid "Returns set of the ancestors of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`apply_operation_back "
"<qiskit.dagcircuit.DAGCircuit.apply_operation_back>`\\ \\(op\\[\\, "
"qargs\\, cargs\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.apply_operation_back:1
msgid "Apply an operation to the output of the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`apply_operation_front "
"<qiskit.dagcircuit.DAGCircuit.apply_operation_front>`\\ \\(op\\, qargs\\,"
" cargs\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:1
msgid "Apply an operation to the input of the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`bfs_successors <qiskit.dagcircuit.DAGCircuit.bfs_successors>`\\ "
"\\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.bfs_successors:1
msgid ""
"Returns an iterator of tuples of (DAGNode, [DAGNodes]) where the DAGNode "
"is the current node and [DAGNode] is its successors in  BFS order."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`clbits <qiskit.dagcircuit.DAGCircuit.clbits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.clbits:1
msgid "Return a list of bits as (ClassicalRegister, index) pairs."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`collect_runs <qiskit.dagcircuit.DAGCircuit.collect_runs>`\\ "
"\\(namelist\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.collect_runs:1
msgid "Return a set of non-conditional runs of \"op\" nodes with the given names."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`compose_back <qiskit.dagcircuit.DAGCircuit.compose_back>`\\ "
"\\(input\\_circuit\\[\\, edge\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.compose_back:1
msgid "Apply the input circuit to the output of this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`compose_front <qiskit.dagcircuit.DAGCircuit.compose_front>`\\ "
"\\(input\\_circuit\\[\\, edge\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.compose_front:1
msgid "Apply the input circuit to the input of this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`count_ops <qiskit.dagcircuit.DAGCircuit.count_ops>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.count_ops:1
msgid "Count the occurrences of operation names."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`depth <qiskit.dagcircuit.DAGCircuit.depth>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid "Return the circuit depth."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`descendants <qiskit.dagcircuit.DAGCircuit.descendants>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.descendants:1
msgid "Returns set of the descendants of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`edges <qiskit.dagcircuit.DAGCircuit.edges>`\\ \\(\\[nodes\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.edges:1 qiskit.dagcircuit.DAGCircuit.nodes:1
msgid "Iterator for node values."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`extend_back <qiskit.dagcircuit.DAGCircuit.extend_back>`\\ "
"\\(dag\\[\\, edge\\_map\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.extend_back:1
msgid "Add `dag` at the end of `self`, using `edge_map`."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`gate_nodes <qiskit.dagcircuit.DAGCircuit.gate_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.gate_nodes:1
msgid "Get the list of gate nodes in the dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`get_2q_nodes <qiskit.dagcircuit.DAGCircuit.get_2q_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`get_3q_or_more_nodes "
"<qiskit.dagcircuit.DAGCircuit.get_3q_or_more_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`get_bits <qiskit.dagcircuit.DAGCircuit.get_bits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`get_gate_nodes <qiskit.dagcircuit.DAGCircuit.get_gate_nodes>`\\ "
"\\(\\[data\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`get_named_nodes <qiskit.dagcircuit.DAGCircuit.get_named_nodes>`\\ "
"\\(\\*names\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`get_op_nodes <qiskit.dagcircuit.DAGCircuit.get_op_nodes>`\\ "
"\\(\\[op\\, data\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`get_qubits <qiskit.dagcircuit.DAGCircuit.get_qubits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`layers <qiskit.dagcircuit.DAGCircuit.layers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.layers:1
msgid ""
"Yield a shallow view on a layer of this DAGCircuit for all d layers of "
"this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`multigraph_layers "
"<qiskit.dagcircuit.DAGCircuit.multigraph_layers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.multigraph_layers:1
msgid "Yield layers of the multigraph."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`named_nodes <qiskit.dagcircuit.DAGCircuit.named_nodes>`\\ "
"\\(\\*names\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.named_nodes:1
msgid "Get the set of \"op\" nodes with the given name."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`node <qiskit.dagcircuit.DAGCircuit.node>`\\ \\(node\\_id\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.node:1
msgid "Get the node in the dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`nodes <qiskit.dagcircuit.DAGCircuit.nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`nodes_on_wire <qiskit.dagcircuit.DAGCircuit.nodes_on_wire>`\\ "
"\\(wire\\[\\, only\\_ops\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.nodes_on_wire:1
msgid "Iterator for nodes that affect a given wire"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`num_cbits <qiskit.dagcircuit.DAGCircuit.num_cbits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.num_cbits:1
msgid "Return the total number of bits used by the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`num_tensor_factors "
"<qiskit.dagcircuit.DAGCircuit.num_tensor_factors>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.num_tensor_factors:1
msgid "Compute how many components the circuit can decompose into."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`op_nodes <qiskit.dagcircuit.DAGCircuit.op_nodes>`\\ \\(\\[op\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.op_nodes:1
msgid "Get the list of \"op\" nodes in the dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`predecessors <qiskit.dagcircuit.DAGCircuit.predecessors>`\\ "
"\\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.predecessors:1
msgid "Returns list of the predecessors of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`properties <qiskit.dagcircuit.DAGCircuit.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.properties:1
msgid "Return a dictionary of circuit properties."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`qasm <qiskit.dagcircuit.DAGCircuit.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`quantum_predecessors "
"<qiskit.dagcircuit.DAGCircuit.quantum_predecessors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.quantum_predecessors:1
msgid ""
"Returns list of the predecessors of a node that are connected by a "
"quantum edge as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`quantum_successors "
"<qiskit.dagcircuit.DAGCircuit.quantum_successors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.quantum_successors:1
msgid ""
"Returns list of the successors of a node that are connected by a quantum "
"edge as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`qubits <qiskit.dagcircuit.DAGCircuit.qubits>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.qubits:1
msgid "Return a list of qubits as (QuantumRegister, index) pairs."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`remove_all_ops_named "
"<qiskit.dagcircuit.DAGCircuit.remove_all_ops_named>`\\ \\(opname\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_all_ops_named:1
msgid "Remove all operation nodes with the given name."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`remove_ancestors_of "
"<qiskit.dagcircuit.DAGCircuit.remove_ancestors_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_ancestors_of:1
msgid "Remove all of the ancestor operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`remove_descendants_of "
"<qiskit.dagcircuit.DAGCircuit.remove_descendants_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_descendants_of:1
msgid "Remove all of the descendant operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`remove_nonancestors_of "
"<qiskit.dagcircuit.DAGCircuit.remove_nonancestors_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_nonancestors_of:1
msgid "Remove all of the non-ancestors operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`remove_nondescendants_of "
"<qiskit.dagcircuit.DAGCircuit.remove_nondescendants_of>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_nondescendants_of:1
msgid "Remove all of the non-descendants operation nodes of node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`remove_op_node <qiskit.dagcircuit.DAGCircuit.remove_op_node>`\\ "
"\\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.remove_op_node:1
msgid "Remove an operation node n."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`rename_register <qiskit.dagcircuit.DAGCircuit.rename_register>`\\ "
"\\(regname\\, newname\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.rename_register:1
msgid "Rename a classical or quantum register throughout the circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`serial_layers <qiskit.dagcircuit.DAGCircuit.serial_layers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.serial_layers:1
msgid "Yield a layer for all gates of this circuit."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`size <qiskit.dagcircuit.DAGCircuit.size>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.size:1
msgid "Return the number of operations."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`substitute_node_with_dag "
"<qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag>`\\ \\(node\\, "
"input\\_dag\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:1
msgid "Replace one node with dag."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`successors <qiskit.dagcircuit.DAGCircuit.successors>`\\ \\(node\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.successors:1
msgid "Returns list of the successors of a node as DAGNodes."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`threeQ_or_more_gates "
"<qiskit.dagcircuit.DAGCircuit.threeQ_or_more_gates>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.threeQ_or_more_gates:1
msgid "Get list of 3-or-more-qubit gates: (id, data)."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`to_networkx <qiskit.dagcircuit.DAGCircuit.to_networkx>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.to_networkx:1
msgid "Returns a copy of the DAGCircuit in networkx format."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`topological_nodes "
"<qiskit.dagcircuit.DAGCircuit.topological_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.topological_nodes:1
msgid "Yield nodes in topological order."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ""
":obj:`topological_op_nodes "
"<qiskit.dagcircuit.DAGCircuit.topological_op_nodes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.topological_op_nodes:1
msgid "Yield op nodes in topological order."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`twoQ_gates <qiskit.dagcircuit.DAGCircuit.twoQ_gates>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid "Get list of 2-qubit gates."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1
msgid ":obj:`width <qiskit.dagcircuit.DAGCircuit.width>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuit.rst:75:<autosummary>:1 of
#: qiskit.dagcircuit.DAGCircuit.width:1
msgid "Return the total number of qubits used by the circuit."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.multi_graph:1
msgid "Deprecated. Returns internal multi_graph."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:3
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:3
msgid "the operation associated with the DAG node"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:5
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:5
msgid "qubits that op will be applied to"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:7
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:7
msgid "cbits that op will be applied to"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:9
msgid "optional condition (ClassicalRegister, int)"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:12
#: qiskit.dagcircuit.DAGCircuit.apply_operation_front:12
msgid "the current max node"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_back:15
msgid "if a leaf node is connected to multiple outputs"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_front:9
msgid "optional condition (ClassicalRegister, value)"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.apply_operation_front:15
msgid "if initial nodes connected to multiple out edges"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.collect_runs:3
msgid ""
"For example, \"... h q[0]; cx q[0],q[1]; cx q[0],q[1]; h q[1]; ..\" would"
" produce the tuple of cx nodes as an element of the set returned from a "
"call to collect_runs([\"cx\"]). If instead the cx nodes were \"cx "
"q[0],q[1]; cx q[1],q[0];\", the method would still return the pair in a "
"tuple. The namelist can contain names that are not in the circuit's "
"basis."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.collect_runs:10
msgid "Nodes must have only one successor to continue the run."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:3
msgid ""
"The two bases must be \"compatible\" or an exception occurs. A subset of "
"input qubits of the input circuit are mapped to a subset of output qubits"
" of this circuit."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:7
#: qiskit.dagcircuit.DAGCircuit.compose_front:7
msgid "circuit to append"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:9
#: qiskit.dagcircuit.DAGCircuit.compose_front:9
msgid ""
"map {(Register, int): (Register, int)} from the output wires of "
"input_circuit to input wires of self."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_back:14
msgid "if missing, duplicate or incosistent wire"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_front:3
msgid ""
"The two bases must be \"compatible\" or an exception occurs. A subset of "
"output qubits of the input circuit are mapped to a subset of input qubits"
" of this circuit."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.compose_front:14
msgid "missing, duplicate or inconsistent wire"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.count_ops:3
msgid "Returns a dictionary of counts keyed on the operation name."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.depth:1
msgid "Return the circuit depth. :returns: the circuit depth :rtype: int"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.depth:5
msgid "if not a directed acyclic graph"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.edges qiskit.dagcircuit.DAGCircuit.nodes
#: qiskit.dagcircuit.DAGCircuit.nodes_on_wire
msgid "列挙"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.edges:3 qiskit.dagcircuit.DAGCircuit.nodes:3
msgid "*node* -- the node."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.gate_nodes:3
msgid "the list of node ids that represent gates."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.get_2q_nodes:1
msgid "Deprecated. Use twoQ_gates()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.get_3q_or_more_nodes:1
msgid "Deprecated. Use threeQ_or_more_gates()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.get_bits:1
msgid "Deprecated. Use clbits()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.get_gate_nodes:1
msgid "Deprecated. Use gate_nodes()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.get_named_nodes:1
msgid "Deprecated. Use named_nodes()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.get_op_nodes:1
msgid "Deprecated. Use op_nodes()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.get_qubits:1
msgid "Deprecated. Use qubits()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.layers:3
msgid ""
"A layer is a circuit whose gates act on disjoint qubits, i.e. a layer has"
" depth 1. The total number of layers equals the circuit depth d. The "
"layers are indexed from 0 to d-1 with the earliest layer at index 0. The "
"layers are constructed using a greedy algorithm. Each returned layer is a"
" dict containing {\"graph\": circuit graph, \"partition\": list of qubit "
"lists}."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.layers:10
msgid ""
"TODO: Gates that use the same cbits will end up in different layers as "
"this is currently implemented. This may not be the desired behavior."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.node:3
msgid "Node identifier."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.node:6
msgid "the node."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:3
msgid "the wire to be looked at."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:5
msgid "True if only the ops nodes are wanted otherwise all nodes are returned."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:9
msgid "*DAGNode* -- the successive ops on the given wire"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.nodes_on_wire:11
msgid "if the given wire doesn't exist in the DAG"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.op_nodes:3
msgid "Instruction subclass op nodes to return. if op=None, return all op nodes."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.op_nodes:7
msgid "the list of node ids containing the given op."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.qasm:1
msgid ""
"Deprecated. use qiskit.converters.dag_to_circuit() then call qasm() on "
"the obtained QuantumCircuit instance."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.remove_op_node:3
msgid "Add edges from predecessors to successors."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.rename_register:3
msgid ""
"regname = existing register name string newname = replacement register "
"name string"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.serial_layers:3
msgid ""
"A serial layer is a circuit with one gate. The layers have the same "
"structure as in layers()."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:3
msgid "node to substitute"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:5
msgid "circuit that will substitute the node"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:7
msgid ""
"gives an order for (qu)bits in the input circuit. This order gets matched"
" to the node wires by qargs first, then cargs, then conditions."
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.substitute_node_with_dag:12
msgid "if met with unexpected predecessor/successors"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.topological_nodes:3
msgid "node in topological order"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.topological_op_nodes:3
msgid "op node in topological order"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuit.twoQ_gates:1
msgid "Get list of 2-qubit gates. Ignore snapshot, barriers, and the like."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGCircuitError.rst:2
msgid "DAGCircuitError"
msgstr ""

#: of qiskit.dagcircuit.DAGCircuitError:1
#: qiskit.dagcircuit.exceptions.DAGCircuitError:1
msgid "Base class for errors raised by the DAGCircuit object."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:2
msgid "DAGNode"
msgstr ""

#: of qiskit.dagcircuit.DAGNode:1
msgid "Object to represent the information at a node in the DAGCircuit"
msgstr ""

#: of qiskit.dagcircuit.DAGNode:3
msgid ""
"It is used as the return value from *_nodes() functions and can be "
"supplied to functions that take a node."
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1
msgid ":obj:`cargs <qiskit.dagcircuit.DAGNode.cargs>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.cargs:1
msgid ""
"Returns list of (ClassicalRegister, int) tuples where the int is the "
"index of the cbit else an empty list"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1
msgid ":obj:`condition <qiskit.dagcircuit.DAGNode.condition>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.condition:1
msgid ""
"Returns a tuple (ClassicalRegister, int) where the int is the value of "
"the condition else None"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1
msgid ":obj:`name <qiskit.dagcircuit.DAGNode.name>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.name:1
msgid "Returns a str which is the name of the node else None"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1
msgid ":obj:`op <qiskit.dagcircuit.DAGNode.op>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.op:1
msgid ""
"Returns the Instruction object corresponding to the op for the node else "
"None"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1
msgid ":obj:`qargs <qiskit.dagcircuit.DAGNode.qargs>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.qargs:1
msgid ""
"Returns list of (QuantumRegister, int) tuples where the int is the index "
"of the qubit else an empty list"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1
msgid ":obj:`type <qiskit.dagcircuit.DAGNode.type>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.type:1
msgid "Returns a str which is the type of the node else None"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1
msgid ":obj:`wire <qiskit.dagcircuit.DAGNode.wire>`\\"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:20:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.wire:1
msgid ""
"Returns (Register, int) tuple where the int is the index of the wire else"
" None"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:27:<autosummary>:1
msgid ":obj:`pop <qiskit.dagcircuit.DAGNode.pop>`\\ \\(val\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:27:<autosummary>:1 of
#: qiskit.dagcircuit.DAGNode.pop:1
msgid "Remove the provided value from the dictionary"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:27:<autosummary>:1
msgid ""
":obj:`semantic_eq <qiskit.dagcircuit.DAGNode.semantic_eq>`\\ \\(node1\\, "
"node2\\)"
msgstr ""

#: ../../api/qiskit.dagcircuit.DAGNode.rst:27:<autosummary>:1
msgid "Check if DAG nodes are considered equivalent, e.g."
msgstr ""

#: of qiskit.dagcircuit.DAGNode.semantic_eq:1
msgid ""
"Check if DAG nodes are considered equivalent, e.g. as a node_match for "
"nx.is_isomorphic."
msgstr ""

#: of qiskit.dagcircuit.DAGNode.semantic_eq:3
msgid "A node to compare."
msgstr ""

#: of qiskit.dagcircuit.DAGNode.semantic_eq:5
msgid "The other node to compare."
msgstr ""

#: of qiskit.dagcircuit.DAGNode.semantic_eq:8
msgid "If node1 == node2"
msgstr ""

#: ../../api/qiskit.dagcircuit.exceptions.rst:2
msgid "qiskit.dagcircuit.exceptions module"
msgstr ""

#: of qiskit.dagcircuit.exceptions:1
msgid "Exception for errors raised by the DAGCircuit object."
msgstr ""

#: of qiskit.dagcircuit.exceptions.DAGCircuitError:1
#: qiskit.exceptions.QiskitUserConfigError:1
#: qiskit.extensions.exceptions.ExtensionError:1
#: qiskit.mapper.exceptions.CouplingError:1
#: qiskit.mapper.exceptions.LayoutError:1
#: qiskit.providers.aer.noise.noiseerror.NoiseError:1
#: qiskit.providers.basicaer.exceptions.BasicAerError:1
#: qiskit.providers.exceptions.JobError:1
#: qiskit.providers.exceptions.QiskitBackendNotFoundError:1
#: qiskit.providers.ibmq.exceptions.IBMQError:1
#: qiskit.pulse.exceptions.PulseError:1 qiskit.qasm.exceptions.QasmError:1
#: qiskit.result.exceptions.ResultError:1
#: qiskit.transpiler.exceptions.CouplingError:1
#: qiskit.transpiler.exceptions.LayoutError:1
#: qiskit.transpiler.exceptions.TranspilerAccessError:1
#: qiskit.transpiler.exceptions.TranspilerError:1
#: qiskit.validation.jsonschema.exceptions.SchemaValidationError:1
#: qiskit.visualization.exceptions.VisualizationError:1
msgid "ベースクラス: :class:`qiskit.exceptions.QiskitError`"
msgstr ""

#: ../../api/qiskit.exceptions.rst:2
msgid "qiskit.exceptions module"
msgstr ""

#: of qiskit.exceptions:1
msgid "Exceptions for errors raised by Qiskit."
msgstr ""

#: of qiskit.exceptions.QiskitError:1
msgid "Base class for errors raised by Qiskit."
msgstr ""

#: of qiskit.exceptions.QiskitIndexError:1
msgid "ベースクラス: :class:`qiskit.exceptions.QiskitError`, :class:`IndexError`"
msgstr ""

#: of qiskit.exceptions.QiskitIndexError:1
#: qiskit.validation.ModelValidationError:1
#: qiskit.validation.exceptions.ModelValidationError:1
msgid "Raised when a sequence subscript is out of range."
msgstr ""

#: of qiskit.exceptions.QiskitUserConfigError:1
msgid "Raised when an error is encountered reading a user config file."
msgstr ""

#: ../../api/qiskit.execute.rst:2
msgid "qiskit.execute module"
msgstr ""

#: of qiskit.execute:3
msgid ""
"In general we recommend using the SDK modules directly. However, to get "
"something running quickly we have provided this wrapper module."
msgstr ""

#: of qiskit.execute.execute:1
msgid "Execute a list of circuits or pulse schedules on a backend."
msgstr ""

#: of qiskit.execute.execute:3
msgid "The execution is asynchronous, and a handle to a job instance is returned."
msgstr ""

#: of qiskit.execute.execute:7
msgid ""
"Backend to execute circuits on. Transpiler options are automatically "
"grabbed from backend.configuration() and backend.properties(). If any "
"other option is explicitly set (e.g. coupling_map), it will override the "
"backend's."
msgstr ""

#: of qiskit.execute.execute:28
msgid ""
"Properties returned by a backend, including information on gate errors, "
"readout errors, qubit coherence times, etc. For a backend that provides "
"this information, it can be obtained with: ``backend.properties()``"
msgstr ""

#: of qiskit.execute.execute:60
msgid "Sets random seed for the stochastic parts of the transpiler"
msgstr ""

#: of qiskit.execute.execute:62
msgid ""
"How much optimization to perform on the circuits. Higher levels generate "
"more optimized circuits, at the expense of longer transpilation time."
"     0: no optimization     1: light optimization     2: heavy "
"optimization"
msgstr ""

#: of qiskit.execute.execute:65
msgid "0: no optimization 1: light optimization 2: heavy optimization"
msgstr ""

#: of qiskit.execute.execute:69
msgid ""
"The pass manager to use during transpilation. If this arg is present, "
"auto-selection of pass manager based on the transpile options will be "
"turned off and this pass manager will be used directly."
msgstr ""

#: of qiskit.execute.execute:122
msgid "DEPRECATED in 0.8: use ``experiments`` kwarg instead."
msgstr ""

#: of qiskit.execute.execute:124
msgid ""
"Extra arguments used to configure the run (e.g. for Aer configurable "
"backends) Refer to the backend documentation for details on these "
"arguments Note: for now, these keyword arguments will both be copied to "
"the Qobj config, and passed to backend.run()"
msgstr ""

#: of qiskit.execute.execute:130
msgid "returns job instance derived from BaseJob"
msgstr ""

#: of qiskit.execute.execute:133
msgid "if the execution cannot be interpreted as either circuits or schedules"
msgstr ""

#: ../../api/qiskit.extensions.rst:2
msgid "qiskit.extensions package"
msgstr ""

#: of qiskit.extensions:1
msgid "Extensions to quantum circuits."
msgstr ""

#: ../../api/qiskit.extensions.Barrier.rst:2
#: ../../api/qiskit.extensions.standard.Barrier.rst:2
msgid "Barrier"
msgstr ""

#: of qiskit.extensions.Barrier:1 qiskit.extensions.standard.Barrier:1
msgid "Barrier instruction."
msgstr ""

#: ../../api/qiskit.extensions.Barrier.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.Barrier.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.Barrier.rst:14:<autosummary>:1
#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
msgid "Special case."
msgstr ""

#: of qiskit.extensions.Barrier.inverse:1
#: qiskit.extensions.simulator.Snapshot.inverse:1
#: qiskit.extensions.standard.Barrier.inverse:1
msgid "Special case. Return self."
msgstr ""

#: ../../api/qiskit.extensions.CHGate.rst:2
#: ../../api/qiskit.extensions.standard.CHGate.rst:2
msgid "CHGate"
msgstr ""

#: of qiskit.extensions.CHGate:1 qiskit.extensions.standard.CHGate:1
#: qiskit.extensions.standard.ch:1 qiskit.extensions.standard.ch.CHGate:1
msgid "controlled-H gate."
msgstr ""

#: ../../api/qiskit.extensions.CHGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.CHGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CXBase.rst:2
#: ../../api/qiskit.extensions.standard.CXBase.rst:2
msgid "CXBase"
msgstr ""

#: of qiskit.extensions.CXBase:1 qiskit.extensions.standard.CXBase:1
msgid "Fundamental controlled-NOT gate."
msgstr ""

#: ../../api/qiskit.extensions.CXBase.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.CXBase.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CnotGate.rst:2
#: ../../api/qiskit.extensions.standard.CnotGate.rst:2
msgid "CnotGate"
msgstr ""

#: of qiskit.extensions.CnotGate:1 qiskit.extensions.standard.CnotGate:1
#: qiskit.extensions.standard.cx:1 qiskit.extensions.standard.cx.CnotGate:1
msgid "controlled-NOT gate."
msgstr ""

#: ../../api/qiskit.extensions.CnotGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.CnotGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CnotGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.CnotGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CnotGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.CnotGate.to_matrix:1
#: qiskit.extensions.standard.CnotGate.to_matrix:1
#: qiskit.extensions.standard.cx.CnotGate.to_matrix:1
msgid "Return a Numpy.array for the Cx gate."
msgstr ""

#: ../../api/qiskit.extensions.CrzGate.rst:2
#: ../../api/qiskit.extensions.standard.CrzGate.rst:2
msgid "CrzGate"
msgstr ""

#: of qiskit.extensions.CrzGate:1 qiskit.extensions.standard.CrzGate:1
#: qiskit.extensions.standard.crz:1 qiskit.extensions.standard.crz.CrzGate:1
msgid "controlled-rz gate."
msgstr ""

#: ../../api/qiskit.extensions.CrzGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.CrzGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.Cu1Gate.rst:2
#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:2
msgid "Cu1Gate"
msgstr ""

#: of qiskit.extensions.Cu1Gate:1 qiskit.extensions.standard.Cu1Gate:1
#: qiskit.extensions.standard.cu1:1 qiskit.extensions.standard.cu1.Cu1Gate:1
msgid "controlled-u1 gate."
msgstr ""

#: ../../api/qiskit.extensions.Cu1Gate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.Cu1Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.Cu3Gate.rst:2
#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:2
msgid "Cu3Gate"
msgstr ""

#: of qiskit.extensions.Cu3Gate:1 qiskit.extensions.standard.Cu3Gate:1
#: qiskit.extensions.standard.cu3:1 qiskit.extensions.standard.cu3.Cu3Gate:1
msgid "controlled-u3 gate."
msgstr ""

#: ../../api/qiskit.extensions.Cu3Gate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.Cu3Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CyGate.rst:2
#: ../../api/qiskit.extensions.standard.CyGate.rst:2
msgid "CyGate"
msgstr ""

#: of qiskit.extensions.CyGate:1 qiskit.extensions.standard.CyGate:1
#: qiskit.extensions.standard.cy:1 qiskit.extensions.standard.cy.CyGate:1
msgid "controlled-Y gate."
msgstr ""

#: ../../api/qiskit.extensions.CyGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.CyGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CzGate.rst:2
#: ../../api/qiskit.extensions.standard.CzGate.rst:2
msgid "CzGate"
msgstr ""

#: of qiskit.extensions.CzGate:1 qiskit.extensions.standard.CzGate:1
#: qiskit.extensions.standard.cz.CzGate:1
msgid "controlled-Z gate."
msgstr ""

#: ../../api/qiskit.extensions.CzGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.CzGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CzGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.CzGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.CzGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.CzGate.to_matrix:1
#: qiskit.extensions.standard.CzGate.to_matrix:1
#: qiskit.extensions.standard.cz.CzGate.to_matrix:1
msgid "Return a Numpy.array for the Cz gate."
msgstr ""

#: ../../api/qiskit.extensions.FredkinGate.rst:2
#: ../../api/qiskit.extensions.standard.FredkinGate.rst:2
msgid "FredkinGate"
msgstr ""

#: of qiskit.extensions.FredkinGate:1 qiskit.extensions.standard.FredkinGate:1
#: qiskit.extensions.standard.cswap.FredkinGate:1
msgid "Fredkin gate."
msgstr ""

#: ../../api/qiskit.extensions.FredkinGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.FredkinGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.HGate.rst:2
#: ../../api/qiskit.extensions.standard.HGate.rst:2
msgid "HGate"
msgstr ""

#: of qiskit.extensions.HGate:1 qiskit.extensions.standard.HGate:1
#: qiskit.extensions.standard.h:1 qiskit.extensions.standard.h.HGate:1
msgid "Hadamard gate."
msgstr ""

#: ../../api/qiskit.extensions.HGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.HGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.HGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.HGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.HGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.HGate.to_matrix:1
#: qiskit.extensions.standard.HGate.to_matrix:1
#: qiskit.extensions.standard.h.HGate.to_matrix:1
msgid "Return a Numpy.array for the H gate."
msgstr ""

#: ../../api/qiskit.extensions.IdGate.rst:2
#: ../../api/qiskit.extensions.standard.IdGate.rst:2
msgid "IdGate"
msgstr ""

#: of qiskit.extensions.IdGate:1 qiskit.extensions.standard.IdGate:1
#: qiskit.extensions.standard.iden:1 qiskit.extensions.standard.iden.IdGate:1
msgid "Identity gate."
msgstr ""

#: ../../api/qiskit.extensions.IdGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.IdGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.IdGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.IdGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.IdGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.U0Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1 of
#: qiskit.extensions.IdGate.to_matrix:1 qiskit.extensions.U0Gate.to_matrix:1
#: qiskit.extensions.standard.IdGate.to_matrix:1
#: qiskit.extensions.standard.U0Gate.to_matrix:1
#: qiskit.extensions.standard.iden.IdGate.to_matrix:1
#: qiskit.extensions.standard.u0.U0Gate.to_matrix:1
msgid "Return a Numpy.array for the Id gate."
msgstr ""

#: ../../api/qiskit.extensions.Initialize.rst:2
msgid "Initialize"
msgstr ""

#: of qiskit.extensions.Initialize:1 qiskit.extensions.initializer.Initialize:1
msgid "Complex amplitude initialization."
msgstr ""

#: of qiskit.extensions.Initialize:3 qiskit.extensions.initializer.Initialize:3
msgid ""
"Class that implements the (complex amplitude) initialization of some "
"flexible collection of qubit registers (assuming the qubits are in the "
"zero state)."
msgstr ""

#: ../../api/qiskit.extensions.Initialize.rst:14:<autosummary>:1
msgid ""
":obj:`gates_to_uncompute "
"<qiskit.extensions.Initialize.gates_to_uncompute>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.Initialize.rst:14:<autosummary>:1 of
#: qiskit.extensions.Initialize.gates_to_uncompute:1
#: qiskit.extensions.initializer.Initialize.gates_to_uncompute:1
msgid "Call to create a circuit with gates that take the desired vector to zero."
msgstr ""

#: of qiskit.extensions.Initialize.gates_to_uncompute:4
#: qiskit.extensions.initializer.Initialize.gates_to_uncompute:4
msgid "circuit to take self.params vector to |00..0>"
msgstr ""

#: ../../api/qiskit.extensions.RXGate.rst:2
#: ../../api/qiskit.extensions.standard.RXGate.rst:2
msgid "RXGate"
msgstr ""

#: of qiskit.extensions.RXGate:1 qiskit.extensions.standard.RXGate:1
#: qiskit.extensions.standard.rx.RXGate:1
msgid "rotation around the x-axis."
msgstr ""

#: ../../api/qiskit.extensions.RXGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.RXGate.inverse>`\\ \\(\\)"
msgstr ""

#: of qiskit.extensions.RXGate.inverse:3
#: qiskit.extensions.standard.RXGate.inverse:3
#: qiskit.extensions.standard.rx.RXGate.inverse:3
msgid "rx(theta)^dagger = rx(-theta)"
msgstr ""

#: ../../api/qiskit.extensions.RYGate.rst:2
#: ../../api/qiskit.extensions.standard.RYGate.rst:2
msgid "RYGate"
msgstr ""

#: of qiskit.extensions.RYGate:1 qiskit.extensions.standard.RYGate:1
#: qiskit.extensions.standard.ry.RYGate:1
msgid "rotation around the y-axis."
msgstr ""

#: ../../api/qiskit.extensions.RYGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.RYGate.inverse>`\\ \\(\\)"
msgstr ""

#: of qiskit.extensions.RYGate.inverse:3
#: qiskit.extensions.standard.RYGate.inverse:3
#: qiskit.extensions.standard.ry.RYGate.inverse:3
msgid "ry(theta)^dagger = ry(-theta)"
msgstr ""

#: ../../api/qiskit.extensions.RZGate.rst:2
#: ../../api/qiskit.extensions.standard.RZGate.rst:2
msgid "RZGate"
msgstr ""

#: of qiskit.extensions.RZGate:1 qiskit.extensions.standard.RZGate:1
#: qiskit.extensions.standard.rz.RZGate:1
msgid "rotation around the z-axis."
msgstr ""

#: ../../api/qiskit.extensions.RZGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.RZGate.inverse>`\\ \\(\\)"
msgstr ""

#: of qiskit.extensions.RZGate.inverse:3
#: qiskit.extensions.standard.RZGate.inverse:3
#: qiskit.extensions.standard.rz.RZGate.inverse:3
msgid "rz(phi)^dagger = rz(-phi)"
msgstr ""

#: ../../api/qiskit.extensions.RZZGate.rst:2
#: ../../api/qiskit.extensions.standard.RZZGate.rst:2
msgid "RZZGate"
msgstr ""

#: of qiskit.extensions.RZZGate:1 qiskit.extensions.standard.RZZGate:1
#: qiskit.extensions.standard.rzz.RZZGate:1
msgid "Two-qubit ZZ-rotation gate."
msgstr ""

#: ../../api/qiskit.extensions.RZZGate.rst:14:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.RZZGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.SGate.rst:2
#: ../../api/qiskit.extensions.standard.SGate.rst:2
msgid "SGate"
msgstr ""

#: of qiskit.extensions.SGate:1 qiskit.extensions.standard.SGate:1
#: qiskit.extensions.standard.s.SGate:1
msgid "S=diag(1,i) Clifford phase gate."
msgstr ""

#: ../../api/qiskit.extensions.SGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.SGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.SGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.SGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.SGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.TGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.TdgGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.SGate.to_matrix:1 qiskit.extensions.TGate.to_matrix:1
#: qiskit.extensions.TdgGate.to_matrix:1
#: qiskit.extensions.standard.SGate.to_matrix:1
#: qiskit.extensions.standard.TGate.to_matrix:1
#: qiskit.extensions.standard.TdgGate.to_matrix:1
#: qiskit.extensions.standard.s.SGate.to_matrix:1
#: qiskit.extensions.standard.t.TGate.to_matrix:1
#: qiskit.extensions.standard.t.TdgGate.to_matrix:1
msgid "Return a Numpy.array for the S gate."
msgstr ""

#: ../../api/qiskit.extensions.SdgGate.rst:2
#: ../../api/qiskit.extensions.standard.SdgGate.rst:2
msgid "SdgGate"
msgstr ""

#: of qiskit.extensions.SdgGate:1 qiskit.extensions.standard.SdgGate:1
#: qiskit.extensions.standard.s.SdgGate:1
msgid "Sdg=diag(1,-i) Clifford adjoint phase gate."
msgstr ""

#: ../../api/qiskit.extensions.SdgGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.SdgGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.SdgGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.SdgGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.SdgGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.SdgGate.to_matrix:1
#: qiskit.extensions.standard.SdgGate.to_matrix:1
#: qiskit.extensions.standard.s.SdgGate.to_matrix:1
msgid "Return a Numpy.array for the Sdg gate."
msgstr ""

#: ../../api/qiskit.extensions.SwapGate.rst:2
#: ../../api/qiskit.extensions.standard.SwapGate.rst:2
msgid "SwapGate"
msgstr ""

#: of qiskit.extensions.SwapGate:1 qiskit.extensions.standard.SwapGate:1
#: qiskit.extensions.standard.swap:1 qiskit.extensions.standard.swap.SwapGate:1
msgid "SWAP gate."
msgstr ""

#: ../../api/qiskit.extensions.SwapGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.SwapGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.SwapGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.SwapGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.SwapGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.SwapGate.to_matrix:1
#: qiskit.extensions.standard.SwapGate.to_matrix:1
#: qiskit.extensions.standard.swap.SwapGate.to_matrix:1
msgid "Return a Numpy.array for the Swap gate."
msgstr ""

#: ../../api/qiskit.extensions.TGate.rst:2
#: ../../api/qiskit.extensions.standard.TGate.rst:2
msgid "TGate"
msgstr ""

#: of qiskit.extensions.TGate:1 qiskit.extensions.standard.TGate:1
#: qiskit.extensions.standard.t.TGate:1
msgid "T Gate: pi/4 rotation around Z axis."
msgstr ""

#: ../../api/qiskit.extensions.TGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.TGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.TGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.TGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.TdgGate.rst:2
#: ../../api/qiskit.extensions.standard.TdgGate.rst:2
msgid "TdgGate"
msgstr ""

#: of qiskit.extensions.TdgGate:1 qiskit.extensions.standard.TdgGate:1
#: qiskit.extensions.standard.t.TdgGate:1
msgid "T Gate: -pi/4 rotation around Z axis."
msgstr ""

#: ../../api/qiskit.extensions.TdgGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.TdgGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.TdgGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.TdgGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.ToffoliGate.rst:2
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:2
msgid "ToffoliGate"
msgstr ""

#: of qiskit.extensions.ToffoliGate:1 qiskit.extensions.standard.ToffoliGate:1
#: qiskit.extensions.standard.ccx.ToffoliGate:1
msgid "Toffoli gate."
msgstr ""

#: ../../api/qiskit.extensions.ToffoliGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.ToffoliGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.ToffoliGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.ToffoliGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.ToffoliGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.ToffoliGate.to_matrix:1
#: qiskit.extensions.standard.ToffoliGate.to_matrix:1
#: qiskit.extensions.standard.ccx.ToffoliGate.to_matrix:1
msgid "Return a Numpy.array for the Toffoli gate."
msgstr ""

#: ../../api/qiskit.extensions.U0Gate.rst:2
#: ../../api/qiskit.extensions.standard.U0Gate.rst:2
msgid "U0Gate"
msgstr ""

#: of qiskit.extensions.U0Gate:1 qiskit.extensions.standard.U0Gate:1
#: qiskit.extensions.standard.u0.U0Gate:1
msgid "Wait gate."
msgstr ""

#: ../../api/qiskit.extensions.U0Gate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.U0Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.U0Gate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.U0Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.U1Gate.rst:2
#: ../../api/qiskit.extensions.standard.U1Gate.rst:2
msgid "U1Gate"
msgstr ""

#: of qiskit.extensions.U1Gate:1 qiskit.extensions.standard.U1Gate:1
#: qiskit.extensions.standard.u1.U1Gate:1
msgid "Diagonal single-qubit gate."
msgstr ""

#: ../../api/qiskit.extensions.U1Gate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.U1Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.U1Gate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.U1Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.U1Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.U2Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.U3Gate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.UBase.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1 of
#: qiskit.extensions.U1Gate.to_matrix:1 qiskit.extensions.U2Gate.to_matrix:1
#: qiskit.extensions.U3Gate.to_matrix:1 qiskit.extensions.UBase.to_matrix:1
#: qiskit.extensions.standard.U1Gate.to_matrix:1
#: qiskit.extensions.standard.U2Gate.to_matrix:1
#: qiskit.extensions.standard.U3Gate.to_matrix:1
#: qiskit.extensions.standard.UBase.to_matrix:1
#: qiskit.extensions.standard.u1.U1Gate.to_matrix:1
#: qiskit.extensions.standard.u2.U2Gate.to_matrix:1
#: qiskit.extensions.standard.u3.U3Gate.to_matrix:1
msgid "Return a Numpy.array for the U3 gate."
msgstr ""

#: ../../api/qiskit.extensions.U2Gate.rst:2
#: ../../api/qiskit.extensions.standard.U2Gate.rst:2
msgid "U2Gate"
msgstr ""

#: of qiskit.extensions.U2Gate:1 qiskit.extensions.standard.U2Gate:1
#: qiskit.extensions.standard.u2:1 qiskit.extensions.standard.u2.U2Gate:1
msgid "One-pulse single-qubit gate."
msgstr ""

#: ../../api/qiskit.extensions.U2Gate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.U2Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.U2Gate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.U2Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: of qiskit.extensions.U2Gate.inverse:3
#: qiskit.extensions.standard.U2Gate.inverse:3
#: qiskit.extensions.standard.u2.U2Gate.inverse:3
msgid "u2(phi,lamb)^dagger = u2(-lamb-pi,-phi+pi)"
msgstr ""

#: ../../api/qiskit.extensions.U3Gate.rst:2
#: ../../api/qiskit.extensions.standard.U3Gate.rst:2
msgid "U3Gate"
msgstr ""

#: of qiskit.extensions.U3Gate:1 qiskit.extensions.standard.U3Gate:1
#: qiskit.extensions.standard.u3:1 qiskit.extensions.standard.u3.U3Gate:1
msgid "Two-pulse single-qubit gate."
msgstr ""

#: ../../api/qiskit.extensions.U3Gate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.U3Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.U3Gate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.U3Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: of qiskit.extensions.U3Gate.inverse:3
#: qiskit.extensions.standard.U3Gate.inverse:3
#: qiskit.extensions.standard.u3.U3Gate.inverse:3
msgid "u3(theta, phi, lamb)^dagger = u3(-theta, -lam, -phi)"
msgstr ""

#: ../../api/qiskit.extensions.UBase.rst:2
#: ../../api/qiskit.extensions.standard.UBase.rst:2
msgid "UBase"
msgstr ""

#: of qiskit.extensions.UBase:1 qiskit.extensions.standard.UBase:1
msgid "Element of SU(2)."
msgstr ""

#: ../../api/qiskit.extensions.UBase.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.UBase.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.UBase.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.UBase.to_matrix>`\\ \\(\\)"
msgstr ""

#: of qiskit.extensions.UBase.inverse:3
#: qiskit.extensions.standard.UBase.inverse:3
msgid "U(theta,phi,lambda)^dagger = U(-theta,-lambda,-phi)"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:2
msgid "UnitaryGate"
msgstr ""

#: of qiskit.extensions.UnitaryGate:1 qiskit.extensions.unitary.UnitaryGate:1
msgid "Class for representing unitary gates"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1
msgid ":obj:`adjoint <qiskit.extensions.UnitaryGate.adjoint>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1 of
#: qiskit.extensions.UnitaryGate.adjoint:1
#: qiskit.extensions.unitary.UnitaryGate.adjoint:1
msgid "Return the adjoint of the unitary."
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1
msgid ":obj:`conjugate <qiskit.extensions.UnitaryGate.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1 of
#: qiskit.extensions.UnitaryGate.conjugate:1
#: qiskit.extensions.unitary.UnitaryGate.conjugate:1
msgid "Return the conjugate of the Unitary."
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.UnitaryGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1 of
#: qiskit.extensions.UnitaryGate.inverse:1
#: qiskit.extensions.unitary.UnitaryGate.inverse:1
msgid "Return the adjoint of the Unitary."
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.UnitaryGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1 of
#: qiskit.extensions.UnitaryGate.to_matrix:1
#: qiskit.extensions.unitary.UnitaryGate.to_matrix:1
msgid "Return matrix for unitary"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1
msgid ":obj:`transpose <qiskit.extensions.UnitaryGate.transpose>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.UnitaryGate.rst:18:<autosummary>:1 of
#: qiskit.extensions.UnitaryGate.transpose:1
#: qiskit.extensions.unitary.UnitaryGate.transpose:1
msgid "Return the transpose of the unitary."
msgstr ""

#: ../../api/qiskit.extensions.XGate.rst:2
#: ../../api/qiskit.extensions.standard.XGate.rst:2
msgid "XGate"
msgstr ""

#: of qiskit.extensions.XGate:1 qiskit.extensions.standard.XGate:1
#: qiskit.extensions.standard.x:1 qiskit.extensions.standard.x.XGate:1
msgid "Pauli X (bit-flip) gate."
msgstr ""

#: ../../api/qiskit.extensions.XGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.XGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.XGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.XGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.XGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.ZGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.XGate.to_matrix:1 qiskit.extensions.ZGate.to_matrix:1
#: qiskit.extensions.standard.XGate.to_matrix:1
#: qiskit.extensions.standard.ZGate.to_matrix:1
#: qiskit.extensions.standard.x.XGate.to_matrix:1
#: qiskit.extensions.standard.z.ZGate.to_matrix:1
msgid "Return a Numpy.array for the X gate."
msgstr ""

#: ../../api/qiskit.extensions.YGate.rst:2
#: ../../api/qiskit.extensions.standard.YGate.rst:2
msgid "YGate"
msgstr ""

#: of qiskit.extensions.YGate:1 qiskit.extensions.standard.YGate:1
#: qiskit.extensions.standard.y:1 qiskit.extensions.standard.y.YGate:1
msgid "Pauli Y (bit-phase-flip) gate."
msgstr ""

#: ../../api/qiskit.extensions.YGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.YGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.YGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.YGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.YGate.rst:15:<autosummary>:1
#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1 of
#: qiskit.extensions.YGate.to_matrix:1
#: qiskit.extensions.standard.YGate.to_matrix:1
#: qiskit.extensions.standard.y.YGate.to_matrix:1
msgid "Return a Numpy.array for the Y gate."
msgstr ""

#: ../../api/qiskit.extensions.ZGate.rst:2
#: ../../api/qiskit.extensions.standard.ZGate.rst:2
msgid "ZGate"
msgstr ""

#: of qiskit.extensions.ZGate:1 qiskit.extensions.standard.ZGate:1
#: qiskit.extensions.standard.z:1 qiskit.extensions.standard.z.ZGate:1
msgid "Pauli Z (phase-flip) gate."
msgstr ""

#: ../../api/qiskit.extensions.ZGate.rst:15:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.ZGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.ZGate.rst:15:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.ZGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.exceptions.rst:2
msgid "qiskit.extensions.exceptions module"
msgstr ""

#: of qiskit.extensions.exceptions:1
msgid "Exception for errors raised by extensions module."
msgstr ""

#: of qiskit.extensions.exceptions.ExtensionError:1
msgid "Base class for errors raised by extensions module."
msgstr ""

#: ../../api/qiskit.extensions.initializer.rst:2
msgid "qiskit.extensions.initializer module"
msgstr ""

#: of qiskit.extensions.initializer:1
msgid "Initialize qubit registers to desired arbitrary state."
msgstr ""

#: ../../api/qiskit.extensions.simulator.rst:2
msgid "qiskit.extensions.simulator package"
msgstr ""

#: of qiskit.extensions.simulator:1
msgid "Instructions usable by simulator backends."
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:2
#: ../../api/qiskit.pulse.Snapshot.rst:2
msgid "Snapshot"
msgstr ""

#: of qiskit.extensions.simulator.Snapshot:1
msgid "Simulator snapshot instruction."
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.simulator.Snapshot.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.simulator.Snapshot.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1 of
#: qiskit.extensions.simulator.Snapshot.label:1
msgid "Return snapshot label"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.simulator.Snapshot.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1
msgid ""
":obj:`snapshot_type "
"<qiskit.extensions.simulator.Snapshot.snapshot_type>`\\"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:17:<autosummary>:1 of
#: qiskit.extensions.simulator.Snapshot.snapshot_type:1
msgid "Return snapshot type"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.simulator.Snapshot.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.simulator.Snapshot.c_if>`\\ \\(classical\\,"
" val\\)"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.simulator.Snapshot.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.simulator.Snapshot.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.simulator.Snapshot.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.simulator.Snapshot.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.simulator.Snapshot.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.rst:2
msgid "qiskit.extensions.standard package"
msgstr ""

#: of qiskit.extensions.standard:1
msgid "Standard gates."
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:15:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.Barrier.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:15:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.Barrier.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.Barrier.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.Barrier.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.Barrier.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.Barrier.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.Barrier.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Barrier.rst:26:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.Barrier.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.CHGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.CHGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.CHGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.CHGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.CHGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.CHGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.CHGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.CHGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.CHGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CHGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.CHGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.CXBase.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.CXBase.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.CXBase.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.CXBase.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.CXBase.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.CXBase.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.CXBase.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.CXBase.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.CXBase.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CXBase.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.CXBase.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.CnotGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.CnotGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.CnotGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.CnotGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.CnotGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.CnotGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.CnotGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.CnotGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.CnotGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CnotGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.CnotGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.CrzGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.CrzGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.CrzGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.CrzGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.CrzGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.CrzGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.CrzGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.CrzGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.CrzGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CrzGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.CrzGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.Cu1Gate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.Cu1Gate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.Cu1Gate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.Cu1Gate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.Cu1Gate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.Cu1Gate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.Cu1Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.Cu1Gate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.Cu1Gate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu1Gate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.Cu1Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.Cu3Gate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.Cu3Gate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.Cu3Gate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.Cu3Gate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.Cu3Gate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.Cu3Gate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.Cu3Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.Cu3Gate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.Cu3Gate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.Cu3Gate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.Cu3Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.CyGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.CyGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.CyGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.CyGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.CyGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.CyGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.CyGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.CyGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.CyGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CyGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.CyGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.CzGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.CzGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.CzGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.CzGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.CzGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.CzGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.CzGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.CzGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.CzGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.CzGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.CzGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.FredkinGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.FredkinGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.FredkinGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.FredkinGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.FredkinGate.c_if>`\\ "
"\\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
msgid ""
":obj:`copy <qiskit.extensions.standard.FredkinGate.copy>`\\ "
"\\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.FredkinGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.FredkinGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.FredkinGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.FredkinGate.rst:28:<autosummary>:1
msgid ""
":obj:`to_matrix <qiskit.extensions.standard.FredkinGate.to_matrix>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.HGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.HGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.HGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.HGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.HGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.HGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.HGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.HGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.HGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.HGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.HGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.IdGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.IdGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.IdGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.IdGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.IdGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.IdGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.IdGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.IdGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.IdGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.IdGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.IdGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.RXGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.RXGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.RXGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.RXGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.RXGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.RXGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.RXGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.RXGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.RXGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RXGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.RXGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.RYGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.RYGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.RYGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.RYGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.RYGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.RYGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.RYGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.RYGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.RYGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RYGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.RYGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.RZGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.RZGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.RZGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.RZGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.RZGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.RZGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.RZGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.RZGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.RZGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.RZGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.RZZGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.RZZGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.RZZGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.RZZGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.RZZGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.RZZGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.RZZGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.RZZGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.RZZGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.RZZGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.RZZGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.SGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.SGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.SGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.SGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.SGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.SGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.SGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.SGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.SGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.SGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.SdgGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.SdgGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.SdgGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.SdgGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.SdgGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.SdgGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.SdgGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.SdgGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.SdgGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SdgGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.SdgGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.SwapGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.SwapGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.SwapGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.SwapGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.SwapGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.SwapGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.SwapGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.SwapGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.SwapGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.SwapGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.SwapGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.TGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.TGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.TGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.TGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.TGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.TGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.TGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.TGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.TGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.TGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.TdgGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.TdgGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.TdgGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.TdgGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.TdgGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.TdgGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.TdgGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.TdgGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.TdgGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.TdgGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.TdgGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.ToffoliGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.ToffoliGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.ToffoliGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.ToffoliGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.ToffoliGate.c_if>`\\ "
"\\(classical\\, val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
msgid ""
":obj:`copy <qiskit.extensions.standard.ToffoliGate.copy>`\\ "
"\\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.ToffoliGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.ToffoliGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.ToffoliGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ToffoliGate.rst:28:<autosummary>:1
msgid ""
":obj:`to_matrix <qiskit.extensions.standard.ToffoliGate.to_matrix>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.U0Gate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.U0Gate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.U0Gate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.U0Gate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.U0Gate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.U0Gate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.U0Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.U0Gate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.U0Gate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U0Gate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.U0Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.U1Gate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.U1Gate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.U1Gate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.U1Gate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.U1Gate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.U1Gate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.U1Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.U1Gate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.U1Gate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U1Gate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.U1Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.U2Gate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.U2Gate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.U2Gate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.U2Gate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.U2Gate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.U2Gate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.U2Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.U2Gate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.U2Gate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U2Gate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.U2Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.U3Gate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.U3Gate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.U3Gate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.U3Gate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.U3Gate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.U3Gate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.U3Gate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.U3Gate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.U3Gate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.U3Gate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.U3Gate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.UBase.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.UBase.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.UBase.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.UBase.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.UBase.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.UBase.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.UBase.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.UBase.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.UBase.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.UBase.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.UBase.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.XGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.XGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.XGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.XGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.XGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.XGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.XGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.XGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.XGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.XGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.XGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.YGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.YGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.YGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.YGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.YGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.YGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.YGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.YGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.YGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.YGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.YGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:16:<autosummary>:1
msgid ":obj:`definition <qiskit.extensions.standard.ZGate.definition>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:16:<autosummary>:1
msgid ":obj:`label <qiskit.extensions.standard.ZGate.label>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:16:<autosummary>:1
msgid ":obj:`params <qiskit.extensions.standard.ZGate.params>`\\"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1
msgid ":obj:`assemble <qiskit.extensions.standard.ZGate.assemble>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1
msgid ""
":obj:`c_if <qiskit.extensions.standard.ZGate.c_if>`\\ \\(classical\\, "
"val\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1
msgid ":obj:`copy <qiskit.extensions.standard.ZGate.copy>`\\ \\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1
msgid ":obj:`inverse <qiskit.extensions.standard.ZGate.inverse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1
msgid ":obj:`mirror <qiskit.extensions.standard.ZGate.mirror>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1
msgid ":obj:`qasm <qiskit.extensions.standard.ZGate.qasm>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ZGate.rst:28:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.extensions.standard.ZGate.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.extensions.standard.ccx.rst:2
msgid "qiskit.extensions.standard.ccx module"
msgstr ""

#: of qiskit.extensions.standard.ccx:1
msgid "Toffoli gate. Controlled-Controlled-X."
msgstr ""

#: ../../api/qiskit.extensions.standard.ch.rst:2
msgid "qiskit.extensions.standard.ch module"
msgstr ""

#: ../../api/qiskit.extensions.standard.crz.rst:2
msgid "qiskit.extensions.standard.crz module"
msgstr ""

#: ../../api/qiskit.extensions.standard.cswap.rst:2
msgid "qiskit.extensions.standard.cswap module"
msgstr ""

#: of qiskit.extensions.standard.cswap:1
msgid "Fredkin gate. Controlled-SWAP."
msgstr ""

#: ../../api/qiskit.extensions.standard.cu1.rst:2
msgid "qiskit.extensions.standard.cu1 module"
msgstr ""

#: ../../api/qiskit.extensions.standard.cu3.rst:2
msgid "qiskit.extensions.standard.cu3 module"
msgstr ""

#: ../../api/qiskit.extensions.standard.cx.rst:2
msgid "qiskit.extensions.standard.cx module"
msgstr ""

#: ../../api/qiskit.extensions.standard.cy.rst:2
msgid "qiskit.extensions.standard.cy module"
msgstr ""

#: ../../api/qiskit.extensions.standard.cz.rst:2
msgid "qiskit.extensions.standard.cz module"
msgstr ""

#: of qiskit.extensions.standard.cz:1
msgid "controlled-Phase gate."
msgstr ""

#: ../../api/qiskit.extensions.standard.h.rst:2
msgid "qiskit.extensions.standard.h module"
msgstr ""

#: ../../api/qiskit.extensions.standard.iden.rst:2
msgid "qiskit.extensions.standard.iden module"
msgstr ""

#: ../../api/qiskit.extensions.standard.rx.rst:2
msgid "qiskit.extensions.standard.rx module"
msgstr ""

#: of qiskit.extensions.standard.rx:1
msgid "Rotation around the x-axis."
msgstr ""

#: ../../api/qiskit.extensions.standard.ry.rst:2
msgid "qiskit.extensions.standard.ry module"
msgstr ""

#: of qiskit.extensions.standard.ry:1
msgid "Rotation around the y-axis."
msgstr ""

#: ../../api/qiskit.extensions.standard.rz.rst:2
msgid "qiskit.extensions.standard.rz module"
msgstr ""

#: of qiskit.extensions.standard.rz:1
msgid "Rotation around the z-axis."
msgstr ""

#: ../../api/qiskit.extensions.standard.rzz.rst:2
msgid "qiskit.extensions.standard.rzz module"
msgstr ""

#: of qiskit.extensions.standard.rzz:1
msgid "two-qubit ZZ-rotation gate."
msgstr ""

#: ../../api/qiskit.extensions.standard.s.rst:2
msgid "qiskit.extensions.standard.s module"
msgstr ""

#: of qiskit.extensions.standard.s:1
msgid "S=diag(1,i) Clifford phase gate or its inverse."
msgstr ""

#: ../../api/qiskit.extensions.standard.swap.rst:2
msgid "qiskit.extensions.standard.swap module"
msgstr ""

#: ../../api/qiskit.extensions.standard.t.rst:2
msgid "qiskit.extensions.standard.t module"
msgstr ""

#: of qiskit.extensions.standard.t:1
msgid "T=sqrt(S) phase gate or its inverse."
msgstr ""

#: ../../api/qiskit.extensions.standard.u0.rst:2
msgid "qiskit.extensions.standard.u0 module"
msgstr ""

#: of qiskit.extensions.standard.u0:1
msgid "Single qubit gate cycle idle."
msgstr ""

#: ../../api/qiskit.extensions.standard.u1.rst:2
msgid "qiskit.extensions.standard.u1 module"
msgstr ""

#: of qiskit.extensions.standard.u1:1
msgid "Diagonal single qubit gate."
msgstr ""

#: ../../api/qiskit.extensions.standard.u2.rst:2
msgid "qiskit.extensions.standard.u2 module"
msgstr ""

#: ../../api/qiskit.extensions.standard.u3.rst:2
msgid "qiskit.extensions.standard.u3 module"
msgstr ""

#: ../../api/qiskit.extensions.standard.x.rst:2
msgid "qiskit.extensions.standard.x module"
msgstr ""

#: ../../api/qiskit.extensions.standard.y.rst:2
msgid "qiskit.extensions.standard.y module"
msgstr ""

#: ../../api/qiskit.extensions.standard.z.rst:2
msgid "qiskit.extensions.standard.z module"
msgstr ""

#: ../../api/qiskit.extensions.unitary.rst:2
msgid "qiskit.extensions.unitary module"
msgstr ""

#: of qiskit.extensions.unitary:1
msgid "Arbitrary unitary circuit instruction."
msgstr ""

#: ../../api/qiskit.ignis.characterization.rst:2
msgid "qiskit.ignis.characterization package"
msgstr ""

#: of qiskit.ignis.characterization:1
msgid "Characterization module"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:2
msgid "BaseCoherenceFitter"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter:1
#: qiskit.ignis.characterization.BaseGateFitter:1
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter:1
#: qiskit.ignis.characterization.fitters.BaseGateFitter:1
msgid "ベースクラス: :class:`qiskit.ignis.characterization.fitters.BaseFitter`"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter:1
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter:1
msgid "Base class for fitters of characteristic times"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.BaseCoherenceFitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.backend_result:1
#: qiskit.ignis.characterization.BaseGateFitter.backend_result:1
#: qiskit.ignis.characterization.coherence.T1Fitter.backend_result:1
#: qiskit.ignis.characterization.coherence.T2Fitter.backend_result:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.backend_result:1
#: qiskit.ignis.characterization.fitters.BaseFitter.backend_result:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.backend_result:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.backend_result:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.backend_result:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.backend_result:1
msgid "Return the execution results (qiskit.Result)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.BaseCoherenceFitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid "Return the fitter's purpose, e.g."
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.BaseCoherenceFitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid "Return the function used in the fit, e.g."
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.BaseCoherenceFitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.measured_qubits:1
#: qiskit.ignis.characterization.BaseGateFitter.measured_qubits:1
#: qiskit.ignis.characterization.coherence.T1Fitter.measured_qubits:1
#: qiskit.ignis.characterization.coherence.T2Fitter.measured_qubits:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.measured_qubits:1
#: qiskit.ignis.characterization.fitters.BaseFitter.measured_qubits:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.measured_qubits:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.measured_qubits:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.measured_qubits:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.measured_qubits:1
msgid "Return the indices of the qubits whose characteristic time is measured"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ":obj:`params <qiskit.ignis.characterization.BaseCoherenceFitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.params:1
#: qiskit.ignis.characterization.BaseGateFitter.params:1
#: qiskit.ignis.characterization.coherence.T1Fitter.params:1
#: qiskit.ignis.characterization.coherence.T2Fitter.params:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.params:1
#: qiskit.ignis.characterization.fitters.BaseFitter.params:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.params:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.params:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.params:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.params:1
msgid "Return the fit function parameters that were calculated by curve_fit"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.BaseCoherenceFitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.params_err:1
#: qiskit.ignis.characterization.BaseGateFitter.params_err:1
#: qiskit.ignis.characterization.coherence.T1Fitter.params_err:1
#: qiskit.ignis.characterization.coherence.T2Fitter.params_err:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.params_err:1
#: qiskit.ignis.characterization.fitters.BaseFitter.params_err:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.params_err:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.params_err:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.params_err:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.params_err:1
msgid "Return the error of the fit function parameters"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ":obj:`series <qiskit.ignis.characterization.BaseCoherenceFitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.series:1
#: qiskit.ignis.characterization.BaseGateFitter.series:1
#: qiskit.ignis.characterization.coherence.T1Fitter.series:1
#: qiskit.ignis.characterization.coherence.T2Fitter.series:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.series:1
#: qiskit.ignis.characterization.fitters.BaseFitter.series:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.series:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.series:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.series:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.series:1
msgid "Return the list of series for the data"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ":obj:`xdata <qiskit.ignis.characterization.BaseCoherenceFitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.xdata:1
#: qiskit.ignis.characterization.BaseGateFitter.xdata:1
#: qiskit.ignis.characterization.coherence.T1Fitter.xdata:1
#: qiskit.ignis.characterization.coherence.T2Fitter.xdata:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.xdata:1
#: qiskit.ignis.characterization.fitters.BaseFitter.xdata:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.xdata:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.xdata:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.xdata:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.xdata:1
msgid "Return the data points on the x-axis (a list of floats)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.characterization.BaseCoherenceFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
"Return the data points on the y-axis In the form of a list of "
"dictionaries: - ydata[i]['mean'] is a list, where item     no."
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.BaseCoherenceFitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:30:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.add_data:1
#: qiskit.ignis.characterization.BaseGateFitter.add_data:1
#: qiskit.ignis.characterization.coherence.T1Fitter.add_data:1
#: qiskit.ignis.characterization.coherence.T2Fitter.add_data:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.add_data:1
#: qiskit.ignis.characterization.fitters.BaseFitter.add_data:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.add_data:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.add_data:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.add_data:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.add_data:1
msgid "Adds more data"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.BaseCoherenceFitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:30:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
msgid "Fit the curve."
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.BaseCoherenceFitter.plot>`\\ "
"\\(qind\\, series\\[\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.plot:1
#: qiskit.ignis.characterization.coherence.T1Fitter.plot:1
#: qiskit.ignis.characterization.coherence.T2Fitter.plot:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.plot:1
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter.plot:1
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter.plot:1
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter.plot:1
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.plot:1
#: qiskit.tools.qcvv.fitters.plot_coherence:1
msgid "Plot coherence data."
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
msgid ""
":obj:`time <qiskit.ignis.characterization.BaseCoherenceFitter.time>`\\ "
"\\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.time:1
#: qiskit.ignis.characterization.coherence.T1Fitter.time:1
#: qiskit.ignis.characterization.coherence.T2Fitter.time:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.time:1
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.time:1
msgid ""
"Return the characteristic time for qid and series If qid==-1 return all "
"the qubit data"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
msgid ""
":obj:`time_err "
"<qiskit.ignis.characterization.BaseCoherenceFitter.time_err>`\\ "
"\\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseCoherenceFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.characterization.BaseCoherenceFitter.time_err:1
#: qiskit.ignis.characterization.coherence.T1Fitter.time_err:1
#: qiskit.ignis.characterization.coherence.T2Fitter.time_err:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.time_err:1
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.time_err:1
msgid "Return the error of the characteristic time"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.description:1
#: qiskit.ignis.characterization.BaseGateFitter.description:1
#: qiskit.ignis.characterization.coherence.T1Fitter.description:1
#: qiskit.ignis.characterization.coherence.T2Fitter.description:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.description:1
#: qiskit.ignis.characterization.fitters.BaseFitter.description:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.description:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.description:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.description:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.description:1
msgid "Return the fitter's purpose, e.g. 'T1'"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.fit_fun:1
#: qiskit.ignis.characterization.BaseGateFitter.fit_fun:1
#: qiskit.ignis.characterization.coherence.T1Fitter.fit_fun:1
#: qiskit.ignis.characterization.coherence.T2Fitter.fit_fun:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.fit_fun:1
#: qiskit.ignis.characterization.fitters.BaseFitter.fit_fun:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.fit_fun:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.fit_fun:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.fit_fun:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.fit_fun:1
msgid "Return the function used in the fit, e.g. BaseFitter._exp_fit_fun"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.ydata:1
#: qiskit.ignis.characterization.BaseGateFitter.ydata:1
#: qiskit.ignis.characterization.coherence.T1Fitter.ydata:1
#: qiskit.ignis.characterization.coherence.T2Fitter.ydata:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.ydata:1
#: qiskit.ignis.characterization.fitters.BaseFitter.ydata:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.ydata:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.ydata:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.ydata:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.ydata:1
msgid ""
"Return the data points on the y-axis In the form of a list of "
"dictionaries: - ydata[i]['mean'] is a list, where item"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.ydata:4
#: qiskit.ignis.characterization.BaseGateFitter.ydata:4
#: qiskit.ignis.characterization.coherence.T1Fitter.ydata:4
#: qiskit.ignis.characterization.coherence.T2Fitter.ydata:4
#: qiskit.ignis.characterization.coherence.T2StarFitter.ydata:4
#: qiskit.ignis.characterization.fitters.BaseFitter.ydata:4
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.ydata:4
#: qiskit.ignis.characterization.gates.AmpCalFitter.ydata:4
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.ydata:4
#: qiskit.ignis.characterization.gates.AngleCalFitter.ydata:4
msgid ""
"no. j is the probability of success of qubit i for a circuit that lasts "
"xdata[j]."
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.ydata:6
#: qiskit.ignis.characterization.BaseGateFitter.ydata:6
#: qiskit.ignis.characterization.coherence.T1Fitter.ydata:6
#: qiskit.ignis.characterization.coherence.T2Fitter.ydata:6
#: qiskit.ignis.characterization.coherence.T2StarFitter.ydata:6
#: qiskit.ignis.characterization.fitters.BaseFitter.ydata:6
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.ydata:6
#: qiskit.ignis.characterization.gates.AmpCalFitter.ydata:6
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.ydata:6
#: qiskit.ignis.characterization.gates.AngleCalFitter.ydata:6
msgid "ydata[i]['std'] is a list, where ydata['std'][j] is the"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.ydata:7
#: qiskit.ignis.characterization.BaseGateFitter.ydata:7
#: qiskit.ignis.characterization.coherence.T1Fitter.ydata:7
#: qiskit.ignis.characterization.coherence.T2Fitter.ydata:7
#: qiskit.ignis.characterization.coherence.T2StarFitter.ydata:7
#: qiskit.ignis.characterization.fitters.BaseFitter.ydata:7
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.ydata:7
#: qiskit.ignis.characterization.gates.AmpCalFitter.ydata:7
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.ydata:7
#: qiskit.ignis.characterization.gates.AngleCalFitter.ydata:7
msgid "standard deviation of the success of qubit i."
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.add_data:3
#: qiskit.ignis.characterization.BaseGateFitter.add_data:3
#: qiskit.ignis.characterization.coherence.T1Fitter.add_data:3
#: qiskit.ignis.characterization.coherence.T2Fitter.add_data:3
#: qiskit.ignis.characterization.coherence.T2StarFitter.add_data:3
#: qiskit.ignis.characterization.fitters.BaseFitter.add_data:3
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.add_data:3
#: qiskit.ignis.characterization.gates.AmpCalFitter.add_data:3
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.add_data:3
#: qiskit.ignis.characterization.gates.AngleCalFitter.add_data:3
msgid "a result (qiskit.result) or list of results"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.add_data:4
#: qiskit.ignis.characterization.BaseGateFitter.add_data:4
#: qiskit.ignis.characterization.coherence.T1Fitter.add_data:4
#: qiskit.ignis.characterization.coherence.T2Fitter.add_data:4
#: qiskit.ignis.characterization.coherence.T2StarFitter.add_data:4
#: qiskit.ignis.characterization.fitters.BaseFitter.add_data:4
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.add_data:4
#: qiskit.ignis.characterization.gates.AmpCalFitter.add_data:4
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.add_data:4
#: qiskit.ignis.characterization.gates.AngleCalFitter.add_data:4
msgid "Recalculate the data"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.add_data:5
#: qiskit.ignis.characterization.BaseGateFitter.add_data:5
#: qiskit.ignis.characterization.coherence.T1Fitter.add_data:5
#: qiskit.ignis.characterization.coherence.T2Fitter.add_data:5
#: qiskit.ignis.characterization.coherence.T2StarFitter.add_data:5
#: qiskit.ignis.characterization.fitters.BaseFitter.add_data:5
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.add_data:5
#: qiskit.ignis.characterization.gates.AmpCalFitter.add_data:5
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.add_data:5
#: qiskit.ignis.characterization.gates.AngleCalFitter.add_data:5
msgid "Refit the data"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.fit_data:1
#: qiskit.ignis.characterization.BaseGateFitter.fit_data:1
#: qiskit.ignis.characterization.coherence.T1Fitter.fit_data:1
#: qiskit.ignis.characterization.coherence.T2Fitter.fit_data:1
#: qiskit.ignis.characterization.coherence.T2StarFitter.fit_data:1
#: qiskit.ignis.characterization.fitters.BaseFitter.fit_data:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.fit_data:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.fit_data:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.fit_data:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.fit_data:1
msgid ""
"Fit the curve. Computes self._params and self._params_err: :param qid: "
"Qubit data to fit. If -1 fit all the data :param p0: initial guess :param"
" bounds: bounds :param series: series to fit (if None fit all)"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.plot:3
#: qiskit.ignis.characterization.BaseGateFitter.plot:3
#: qiskit.ignis.characterization.coherence.T1Fitter.plot:3
#: qiskit.ignis.characterization.coherence.T2Fitter.plot:3
#: qiskit.ignis.characterization.coherence.T2StarFitter.plot:3
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter.plot:3
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter.plot:3
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter.plot:3
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.plot:3
#: qiskit.ignis.characterization.fitters.BaseGateFitter.plot:3
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.plot:3
#: qiskit.ignis.characterization.gates.AmpCalFitter.plot:3
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.plot:3
#: qiskit.ignis.characterization.gates.AngleCalFitter.plot:3
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.plot:3
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.plot:3
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.plot:3
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.plot:3
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.plot_ZZ:3
msgid "qubit index to plot"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.plot:4
#: qiskit.ignis.characterization.coherence.T1Fitter.plot:4
#: qiskit.ignis.characterization.coherence.T2Fitter.plot:4
#: qiskit.ignis.characterization.coherence.T2StarFitter.plot:4
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter.plot:4
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter.plot:4
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter.plot:4
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.plot:4
msgid "which series to plot (if list plots multiple)"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.plot:5
#: qiskit.ignis.characterization.BaseGateFitter.plot:4
#: qiskit.ignis.characterization.coherence.T1Fitter.plot:5
#: qiskit.ignis.characterization.coherence.T2Fitter.plot:5
#: qiskit.ignis.characterization.coherence.T2StarFitter.plot:5
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter.plot:5
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter.plot:5
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter.plot:5
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.plot:5
#: qiskit.ignis.characterization.fitters.BaseGateFitter.plot:4
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.plot:4
#: qiskit.ignis.characterization.gates.AmpCalFitter.plot:4
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.plot:4
#: qiskit.ignis.characterization.gates.AngleCalFitter.plot:4
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.plot:4
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.plot:4
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.plot:4
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.plot:4
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.plot_ZZ:4
msgid "plot axes"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.plot:6
#: qiskit.ignis.characterization.BaseGateFitter.plot:5
#: qiskit.ignis.characterization.coherence.T1Fitter.plot:6
#: qiskit.ignis.characterization.coherence.T2Fitter.plot:6
#: qiskit.ignis.characterization.coherence.T2StarFitter.plot:6
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter.plot:6
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter.plot:6
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter.plot:6
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.plot:6
#: qiskit.ignis.characterization.fitters.BaseGateFitter.plot:5
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.plot:5
#: qiskit.ignis.characterization.gates.AmpCalFitter.plot:5
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.plot:5
#: qiskit.ignis.characterization.gates.AngleCalFitter.plot:5
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.plot:5
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.plot:5
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.plot:5
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.plot:5
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.plot_ZZ:5
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.plot_calibration:3
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.plot_calibration:4
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.plot_calibration:3
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.plot_calibration:4
msgid "call plt.show()"
msgstr ""

#: of qiskit.ignis.characterization.BaseCoherenceFitter.plot:8
#: qiskit.ignis.characterization.BaseGateFitter.plot:7
#: qiskit.ignis.characterization.coherence.T1Fitter.plot:8
#: qiskit.ignis.characterization.coherence.T2Fitter.plot:8
#: qiskit.ignis.characterization.coherence.T2StarFitter.plot:8
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter.plot:8
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter.plot:8
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter.plot:8
#: qiskit.ignis.characterization.fitters.BaseCoherenceFitter.plot:8
#: qiskit.ignis.characterization.fitters.BaseGateFitter.plot:7
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.plot:7
#: qiskit.ignis.characterization.gates.AmpCalFitter.plot:7
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.plot:7
#: qiskit.ignis.characterization.gates.AngleCalFitter.plot:7
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.plot:7
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.plot:7
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.plot:7
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.plot:7
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.plot_ZZ:7
msgid "return the axes object"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:2
msgid "BaseGateFitter"
msgstr ""

#: of qiskit.ignis.characterization.BaseGateFitter:1
#: qiskit.ignis.characterization.fitters.BaseGateFitter:1
msgid "Base class for fitters of gate errors"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.BaseGateFitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.BaseGateFitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ":obj:`fit_fun <qiskit.ignis.characterization.BaseGateFitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.BaseGateFitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ":obj:`params <qiskit.ignis.characterization.BaseGateFitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.BaseGateFitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ":obj:`series <qiskit.ignis.characterization.BaseGateFitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ":obj:`xdata <qiskit.ignis.characterization.BaseGateFitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:22:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.characterization.BaseGateFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:30:<autosummary>:1
msgid ""
":obj:`add_data <qiskit.ignis.characterization.BaseGateFitter.add_data>`\\"
" \\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:30:<autosummary>:1
msgid ""
":obj:`fit_data <qiskit.ignis.characterization.BaseGateFitter.fit_data>`\\"
" \\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:30:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.BaseGateFitter.plot>`\\ "
"\\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.BaseGateFitter.rst:30:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
#: of qiskit.ignis.characterization.BaseGateFitter.plot:1
#: qiskit.ignis.characterization.fitters.BaseGateFitter.plot:1
#: qiskit.ignis.characterization.gates.AmpCalCXFitter.plot:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.plot:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.plot:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.plot:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.plot:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.plot:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.plot:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.plot:1
msgid "Plot err data."
msgstr ""

#: ../../api/qiskit.ignis.characterization.characterization_utils.rst:2
msgid "qiskit.ignis.characterization.characterization\\_utils module"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils:1
msgid "Utilities for circuits generation."
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:1
msgid "A function for padding a circuit with single-qubit identity gates."
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:3
msgid "the quantum circuit that the gates should be appended to"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:4
msgid "the qubit register where the gates should be added"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:5
msgid "index of qubit where the gates should be added"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:6
msgid "the number of identity gates to add"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:8
msgid ""
"The original circuit object, but with identity          gates added to "
"the qubit register qr at qubit 'qubit'"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:10
msgid "The original circuit object, but with identity"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.pad_id_gates:11
msgid "gates added to the qubit register qr at qubit 'qubit'"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.time_to_ngates:1
msgid "A function to convert a list of times into an integer list of gates."
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.time_to_ngates:3
msgid "A list of times (in the same unit of time as used to"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.time_to_ngates:5
msgid "the gate_time"
msgstr ""

#: of qiskit.ignis.characterization.characterization_utils.time_to_ngates:7
msgid "integer list of the number of gates"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.rst:2
msgid "qiskit.ignis.characterization.coherence package"
msgstr ""

#: of qiskit.ignis.characterization.coherence:1
msgid "Coherence module"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:2
msgid "T1Fitter"
msgstr ""

#: of qiskit.ignis.characterization.coherence.T1Fitter:1
#: qiskit.ignis.characterization.coherence.T2Fitter:1
#: qiskit.ignis.characterization.coherence.T2StarFitter:1
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter:1
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter:1
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter:1
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter:1
msgid "ベースクラス: :class:`qiskit.ignis.characterization.fitters.BaseCoherenceFitter`"
msgstr ""

#: of qiskit.ignis.characterization.coherence.T1Fitter:1
#: qiskit.ignis.characterization.coherence.fitters.T1Fitter:1
msgid "T1 fitter"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.coherence.T1Fitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.coherence.T1Fitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.coherence.T1Fitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.coherence.T1Fitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ":obj:`params <qiskit.ignis.characterization.coherence.T1Fitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.coherence.T1Fitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ":obj:`series <qiskit.ignis.characterization.coherence.T1Fitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ":obj:`xdata <qiskit.ignis.characterization.coherence.T1Fitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:22:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.characterization.coherence.T1Fitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.coherence.T1Fitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.coherence.T1Fitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.coherence.T1Fitter.plot>`\\ "
"\\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`time <qiskit.ignis.characterization.coherence.T1Fitter.time>`\\ "
"\\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T1Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`time_err "
"<qiskit.ignis.characterization.coherence.T1Fitter.time_err>`\\ "
"\\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:2
msgid "T2Fitter"
msgstr ""

#: of qiskit.ignis.characterization.coherence.T2Fitter:1
#: qiskit.ignis.characterization.coherence.fitters.T2Fitter:1
msgid "T2 fitter"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.coherence.T2Fitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.coherence.T2Fitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.coherence.T2Fitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.coherence.T2Fitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ":obj:`params <qiskit.ignis.characterization.coherence.T2Fitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.coherence.T2Fitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ":obj:`series <qiskit.ignis.characterization.coherence.T2Fitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ":obj:`xdata <qiskit.ignis.characterization.coherence.T2Fitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:22:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.characterization.coherence.T2Fitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.coherence.T2Fitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.coherence.T2Fitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.coherence.T2Fitter.plot>`\\ "
"\\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`time <qiskit.ignis.characterization.coherence.T2Fitter.time>`\\ "
"\\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2Fitter.rst:32:<autosummary>:1
msgid ""
":obj:`time_err "
"<qiskit.ignis.characterization.coherence.T2Fitter.time_err>`\\ "
"\\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:2
msgid "T2StarFitter"
msgstr ""

#: of qiskit.ignis.characterization.coherence.T2StarFitter:1
#: qiskit.ignis.characterization.coherence.fitters.T2StarFitter:1
msgid "T2* fitter"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.coherence.T2StarFitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.coherence.T2StarFitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.coherence.T2StarFitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.coherence.T2StarFitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params "
"<qiskit.ignis.characterization.coherence.T2StarFitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.coherence.T2StarFitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`series "
"<qiskit.ignis.characterization.coherence.T2StarFitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`xdata "
"<qiskit.ignis.characterization.coherence.T2StarFitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:22:<autosummary>:1
msgid ""
":obj:`ydata "
"<qiskit.ignis.characterization.coherence.T2StarFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.coherence.T2StarFitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.coherence.T2StarFitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.coherence.T2StarFitter.plot>`\\"
" \\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
msgid ""
":obj:`time <qiskit.ignis.characterization.coherence.T2StarFitter.time>`\\"
" \\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.T2StarFitter.rst:32:<autosummary>:1
msgid ""
":obj:`time_err "
"<qiskit.ignis.characterization.coherence.T2StarFitter.time_err>`\\ "
"\\(\\[qid\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.circuits.rst:2
msgid "qiskit.ignis.characterization.coherence.circuits module"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits:1
msgid "Circuit generation for coherence experiments"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t1_circuits:1
#: qiskit.ignis.characterization.coherence.t1_circuits:1
msgid ""
"Generates circuit for T1 measurement. Each circuit consists of an X gate,"
" followed by a sequence of identity gates."
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t1_circuits:5
#: qiskit.ignis.characterization.coherence.circuits.t2star_circuits:6
#: qiskit.ignis.characterization.coherence.t1_circuits:5
#: qiskit.ignis.characterization.coherence.t2star_circuits:6
#: qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits:5
msgid ""
"the number of identity gates in each circuit. Must be in an increasing "
"order."
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t1_circuits:9
#: qiskit.ignis.characterization.coherence.circuits.t2_circuits:15
#: qiskit.ignis.characterization.coherence.circuits.t2star_circuits:10
#: qiskit.ignis.characterization.coherence.t1_circuits:9
#: qiskit.ignis.characterization.coherence.t2_circuits:15
#: qiskit.ignis.characterization.coherence.t2star_circuits:10
#: qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits:9
msgid "time of running a single gate."
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t1_circuits:11
#: qiskit.ignis.characterization.coherence.t1_circuits:11
msgid "indices of the qubits whose T1 are"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t1_circuits:15
#: qiskit.ignis.characterization.coherence.t1_circuits:15
msgid "A list of QuantumCircuit xdata: a list of delay times"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2_circuits:1
#: qiskit.ignis.characterization.coherence.t2_circuits:1
msgid ""
"Generates circuit for T2 (echo) measurement, by a CPMG sequence. Each "
"circuit consists of: - Y90-t-Y-[t-t-X/Y]^m-t-Y90 - n_echos = n+1 - if "
"phase_alt_echo the X/Y alternate, if phase_alt_echo=False the pulses are "
"always Y"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2_circuits:8
#: qiskit.ignis.characterization.coherence.t2_circuits:8
msgid "Standard T2 echo is n_echos=1"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2_circuits:10
#: qiskit.ignis.characterization.coherence.t2_circuits:10
msgid ""
"Each element of the list corresponds to a circuit. num_of_gates[i] is the"
" number of identity gates in each section \"t\" of the pulse sequeence in"
" circuit no. i. Must be in an increasing order."
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2_circuits:17
#: qiskit.ignis.characterization.coherence.t2_circuits:17
msgid "indices of the qubits whose"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2_circuits:20
#: qiskit.ignis.characterization.coherence.t2_circuits:20
msgid "number of echo gates (X or Y)."
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2_circuits:22
#: qiskit.ignis.characterization.coherence.t2_circuits:22
msgid "if True then alternate the echo between"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2_circuits:26
#: qiskit.ignis.characterization.coherence.t2_circuits:26
msgid "A list of QuantumCircuit xdata: the delay times"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2star_circuits:1
#: qiskit.ignis.characterization.coherence.t2star_circuits:1
msgid ""
"Generates circuit for T2* measurement. Each circuit consists of a "
"Hadamard gate, followed by a sequence of identity gates, a phase gate "
"(with a linear phase), and an additional Hadamard gate."
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2star_circuits:12
#: qiskit.ignis.characterization.coherence.t2star_circuits:12
msgid "indices of the qubits"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2star_circuits:15
#: qiskit.ignis.characterization.coherence.t2star_circuits:15
#: qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits:19
msgid "number of oscillations to induce using the phase gate"
msgstr ""

#: of qiskit.ignis.characterization.coherence.circuits.t2star_circuits:17
#: qiskit.ignis.characterization.coherence.t2star_circuits:17
#: qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits:21
msgid ""
"A list of QuantumCircuit xdata: a list of delay times osc_freq: the "
"induced oscillation frequency"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.fitters.rst:2
msgid "qiskit.ignis.characterization.coherence.fitters module"
msgstr ""

#: of qiskit.ignis.characterization.coherence.fitters:1
#: qiskit.ignis.characterization.fitters:1
msgid "Fitters of characteristic times"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.t1_circuits.rst:2
msgid "t1_circuits"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.t2_circuits.rst:2
msgid "t2_circuits"
msgstr ""

#: ../../api/qiskit.ignis.characterization.coherence.t2star_circuits.rst:2
msgid "t2star_circuits"
msgstr ""

#: ../../api/qiskit.ignis.characterization.fitters.rst:2
msgid "qiskit.ignis.characterization.fitters module"
msgstr ""

#: of qiskit.ignis.characterization.fitters.BaseFitter:1
msgid "Base class for a data fitter"
msgstr ""

#: of qiskit.ignis.characterization.fitters.build_counts_dict_from_list:1
msgid "Add dictionary counts together"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.rst:2
msgid "qiskit.ignis.characterization.gates package"
msgstr ""

#: of qiskit.ignis.characterization.gates:1
msgid "Gates parameters module"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:2
msgid "AmpCalCXFitter"
msgstr ""

#: of qiskit.ignis.characterization.gates.AmpCalCXFitter:1
#: qiskit.ignis.characterization.gates.AmpCalFitter:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter:1
#: qiskit.ignis.characterization.gates.AngleCalFitter:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter:1
msgid "ベースクラス: :class:`qiskit.ignis.characterization.fitters.BaseGateFitter`"
msgstr ""

#: of qiskit.ignis.characterization.gates.AmpCalCXFitter:1
#: qiskit.ignis.characterization.gates.AmpCalFitter:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter:1
#: qiskit.ignis.characterization.gates.AngleCalFitter:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter:1
msgid "Amplitude error fitter"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`series "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ":obj:`xdata <qiskit.ignis.characterization.gates.AmpCalCXFitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:22:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.characterization.gates.AmpCalCXFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`angle_err "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.angle_err>`\\ "
"\\(\\[qind\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
#: of qiskit.ignis.characterization.gates.AmpCalCXFitter.angle_err:1
#: qiskit.ignis.characterization.gates.AmpCalFitter.angle_err:1
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.angle_err:1
#: qiskit.ignis.characterization.gates.AngleCalFitter.angle_err:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.angle_err:1
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.angle_err:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.angle_err:1
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.angle_err:1
msgid "Return the gate angle error"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.gates.AmpCalCXFitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.gates.AmpCalCXFitter.plot>`\\ "
"\\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: of qiskit.ignis.characterization.gates.AmpCalCXFitter.angle_err:3
#: qiskit.ignis.characterization.gates.AmpCalFitter.angle_err:3
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.angle_err:3
#: qiskit.ignis.characterization.gates.AngleCalFitter.angle_err:3
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.angle_err:3
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.angle_err:3
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.angle_err:3
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.angle_err:3
#: qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.ZZ_rate:3
msgid "qubit index to return (-1 return all)"
msgstr ""

#: of qiskit.ignis.characterization.gates.AmpCalCXFitter.angle_err:5
#: qiskit.ignis.characterization.gates.AmpCalFitter.angle_err:5
#: qiskit.ignis.characterization.gates.AngleCalCXFitter.angle_err:5
#: qiskit.ignis.characterization.gates.AngleCalFitter.angle_err:5
#: qiskit.ignis.characterization.gates.fitters.AmpCalCXFitter.angle_err:5
#: qiskit.ignis.characterization.gates.fitters.AmpCalFitter.angle_err:5
#: qiskit.ignis.characterization.gates.fitters.AngleCalCXFitter.angle_err:5
#: qiskit.ignis.characterization.gates.fitters.AngleCalFitter.angle_err:5
msgid "return a list of errors"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:2
msgid "AmpCalFitter"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.gates.AmpCalFitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.gates.AmpCalFitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.gates.AmpCalFitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.gates.AmpCalFitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ":obj:`params <qiskit.ignis.characterization.gates.AmpCalFitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.gates.AmpCalFitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ":obj:`series <qiskit.ignis.characterization.gates.AmpCalFitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ":obj:`xdata <qiskit.ignis.characterization.gates.AmpCalFitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:22:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.characterization.gates.AmpCalFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.gates.AmpCalFitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`angle_err "
"<qiskit.ignis.characterization.gates.AmpCalFitter.angle_err>`\\ "
"\\(\\[qind\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.gates.AmpCalFitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AmpCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.gates.AmpCalFitter.plot>`\\ "
"\\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:2
msgid "AngleCalCXFitter"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`series "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`xdata "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:22:<autosummary>:1
msgid ""
":obj:`ydata "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`angle_err "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.angle_err>`\\ "
"\\(\\[qind\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.gates.AngleCalCXFitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalCXFitter.rst:31:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.gates.AngleCalCXFitter.plot>`\\"
" \\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:2
msgid "AngleCalFitter"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`backend_result "
"<qiskit.ignis.characterization.gates.AngleCalFitter.backend_result>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`description "
"<qiskit.ignis.characterization.gates.AngleCalFitter.description>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`fit_fun "
"<qiskit.ignis.characterization.gates.AngleCalFitter.fit_fun>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`measured_qubits "
"<qiskit.ignis.characterization.gates.AngleCalFitter.measured_qubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params "
"<qiskit.ignis.characterization.gates.AngleCalFitter.params>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`params_err "
"<qiskit.ignis.characterization.gates.AngleCalFitter.params_err>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ""
":obj:`series "
"<qiskit.ignis.characterization.gates.AngleCalFitter.series>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ":obj:`xdata <qiskit.ignis.characterization.gates.AngleCalFitter.xdata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:22:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.characterization.gates.AngleCalFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.characterization.gates.AngleCalFitter.add_data>`\\ "
"\\(results\\[\\, recalc\\, refit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`angle_err "
"<qiskit.ignis.characterization.gates.AngleCalFitter.angle_err>`\\ "
"\\(\\[qind\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.characterization.gates.AngleCalFitter.fit_data>`\\ "
"\\(\\[qid\\, p0\\, bounds\\, series\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.AngleCalFitter.rst:31:<autosummary>:1
msgid ""
":obj:`plot <qiskit.ignis.characterization.gates.AngleCalFitter.plot>`\\ "
"\\(qind\\[\\, series\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.ampcal_1Q_circuits.rst:2
msgid "ampcal_1Q_circuits"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_1Q_circuits:1
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits:1
msgid ""
"Generates circuit for measuring the amplitude error of the single qubit "
"gates"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_1Q_circuits:4
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits:4
msgid ""
"The U2 gate is repeatedly applied (in groups of 2) and we look at the "
"population of the qubit in the xy axis (amplitude erorr amplification "
"sequence)"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_1Q_circuits:8
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits:8
msgid "Y90-(Y90-Y90)^n"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_1Q_circuits:10
#: qiskit.ignis.characterization.gates.ampcal_cx_circuits:13
#: qiskit.ignis.characterization.gates.anglecal_1Q_circuits:6
#: qiskit.ignis.characterization.gates.anglecal_cx_circuits:13
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits:10
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:13
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits:6
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:13
msgid "the maximum number of repetitions. Circuits will increment"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_1Q_circuits:12
#: qiskit.ignis.characterization.gates.anglecal_1Q_circuits:8
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits:12
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits:8
msgid "indices of the qubits to perform the"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_1Q_circuits:16
#: qiskit.ignis.characterization.gates.circuits.ampcal_1Q_circuits:16
msgid ""
"A list of QuantumCircuit xdata: a list of gate repetitions (number of u2 "
"gates)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.ampcal_cx_circuits.rst:2
msgid "ampcal_cx_circuits"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_cx_circuits:1
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:1
msgid "Generates circuit for measuring the amplitude error of the cx gate"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_cx_circuits:4
#: qiskit.ignis.characterization.gates.anglecal_cx_circuits:4
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:4
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:4
msgid ""
"The cx gate is repeatedly applied and we look at the population of the "
"target qubit in the xy axis (amplitude erorr amplification sequence)"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_cx_circuits:8
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:8
msgid "X(control)-X90(target)-(CX)^n"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_cx_circuits:10
#: qiskit.ignis.characterization.gates.anglecal_cx_circuits:10
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:10
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:10
msgid ""
"Note: the circuit may not behave as intended if the target-control pairs "
"are not in the coupling map"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_cx_circuits:15
#: qiskit.ignis.characterization.gates.anglecal_cx_circuits:15
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:15
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:15
msgid "indices of the target qubits"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_cx_circuits:18
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:18
msgid "indices of the control qubits"
msgstr ""

#: of qiskit.ignis.characterization.gates.ampcal_cx_circuits:22
#: qiskit.ignis.characterization.gates.anglecal_1Q_circuits:13
#: qiskit.ignis.characterization.gates.anglecal_cx_circuits:21
#: qiskit.ignis.characterization.gates.circuits.ampcal_cx_circuits:22
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits:13
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:21
msgid "A list of QuantumCircuit xdata: a list of gate repetitions"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.anglecal_1Q_circuits.rst:2
msgid "anglecal_1Q_circuits"
msgstr ""

#: of qiskit.ignis.characterization.gates.anglecal_1Q_circuits:1
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits:1
msgid "Generates circuit for measuring the angle error of the single qubit gate"
msgstr ""

#: of qiskit.ignis.characterization.gates.anglecal_1Q_circuits:4
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits:4
msgid "Y90-(X90-X90-Y90-Y90)^n - X90"
msgstr ""

#: of qiskit.ignis.characterization.gates.anglecal_1Q_circuits:11
#: qiskit.ignis.characterization.gates.circuits.anglecal_1Q_circuits:11
msgid "put in an artificial angle error (for testing)"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.anglecal_cx_circuits.rst:2
msgid "anglecal_cx_circuits"
msgstr ""

#: of qiskit.ignis.characterization.gates.anglecal_cx_circuits:1
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:1
msgid "Generates circuit for measuring the angle error of the cx gate"
msgstr ""

#: of qiskit.ignis.characterization.gates.anglecal_cx_circuits:8
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:8
msgid "X(control)-Y90(target)-(CX - Yp(target))^n - X90(target)"
msgstr ""

#: of qiskit.ignis.characterization.gates.anglecal_cx_circuits:19
#: qiskit.ignis.characterization.gates.circuits.anglecal_cx_circuits:19
msgid "Injected angle error for testing"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.circuits.rst:2
msgid "qiskit.ignis.characterization.gates.circuits module"
msgstr ""

#: of qiskit.ignis.characterization.gates.circuits:1
msgid "Circuit generation for measuring gate errors"
msgstr ""

#: ../../api/qiskit.ignis.characterization.gates.fitters.rst:2
msgid "qiskit.ignis.characterization.gates.fitters module"
msgstr ""

#: of qiskit.ignis.characterization.gates.fitters:1
#: qiskit.ignis.characterization.hamiltonian.fitters:1
msgid "Fitters for hamiltonian parameters"
msgstr ""

#: ../../api/qiskit.ignis.characterization.hamiltonian.rst:2
msgid "qiskit.ignis.characterization.hamiltonian package"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian:1
msgid "Hamiltonian parameters module"
msgstr ""

#: ../../api/qiskit.ignis.characterization.hamiltonian.circuits.rst:2
msgid "qiskit.ignis.characterization.hamiltonian.circuits module"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.circuits:1
msgid "Circuit generation for measuring hamiltonian parametes"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits:1
msgid ""
"Generates circuit for measuring ZZ. Two Ramsey experiments, the first "
"with the spectator in the ground state, the second with the spectator in "
"the excited state"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits:11
msgid "indices of the qubits to measure and"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.circuits.zz_circuits:14
msgid "indices of the qubits to flip the"
msgstr ""

#: ../../api/qiskit.ignis.characterization.hamiltonian.fitters.rst:2
msgid "qiskit.ignis.characterization.hamiltonian.fitters module"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter:1
msgid "ZZ fitter"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.ZZ_rate:1
msgid "Return the ZZ rate from the fit of the two curves"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.ZZ_rate:5
msgid "return a list of zz_rates"
msgstr ""

#: of qiskit.ignis.characterization.hamiltonian.fitters.ZZFitter.plot_ZZ:1
msgid "Plot ZZ data. Will plot both traces on the plot."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.rst:2
msgid "qiskit.ignis.mitigation package"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.rst:2
msgid "qiskit.ignis.mitigation.measurement package"
msgstr ""

#: of qiskit.ignis.mitigation.measurement:1
#: qiskit.ignis.verification.randomized_benchmarking:1
msgid "Measurement correction module"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:2
msgid "CompleteMeasFitter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter:1
msgid "Measurement correction fitter for a full calibration"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`cal_matrix "
"<qiskit.ignis.mitigation.measurement.CompleteMeasFitter.cal_matrix>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.cal_matrix:1
#: qiskit.ignis.mitigation.measurement.MeasurementFilter.cal_matrix:1
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.cal_matrix:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.cal_matrix:1
msgid "Return cal_matrix."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`filter "
"<qiskit.ignis.mitigation.measurement.CompleteMeasFitter.filter>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.filter:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.filter:1
msgid "return a measurement filter using the cal matrix"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`qubit_list "
"<qiskit.ignis.mitigation.measurement.CompleteMeasFitter.qubit_list>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.qubit_list:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.qubit_list:1
msgid "Return list of qubits."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`state_labels "
"<qiskit.ignis.mitigation.measurement.CompleteMeasFitter.state_labels>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.state_labels:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.state_labels:1
msgid "Return state_labels."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:25:<autosummary>:1
msgid ""
":obj:`plot_calibration "
"<qiskit.ignis.mitigation.measurement.CompleteMeasFitter.plot_calibration>`\\"
" \\(\\[ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:25:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.plot_calibration:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.plot_calibration:1
msgid "Plot the calibration matrix (2D color grid plot)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:25:<autosummary>:1
msgid ""
":obj:`readout_fidelity "
"<qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity>`\\"
" \\(\\[label\\_list\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:25:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.readout_fidelity:1
msgid ""
"Based on the results output the readout fidelity which is the normalized "
"trace of the calibration matrix"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:25:<autosummary>:1
msgid ""
":obj:`subset_fitter "
"<qiskit.ignis.mitigation.measurement.CompleteMeasFitter.subset_fitter>`\\"
" \\(\\[qubit\\_sublist\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.CompleteMeasFitter.rst:25:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.subset_fitter:1
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.subset_fitter:1
msgid ""
"Return a fitter object that is a subset of the qubits in the original "
"list."
msgstr ""

#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity:4
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.readout_fidelity:4
msgid "If none returns the average assignment fidelity"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity:8
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity:11
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.readout_fidelity:8
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.readout_fidelity:11
msgid "readout fidelity (assignment fidelity)"
msgstr ""

#: of
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity:12
#: qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:16
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity:15
#: qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:25
#: qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:24
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:25
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:16
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.readout_fidelity:12
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.readout_fidelity:15
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:24
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:14
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:21
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:20
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:31
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:43
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:27
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:31
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:26
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:20
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:21
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:20
#: qiskit.ignis.verification.tomography.process_tomography_circuits:43
#: qiskit.ignis.verification.tomography.state_tomography_circuits:27
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error:11
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:19
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error:13
#: qiskit.providers.aer.noise.device.models.basic_device_gate_errors:31
#: qiskit.providers.aer.noise.device.models.basic_device_noise_model:22
#: qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:26
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error:11
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:19
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error:13
#: qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers:16
#: qiskit.providers.aer.utils.qobj_utils.snapshot_instr:38
#: qiskit.providers.aer.utils.qobj_utils.unitary_instr:15
#: qiskit.providers.basicaer.QasmSimulatorPy.run:23
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:23
msgid "Additional Information:"
msgstr ""

#: of
#: qiskit.ignis.mitigation.measurement.CompleteMeasFitter.readout_fidelity:11
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.readout_fidelity:11
msgid ""
"The on-diagonal elements of the calibration matrix are the probabilities "
"of measuring state 'x' given preparation of state 'x' and so the "
"normalized trace is the average assignment fidelity"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.subset_fitter:4
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.subset_fitter:4
msgid "must be a subset of qubit_list"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.CompleteMeasFitter.subset_fitter:6
#: qiskit.ignis.mitigation.measurement.fitters.CompleteMeasFitter.subset_fitter:6
msgid "A fitter than has the calibration for a subset of qubits"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:2
msgid "MeasurementFilter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter:1
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter:1
msgid "Measurement error mitigation filter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter:3
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter:3
msgid "Produced from a measurement calibration fitter and can be applied to data"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
msgid ""
":obj:`cal_matrix "
"<qiskit.ignis.mitigation.measurement.MeasurementFilter.cal_matrix>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
msgid ""
":obj:`state_labels "
"<qiskit.ignis.mitigation.measurement.MeasurementFilter.state_labels>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:15:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.state_labels:1
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.state_labels:1
msgid "return the state label ordering of the cal matrix"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:21:<autosummary>:1
msgid ""
":obj:`apply "
"<qiskit.ignis.mitigation.measurement.MeasurementFilter.apply>`\\ "
"\\(raw\\_data\\[\\, method\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.MeasurementFilter.rst:21:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:1
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:1
msgid "Apply the calibration matrix to results"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:3
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:3
msgid ""
"The data to be corrected. Can be in a number of forms. Form1: a counts "
"dictionary from results.get_counts Form2: a list of counts of "
"length==len(state_labels) Form3: a list of counts of "
"length==M*len(state_labels) where M     is an integer (e.g. for use with "
"the tomography data) Form4: a qiskit Result"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:3
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:3
msgid ""
"The data to be corrected. Can be in a number of forms. Form1: a counts "
"dictionary from results.get_counts Form2: a list of counts of "
"length==len(state_labels) Form3: a list of counts of "
"length==M*len(state_labels) where M"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:7
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:7
msgid "is an integer (e.g. for use with the tomography data)"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:8
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:8
msgid "Form4: a qiskit Result"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:14
#: qiskit.ignis.mitigation.measurement.TensoredFilter.apply:11
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:14
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.apply:11
msgid "The corrected data in the same form as raw_data"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:18
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:18
msgid "e.g. calcircuits, state_labels = complete_measurement_calibration("
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:20
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:20
msgid "qiskit.QuantumRegister(5))"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:21
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:21
msgid ""
"job = qiskit.execute(calcircuits) meas_fitter = "
"CompleteMeasFitter(job.results(),"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:23
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:23
msgid "state_labels)"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:24
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:24
msgid "meas_filter = MeasurementFilter(meas_fitter.cal_matrix)"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:26
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:26
msgid "job2 = qiskit.execute(my_circuits) result2 = job2.results()"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:29
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:29
msgid "error_mitigated_counts = meas_filter.apply("
msgstr ""

#: of qiskit.ignis.mitigation.measurement.MeasurementFilter.apply:30
#: qiskit.ignis.mitigation.measurement.filters.MeasurementFilter.apply:30
msgid "result2.get_counts('circ1'))"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:2
msgid "TensoredFilter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.TensoredFilter:1
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter:1
msgid "Tensored measurement error mitigation filter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.TensoredFilter:3
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter:3
msgid ""
"Produced from a tensored measurement calibration fitter and can be "
"applied to data"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
msgid ""
":obj:`cal_matrices "
"<qiskit.ignis.mitigation.measurement.TensoredFilter.cal_matrices>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredFilter.cal_matrices:1
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.cal_matrices:1
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.cal_matrices:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.cal_matrices:1
msgid "Return cal_matrices."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
msgid ""
":obj:`nqubits "
"<qiskit.ignis.mitigation.measurement.TensoredFilter.nqubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredFilter.nqubits:1
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.nqubits:1
msgid "Return the number of qubits"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
msgid ""
":obj:`qubit_list_sizes "
"<qiskit.ignis.mitigation.measurement.TensoredFilter.qubit_list_sizes>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredFilter.qubit_list_sizes:1
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.nqubits:1
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.qubit_list_sizes:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.nqubits:1
msgid "Return _qubit_list_sizes"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
msgid ""
":obj:`substate_labels_list "
"<qiskit.ignis.mitigation.measurement.TensoredFilter.substate_labels_list>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:17:<autosummary>:1
#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredFilter.substate_labels_list:1
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.substate_labels_list:1
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.substate_labels_list:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.substate_labels_list:1
msgid "Return _substate_labels_list"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:23:<autosummary>:1
msgid ""
":obj:`apply <qiskit.ignis.mitigation.measurement.TensoredFilter.apply>`\\"
" \\(raw\\_data\\[\\, method\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredFilter.rst:23:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredFilter.apply:1
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.apply:1
msgid "Apply the calibration matrices to results"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.TensoredFilter.apply:3
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.apply:3
msgid ""
"The data to be corrected. Can be in a number of forms. a counts "
"dictionary from results.get_countsphy data); or a qiskit Result"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.TensoredFilter.apply:6
#: qiskit.ignis.mitigation.measurement.filters.TensoredFilter.apply:6
msgid ""
"fitting method. If None, then least_squares is used. 'pseudo_inverse': "
"direct inversion of the cal matrices 'least_squares': constrained to have"
" physical probabilities"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:2
msgid "TensoredMeasFitter"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.TensoredMeasFitter:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter:1
msgid "Measurement correction fitter for a tensored calibration"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`cal_matrices "
"<qiskit.ignis.mitigation.measurement.TensoredMeasFitter.cal_matrices>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`filter "
"<qiskit.ignis.mitigation.measurement.TensoredMeasFitter.filter>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredMeasFitter.filter:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.filter:1
msgid "return a measurement filter using the cal matrices"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`nqubits "
"<qiskit.ignis.mitigation.measurement.TensoredMeasFitter.nqubits>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:17:<autosummary>:1
msgid ""
":obj:`substate_labels_list "
"<qiskit.ignis.mitigation.measurement.TensoredMeasFitter.substate_labels_list>`\\"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:24:<autosummary>:1
msgid ""
":obj:`plot_calibration "
"<qiskit.ignis.mitigation.measurement.TensoredMeasFitter.plot_calibration>`\\"
" \\(\\[cal\\_index\\, ax\\, show\\_plot\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:24:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredMeasFitter.plot_calibration:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.plot_calibration:1
msgid "Plot one of the calibration matrices (2D color grid plot)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:24:<autosummary>:1
msgid ""
":obj:`readout_fidelity "
"<qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity>`\\"
" \\(\\[cal\\_index\\, label\\_list\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.TensoredMeasFitter.rst:24:<autosummary>:1
#: of qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity:1
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.readout_fidelity:1
msgid ""
"Based on the results output the readout fidelity, which is the average of"
" the diagonal entries in the calibration matrices"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.TensoredMeasFitter.plot_calibration:3
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.plot_calibration:3
msgid "calibration matrix to plot"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity:4
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.readout_fidelity:4
msgid "readout fidelity of which sub cal?"
msgstr ""

#: of
#: qiskit.ignis.mitigation.measurement.TensoredMeasFitter.readout_fidelity:14
#: qiskit.ignis.mitigation.measurement.fitters.TensoredMeasFitter.readout_fidelity:14
msgid ""
"The on-diagonal elements of the calibration matrices are the "
"probabilities of measuring state 'x' given preparation of state 'x'"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.circuits.rst:2
msgid "qiskit.ignis.mitigation.measurement.circuits module"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits:1
msgid ""
"Measurement calibration circuits. To apply the measurement mitigation use"
" the fitters to produce a filter."
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:1
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:1
msgid ""
"Return a list of measurement calibration circuits for the full Hilbert "
"space."
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:4
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:4
msgid "Each of the 2**n circuits creates a basis state"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:6
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:6
msgid "A list of qubits to perform the measurement correction on,"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:9
#: qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:8
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:9
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:8
msgid "A quantum register. If none one is created"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:11
#: qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:10
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:11
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:10
msgid "A classical register. If none one is created"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:13
#: qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:12
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:13
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:12
msgid "A string to add to the front of circuit names for"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:16
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:16
msgid ""
"A list of QuantumCircuit objects containing the calibration circuits  A "
"list of calibration state labels"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:16
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:16
msgid "A list of QuantumCircuit objects containing the calibration circuits"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:18
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:18
msgid "A list of calibration state labels"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:21
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:21
msgid ""
"The returned circuits are named circlabel+cal_XXX where XXX is the basis "
"state, e.g., cal_1001"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.complete_meas_cal:25
#: qiskit.ignis.mitigation.measurement.complete_meas_cal:25
msgid ""
"Pass the results of these circuits to the CompleteMeasurementFitter "
"constructor"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:1
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:1
msgid "Return a list of calibration circuits"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:3
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:3
msgid "Qubits to perform the"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:15
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:15
msgid ""
"A list of two QuantumCircuit objects containing the calibration circuits "
"mit_pattern"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:20
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:20
msgid ""
"The returned circuits are named circlabel+cal_XXX where XXX is the basis "
"state, e.g., cal_000 and cal_111"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.circuits.tensored_meas_cal:24
#: qiskit.ignis.mitigation.measurement.tensored_meas_cal:24
msgid ""
"Pass the results of these circuits to the TensoredMeasurementFitter "
"constructor"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.complete_meas_cal.rst:2
msgid "complete_meas_cal"
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.filters.rst:2
msgid "qiskit.ignis.mitigation.measurement.filters module"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.filters:1
msgid "Measurement correction filters."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.fitters.rst:2
msgid "qiskit.ignis.mitigation.measurement.fitters module"
msgstr ""

#: of qiskit.ignis.mitigation.measurement.fitters:1
msgid "Measurement correction fitters."
msgstr ""

#: ../../api/qiskit.ignis.mitigation.measurement.tensored_meas_cal.rst:2
msgid "tensored_meas_cal"
msgstr ""

#: ../../api/qiskit.ignis.verification.rst:2
msgid "qiskit.ignis.verification package"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.rst:2
msgid "qiskit.ignis.verification.quantum\\_volume package"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume:1
msgid "Quantum volume module"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:2
msgid "QVFitter"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter:1
msgid "Class for fitters for quantum volume"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
msgid ":obj:`depths <qiskit.ignis.verification.quantum_volume.QVFitter.depths>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.depths:1
#: qiskit.ignis.verification.quantum_volume.QVFitter.qubit_lists:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.depths:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.qubit_lists:1
msgid "Return depth list."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
msgid ""
":obj:`heavy_output_counts "
"<qiskit.ignis.verification.quantum_volume.QVFitter.heavy_output_counts>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.heavy_output_counts:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.heavy_output_counts:1
msgid "Return the number of heavy output counts as measured."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
msgid ""
":obj:`heavy_output_prob_ideal "
"<qiskit.ignis.verification.quantum_volume.QVFitter.heavy_output_prob_ideal>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
#: of
#: qiskit.ignis.verification.quantum_volume.QVFitter.heavy_output_prob_ideal:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.heavy_output_prob_ideal:1
msgid "Return the heavy output probability ideally."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
msgid ""
":obj:`heavy_outputs "
"<qiskit.ignis.verification.quantum_volume.QVFitter.heavy_outputs>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.heavy_outputs:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.heavy_outputs:1
msgid "Return the ideal heavy outputs dictionary."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
msgid ""
":obj:`qubit_lists "
"<qiskit.ignis.verification.quantum_volume.QVFitter.qubit_lists>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
msgid ""
":obj:`results "
"<qiskit.ignis.verification.quantum_volume.QVFitter.results>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.results:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.results:1
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.results:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.results:1
msgid "Return all the results."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
msgid ":obj:`ydata <qiskit.ignis.verification.quantum_volume.QVFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:20:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.ydata:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.ydata:1
msgid "Return the average and std of the output probability."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.verification.quantum_volume.QVFitter.add_data>`\\ "
"\\(new\\_backend\\_result\\[\\, rerun\\_fit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid "Add a new result."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
msgid ""
":obj:`add_statevectors "
"<qiskit.ignis.verification.quantum_volume.QVFitter.add_statevectors>`\\ "
"\\(new\\_statevector\\_result\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.add_statevectors:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_statevectors:1
msgid ""
"Add the ideal results and convert to the heavy outputs Assume the result "
"is from 'statevector_simulator'"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
msgid ""
":obj:`calc_data "
"<qiskit.ignis.verification.quantum_volume.QVFitter.calc_data>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.calc_data:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.calc_data:1
msgid "Make a count dictionary for each unique circuit from all the results."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
msgid ""
":obj:`calc_statistics "
"<qiskit.ignis.verification.quantum_volume.QVFitter.calc_statistics>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.calc_statistics:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.calc_statistics:1
msgid ""
"Convert the heavy outputs in the different trials into mean and error for"
" plotting"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
msgid ""
":obj:`plot_qv_data "
"<qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data>`\\ "
"\\(\\[ax\\, show\\_plt\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.plot_qv_data:1
msgid "Plot the qv data as a function of depth"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
msgid ""
":obj:`quantum_volume "
"<qiskit.ignis.verification.quantum_volume.QVFitter.quantum_volume>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.quantum_volume:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.quantum_volume:1
msgid "Return the volume for each depth."
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
msgid ""
":obj:`qv_success "
"<qiskit.ignis.verification.quantum_volume.QVFitter.qv_success>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.QVFitter.rst:32:<autosummary>:1
#: of qiskit.ignis.verification.quantum_volume.QVFitter.qv_success:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.qv_success:1
msgid ""
"Return whether each depth was successful (>2/3 with confidence greater "
"than 97.5) and the confidence"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.add_data:1
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_data:1
msgid "Add a new result. Re calculate fit"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.add_data:3
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_data:3
msgid "list of qv results"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.add_data:4
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_data:4
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.add_data:5
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.add_data:5
msgid "re caculate the means and fit the result"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.add_data:7
#: qiskit.ignis.verification.quantum_volume.QVFitter.calc_data:7
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_data:7
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.calc_data:7
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.add_data:8
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_data:8
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.add_data:8
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_data:8
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:29
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:37
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:22
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:22
msgid "Additional information:"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.add_data:7
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_data:7
msgid ""
"Assumes that 'result' was executed is the output of circuits generated by"
" qv_circuits,"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.add_statevectors:4
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.add_statevectors:4
msgid "ideal results"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.calc_data:4
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.calc_data:4
msgid "Calculate the heavy output probability"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.calc_data:7
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.calc_data:7
msgid ""
"Assumes that 'result' was executed is the output of circuits generated by"
" qv_ciruits,"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.calc_statistics:4
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.calc_statistics:4
msgid "Here we assume the error is due to a binomial distribution"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data:3
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.plot_qv_data:3
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data:4
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data:4
msgid "plot axis (if passed in)."
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data:5
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.plot_qv_data:5
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data:6
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data:6
msgid "Add an EPC label"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data:7
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.plot_qv_data:7
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data:8
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data:8
#: qiskit.tools.qcvv.fitters.plot_rb_data:19
msgid "display the plot."
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.plot_qv_data:10
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.plot_qv_data:10
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data:11
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data:11
#: qiskit.tools.qcvv.fitters.plot_coherence:12
#: qiskit.tools.qcvv.fitters.plot_rb_data:22
msgid "If matplotlib is not installed."
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.quantum_volume:3
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.quantum_volume:3
msgid "List of quantum volumes"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.QVFitter.qv_success:4
#: qiskit.ignis.verification.quantum_volume.fitters.QVFitter.qv_success:4
msgid ""
"List of lenth depth with eact element a 3 list with - success True/False "
"- confidence"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.circuits.rst:2
msgid "qiskit.ignis.verification.quantum\\_volume.circuits module"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits:1
msgid "Generates quantum volume circuits"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits.qv_circuits:1
#: qiskit.ignis.verification.quantum_volume.qv_circuits:1
msgid "Return a list of square quantum volume circuits (depth=width)"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits.qv_circuits:3
#: qiskit.ignis.verification.quantum_volume.qv_circuits:3
msgid ""
"The qubit_lists is specified as a list of qubit lists. For each set of "
"qubits, circuits the depth as the number of qubits in the list are "
"generated"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits.qv_circuits:7
#: qiskit.ignis.verification.quantum_volume.qv_circuits:7
msgid "list of list of qubits to apply qv circuits to. Assume"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits.qv_circuits:9
#: qiskit.ignis.verification.quantum_volume.qv_circuits:9
msgid "number of random iterations"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits.qv_circuits:10
#: qiskit.ignis.verification.quantum_volume.qv_circuits:10
msgid "quantum register to act on (if None one is created)"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits.qv_circuits:11
#: qiskit.ignis.verification.quantum_volume.qv_circuits:11
msgid "classical register to measure to (if None one is created)"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.circuits.qv_circuits:13
#: qiskit.ignis.verification.quantum_volume.qv_circuits:13
msgid ""
"list of lists of circuits for the qv sequences (separate list for each "
"trial) qv_circs_nomeas: same as above with no measurements for the ideal "
"simulation"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.fitters.rst:2
msgid "qiskit.ignis.verification.quantum\\_volume.fitters module"
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.fitters:1
msgid "Functions used for the analysis of quantum volume results."
msgstr ""

#: of qiskit.ignis.verification.quantum_volume.fitters:3
msgid ""
"Based on Cross et al. \"Validating quantum computers using randomized "
"model circuits\", arXiv:1811.12926"
msgstr ""

#: ../../api/qiskit.ignis.verification.quantum_volume.qv_circuits.rst:2
msgid "qv_circuits"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.rst:2
msgid "qiskit.ignis.verification.randomized\\_benchmarking package"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.Clifford.rst:2
msgid "qiskit.ignis.verification.randomized\\_benchmarking.Clifford module"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford:1
msgid "Clifford Operator class"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford:1
msgid "Clifford class"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.as_dict:1
msgid "Return dictionary (JSON) represenation of Clifford object"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.cx:1
msgid "Apply a Controlled-NOT \"cx\" gate"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.cz:1
msgid "Apply a Controlled-z \"cx\" gate"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.destabilizer:1
msgid "Return the destabilizer as a Pauli object"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.from_dict:1
msgid "Load a Clifford from a dictionary"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.h:1
msgid "Apply an Hadamard \"h\" gate to qubit"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.index:1
msgid "Returns a unique index for the Clifford."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.index:3
msgid "A unique index (integer)."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.num_qubits:1
msgid "Return the number of qubits for the Clifford."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.phases:1
msgid "Return the Clifford phases."
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.s:1
msgid "Apply an phase \"s\" gate to qubit"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.sdg:1
msgid "Apply an adjoint phase \"sdg\" gate to qubit"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.stabilizer:1
msgid "Return the qubit stabilizer as a Pauli object"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.swap:1
msgid "Apply SWAP gate between two qubits"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.table:1
msgid "Return the the Clifford table."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.update_destabilizer:1
msgid "Update the qubit destabilizer row from a Pauli object"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.update_stabilizer:1
msgid "Update the qubit stabilizer row from a Pauli object"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.v:1
msgid "Apply v gate sd.h"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.w:1
msgid "Apply w gate v.v"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.x:1
msgid "Apply a Pauli \"x\" gate to a qubit"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.y:1
msgid "Apply an Pauli \"y\" gate to a qubit"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.Clifford.Clifford.z:1
msgid "Apply an Pauli \"z\" gate to qubit"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:2
msgid "RBFitter"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter:1
msgid "Class for fitters for randomized benchmarking"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
msgid ""
":obj:`cliff_lengths "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.cliff_lengths>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
#: of
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.cliff_lengths:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.cliff_lengths:1
msgid "Return clifford lengths."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
msgid ""
":obj:`fit "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.fit:1
msgid "Return fit."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
msgid ""
":obj:`raw_data "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.raw_data>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.raw_data:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.raw_data:1
msgid "Return raw data."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
msgid ""
":obj:`results "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.results>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
msgid ""
":obj:`seeds "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.seeds>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.seeds:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.seeds:1
msgid "Return the number of loaded seeds."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
msgid ""
":obj:`ydata "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.ydata>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:19:<autosummary>:1
#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.ydata:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.ydata:1
msgid "Return ydata (means and std devs)."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.add_data>`\\ "
"\\(new\\_backend\\_result\\[\\, rerun\\_fit\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid ""
":obj:`calc_data "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_data>`\\"
" \\(\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid "Retrieve probabilities of success from execution results."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid ""
":obj:`calc_statistics "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_statistics>`\\"
" \\(\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid "Extract averages and std dev from the raw data (self._raw_data)."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid ""
":obj:`fit_data "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit_data>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit_data:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.fit_data:1
msgid "Fit the RB results to an exponential curve."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
msgid ""
":obj:`plot_rb_data "
"<qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data>`\\"
" \\(\\[pattern\\_index\\, ax\\, add\\_label\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.RBFitter.rst:29:<autosummary>:1
#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data:1
msgid "Plot randomized benchmarking data of a single pattern."
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.add_data:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.add_data:1
msgid "Add a new result. Re calculate the raw data, means and fit."
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.add_data:4
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.add_data:4
msgid "list of rb results"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.add_data:8
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_data:8
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.add_data:8
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_data:8
msgid ""
"Assumes that 'result' was executed is the output of circuits generated by"
" randomized_becnhmarking_seq,"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_data:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_data:1
msgid ""
"Retrieve probabilities of success from execution results. Outputs results"
" into an internal variable _raw_data which is a 3-dimensional list, where"
" item (i,j,k) is the probability to measure the ground state for the set "
"of qubits in pattern \"i\" for seed no. j and vector length "
"self._cliff_lengths[i][k]."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_statistics:1
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_statistics:1
msgid ""
"Extract averages and std dev from the raw data (self._raw_data). Assumes "
"that self._calc_data has been run. Output into internal _ydata variable:"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_statistics:5
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_statistics:5
msgid ""
"ydata is a list of dictionaries (length number of patterns). Dictionary "
"ydata[i]: ydata[i]['mean'] is a numpy_array of length n;"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_statistics:8
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_statistics:8
msgid ""
"entry j of this array contains the mean probability of success over "
"seeds, for vector length self._cliff_lengths[i][j]."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_statistics:13
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_statistics:13
msgid "And ydata[i]['std'] is a numpy_array of length n;"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.RBFitter.calc_statistics:12
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.calc_statistics:12
msgid ""
"entry j of this array contains the std of the probability of success over"
" seeds, for vector length self._cliff_lengths[i][j]."
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit_data:3
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.fit_data:3
msgid "Fit each of the patterns"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit_data:9
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.fit_data:9
msgid "Puts the results into a list of fit dictionaries:"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit_data:6
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.fit_data:6
msgid ""
"where each dictionary corresponds to a pattern and has fields: 'params' -"
" three parameters of rb_fit_fun. The middle one is the"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit_data:8
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.fit_data:8
msgid "exponent."
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.fit_data:9
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.fit_data:9
msgid "'err' - the error limits of the parameters. 'epc' - error per Clifford"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.RBFitter.plot_rb_data:3
#: qiskit.ignis.verification.randomized_benchmarking.fitters.RBFitter.plot_rb_data:3
msgid "which RB pattern to plot"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.circuits.rst:2
msgid "qiskit.ignis.verification.randomized\\_benchmarking.circuits module"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits:1
msgid "Generates randomized benchmarking sequences"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits.calc_xdata:1
msgid "Calculate the set of sequences lengths"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits.calc_xdata:3
msgid "vector length"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits.calc_xdata:4
msgid "length of the multiplier of the vector length"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits.calc_xdata:6
msgid "An array of sequences lengths"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern:1
msgid ""
"Verifies that the input pattern is valid i.e., that each qubit appears at"
" most once"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern:4
msgid "RB pattern"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern:7
msgid "if the pattern is not valid"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.check_pattern:9
msgid ""
"flat list of all the qubits in the pattern maxqubit: the maximum qubit "
"number"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.handle_length_multiplier:1
msgid ""
"Check validity of length_multiplier. In addition, transform it into a "
"vector if it is a constant."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.handle_length_multiplier:4
msgid "length of the multiplier"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.handle_length_multiplier:5
msgid "length of the RB pattern"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.handle_length_multiplier:7
msgid "length_multiplier"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits.load_tables:1
msgid "Returns the needed Clifford tables"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits.load_tables:3
msgid "maximal number of qubits for the largest required table"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.circuits.load_tables:5
msgid "A table of Clifford objects"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:1
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:1
msgid "Get a generic randomized benchmarking sequence"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:3
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:3
msgid "number of seeds"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:4
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:4
msgid "'m' length vector of Clifford lengths. Must be in"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:7
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:7
msgid "A list of the form [[i,j],[k],...] which will make"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:14
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:14
msgid "if this is an array it scales each rb_sequence by"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:16
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:16
msgid "What to start the seeds at (e.g. if we"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:18
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:18
msgid "If true adds a barrier across all qubits in rb_pattern"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:19
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:19
msgid "aligns after each increment"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.randomized_benchmarking_seq:24
#: qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq:24
msgid ""
"list of lists of circuits for the rb sequences (separate list for each "
"seed) xdata: the Clifford lengths (with multiplier if applicable) "
"rb_opts_dict: option dictionary back out with default options appended"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.replace_q_indices:1
msgid ""
"Take a circuit that is ordered from 0,1,2 qubits and replace 0 with the "
"qubit label in the first index of q_nums, 1 with the second index..."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.replace_q_indices:4
msgid "circuit to operate on"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.replace_q_indices:5
msgid "list of qubit indices"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.circuits.replace_q_indices:7
msgid "updated circuit"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.clifford_utils.rst:2
msgid ""
"qiskit.ignis.verification.randomized\\_benchmarking.clifford\\_utils "
"module"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.clifford_utils:1
msgid "Advanced Clifford operations needed for randomized benchmarking"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates:1
msgid "Make a single qubit Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates:3
msgid "the index (mod 24) of a single qubit Clifford."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates:5
msgid "A single qubit Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates_table:1
msgid "Generate a table of all 1-qubit Clifford gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford1_gates_table:5
msgid "A table of all 1-qubit Clifford gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates:1
msgid "Make a 2-qubit Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates:3
msgid "the index (mod 11520) of a two-qubit Clifford."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates:5
msgid "A 2-qubit Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates_table:1
msgid "Generate a table of all 2-qubit Clifford gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford2_gates_table:5
msgid "A table of all 2-qubit Clifford gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford_from_gates:1
msgid "Generates a Clifford object from a list of gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford_from_gates:3
msgid "the number of qubits for the Clifford."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford_from_gates:4
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.compose_gates:4
msgid "a list of gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.clifford_from_gates:6
msgid "A num-qubit Clifford class object."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.compose_gates:1
msgid "Add gates to a Clifford object from a list of gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.compose_gates:3
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.compose_gates:6
msgid "A Clifford class object."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.cx_gates:1
msgid "adds a controlled=x gates"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.find_inverse_clifford_gates:1
msgid "Find the inverse of a Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.find_inverse_clifford_gates:3
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.get_quantum_circuit:3
msgid "the dimension of the Clifford."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.find_inverse_clifford_gates:4
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.get_quantum_circuit:4
msgid "a Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.find_inverse_clifford_gates:6
msgid "An inverse Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.get_quantum_circuit:1
msgid "Returns the Clifford circuit in the form of a QuantumCircuit object."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.get_quantum_circuit:6
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_circuit:8
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_circuit:9
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_circuit:9
msgid "A QuantumCircuit object."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.h_gates:1
msgid "adds a hadamard gate or not on qubit q"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.load_clifford_table:1
msgid "Load pickled files of the tables of 1 and 2 qubit Clifford tables."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.load_clifford_table:5
msgid "A table of 1 and 2 qubit Clifford gates."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.pauli_gates:1
msgid "adds a pauli gate on qubit q"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.pickle_clifford_table:1
msgid "Create pickled versions of the 1 and 2 qubit Clifford tables."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.pickle_clifford_table:6
msgid "A pickle file with the 1 and 2 qubit Clifford tables."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.random_clifford_gates:1
msgid "Pick a random Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.random_clifford_gates:3
msgid "dimension of the Clifford."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.random_clifford_gates:5
msgid "A 1 or 2 qubit Clifford gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.clifford_utils.v_gates:1
msgid "adds an axis-swap-gates on qubit q"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.fitters.rst:2
msgid "qiskit.ignis.verification.randomized\\_benchmarking.fitters module"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.fitters:1
msgid "Functions used for the analysis of randomized benchmarking results."
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.randomized_benchmarking_seq.rst:2
msgid "randomized_benchmarking_seq"
msgstr ""

#: ../../api/qiskit.ignis.verification.randomized_benchmarking.rb_utils.rst:2
msgid "qiskit.ignis.verification.randomized\\_benchmarking.rb\\_utils module"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils:1
msgid "RB Helper functions"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit:1
msgid "The error per gate (1-average_gate_fidelity) given by the T1,T2 limit"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit:3
msgid "number of qubits (1 and 2 supported)"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit:4
msgid "list of T1's (Q1,...,Qn)"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit:5
msgid "list of T2's (as measured, not Tphi). If not given assume T2=2*T1"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit:7
msgid "length of the gate"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.coherence_limit:9
msgid "coherence limited error per gate"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:1
msgid "Take a compiled qobj and output the number of gates in each circuit"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:3
msgid "compiled qobj"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:4
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:6
msgid "gates basis for the qobj"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:5
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:7
msgid "qubits to count over"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:7
msgid ""
"n x l x m list of number of gates     n: number of circuits     l: number"
" of qubits     m: number of gates in basis"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:12
msgid "n x l x m list of number of gates"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:10
msgid "n: number of circuits l: number of qubits m: number of gates in basis"
msgstr ""

#: of qiskit.ignis.verification.randomized_benchmarking.rb_utils.count_gates:15
msgid "nQ gates are counted in each qubit's set of gates"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:1
msgid ""
"Take a list of compiled qobjs (for each seed) and use these to calculate "
"the number of gates per clifford"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:4
msgid "compiled qobjs for each seed"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:5
msgid "number of cliffords in each circuit"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:9
msgid ""
"l x m list of number of gates per clifford (same order as basis).     l: "
"number of qubits     m: length of basis"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:9
msgid "l x m list of number of gates per clifford (same order as basis)."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.gates_per_clifford:11
msgid "l: number of qubits m: length of basis"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.twoQ_clifford_error:1
msgid ""
"The two qubit Clifford gate error given measured errors in the primitive "
"gates used to construct the Clifford (see arxiv:1712.06550). Assumes the "
"error in the underlying gates is depolarizing."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.twoQ_clifford_error:5
msgid "list of the number of gates per 2Q Clifford"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.twoQ_clifford_error:6
msgid ""
"list of the qubit corresponding to the gate (0, 1 or -1). -1 corresponds "
"to the 2Q gate."
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.twoQ_clifford_error:8
msgid "list of the gate errors"
msgstr ""

#: of
#: qiskit.ignis.verification.randomized_benchmarking.rb_utils.twoQ_clifford_error:10
msgid "Error per 2Q Clifford"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.rst:2
msgid "qiskit.ignis.verification.tomography package"
msgstr ""

#: of qiskit.ignis.verification.tomography:1
msgid "Quantum State and Process Tomography module"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:2
msgid "ProcessTomographyFitter"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter:1
#: qiskit.ignis.verification.tomography.StateTomographyFitter:1
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter:1
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter:1
msgid ""
"ベースクラス: "
":class:`qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter`"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter:1
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter:1
msgid "Maximum-Likelihood estimation process tomography fitter."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`data "
"<qiskit.ignis.verification.tomography.ProcessTomographyFitter.data>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:16:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:16:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:16:<autosummary>:1
#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.data:1
#: qiskit.ignis.verification.tomography.StateTomographyFitter.data:1
#: qiskit.ignis.verification.tomography.TomographyFitter.data:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.data:1
msgid "Return tomography data"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`measure_basis "
"<qiskit.ignis.verification.tomography.ProcessTomographyFitter.measure_basis>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:16:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:16:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:16:<autosummary>:1
#: of
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.measure_basis:1
#: qiskit.ignis.verification.tomography.StateTomographyFitter.measure_basis:1
#: qiskit.ignis.verification.tomography.TomographyFitter.measure_basis:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.measure_basis:1
msgid "Return the tomography measurement basis."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`preparation_basis "
"<qiskit.ignis.verification.tomography.ProcessTomographyFitter.preparation_basis>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:16:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:16:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:16:<autosummary>:1
#: of
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.preparation_basis:1
#: qiskit.ignis.verification.tomography.StateTomographyFitter.preparation_basis:1
#: qiskit.ignis.verification.tomography.TomographyFitter.preparation_basis:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.preparation_basis:1
msgid "Return the tomography preperation basis."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.verification.tomography.ProcessTomographyFitter.add_data>`\\"
" \\(result\\, circuits\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.add_data:1
#: qiskit.ignis.verification.tomography.StateTomographyFitter.add_data:1
#: qiskit.ignis.verification.tomography.TomographyFitter.add_data:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.add_data:1
msgid "Add tomography data from a Qiskit Result object."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`fit "
"<qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit>`\\ "
"\\(\\[method\\, standard\\_weights\\, beta\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:1
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:1
msgid "Reconstruct a quantum channel using CVXPY convex optimization."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`set_measure_basis "
"<qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_measure_basis>`\\"
" \\(basis\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
#: of
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_measure_basis:1
#: qiskit.ignis.verification.tomography.StateTomographyFitter.set_measure_basis:1
#: qiskit.ignis.verification.tomography.TomographyFitter.set_measure_basis:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.set_measure_basis:1
msgid "Set the measurement basis"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`set_preparation_basis "
"<qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_preparation_basis>`\\"
" \\(basis\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.ProcessTomographyFitter.rst:25:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
#: of
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_preparation_basis:1
#: qiskit.ignis.verification.tomography.StateTomographyFitter.set_preparation_basis:1
#: qiskit.ignis.verification.tomography.TomographyFitter.set_preparation_basis:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.set_preparation_basis:1
msgid "Set the prepearation basis function"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.add_data:3
#: qiskit.ignis.verification.tomography.StateTomographyFitter.add_data:3
#: qiskit.ignis.verification.tomography.TomographyFitter.add_data:3
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.add_data:3
msgid "a Qiskit Result object obtained from executing tomography circuits."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.add_data:6
#: qiskit.ignis.verification.tomography.StateTomographyFitter.add_data:6
#: qiskit.ignis.verification.tomography.TomographyFitter.add_data:6
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.add_data:6
msgid ""
"a list of circuits or circuit names to extract count information from the"
" result object."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:3
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:3
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:3
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:3
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:3
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:3
msgid "The fitter method 'auto', 'cvx' or 'lstsq'."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:5
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:5
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:5
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:5
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:5
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:5
msgid ""
"Apply weights to tomography data based on count probability (default: "
"True)"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:10
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:10
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:10
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:10
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:10
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:10
msgid "hedging parameter for converting counts to probabilities (default: 0.5)"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:13
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:14
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:25
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:25
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:13
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:14
msgid "kwargs for fitter method."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:16
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:16
msgid ""
"The fitted Choi-matrix J for the channel that maximizes ||basis_matrix * "
"vec(J) - data||_2. The Numpy matrix can be obtained from `Choi.data`."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:25
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:25
msgid ""
"The Choi matrix object is a QuantumChannel representation which may be "
"converted to other representations using the classes `SuperOp`, `Kraus`, "
"`Stinespring`, `PTM`, `Chi` from the module "
"`qiskit.quantum_info.operators`. The raw matrix data for the "
"representation may be obtained by `channel.data`."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:33
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:24
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:35
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:35
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:33
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:24
msgid ""
"The 'cvx' fitter method used CVXPY convex optimization package. The "
"'lstsq' method uses least-squares fitting (linear inversion). The 'auto' "
"method will use 'cvx' if the CVXPY package is found on the system, "
"otherwise it will default to 'lstsq'."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:40
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:31
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:42
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:42
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:30
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:40
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:31
msgid "This fitter solves the constrained least-squares minimization:"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:42
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:42
msgid "minimize: ||a * x - b ||_2 subject to: x >> 0 (PSD)"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:44
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:44
msgid "trace(x) = dim (trace) partial_trace(x) = identity (trace_preserving)"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:51
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:41
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:55
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:55
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:42
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:32
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:51
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:41
msgid "where:"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:48
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:48
msgid ""
"a is the matrix of measurement operators a[i] = vec(M_i).H b is the "
"vector of expectation value data for each projector b[i] ~ Tr[M_i.H * x] "
"= (a * x)[i] x is the vectorized Choi-matrix to be fitted"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:55
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:45
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:59
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:59
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:55
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:45
msgid ""
"The PSD keyword constrains the fitted matrix to be postive-semidefinite. "
"For the 'lstsq' fitter method the fitted matrix is rescaled using the "
"method proposed in Reference [1]. For the 'cvx' fitter method the convex "
"constraint makes the optimization problem a SDP. If PSD=False the fitted "
"matrix will still be constrained to be Hermitian, but not PSD. In this "
"case the optimization problem becomes a SOCP."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:68
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:58
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:71
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:71
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:53
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:68
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:58
msgid ""
"The trace keyword constrains the trace of the fitted matrix. If "
"trace=None there will be no trace constraint on the fitted matrix. This "
"constraint should not be used for process tomography and the trace "
"preserving constraint should be used instead."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:75
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:75
msgid ""
"The trace_preserving keyword constrains the fitted matrix to be TP. This "
"should only be used for process tomography, not state tomography. Note "
"that the TP constraint implicitly enforces the trace of the fitted matrix"
" to be equal to the square-root of the matrix dimension. If a trace "
"constraint is also specified that differs f rom this value the fit will "
"likely fail. Note that this can only be used for the CVX method."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:90
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:65
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:91
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:91
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:69
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:90
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:65
msgid ""
"Various solvers can be called in CVXPY using the `solver` keyword "
"argument. Solvers included in CVXPY are:"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:92
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:67
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:93
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:93
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:71
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:92
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:67
msgid ""
"'CVXOPT': SDP and SOCP (default solver) 'SCS'   : SDP and SOCP 'ECOS'  : "
"SOCP only"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:95
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:70
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:96
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:96
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:74
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:95
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:70
msgid "See the documentation on CVXPY for more information on solvers."
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:97
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:72
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:98
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:98
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:97
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:72
msgid ""
"References: [1] J Smolin, JM Gambetta, G Smith, Phys. Rev. Lett. 108, "
"070502"
msgstr ""

#: of qiskit.ignis.verification.tomography.ProcessTomographyFitter.fit:99
#: qiskit.ignis.verification.tomography.StateTomographyFitter.fit:74
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:100
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:100
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:51
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite:15
#: qiskit.ignis.verification.tomography.fitters.process_fitter.ProcessTomographyFitter.fit:99
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:74
msgid "(2012). Open access: arXiv:1106.5458 [quant-ph]."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_measure_basis:3
#: qiskit.ignis.verification.tomography.StateTomographyFitter.set_measure_basis:3
#: qiskit.ignis.verification.tomography.TomographyFitter.set_measure_basis:3
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.set_measure_basis:3
msgid "measurement basis"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.ProcessTomographyFitter.set_preparation_basis:3
#: qiskit.ignis.verification.tomography.StateTomographyFitter.set_preparation_basis:3
#: qiskit.ignis.verification.tomography.TomographyFitter.set_preparation_basis:3
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.set_preparation_basis:3
msgid "preparation basis"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:2
msgid "StateTomographyFitter"
msgstr ""

#: of qiskit.ignis.verification.tomography.StateTomographyFitter:1
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter:1
msgid "Maximum-Likelihood estimation state tomography fitter."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`data "
"<qiskit.ignis.verification.tomography.StateTomographyFitter.data>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`measure_basis "
"<qiskit.ignis.verification.tomography.StateTomographyFitter.measure_basis>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`preparation_basis "
"<qiskit.ignis.verification.tomography.StateTomographyFitter.preparation_basis>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.verification.tomography.StateTomographyFitter.add_data>`\\ "
"\\(result\\, circuits\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`fit "
"<qiskit.ignis.verification.tomography.StateTomographyFitter.fit>`\\ "
"\\(\\[method\\, standard\\_weights\\, beta\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
#: of qiskit.ignis.verification.tomography.StateTomographyFitter.fit:1
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:1
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:1
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:1
msgid "Reconstruct a quantum state using CVXPY convex optimization."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`set_measure_basis "
"<qiskit.ignis.verification.tomography.StateTomographyFitter.set_measure_basis>`\\"
" \\(basis\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.StateTomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`set_preparation_basis "
"<qiskit.ignis.verification.tomography.StateTomographyFitter.set_preparation_basis>`\\"
" \\(basis\\)"
msgstr ""

#: of qiskit.ignis.verification.tomography.StateTomographyFitter.fit:17
#: qiskit.ignis.verification.tomography.TomographyFitter.fit:28
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:28
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:23
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:17
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:17
msgid "The fitted matrix rho that minimizes ||basis_matrix * vec(rho) - data||_2."
msgstr ""

#: of qiskit.ignis.verification.tomography.StateTomographyFitter.fit:33
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:33
msgid "minimize: ||a * x - b ||_2 subject to: x >> 0"
msgstr ""

#: of qiskit.ignis.verification.tomography.StateTomographyFitter.fit:35
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:35
msgid "trace(x) = 1"
msgstr ""

#: of qiskit.ignis.verification.tomography.StateTomographyFitter.fit:38
#: qiskit.ignis.verification.tomography.fitters.state_fitter.StateTomographyFitter.fit:38
msgid ""
"a is the matrix of measurement operators a[i] = vec(M_i).H b is the "
"vector of expectation value data for each projector b[i] ~ Tr[M_i.H * x] "
"= (a * x)[i] x is the vectorized density matrix to be fitted"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:2
msgid "TomographyFitter"
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter:1
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter:1
msgid "Basse maximum-likelihood estimate tomography fitter class"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:16:<autosummary>:1
msgid ":obj:`data <qiskit.ignis.verification.tomography.TomographyFitter.data>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`measure_basis "
"<qiskit.ignis.verification.tomography.TomographyFitter.measure_basis>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:16:<autosummary>:1
msgid ""
":obj:`preparation_basis "
"<qiskit.ignis.verification.tomography.TomographyFitter.preparation_basis>`\\"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`add_data "
"<qiskit.ignis.verification.tomography.TomographyFitter.add_data>`\\ "
"\\(result\\, circuits\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`fit <qiskit.ignis.verification.tomography.TomographyFitter.fit>`\\ "
"\\(\\[method\\, standard\\_weights\\, beta\\]\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`set_measure_basis "
"<qiskit.ignis.verification.tomography.TomographyFitter.set_measure_basis>`\\"
" \\(basis\\)"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.TomographyFitter.rst:25:<autosummary>:1
msgid ""
":obj:`set_preparation_basis "
"<qiskit.ignis.verification.tomography.TomographyFitter.set_preparation_basis>`\\"
" \\(basis\\)"
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:14
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:14
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:10
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:10
msgid "Enforced the fitted matrix to be positive semidefinite (default: True)"
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:17
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:17
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:13
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:13
msgid "trace constraint for the fitted matrix (default: None)."
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:20
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:20
msgid ""
"Enforce the fitted matrix to be trace preserving when fitting a Choi-"
"matrix in quantum process tomography. Note this method does not apply for"
" 'lstsq' fitter method (default: False)."
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:44
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:44
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:32
msgid "minimize: ||a * x - b ||_2 subject to: x >> 0 (PSD, optional)"
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:46
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:46
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:34
msgid ""
"trace(x) = t (trace, optional) partial_trace(x) = identity "
"(trace_preserving,"
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:48
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:48
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:36
msgid "optional)"
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:51
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:51
msgid ""
"a is the matrix of measurement operators a[i] = vec(M_i).H b is the "
"vector of expectation value data for each projector b[i] ~ Tr[M_i.H * x] "
"= (a * x)[i] x is the vectorized density matrix (or Choi-matrix) to be "
"fitted"
msgstr ""

#: of qiskit.ignis.verification.tomography.TomographyFitter.fit:78
#: qiskit.ignis.verification.tomography.fitters.base_fitter.TomographyFitter.fit:78
msgid ""
"The trace_preserving keyword constrains the fitted matrix to be TP. This "
"should only be used for process tomography, not state tomography. Note "
"that the TP constraint implicitly enforces the trace of the fitted matrix"
" to be equal to the square-root of the matrix dimension. If a trace "
"constraint is also specified that differs from this value the fit will "
"likely fail. Note that this can only be used for the CVX method."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.basis.rst:2
msgid "qiskit.ignis.verification.tomography.basis package"
msgstr ""

#: of qiskit.ignis.verification.tomography.basis:1
msgid "Quantum tomography basis"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.basis.circuits.rst:2
msgid "qiskit.ignis.verification.tomography.basis.circuits module"
msgstr ""

#: of qiskit.ignis.verification.tomography.basis.circuits:1
msgid "Quantum tomography circuit generation."
msgstr ""

#: of qiskit.ignis.verification.tomography.basis.circuits.default_basis:1
msgid "Built in Tomography Bases"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:1
#: qiskit.ignis.verification.tomography.process_tomography_circuits:1
msgid "Return a list of quantum process tomography circuits."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:3
#: qiskit.ignis.verification.tomography.process_tomography_circuits:3
msgid ""
"This performs preparation in the minimial Pauli-basis eigenstates Zp, Zm,"
" Xp, Ym (|0>, |1>, |+>, |+i>) on each qubit, and measurement in the "
"Pauli-basis X, Y, Z resulting in (4 ** n) * (3 ** n) circuits for an "
"n-qubit process tomography experiment."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:8
#: qiskit.ignis.verification.tomography.process_tomography_circuits:8
msgid "the QuantumCircuit circuit to be tomographed."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:11
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:9
#: qiskit.ignis.verification.tomography.process_tomography_circuits:11
#: qiskit.ignis.verification.tomography.state_tomography_circuits:9
msgid ""
"the qubits to be measured. This can also be a list of whole "
"QuantumRegisters or individual QuantumRegister qubit tuples."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:15
#: qiskit.ignis.verification.tomography.process_tomography_circuits:15
msgid ""
"the qubits to have state preparation applied, if different from "
"measured_qubits. If None measured_qubits will be used for prepared qubits"
" (Default: None)."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:19
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:13
#: qiskit.ignis.verification.tomography.process_tomography_circuits:19
#: qiskit.ignis.verification.tomography.state_tomography_circuits:13
msgid ""
"The measurement operator labels. See additional information for details "
"(Default: 'Pauli')."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:22
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:16
#: qiskit.ignis.verification.tomography.process_tomography_circuits:22
#: qiskit.ignis.verification.tomography.state_tomography_circuits:16
msgid ""
"The measurement basis. See additional information for details (Default: "
"'Pauli')."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:25
#: qiskit.ignis.verification.tomography.process_tomography_circuits:25
msgid ""
"The preparation operator labels. See additional information for details "
"(Default: 'Pauli')."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:28
#: qiskit.ignis.verification.tomography.process_tomography_circuits:28
msgid ""
"The preparation basis. See additional information for details (Default: "
"'Pauli')."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:32
#: qiskit.ignis.verification.tomography.process_tomography_circuits:32
msgid ""
"A list of QuantumCircuit objects containing the original circuit with "
"state preparation circuits prepended, and measurement circuits appended."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:37
#: qiskit.ignis.verification.tomography.process_tomography_circuits:37
msgid ""
"The returned circuits are named by the preparation and measurement basis."
" These circuit names can be recovered using the "
"`process_tomography_circuit_names` function to retrieve count data from a"
" QISKit Result object at a later time."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.process_tomography_circuits:42
#: qiskit.ignis.verification.tomography.process_tomography_circuits:42
msgid ""
"To perform tomography measurement in a custom basis, or to generate a "
"subset of process tomography circuits for a partial tomography experiment"
" use the general function `tomography_circuits`."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:1
#: qiskit.ignis.verification.tomography.state_tomography_circuits:1
msgid "Return a list of quantum state tomography circuits."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:3
#: qiskit.ignis.verification.tomography.state_tomography_circuits:3
msgid ""
"This performs measurement in the Pauli-basis resulting in 3 ** n circuits"
" for an n-qubit state tomography experiment."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:6
#: qiskit.ignis.verification.tomography.state_tomography_circuits:6
msgid "the state preparation circuit to be tomographed."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:20
#: qiskit.ignis.verification.tomography.state_tomography_circuits:20
msgid ""
"A list of QuantumCircuit objects containing the original circuit with "
"state tomography measurements appended at the end."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:24
#: qiskit.ignis.verification.tomography.state_tomography_circuits:24
msgid "The returned circuits are named by the measurement basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.state_tomography_circuits:26
#: qiskit.ignis.verification.tomography.state_tomography_circuits:26
msgid ""
"To perform tomography measurement in a custom basis, or to generate a "
"subset of state tomography circuits for a partial tomography experiment "
"use the general function `tomography_circuits`."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.circuits.tomography_circuit_tuples:1
msgid "Return list of tomography circuit label tuples."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.basis.paulibasis.rst:2
msgid "qiskit.ignis.verification.tomography.basis.paulibasis module"
msgstr ""

#: of qiskit.ignis.verification.tomography.basis.paulibasis:1
msgid "Pauli tomography preparation and measurement basis"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_circuit:1
msgid "Return a qubit Pauli operator measurement circuit."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_circuit:6
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_circuit:7
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_circuit:7
#: qiskit.providers.aer.noise.device.models.basic_device_noise_model:17
msgid "Params:"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_circuit:4
msgid ""
"op (str): Pauli operator 'X', 'Y', 'Z'. qubit (QuantumRegister tuple): "
"qubit to be measured. clbit (ClassicalRegister tuple): clbit for "
"measurement outcome."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix:1
msgid "Return the matrix corresonding to a Pauli measurement outcome."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix:3
msgid "single-qubit Pauli measurement operator label."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix:5
msgid "measurement outcome."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix:8
msgid ""
"A Numpy array for measurement outcome operator.     Allowed inputs and "
"corresponding returned matrices are:      'X', 0 : [[1, 1], [1, 1]] / "
"sqrt(2)     'X', 1 : [[1, -1], [1, -1]] / sqrt(2)     'Y', 0 : [[1, -1j],"
" [1j, 1]] / sqrt(2)     'Y', 1 : [[1, 1j], [-1j, 1]] / sqrt(2)     'Z', 0"
" : [[1, 0], [0, 0]]     'Z', 1 : [[0, 0], [0, 1]]"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix:17
msgid "A Numpy array for measurement outcome operator."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix:11
msgid "Allowed inputs and corresponding returned matrices are:"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_measurement_matrix:13
msgid ""
"'X', 0 : [[1, 1], [1, 1]] / sqrt(2) 'X', 1 : [[1, -1], [1, -1]] / sqrt(2)"
" 'Y', 0 : [[1, -1j], [1j, 1]] / sqrt(2) 'Y', 1 : [[1, 1j], [-1j, 1]] / "
"sqrt(2) 'Z', 0 : [[1, 0], [0, 0]] 'Z', 1 : [[0, 0], [0, 1]]"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_circuit:1
msgid "Return a qubit Pauli eigenstate preparation circuit."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_circuit:3
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_circuit:3
msgid "This circuit assumes the qubit is initialized in the Zp eigenstate [1, 0]."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_circuit:6
msgid ""
"op (str): Pauli eigenstate 'Zp', 'Zm', 'Xp', 'Xm', 'Yp', or 'Ym'. qubit "
"(QuantumRegister tuple): qubit to be prepared."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix:1
msgid "Return the matrix corresonding to a Pauli eigenstate preparation."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix:3
msgid "single-qubit Pauli eigenstate operator label."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix:6
msgid ""
"A Numpy array for the Pauli eigenstate. Allowed inputs     and "
"corresponding returned matrices are:     'Xp' : [[1, 1], [1, 1]] / "
"sqrt(2)     'Xm' : [[1, -1], [1, -1]] / sqrt(2)     'Yp' : [[1, -1j], "
"[1j, 1]] / sqrt(2)     'Ym' : [[1, 1j], [-1j, 1]] / sqrt(2)     'Zp' : "
"[[1, 0], [0, 0]]     'Zm' : [[0, 0], [0, 1]]"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix:14
msgid "A Numpy array for the Pauli eigenstate. Allowed inputs"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.paulibasis.pauli_preparation_matrix:9
msgid ""
"and corresponding returned matrices are: 'Xp' : [[1, 1], [1, 1]] / "
"sqrt(2) 'Xm' : [[1, -1], [1, -1]] / sqrt(2) 'Yp' : [[1, -1j], [1j, 1]] / "
"sqrt(2) 'Ym' : [[1, 1j], [-1j, 1]] / sqrt(2) 'Zp' : [[1, 0], [0, 0]] 'Zm'"
" : [[0, 0], [0, 1]]"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.basis.sicbasis.rst:2
msgid "qiskit.ignis.verification.tomography.basis.sicbasis module"
msgstr ""

#: of qiskit.ignis.verification.tomography.basis.sicbasis:1
msgid ""
"Symmetric informationally complete (SIC)-POVM tomography preparation "
"basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_circuit:1
msgid "Return a SIC-POVM projector preparation circuit."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_circuit:6
msgid ""
"op (str): SIC-POVM element label 'S0', 'S1', 'S2' or 'S3'. qubit "
"(QuantumRegister tuple): qubit to be prepared."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:1
msgid "Return the matrix corresonding to a SIC-POVM preparation."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:3
msgid "single-qubit SIC-POVM element label."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:6
msgid ""
"A Numpy array for the SIC-POVM element. Allowed inputs and corresponding "
"returned matrices are:      'S0' : [[1, 0], [0, 0]]     'S1' : [[1, "
"np.sqrt(2)], [np.sqrt(2), 2]]/ 3     'S2' : [[1, exp(pi * 2j / 3) * "
"sqrt(2)],              [exp(-pi * 2j / 3) * sqrt(2), 2]] / 3     'S3' : "
"[[1, exp(-pi * 2j / 3) * sqrt(2)],              [exp(pi * 2j / 3) * "
"sqrt(2), 2]] / 3"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:6
msgid ""
"A Numpy array for the SIC-POVM element. Allowed inputs and corresponding "
"returned matrices are:"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:9
msgid ""
"'S0' : [[1, 0], [0, 0]] 'S1' : [[1, np.sqrt(2)], [np.sqrt(2), 2]]/ 3 'S2'"
" : [[1, exp(pi * 2j / 3) * sqrt(2)],"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:12
msgid "[exp(-pi * 2j / 3) * sqrt(2), 2]] / 3"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:13
msgid "'S3'"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:12
msgid "[[1, exp(-pi * 2j / 3) * sqrt(2)],"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.sicbasis.sicpovm_preparation_matrix:14
msgid "[exp(pi * 2j / 3) * sqrt(2), 2]] / 3"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.basis.tomographybasis.rst:2
msgid "qiskit.ignis.verification.tomography.basis.tomographybasis module"
msgstr ""

#: of qiskit.ignis.verification.tomography.basis.tomographybasis:1
msgid "TomographyBasis class"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis:1
msgid "Tomography basis class."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.measurement:1
msgid "The measurement of the tomography basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.measurement_circuit:1
msgid "Return the measurement circuits."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.measurement_labels:1
msgid "The measurement labels of the tomography basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.measurement_matrix:1
msgid "Return the measurement matrix."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.name:1
msgid "The name of the tomography basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.preparation:1
msgid "The preparation of the tomography basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.preparation_circuit:1
msgid "Return the preparation circuits."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.preparation_labels:1
msgid "The preparation labels of the tomography basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.basis.tomographybasis.TomographyBasis.preparation_matrix:1
msgid "Return the preparation matrix."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.combine_counts.rst:2
msgid "combine_counts"
msgstr ""

#: of qiskit.ignis.verification.tomography.combine_counts:1
#: qiskit.ignis.verification.tomography.data.combine_counts:1
msgid "Combine two counts dictionaries."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.count_keys.rst:2
msgid "count_keys"
msgstr ""

#: of qiskit.ignis.verification.tomography.count_keys:1
#: qiskit.ignis.verification.tomography.data.count_keys:1
msgid "Return ordered count keys."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.data.rst:2
msgid "qiskit.ignis.verification.tomography.data module"
msgstr ""

#: of qiskit.ignis.verification.tomography.data:1
msgid "Quantum tomography data"
msgstr ""

#: of qiskit.ignis.verification.tomography.data.expectation_counts:1
#: qiskit.ignis.verification.tomography.expectation_counts:1
msgid "Converts count dict to an expectation counts dict."
msgstr ""

#: of qiskit.ignis.verification.tomography.data.expectation_counts:3
#: qiskit.ignis.verification.tomography.expectation_counts:3
msgid ""
"The returned dictionary is also a counts dictionary but the keys "
"correspond to the which subsystems the operators are acting on and the "
"counts are the un-normalized expectation values. The counts can be "
"converted to expectation values by dividing by the value of the all '0's "
"entry. The '0's key is the expectation value of the identity operator, "
"and its value is equal to the number of shots ."
msgstr ""

#: of qiskit.ignis.verification.tomography.data.expectation_counts:10
#: qiskit.ignis.verification.tomography.data.marginal_counts:3
#: qiskit.ignis.verification.tomography.expectation_counts:10
#: qiskit.ignis.verification.tomography.marginal_counts:3
msgid "a counts dictionary."
msgstr ""

#: of qiskit.ignis.verification.tomography.data.expectation_counts:13
#: qiskit.ignis.verification.tomography.expectation_counts:13
msgid ""
"A new counts dictionary where the counts are un-normalized expectation "
"values for the subsystem measurement operators."
msgstr ""

#: of qiskit.ignis.verification.tomography.data.expectation_counts:17
#: qiskit.ignis.verification.tomography.expectation_counts:17
#: qiskit.tools.qcvv.tomography.TomographyBasis:15
#: qiskit.tools.qcvv.tomography.create_tomography_circuits:32
#: qiskit.validation.fields.polymorphic.ByAttribute:8
#: qiskit.validation.fields.polymorphic.ByType:9
#: qiskit.validation.fields.polymorphic.TryFrom:10
#: qiskit.validation.validate.Or:7
msgid "サンプル"
msgstr ""

#: of qiskit.ignis.verification.tomography.data.expectation_counts:18
#: qiskit.ignis.verification.tomography.expectation_counts:18
msgid ""
"Consider a input counts dictionary for `s` shots of measurement of the "
"two-qubit operator XZ (X on qubit-1, Z on qubit-0). The dictionary "
"returned will have keys corresponding to:"
msgstr ""

#: of qiskit.ignis.verification.tomography.data.expectation_counts:21
#: qiskit.ignis.verification.tomography.expectation_counts:21
msgid "'00': s * <II>, '01': s * <IZ>, '10': s * <XI>, '11': s * <XZ>"
msgstr ""

#: of qiskit.ignis.verification.tomography.data.marginal_counts:1
#: qiskit.ignis.verification.tomography.marginal_counts:1
msgid "Compute marginal counts from a counts dictionary."
msgstr ""

#: of qiskit.ignis.verification.tomography.data.marginal_counts:5
#: qiskit.ignis.verification.tomography.marginal_counts:5
msgid ""
"the qubits to NOT be marinalized over if this is True meas_qubits will be"
" all measured qubits (default: True)."
msgstr ""

#: of qiskit.ignis.verification.tomography.data.marginal_counts:9
#: qiskit.ignis.verification.tomography.marginal_counts:9
msgid "Include zero count outcomes in return dict."
msgstr ""

#: of qiskit.ignis.verification.tomography.data.marginal_counts:12
#: qiskit.ignis.verification.tomography.marginal_counts:12
msgid ""
"A counts dictionary for the specified qubits. The returned dictionary "
"will have any whitespace trimmed from the input counts keys. Thus if "
"meas_qubits=True the returned dictionary will have the same values as the"
" input dictionary, but with whitespace trimmed from the keys."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.expectation_counts.rst:2
msgid "expectation_counts"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.fitters.rst:2
msgid "qiskit.ignis.verification.tomography.fitters package"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters:1
msgid "Quantum tomography fitter functions"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.fitters.base_fitter.rst:2
msgid "qiskit.ignis.verification.tomography.fitters.base\\_fitter module"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.base_fitter:1
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit:1
msgid "Maximum-Likelihood estimation quantum tomography fitter"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.fitters.cvx_fit.rst:2
msgid "qiskit.ignis.verification.tomography.fitters.cvx\\_fit module"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit:1
msgid "CVXPY convex optimization quantum tomography fitter"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:3
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:3
msgid "vector of expectation values"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:5
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:5
msgid "matrix of measurement operators"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:7
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:7
msgid "vector of weights to apply to the objective function (default: None)"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:16
msgid ""
"Enforce the fitted matrix to be trace preserving when fitting a Choi-"
"matrix in quantum process tomography (default: False)."
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:20
msgid "kwargs for cvxpy solver."
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:39
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:29
msgid ""
"a is the matrix of measurement operators a[i] = vec(M_i).H b is the "
"vector of expectation value data for each projector"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:41
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:31
msgid "b[i] ~ Tr[M_i.H * x] = (a * x)[i]"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:42
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:32
msgid "x is the vectorized density matrix (or Choi-matrix) to be fitted"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:46
msgid ""
"The PSD keyword constrains the fitted matrix to be postive-semidefinite, "
"which makes the optimization problem a SDP. If PSD=False the fitted "
"matrix will still be constrained to be Hermitian, but not PSD. In this "
"case the optimization problem becomes a SOCP."
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.cvx_fit.cvx_fit:60
msgid ""
"The trace_preserving keyword constrains the fitted matrix to be TP. This "
"should only be used for process tomography, not state tomography. Note "
"that the TP constraint implicitly enforces the trace of the fitted matrix"
" to be equal to the square-root of the matrix dimension. If a trace "
"constraint is also specified that differs from this value the fit will "
"likely fail."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super:1
msgid "Return the partial trace superoperator in the column-major basis."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super:3
msgid "This returns the superoperator S_TrB such that:"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super:4
msgid "S_TrB * vec(rho_AB) = vec(rho_A)"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super:5
msgid "for rho_AB = kron(rho_A, rho_B)"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super:7
msgid "the dimension of the system not being traced"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super:9
msgid "the diemsnion of the system being traced over"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.cvx_fit.partial_trace_super:12
msgid "A Numpy array of the partial trace superoperator S_TrB."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.fitters.lstsq_fit.rst:2
msgid "qiskit.ignis.verification.tomography.fitters.lstsq\\_fit module"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:1
msgid "Reconstruct a density matrix using MLE least-squares fitting."
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:24
msgid "This fitter solves the least-squares minimization:"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:26
msgid "minimize ||a * x - b ||_2"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:36
msgid ""
"Since this minimization problem is unconstrained the returned fitted "
"matrix may not be postive semidefinite (PSD). To enforce the PSD "
"constraint the fitted matrix is rescaled using the method proposed in "
"Reference [1]."
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:43
msgid ""
"In general the trace of the fitted matrix will be determined by the input"
" data. If a trace constraint is specified the fitted matrix will be "
"rescaled to have this trace by:"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:46
msgid "rho = trace * rho / trace(rho)"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:49
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite:13
#: qiskit.quantum_info.operators.channel:6
#: qiskit.quantum_info.operators.channel.chi:13
#: qiskit.quantum_info.operators.channel.choi:14
#: qiskit.quantum_info.operators.channel.kraus:16
#: qiskit.quantum_info.operators.channel.ptm:19
#: qiskit.quantum_info.operators.channel.stinespring:16
#: qiskit.quantum_info.operators.channel.superop:13
#: qiskit.tools.qcvv.tomography:19
msgid "参照"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.lstsq_fit.lstsq_fit:50
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite:14
msgid "[1] J Smolin, JM Gambetta, G Smith, Phys. Rev. Lett. 108, 070502"
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite:1
msgid "Rescale a Hermitian matrix to nearest postive semidefinite matrix."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite:3
msgid "a hermitian matrix."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite:5
msgid ""
"the threshold for setting eigenvalues to zero. If epsilon > 0 positive "
"eigenvalues below epislon will also be set to zero (Default 0)."
msgstr ""

#: of
#: qiskit.ignis.verification.tomography.fitters.lstsq_fit.make_positive_semidefinite:10
msgid "The input matrix rescaled to have non-negative eigenvalues."
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.fitters.process_fitter.rst:2
msgid "qiskit.ignis.verification.tomography.fitters.process\\_fitter module"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.process_fitter:1
msgid "Maximum-Likelihood estimation quantum process tomography fitter"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.fitters.state_fitter.rst:2
msgid "qiskit.ignis.verification.tomography.fitters.state\\_fitter module"
msgstr ""

#: of qiskit.ignis.verification.tomography.fitters.state_fitter:1
msgid "Maximum-Likelihood estimation quantum state tomography fitter"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.marginal_counts.rst:2
msgid "marginal_counts"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.process_tomography_circuits.rst:2
msgid "process_tomography_circuits"
msgstr ""

#: ../../api/qiskit.ignis.verification.tomography.state_tomography_circuits.rst:2
msgid "state_tomography_circuits"
msgstr ""

#: ../../api/qiskit.mapper.rst:2
msgid "qiskit.mapper package"
msgstr ""

#: of qiskit.mapper:1
msgid "Utils for mapping."
msgstr ""

#: ../../api/qiskit.mapper.compiling.rst:2
msgid "qiskit.mapper.compiling module"
msgstr ""

#: of qiskit.mapper.compiling:1
msgid "Methods to assist with compiling tasks."
msgstr ""

#: of qiskit.mapper.compiling.euler_angles_1q:1
#: qiskit.mapper.compiling.two_qubit_kak:1
msgid "Moved and API changed after 0.8"
msgstr ""

#: ../../api/qiskit.mapper.coupling.rst:2
msgid "qiskit.mapper.coupling module"
msgstr ""

#: of qiskit.mapper.coupling:1 qiskit.transpiler.coupling:1
msgid "Directed graph object for representing coupling between physical qubits."
msgstr ""

#: of qiskit.mapper.coupling:3 qiskit.mapper.layout:3
msgid "DEPRECATED IN TERRA 0.8+"
msgstr ""

#: ../../api/qiskit.mapper.exceptions.rst:2
msgid "qiskit.mapper.exceptions module"
msgstr ""

#: of qiskit.mapper.exceptions:1
msgid "Exception for errors raised by mapper module."
msgstr ""

#: of qiskit.mapper.exceptions.CouplingError:1
#: qiskit.transpiler.exceptions.CouplingError:1
msgid "Base class for errors raised by the coupling graph object."
msgstr ""

#: of qiskit.mapper.exceptions.LayoutError:1
#: qiskit.transpiler.exceptions.LayoutError:1
msgid "Errors raised by the layout object."
msgstr ""

#: ../../api/qiskit.mapper.layout.rst:2
msgid "qiskit.mapper.layout module"
msgstr ""

#: of qiskit.mapper.layout:1
msgid "A two-ways dict to represent a layout."
msgstr ""

#: ../../api/qiskit.providers.rst:2
msgid "qiskit.providers package"
msgstr ""

#: of qiskit.providers:1
msgid "Utilities for using backends."
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:2
msgid "BaseBackend"
msgstr ""

#: of qiskit.providers.BaseBackend:1
msgid "Base class for backends."
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
msgid ":obj:`configuration <qiskit.providers.BaseBackend.configuration>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
#: of qiskit.providers.BaseBackend.configuration:1
#: qiskit.providers.aer.QasmSimulator.configuration:1
#: qiskit.providers.aer.StatevectorSimulator.configuration:1
#: qiskit.providers.aer.UnitarySimulator.configuration:1
#: qiskit.providers.aer.backends.QasmSimulator.configuration:1
#: qiskit.providers.aer.backends.StatevectorSimulator.configuration:1
#: qiskit.providers.aer.backends.UnitarySimulator.configuration:1
#: qiskit.providers.basicaer.QasmSimulatorPy.configuration:1
#: qiskit.providers.basicaer.StatevectorSimulatorPy.configuration:1
#: qiskit.providers.basicaer.UnitarySimulatorPy.configuration:1
msgid "Return the backend configuration."
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
msgid ":obj:`name <qiskit.providers.BaseBackend.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
msgid ":obj:`properties <qiskit.providers.BaseBackend.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
#: of qiskit.providers.BaseBackend.properties:1
#: qiskit.providers.aer.QasmSimulator.properties:1
#: qiskit.providers.aer.StatevectorSimulator.properties:1
#: qiskit.providers.aer.UnitarySimulator.properties:1
#: qiskit.providers.aer.backends.QasmSimulator.properties:1
#: qiskit.providers.aer.backends.StatevectorSimulator.properties:1
#: qiskit.providers.aer.backends.UnitarySimulator.properties:1
#: qiskit.providers.basicaer.QasmSimulatorPy.properties:1
#: qiskit.providers.basicaer.StatevectorSimulatorPy.properties:1
#: qiskit.providers.basicaer.UnitarySimulatorPy.properties:1
#: qiskit.providers.ibmq.api_v2.rest.backend.Backend.properties:1
msgid "Return backend properties."
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
msgid ":obj:`provider <qiskit.providers.BaseBackend.provider>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
#: of qiskit.providers.BaseBackend.provider:1
#: qiskit.providers.aer.QasmSimulator.provider:1
#: qiskit.providers.aer.StatevectorSimulator.provider:1
#: qiskit.providers.aer.UnitarySimulator.provider:1
#: qiskit.providers.aer.backends.QasmSimulator.provider:1
#: qiskit.providers.aer.backends.StatevectorSimulator.provider:1
#: qiskit.providers.aer.backends.UnitarySimulator.provider:1
#: qiskit.providers.basicaer.QasmSimulatorPy.provider:1
#: qiskit.providers.basicaer.StatevectorSimulatorPy.provider:1
#: qiskit.providers.basicaer.UnitarySimulatorPy.provider:1
msgid "Return the backend Provider."
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
msgid ":obj:`run <qiskit.providers.BaseBackend.run>`\\ \\(qobj\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1 of
#: qiskit.providers.BaseBackend.run:1
msgid "Run a Qobj on the the backend."
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
msgid ":obj:`status <qiskit.providers.BaseBackend.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseBackend.rst:19:<autosummary>:1
#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
#: of qiskit.providers.BaseBackend.status:1
#: qiskit.providers.aer.QasmSimulator.status:1
#: qiskit.providers.aer.StatevectorSimulator.status:1
#: qiskit.providers.aer.UnitarySimulator.status:1
#: qiskit.providers.aer.backends.QasmSimulator.status:1
#: qiskit.providers.aer.backends.StatevectorSimulator.status:1
#: qiskit.providers.aer.backends.UnitarySimulator.status:1
#: qiskit.providers.aer.backends.aerbackend.AerBackend.status:1
#: qiskit.providers.basicaer.QasmSimulatorPy.status:1
#: qiskit.providers.basicaer.StatevectorSimulatorPy.status:1
#: qiskit.providers.basicaer.UnitarySimulatorPy.status:1
#: qiskit.providers.ibmq.api_v2.rest.backend.Backend.status:1
msgid "Return backend status."
msgstr ""

#: of qiskit.providers.BaseBackend.configuration:3
#: qiskit.providers.aer.QasmSimulator.configuration:3
#: qiskit.providers.aer.StatevectorSimulator.configuration:3
#: qiskit.providers.aer.UnitarySimulator.configuration:3
#: qiskit.providers.aer.backends.QasmSimulator.configuration:3
#: qiskit.providers.aer.backends.StatevectorSimulator.configuration:3
#: qiskit.providers.aer.backends.UnitarySimulator.configuration:3
#: qiskit.providers.basicaer.QasmSimulatorPy.configuration:3
#: qiskit.providers.basicaer.StatevectorSimulatorPy.configuration:3
#: qiskit.providers.basicaer.UnitarySimulatorPy.configuration:3
msgid "the configuration for the backend."
msgstr ""

#: of qiskit.providers.BaseBackend.name:3
#: qiskit.providers.aer.QasmSimulator.name:3
#: qiskit.providers.aer.StatevectorSimulator.name:3
#: qiskit.providers.aer.UnitarySimulator.name:3
#: qiskit.providers.aer.backends.QasmSimulator.name:3
#: qiskit.providers.aer.backends.StatevectorSimulator.name:3
#: qiskit.providers.aer.backends.UnitarySimulator.name:3
#: qiskit.providers.basicaer.QasmSimulatorPy.name:3
#: qiskit.providers.basicaer.StatevectorSimulatorPy.name:3
#: qiskit.providers.basicaer.UnitarySimulatorPy.name:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_properties:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_pulse_defaults:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_status:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit_object_storage:3
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job:3
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job_object_storage:3
msgid "the name of the backend."
msgstr ""

#: of qiskit.providers.BaseBackend.properties:3
#: qiskit.providers.aer.QasmSimulator.properties:3
#: qiskit.providers.aer.StatevectorSimulator.properties:3
#: qiskit.providers.aer.UnitarySimulator.properties:3
#: qiskit.providers.aer.backends.QasmSimulator.properties:3
#: qiskit.providers.aer.backends.StatevectorSimulator.properties:3
#: qiskit.providers.aer.backends.UnitarySimulator.properties:3
#: qiskit.providers.basicaer.QasmSimulatorPy.properties:3
#: qiskit.providers.basicaer.StatevectorSimulatorPy.properties:3
#: qiskit.providers.basicaer.UnitarySimulatorPy.properties:3
msgid ""
"the configuration for the backend. If the backend does not support "
"properties, it returns ``None``."
msgstr ""

#: of qiskit.providers.BaseBackend.provider:3
#: qiskit.providers.aer.QasmSimulator.provider:3
#: qiskit.providers.aer.StatevectorSimulator.provider:3
#: qiskit.providers.aer.UnitarySimulator.provider:3
#: qiskit.providers.aer.backends.QasmSimulator.provider:3
#: qiskit.providers.aer.backends.StatevectorSimulator.provider:3
#: qiskit.providers.aer.backends.UnitarySimulator.provider:3
#: qiskit.providers.basicaer.QasmSimulatorPy.provider:3
#: qiskit.providers.basicaer.StatevectorSimulatorPy.provider:3
#: qiskit.providers.basicaer.UnitarySimulatorPy.provider:3
msgid "the Provider responsible for the backend."
msgstr ""

#: of qiskit.providers.BaseBackend.status:3
#: qiskit.providers.aer.QasmSimulator.status:3
#: qiskit.providers.aer.StatevectorSimulator.status:3
#: qiskit.providers.aer.UnitarySimulator.status:3
#: qiskit.providers.aer.backends.QasmSimulator.status:3
#: qiskit.providers.aer.backends.StatevectorSimulator.status:3
#: qiskit.providers.aer.backends.UnitarySimulator.status:3
#: qiskit.providers.aer.backends.aerbackend.AerBackend.status:3
#: qiskit.providers.basicaer.QasmSimulatorPy.status:3
#: qiskit.providers.basicaer.StatevectorSimulatorPy.status:3
#: qiskit.providers.basicaer.UnitarySimulatorPy.status:3
msgid "the status of the backend."
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:2
msgid "BaseJob"
msgstr ""

#: of qiskit.providers.BaseJob:1
msgid "Class to handle asynchronous jobs"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
msgid ":obj:`backend <qiskit.providers.BaseJob.backend>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1 of
#: qiskit.providers.BaseJob.backend:1
msgid "Return the backend for this job."
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
msgid ":obj:`cancel <qiskit.providers.BaseJob.cancel>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1 of
#: qiskit.providers.BaseJob.cancel:1 qiskit.providers.aer.AerJob.cancel:1
#: qiskit.providers.basicaer.BasicAerJob.cancel:1
msgid "Attempt to cancel job."
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
msgid ":obj:`job_id <qiskit.providers.BaseJob.job_id>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1 of
#: qiskit.providers.BaseJob.job_id:1 qiskit.providers.aer.AerJob.job_id:1
#: qiskit.providers.basicaer.BasicAerJob.job_id:1
msgid "Return a unique id identifying the job."
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
msgid ":obj:`result <qiskit.providers.BaseJob.result>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1 of
#: qiskit.providers.BaseJob.result:1
msgid "Return backend result"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
msgid ":obj:`status <qiskit.providers.BaseJob.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1 of
#: qiskit.providers.BaseJob.status:1
msgid "Return one of the values of ``JobStatus``"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1
msgid ":obj:`submit <qiskit.providers.BaseJob.submit>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseJob.rst:19:<autosummary>:1 of
#: qiskit.providers.BaseJob.submit:1
msgid "Submit the job to the backend."
msgstr ""

#: ../../api/qiskit.providers.BaseProvider.rst:2
msgid "BaseProvider"
msgstr ""

#: of qiskit.providers.BaseProvider:1
msgid "Base class for a backend provider."
msgstr ""

#: ../../api/qiskit.providers.BaseProvider.rst:15:<autosummary>:1
msgid ""
":obj:`backends <qiskit.providers.BaseProvider.backends>`\\ "
"\\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseProvider.rst:15:<autosummary>:1
#: ../../api/qiskit.providers.aer.AerProvider.rst:15:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerProvider.rst:15:<autosummary>:1
#: of qiskit.providers.BaseProvider.backends:1
#: qiskit.providers.aer.AerProvider.backends:1
#: qiskit.providers.basicaer.BasicAerProvider.backends:1
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends:1
msgid "Return a list of backends matching the specified filtering."
msgstr ""

#: ../../api/qiskit.providers.BaseProvider.rst:15:<autosummary>:1
msgid ""
":obj:`get_backend <qiskit.providers.BaseProvider.get_backend>`\\ "
"\\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.BaseProvider.rst:15:<autosummary>:1
#: ../../api/qiskit.providers.aer.AerProvider.rst:15:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerProvider.rst:15:<autosummary>:1
#: of qiskit.providers.BaseProvider.get_backend:1
#: qiskit.providers.aer.AerProvider.get_backend:1
#: qiskit.providers.basicaer.BasicAerProvider.get_backend:1
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:1
msgid "Return a single backend matching the specified filtering."
msgstr ""

#: of qiskit.providers.BaseProvider.backends:3
#: qiskit.providers.BaseProvider.get_backend:3
#: qiskit.providers.aer.AerProvider.backends:3
#: qiskit.providers.aer.AerProvider.get_backend:3
#: qiskit.providers.basicaer.BasicAerProvider.backends:3
#: qiskit.providers.basicaer.BasicAerProvider.get_backend:3
#: qiskit.providers.ibmq.api_v2.rest.root.Api.backend:3
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:11
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends:3
msgid "name of the backend."
msgstr ""

#: of qiskit.providers.BaseProvider.backends:5
#: qiskit.providers.BaseProvider.get_backend:5
#: qiskit.providers.aer.AerProvider.backends:5
#: qiskit.providers.aer.AerProvider.get_backend:5
#: qiskit.providers.basicaer.BasicAerProvider.backends:5
#: qiskit.providers.basicaer.BasicAerProvider.get_backend:5
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:13
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends:5
msgid "dict used for filtering."
msgstr ""

#: of qiskit.providers.BaseProvider.backends:8
#: qiskit.providers.aer.AerProvider.backends:8
#: qiskit.providers.basicaer.BasicAerProvider.backends:8
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends:8
msgid "a list of backends matching the filtering     criteria."
msgstr ""

#: of qiskit.providers.BaseProvider.backends:10
#: qiskit.providers.aer.AerProvider.backends:10
#: qiskit.providers.basicaer.BasicAerProvider.backends:10
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends:10
msgid "a list of backends matching the filtering"
msgstr ""

#: of qiskit.providers.BaseProvider.backends:11
#: qiskit.providers.aer.AerProvider.backends:11
#: qiskit.providers.basicaer.BasicAerProvider.backends:11
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers:13
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider.backends:11
msgid "criteria."
msgstr ""

#: of qiskit.providers.BaseProvider.get_backend:8
#: qiskit.providers.aer.AerProvider.get_backend:8
#: qiskit.providers.basicaer.BasicAerProvider.get_backend:8
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:16
msgid "a backend matching the filtering."
msgstr ""

#: of qiskit.providers.BaseProvider.get_backend:11
#: qiskit.providers.aer.AerProvider.get_backend:11
#: qiskit.providers.basicaer.BasicAerProvider.get_backend:11
msgid "if no backend could be found or     more than one backend matches."
msgstr ""

#: ../../api/qiskit.providers.JobError.rst:2
msgid "JobError"
msgstr ""

#: of qiskit.providers.JobError:1 qiskit.providers.exceptions.JobError:1
msgid "Base class for errors raised by jobs."
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:2
#: ../../api/qiskit.providers.models.JobStatus.rst:2
msgid "JobStatus"
msgstr ""

#: of qiskit.providers.JobStatus:1
msgid "Class for job status enumerated type."
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:20:<autosummary>:1
msgid ":obj:`CANCELLED <qiskit.providers.JobStatus.CANCELLED>`\\"
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:20:<autosummary>:1
msgid ":obj:`DONE <qiskit.providers.JobStatus.DONE>`\\"
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:20:<autosummary>:1
msgid ":obj:`ERROR <qiskit.providers.JobStatus.ERROR>`\\"
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:20:<autosummary>:1
msgid ":obj:`INITIALIZING <qiskit.providers.JobStatus.INITIALIZING>`\\"
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:20:<autosummary>:1
msgid ":obj:`QUEUED <qiskit.providers.JobStatus.QUEUED>`\\"
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:20:<autosummary>:1
msgid ":obj:`RUNNING <qiskit.providers.JobStatus.RUNNING>`\\"
msgstr ""

#: ../../api/qiskit.providers.JobStatus.rst:20:<autosummary>:1
msgid ":obj:`VALIDATING <qiskit.providers.JobStatus.VALIDATING>`\\"
msgstr ""

#: ../../api/qiskit.providers.JobTimeoutError.rst:2
msgid "JobTimeoutError"
msgstr ""

#: of qiskit.providers.JobTimeoutError:1
#: qiskit.providers.exceptions.JobTimeoutError:1
msgid "Base class for timeout errors raised by jobs."
msgstr ""

#: ../../api/qiskit.providers.QiskitBackendNotFoundError.rst:2
msgid "QiskitBackendNotFoundError"
msgstr ""

#: of qiskit.providers.QiskitBackendNotFoundError:1
#: qiskit.providers.exceptions.QiskitBackendNotFoundError:1
msgid "Base class for errors raised while looking up for a backend."
msgstr ""

#: ../../api/qiskit.providers.aer.rst:2
msgid "qiskit.providers.aer package"
msgstr ""

#: of qiskit.providers.aer:1
msgid "Main Terra addon public interface"
msgstr ""

#: ../../api/qiskit.providers.aer.AerError.rst:2
msgid "AerError"
msgstr ""

#: of qiskit.providers.aer.AerError:1
msgid "Base class for errors raised by simulators."
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:2
msgid "AerJob"
msgstr ""

#: of qiskit.providers.aer.AerJob:1 qiskit.providers.basicaer.BasicAerJob:1
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob:1
msgid "ベースクラス: :class:`qiskit.providers.basejob.BaseJob`"
msgstr ""

#: of qiskit.providers.aer.AerJob:1
msgid "AerJob class."
msgstr ""

#: of qiskit.providers.aer.AerJob:5 qiskit.providers.basicaer.BasicAerJob:5
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob:68
msgid "executor to handle asynchronous jobs"
msgstr ""

#: of qiskit.providers.aer.AerJob:7 qiskit.providers.basicaer.BasicAerJob:7
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob:70
msgid "futures.Executor"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
msgid ":obj:`backend <qiskit.providers.aer.AerJob.backend>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1 of
#: qiskit.providers.aer.AerJob.backend:1
#: qiskit.providers.basicaer.BasicAerJob.backend:1
msgid "Return the instance of the backend used for this job."
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
msgid ":obj:`cancel <qiskit.providers.aer.AerJob.cancel>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
msgid ":obj:`job_id <qiskit.providers.aer.AerJob.job_id>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
msgid ":obj:`qobj <qiskit.providers.aer.AerJob.qobj>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1 of
#: qiskit.providers.aer.AerJob.qobj:1
#: qiskit.providers.basicaer.BasicAerJob.qobj:1
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.qobj:1
msgid "Return the Qobj submitted for this job."
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
msgid ":obj:`result <qiskit.providers.aer.AerJob.result>`\\ \\(\\[timeout\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid "Get job result."
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
msgid ":obj:`status <qiskit.providers.aer.AerJob.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1 of
#: qiskit.providers.aer.AerJob.status:1
#: qiskit.providers.basicaer.BasicAerJob.status:1
msgid "Gets the status of the job by querying the Python's future"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
msgid ":obj:`submit <qiskit.providers.aer.AerJob.submit>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerJob.rst:20:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1 of
#: qiskit.providers.aer.AerJob.submit:1
#: qiskit.providers.basicaer.BasicAerJob.submit:1
msgid "Submit the job to the backend for execution."
msgstr ""

#: of qiskit.providers.aer.AerJob.qobj:3
#: qiskit.providers.basicaer.BasicAerJob.qobj:3
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.qobj:6
msgid "the Qobj submitted for this job."
msgstr ""

#: of qiskit.providers.aer.AerJob.result:1
#: qiskit.providers.basicaer.BasicAerJob.result:1
msgid ""
"Get job result. The behavior is the same as the underlying concurrent "
"Future objects,"
msgstr ""

#: of qiskit.providers.aer.AerJob.result:4
#: qiskit.providers.basicaer.BasicAerJob.result:4
msgid "https://docs.python.org/3/library/concurrent.futures.html#future-objects"
msgstr ""

#: of qiskit.providers.aer.AerJob.result:6
#: qiskit.providers.basicaer.BasicAerJob.result:6
msgid "number of seconds to wait for results."
msgstr ""

#: of qiskit.providers.aer.AerJob.result:12
#: qiskit.providers.aer.AerJob.status:7
#: qiskit.providers.basicaer.BasicAerJob.result:12
#: qiskit.providers.basicaer.BasicAerJob.status:7
msgid "if timeout occurred."
msgstr ""

#: of qiskit.providers.aer.AerJob.result:13
#: qiskit.providers.basicaer.BasicAerJob.result:13
msgid "if job cancelled before completed."
msgstr ""

#: of qiskit.providers.aer.AerJob.status:3
#: qiskit.providers.basicaer.BasicAerJob.status:3
msgid "The current JobStatus"
msgstr ""

#: of qiskit.providers.aer.AerJob.status:6
#: qiskit.providers.basicaer.BasicAerJob.status:6
msgid "If the future is in unexpected state"
msgstr ""

#: of qiskit.providers.aer.AerJob.submit:3
#: qiskit.providers.basicaer.BasicAerJob.submit:3
msgid "if the JSON serialization of the Qobj passed"
msgstr ""

#: of qiskit.providers.aer.AerJob.submit:5
#: qiskit.providers.basicaer.BasicAerJob.submit:5
msgid "if trying to re-submit the job."
msgstr ""

#: ../../api/qiskit.providers.aer.AerProvider.rst:2
msgid "AerProvider"
msgstr ""

#: of qiskit.providers.aer.AerProvider:1
#: qiskit.providers.basicaer.BasicAerProvider:1
#: qiskit.providers.ibmq.accountprovider.AccountProvider:1
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider:1
#: qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider:1
msgid "ベースクラス: :class:`qiskit.providers.baseprovider.BaseProvider`"
msgstr ""

#: of qiskit.providers.aer.AerProvider:1
msgid "Provider for Qiskit Aer backends."
msgstr ""

#: ../../api/qiskit.providers.aer.AerProvider.rst:15:<autosummary>:1
msgid ""
":obj:`backends <qiskit.providers.aer.AerProvider.backends>`\\ "
"\\(\\[name\\, filters\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.AerProvider.rst:15:<autosummary>:1
msgid ""
":obj:`get_backend <qiskit.providers.aer.AerProvider.get_backend>`\\ "
"\\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:2
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:2
msgid "QasmSimulator"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:1
#: qiskit.providers.aer.StatevectorSimulator:1
#: qiskit.providers.aer.UnitarySimulator:1
#: qiskit.providers.aer.backends.QasmSimulator:1
#: qiskit.providers.aer.backends.StatevectorSimulator:1
#: qiskit.providers.aer.backends.UnitarySimulator:1
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:1
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:1
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:1
msgid "ベースクラス: :class:`qiskit.providers.aer.backends.aerbackend.AerBackend`"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:1
#: qiskit.providers.aer.backends.QasmSimulator:1
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:1
msgid "Aer quantum circuit simulator"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:3
#: qiskit.providers.aer.StatevectorSimulator:3
#: qiskit.providers.aer.UnitarySimulator:3
#: qiskit.providers.aer.backends.QasmSimulator:3
#: qiskit.providers.aer.backends.StatevectorSimulator:3
#: qiskit.providers.aer.backends.UnitarySimulator:3
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:3
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:3
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:3
msgid "Backend options:"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:5
#: qiskit.providers.aer.backends.QasmSimulator:5
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:5
msgid ""
"The following backend options may be used with in the `backend_options` "
"kwarg diction for `QasmSimulator.run` or `qiskit.execute`"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:21
#: qiskit.providers.aer.backends.QasmSimulator:21
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:21
msgid "\"method\" (str): Set the simulation method. Allowed values are:"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:12
#: qiskit.providers.aer.backends.QasmSimulator:12
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:12
msgid "\"statevector\": Uses a dense statevector simulation."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:13
#: qiskit.providers.aer.backends.QasmSimulator:13
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:13
msgid "\"stabilizer\": uses a Clifford stabilizer state simulator that"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:14
#: qiskit.providers.aer.backends.QasmSimulator:14
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:14
msgid ""
"is only valid for Clifford circuits and noise models. * "
"\"extended_stabilizer\": Uses an approximate simulator that decomposes "
"circuits into stabilizer state terms, the number of which grows with the "
"number of non-Clifford gates. * \"automatic\": automatically run on "
"stabilizer simulator if the circuit and noise model supports it. If there"
" is enough available memory, uses the statevector method. Otherwise, uses"
" the extended_stabilizer method (Default: \"automatic\")."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:27
#: qiskit.providers.aer.StatevectorSimulator:10
#: qiskit.providers.aer.UnitarySimulator:13
#: qiskit.providers.aer.backends.QasmSimulator:27
#: qiskit.providers.aer.backends.StatevectorSimulator:10
#: qiskit.providers.aer.backends.UnitarySimulator:13
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:27
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:10
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:13
msgid "\"zero_threshold\" (double): Sets the threshold for truncating"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:27
#: qiskit.providers.aer.StatevectorSimulator:10
#: qiskit.providers.aer.UnitarySimulator:13
#: qiskit.providers.aer.backends.QasmSimulator:27
#: qiskit.providers.aer.backends.StatevectorSimulator:10
#: qiskit.providers.aer.backends.UnitarySimulator:13
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:27
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:10
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:13
msgid "small values to zero in the result data (Default: 1e-10)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:31
#: qiskit.providers.aer.StatevectorSimulator:14
#: qiskit.providers.aer.UnitarySimulator:17
#: qiskit.providers.aer.backends.QasmSimulator:31
#: qiskit.providers.aer.backends.StatevectorSimulator:14
#: qiskit.providers.aer.backends.UnitarySimulator:17
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:31
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:14
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:17
msgid "\"max_parallel_threads\" (int): Sets the maximum number of CPU"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:30
#: qiskit.providers.aer.StatevectorSimulator:13
#: qiskit.providers.aer.UnitarySimulator:16
#: qiskit.providers.aer.backends.QasmSimulator:30
#: qiskit.providers.aer.backends.StatevectorSimulator:13
#: qiskit.providers.aer.backends.UnitarySimulator:16
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:30
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:13
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:16
msgid ""
"cores used by OpenMP for parallelization. If set to 0 the maximum will be"
" set to the number of CPU cores (Default: 0)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:37
#: qiskit.providers.aer.StatevectorSimulator:20
#: qiskit.providers.aer.UnitarySimulator:23
#: qiskit.providers.aer.backends.QasmSimulator:37
#: qiskit.providers.aer.backends.StatevectorSimulator:20
#: qiskit.providers.aer.backends.UnitarySimulator:23
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:37
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:20
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:23
msgid "\"max_parallel_experiments\" (int): Sets the maximum number of"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:34
#: qiskit.providers.aer.StatevectorSimulator:17
#: qiskit.providers.aer.UnitarySimulator:20
#: qiskit.providers.aer.backends.QasmSimulator:34
#: qiskit.providers.aer.backends.StatevectorSimulator:17
#: qiskit.providers.aer.backends.UnitarySimulator:20
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:34
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:17
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:20
msgid ""
"qobj experiments that may be executed in parallel up to the "
"max_parallel_threads value. If set to 1 parallel circuit execution will "
"be disabled. If set to 0 the maximum will be automatically set to "
"max_parallel_threads (Default: 1)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:45
#: qiskit.providers.aer.backends.QasmSimulator:45
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:45
msgid "\"max_parallel_shots\" (int): Sets the maximum number of"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:40
#: qiskit.providers.aer.backends.QasmSimulator:40
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:40
msgid ""
"shots that may be executed in parallel during each experiment execution, "
"up to the max_parallel_threads value. If set to 1 parallel shot execution"
" wil be disabled. If set to 0 the maximum will be automatically set to "
"max_parallel_threads. Note that this cannot be enabled at the same time "
"as parallel experiment execution (Default: 1)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:51
#: qiskit.providers.aer.StatevectorSimulator:26
#: qiskit.providers.aer.UnitarySimulator:29
#: qiskit.providers.aer.backends.QasmSimulator:51
#: qiskit.providers.aer.backends.StatevectorSimulator:26
#: qiskit.providers.aer.backends.UnitarySimulator:29
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:51
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:26
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:29
msgid "\"max_memory_mb\" (int): Sets the maximum size of memory"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:48
#: qiskit.providers.aer.StatevectorSimulator:23
#: qiskit.providers.aer.UnitarySimulator:26
#: qiskit.providers.aer.backends.QasmSimulator:48
#: qiskit.providers.aer.backends.StatevectorSimulator:23
#: qiskit.providers.aer.backends.UnitarySimulator:26
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:48
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:23
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:26
msgid ""
"to store a state vector. If a state vector needs more, an error is "
"thrown. In general, a state vector of n-qubits uses 2^n complex values "
"(16 Bytes). If set to 0, the maximum will be automatically set to half "
"the system memory size (Default: 0)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:56
#: qiskit.providers.aer.backends.QasmSimulator:56
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:56
msgid "\"optimize_ideal_threshold\" (int): Sets the qubit threshold for"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:54
#: qiskit.providers.aer.backends.QasmSimulator:54
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:54
msgid ""
"applying circuit optimization passes on ideal circuits. Passes include "
"gate fusion and truncation of unused qubits (Default: 5)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:61
#: qiskit.providers.aer.backends.QasmSimulator:61
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:61
msgid "\"optimize_noise_threshold\" (int): Sets the qubit threshold for"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:59
#: qiskit.providers.aer.backends.QasmSimulator:59
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:59
msgid ""
"applying circuit optimization passes on ideal circuits. Passes include "
"gate fusion and truncation of unused qubits (Default: 12)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:71
#: qiskit.providers.aer.StatevectorSimulator:34
#: qiskit.providers.aer.UnitarySimulator:37
#: qiskit.providers.aer.backends.QasmSimulator:71
#: qiskit.providers.aer.backends.StatevectorSimulator:34
#: qiskit.providers.aer.backends.UnitarySimulator:37
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:71
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:35
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:38
msgid "\"statevector_parallel_threshold\" (int): Sets the threshold that"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:66
#: qiskit.providers.aer.StatevectorSimulator:29
#: qiskit.providers.aer.backends.QasmSimulator:66
#: qiskit.providers.aer.backends.StatevectorSimulator:29
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:66
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:29
msgid ""
"\"n_qubits\" must be greater than to enable OpenMP parallelization for "
"matrix multiplication during execution of an experiment. If parallel "
"circuit or shot execution is enabled this will only use unallocated CPU "
"cores up to max_parallel_threads. Note that setting this too low can "
"reduce performance (Default: 14)."
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:76
#: qiskit.providers.aer.backends.QasmSimulator:76
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:76
msgid "\"statevector_sample_measure_opt\" (int): Sets the threshold that"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:74
#: qiskit.providers.aer.backends.QasmSimulator:74
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:74
msgid ""
"the number of qubits must be greater than to enable a large qubit "
"optimized implementation of measurement sampling. Note that setting this "
"two low can reduce performance (Default: 10)"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:80
#: qiskit.providers.aer.backends.QasmSimulator:80
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:80
msgid "\"stabilizer_max_snapshot_probabilities\" (int): (Default: 32)"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:89
#: qiskit.providers.aer.backends.QasmSimulator:89
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:89
msgid "\"extended_stabilizer_measure_sampling\" (bool): Enable measure"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:85
#: qiskit.providers.aer.backends.QasmSimulator:85
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:85
msgid ""
"sampling optimization on supported circuits. This prevents the simulator "
"from re-running the measure monte-carlo step for each shot. Enabling "
"measure sampling may reduce accuracy of the measurement counts if the "
"output distribution is strongly peaked. (Default: False)"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:95
#: qiskit.providers.aer.backends.QasmSimulator:95
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:95
msgid "\"extended_stabilizer_mixing_time\" (int): Set how long the"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:92
#: qiskit.providers.aer.backends.QasmSimulator:92
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:92
msgid ""
"monte-carlo method runs before performing measurements. If the output "
"distribution is strongly peaked, this can be decreased alongside setting "
"extended_stabilizer_disable_measurement_opt to True. (Default: 5000)"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:100
#: qiskit.providers.aer.backends.QasmSimulator:100
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:100
msgid "\"extended_stabilizer_approximation_error\" (double): Set the error"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:98
#: qiskit.providers.aer.backends.QasmSimulator:98
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:98
msgid ""
"in the approximation for the extended_stabilizer method. A smaller error "
"needs more memory and computational time. (Default: 0.05)"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:104
#: qiskit.providers.aer.backends.QasmSimulator:104
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:104
msgid "\"extended_stabilizer_norm_estimation_samples\" (int): Number of"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:103
#: qiskit.providers.aer.backends.QasmSimulator:103
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:103
msgid ""
"samples used to compute the correct normalisation for a statevector "
"snapshot. (Default: 100)"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:110
#: qiskit.providers.aer.backends.QasmSimulator:110
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:111
msgid "\"extended_stabilizer_parallel_threshold\" (int): Set the minimum"
msgstr ""

#: of qiskit.providers.aer.QasmSimulator:107
#: qiskit.providers.aer.backends.QasmSimulator:107
#: qiskit.providers.aer.backends.qasm_simulator.QasmSimulator:107
msgid ""
"size of the extended stabilizer decomposition before we enable OpenMP "
"parallelisation. If parallel circuit or shot execution is enabled this "
"will only use unallocated CPU cores up to max_parallel_threads. (Default:"
" 100)"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.aer.QasmSimulator.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`MAX_QUBIT_MEMORY "
"<qiskit.providers.aer.QasmSimulator.MAX_QUBIT_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`configuration <qiskit.providers.aer.QasmSimulator.configuration>`\\"
" \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
msgid ":obj:`name <qiskit.providers.aer.QasmSimulator.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
msgid ":obj:`properties <qiskit.providers.aer.QasmSimulator.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
msgid ":obj:`provider <qiskit.providers.aer.QasmSimulator.provider>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.aer.QasmSimulator.run>`\\ \\(qobj\\[\\, "
"backend\\_options\\, noise\\_model\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
#: of qiskit.providers.aer.QasmSimulator.run:1
#: qiskit.providers.aer.StatevectorSimulator.run:1
#: qiskit.providers.aer.UnitarySimulator.run:1
#: qiskit.providers.aer.backends.QasmSimulator.run:1
#: qiskit.providers.aer.backends.StatevectorSimulator.run:1
#: qiskit.providers.aer.backends.UnitarySimulator.run:1
#: qiskit.providers.aer.backends.aerbackend.AerBackend.run:1
msgid "Run a qobj on the backend."
msgstr ""

#: ../../api/qiskit.providers.aer.QasmSimulator.rst:26:<autosummary>:1
msgid ":obj:`status <qiskit.providers.aer.QasmSimulator.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:2
#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:2
msgid "StatevectorSimulator"
msgstr ""

#: of qiskit.providers.aer.StatevectorSimulator:1
#: qiskit.providers.aer.backends.StatevectorSimulator:1
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:1
msgid "Aer statevector simulator"
msgstr ""

#: of qiskit.providers.aer.StatevectorSimulator:5
#: qiskit.providers.aer.backends.StatevectorSimulator:5
#: qiskit.providers.aer.backends.statevector_simulator.StatevectorSimulator:5
msgid ""
"The following backend options may be used with in the `backend_options` "
"kwarg diction for `StatevectorSimulator.run` or `qiskit.execute`"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.aer.StatevectorSimulator.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`MAX_QUBIT_MEMORY "
"<qiskit.providers.aer.StatevectorSimulator.MAX_QUBIT_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.aer.StatevectorSimulator.configuration>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
msgid ":obj:`name <qiskit.providers.aer.StatevectorSimulator.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`properties "
"<qiskit.providers.aer.StatevectorSimulator.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`provider <qiskit.providers.aer.StatevectorSimulator.provider>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.aer.StatevectorSimulator.run>`\\ "
"\\(qobj\\[\\, backend\\_options\\, noise\\_model\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.StatevectorSimulator.rst:26:<autosummary>:1
msgid ":obj:`status <qiskit.providers.aer.StatevectorSimulator.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:2
#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:2
msgid "UnitarySimulator"
msgstr ""

#: of qiskit.providers.aer.UnitarySimulator:1
#: qiskit.providers.aer.backends.UnitarySimulator:1
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:1
msgid "Unitary circuit simulator."
msgstr ""

#: of qiskit.providers.aer.UnitarySimulator:5
#: qiskit.providers.aer.backends.UnitarySimulator:5
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:5
msgid ""
"The following backend options may be used with in the `backend_options` "
"kwarg diction for `UnitarySimulator.run` or `qiskit.execute`"
msgstr ""

#: of qiskit.providers.aer.UnitarySimulator:10
#: qiskit.providers.aer.backends.UnitarySimulator:10
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:10
msgid "\"initial_unitary\" (matrix_like): Sets a custom initial unitary"
msgstr ""

#: of qiskit.providers.aer.UnitarySimulator:10
#: qiskit.providers.aer.backends.UnitarySimulator:10
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:10
msgid "matrix for the simulation instead of identity (Default: None)."
msgstr ""

#: of qiskit.providers.aer.UnitarySimulator:32
#: qiskit.providers.aer.backends.UnitarySimulator:32
#: qiskit.providers.aer.backends.unitary_simulator.UnitarySimulator:32
msgid ""
"2 * \"n_qubits\" must be greater than to enable OpenMP parallelization "
"for matrix multiplication during execution of an experiment. If parallel "
"circuit or shot execution is enabled this will only use unallocated CPU "
"cores up to max_parallel_threads. Note that setting this too low can "
"reduce performance (Default: 14)."
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:15:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.aer.UnitarySimulator.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:15:<autosummary>:1
msgid ""
":obj:`MAX_QUBIT_MEMORY "
"<qiskit.providers.aer.UnitarySimulator.MAX_QUBIT_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.aer.UnitarySimulator.configuration>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
msgid ":obj:`name <qiskit.providers.aer.UnitarySimulator.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`properties <qiskit.providers.aer.UnitarySimulator.properties>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
msgid ":obj:`provider <qiskit.providers.aer.UnitarySimulator.provider>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.aer.UnitarySimulator.run>`\\ \\(qobj\\[\\, "
"backend\\_options\\, noise\\_model\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.UnitarySimulator.rst:26:<autosummary>:1
msgid ":obj:`status <qiskit.providers.aer.UnitarySimulator.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.rst:2
msgid "qiskit.providers.aer.backends package"
msgstr ""

#: of qiskit.providers.aer.backends:1
msgid "Aer Backends."
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.aer.backends.QasmSimulator.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`MAX_QUBIT_MEMORY "
"<qiskit.providers.aer.backends.QasmSimulator.MAX_QUBIT_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.aer.backends.QasmSimulator.configuration>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
msgid ":obj:`name <qiskit.providers.aer.backends.QasmSimulator.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`properties "
"<qiskit.providers.aer.backends.QasmSimulator.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`provider <qiskit.providers.aer.backends.QasmSimulator.provider>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.aer.backends.QasmSimulator.run>`\\ "
"\\(qobj\\[\\, backend\\_options\\, noise\\_model\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.QasmSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`status <qiskit.providers.aer.backends.QasmSimulator.status>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.aer.backends.StatevectorSimulator.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:15:<autosummary>:1
msgid ""
":obj:`MAX_QUBIT_MEMORY "
"<qiskit.providers.aer.backends.StatevectorSimulator.MAX_QUBIT_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.aer.backends.StatevectorSimulator.configuration>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`name <qiskit.providers.aer.backends.StatevectorSimulator.name>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`properties "
"<qiskit.providers.aer.backends.StatevectorSimulator.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`provider "
"<qiskit.providers.aer.backends.StatevectorSimulator.provider>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.aer.backends.StatevectorSimulator.run>`\\ "
"\\(qobj\\[\\, backend\\_options\\, noise\\_model\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.StatevectorSimulator.rst:26:<autosummary>:1
msgid ""
":obj:`status "
"<qiskit.providers.aer.backends.StatevectorSimulator.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:15:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.aer.backends.UnitarySimulator.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:15:<autosummary>:1
msgid ""
":obj:`MAX_QUBIT_MEMORY "
"<qiskit.providers.aer.backends.UnitarySimulator.MAX_QUBIT_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.aer.backends.UnitarySimulator.configuration>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
msgid ":obj:`name <qiskit.providers.aer.backends.UnitarySimulator.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`properties "
"<qiskit.providers.aer.backends.UnitarySimulator.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`provider "
"<qiskit.providers.aer.backends.UnitarySimulator.provider>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.aer.backends.UnitarySimulator.run>`\\ "
"\\(qobj\\[\\, backend\\_options\\, noise\\_model\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.UnitarySimulator.rst:26:<autosummary>:1
msgid ""
":obj:`status <qiskit.providers.aer.backends.UnitarySimulator.status>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.aerbackend.rst:2
msgid "qiskit.providers.aer.backends.aerbackend module"
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend:1
#: qiskit.providers.aer.backends.qasm_simulator:1
msgid "Qiskit Aer qasm simulator backend."
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerBackend:1
#: qiskit.providers.basicaer.QasmSimulatorPy:1
#: qiskit.providers.basicaer.UnitarySimulatorPy:1
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy:1
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy:1
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend:1
msgid "ベースクラス: :class:`qiskit.providers.basebackend.BaseBackend`"
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerBackend:1
msgid "Qiskit Aer Backend class."
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerJSONEncoder:1
msgid "ベースクラス: :class:`json.encoder.JSONEncoder`"
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerJSONEncoder:1
msgid "JSON encoder for NumPy arrays and complex numbers."
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerJSONEncoder:3
msgid "This functions as the standard JSON Encoder but adds support for encoding:"
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerJSONEncoder:5
msgid "complex numbers z as lists [z.real, z.imag] ndarrays as nested lists."
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerJSONEncoder.default:1
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for ``o``, or calls the base implementation (to raise a "
"``TypeError``)."
msgstr ""

#: of qiskit.providers.aer.backends.aerbackend.AerJSONEncoder.default:5
msgid ""
"For example, to support arbitrary iterators, you could implement default "
"like this::"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.qasm_simulator.rst:2
msgid "qiskit.providers.aer.backends.qasm\\_simulator module"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.statevector_simulator.rst:2
msgid "qiskit.providers.aer.backends.statevector\\_simulator module"
msgstr ""

#: of qiskit.providers.aer.backends.statevector_simulator:1
msgid "Qiskit Aer statevector simulator backend."
msgstr ""

#: ../../api/qiskit.providers.aer.backends.unitary_simulator.rst:2
msgid "qiskit.providers.aer.backends.unitary\\_simulator module"
msgstr ""

#: of qiskit.providers.aer.backends.unitary_simulator:1
msgid "Qiskit Aer Unitary Simulator Backend."
msgstr ""

#: ../../api/qiskit.providers.aer.backends.wrappers.rst:2
msgid "qiskit.providers.aer.backends.wrappers namespace"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.wrappers.qasm_controller_wrapper.rst:2
msgid "qiskit.providers.aer.backends.wrappers.qasm\\_controller\\_wrapper module"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.wrappers.statevector_controller_wrapper.rst:2
msgid ""
"qiskit.providers.aer.backends.wrappers.statevector\\_controller\\_wrapper"
" module"
msgstr ""

#: ../../api/qiskit.providers.aer.backends.wrappers.unitary_controller_wrapper.rst:2
msgid ""
"qiskit.providers.aer.backends.wrappers.unitary\\_controller\\_wrapper "
"module"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.rst:2
msgid "qiskit.providers.aer.noise package"
msgstr ""

#: of qiskit.providers.aer.noise:1
msgid "Noise module for Qiskit Aer."
msgstr ""

#: of qiskit.providers.aer.noise:3
msgid ""
"This module contains classes and functions to build a noise model for "
"simulating a Qiskit quantum circuit in the presence of errors."
msgstr ""

#: of qiskit.providers.aer.noise:7
msgid "Noise Models"
msgstr ""

#: of qiskit.providers.aer.noise:8
msgid ""
"Noise models for a noisy simulator are represented using the `NoiseModel`"
" class. This can be used to generate a custom noise model, or an "
"automatic noise model can be generated for a device using built in "
"functions."
msgstr ""

#: of qiskit.providers.aer.noise:13
msgid "Automatically Generated Noise Models"
msgstr ""

#: of qiskit.providers.aer.noise:14
msgid ""
"Approximate noise models for a hardware device can be generated from the "
"device properties using the functions from the `device` submodule."
msgstr ""

#: of qiskit.providers.aer.noise:19
msgid ""
"Generates a noise mode based on 1 and 2 qubit gate errors consisting of a"
" depolarizing error followed by a thermal relaxation error, and readout "
"errors on measurement outcomes. The error parameters are tuned for each "
"individual qubit based on the T_1, T_2, frequency and readout error "
"parameters for each qubit, and the gate error and gate time parameters "
"for each gate obtained from the device backend properties."
msgstr ""

#: of qiskit.providers.aer.noise:27
msgid "Custom Noise Models"
msgstr ""

#: of qiskit.providers.aer.noise:28
msgid ""
"Custom noise models may be constructed by adding errors to a NoiseModel "
"object. Errors are represented using by the `QuantumError` and "
"`ReadoutError` classes from the `noise.errors` module:"
msgstr ""

#: of qiskit.providers.aer.noise:34
msgid ""
"Errors that affect the quantum state during a simulation. They may be "
"applied after specific circuit gates or reset operations, or before "
"measure operations of qubits."
msgstr ""

#: of qiskit.providers.aer.noise:40
msgid ""
"Errors that apply to classical bit registers after a measurement. They do"
" not change the quantum state of the system, only the recorded classical "
"measurement outcome."
msgstr ""

#: of qiskit.providers.aer.noise:44
msgid ""
"Helper functions exist for generating standard quantum error channels in "
"the `noise.errors` module. These allow simple generation of the follow "
"canonical types of quantum errors:"
msgstr ""

#: of qiskit.providers.aer.noise:48
msgid ""
"Kraus error Mixed unitary error Coherent unitary error Pauli error "
"Depolarizing error Reset error Thermal relaxation error Amplitude damping"
" error Phase damping error Combined phase and amplitude damping error"
msgstr ""

#: of qiskit.providers.aer.noise:60
msgid "Noise Utilities"
msgstr ""

#: of qiskit.providers.aer.noise:66
msgid ""
"The `noise.utils` module contains utilities for noise models and errors "
"including:"
msgstr ""

#: of qiskit.providers.aer.noise:62
msgid ""
"`remap_noise_model` for remapping the qubits specified in a NoiseModel. "
"`approximate_quantum_error` for approximating a general quantum error via"
" a provided set of errors (e.g. approximating amplitude damping via reset"
" errors). `approximate_noise_model` for approximating all the errors in a"
" nose model using the same provided set of errors."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:2
msgid "NoiseModel"
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel:1
#: qiskit.providers.aer.noise.noise_model:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel:1
msgid "Noise model class for Qiskit Aer simulators."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:17:<autosummary>:1
msgid ""
":obj:`QASMSIMULATOR_BASIS_GATES "
"<qiskit.providers.aer.noise.NoiseModel.QASMSIMULATOR_BASIS_GATES>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:17:<autosummary>:1
msgid ":obj:`basis_gates <qiskit.providers.aer.noise.NoiseModel.basis_gates>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:17:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.basis_gates:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.basis_gates:1
msgid "Return basis_gates for compiling to the noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:17:<autosummary>:1
msgid ""
":obj:`noise_instructions "
"<qiskit.providers.aer.noise.NoiseModel.noise_instructions>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:17:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.noise_instructions:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.noise_instructions:1
msgid "Return the set of noisy instructions for this noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:17:<autosummary>:1
msgid ":obj:`noise_qubits <qiskit.providers.aer.noise.NoiseModel.noise_qubits>`\\"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:17:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.noise_qubits:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.noise_qubits:1
msgid "Return the set of noisy qubits for this noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`add_all_qubit_quantum_error "
"<qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error>`\\ "
"\\(error\\, instructions\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error:1
msgid "Add a quantum error to the noise model that applies to all qubits."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`add_all_qubit_readout_error "
"<qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error>`\\ "
"\\(error\\[\\, warnings\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error:1
msgid "Add a single-qubit readout error that applies measure on all qubits."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`add_basis_gates "
"<qiskit.providers.aer.noise.NoiseModel.add_basis_gates>`\\ "
"\\(instructions\\[\\, warnings\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.add_basis_gates:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_basis_gates:1
msgid "Add additional gates to the noise model basis_gates."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`add_nonlocal_quantum_error "
"<qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error>`\\ "
"\\(error\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:1
msgid "Add a non-local quantum error to the noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`add_quantum_error "
"<qiskit.providers.aer.noise.NoiseModel.add_quantum_error>`\\ \\(error\\, "
"instructions\\, qubits\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error:1
msgid "Add a quantum error to the noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`add_readout_error "
"<qiskit.providers.aer.noise.NoiseModel.add_readout_error>`\\ \\(error\\, "
"qubits\\[\\, warnings\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error:1
msgid "Add a readout error to the noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`as_dict <qiskit.providers.aer.noise.NoiseModel.as_dict>`\\ "
"\\(\\[serializable\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.as_dict:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.as_dict:1
msgid "DEPRECATED: Use to_dict() Returns a dictionary for noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.aer.noise.NoiseModel.from_dict>`\\ "
"\\(noise\\_dict\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.from_dict:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict:1
msgid "Load NoiseModel from a dictionary."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ":obj:`reset <qiskit.providers.aer.noise.NoiseModel.reset>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.reset:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.reset:1
msgid "Reset the noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`set_x90_single_qubit_gates "
"<qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates>`\\ "
"\\(instructions\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.set_x90_single_qubit_gates:1
msgid "Declares X90 based gates for noise model."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1
msgid ""
":obj:`to_dict <qiskit.providers.aer.noise.NoiseModel.to_dict>`\\ "
"\\(\\[serializable\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.NoiseModel.rst:33:<autosummary>:1 of
#: qiskit.providers.aer.noise.NoiseModel.to_dict:1
#: qiskit.providers.aer.noise.noise_model.NoiseModel.to_dict:1
msgid "Return dictionary for noise model."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error:3
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error:3
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:3
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error:3
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error:3
#: qiskit.providers.aer.noise.errors.standard_errors.reset_error:10
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error:3
msgid "the quantum error object."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error:5
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:5
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error:5
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error:5
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:5
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error:5
msgid "Instruction or list[Instruction]): the instructions error applies to."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error:7
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:13
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error:9
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error:7
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:13
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error:9
msgid ""
"Display warning if appending to an instruciton that already has an error "
"(Default: True)."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error:11
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error:9
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:17
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error:13
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error:11
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error:11
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error:9
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:17
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error:13
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error:11
msgid "if the input parameters are invalid."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_all_qubit_quantum_error:15
#: qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error:12
#: qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:20
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error:17
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error:14
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_quantum_error:15
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error:12
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:20
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error:17
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error:14
msgid "If the error object is ideal it will not be added to the model."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_all_qubit_readout_error:5
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_all_qubit_readout_error:5
msgid ""
"Display warning if appending to an instruciton that already has an error "
"(Default: True)"
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_basis_gates:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_basis_gates:3
msgid ""
"This should be used to add any gates that are identified by a custom gate"
" label in the noise model."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_basis_gates:6
#: qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_basis_gates:6
#: qiskit.providers.aer.noise.noise_model.NoiseModel.set_x90_single_qubit_gates:3
msgid "list[Instruction]): the instructions error applies to."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_basis_gates:7
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_basis_gates:7
msgid ""
"display warning if instruction is not in QasmSimulator basis_gates "
"(Default: True)."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:7
#: qiskit.providers.aer.noise.NoiseModel.add_quantum_error:7
#: qiskit.providers.aer.noise.NoiseModel.add_readout_error:5
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:7
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_quantum_error:7
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error:5
msgid "qubits instruction error applies to."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_nonlocal_quantum_error:9
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_nonlocal_quantum_error:9
msgid ""
"Specify the exact qubits the error should be applied to if different to "
"the instruction qubits."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.add_readout_error:7
#: qiskit.providers.aer.noise.noise_model.NoiseModel.add_readout_error:7
msgid ""
"Display warning if appending to an instruciton that already has an error "
"[Default: True]"
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.as_dict:4
#: qiskit.providers.aer.noise.NoiseModel.to_dict:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.as_dict:4
#: qiskit.providers.aer.noise.noise_model.NoiseModel.to_dict:3
msgid ""
"if `True`, return a dict containing only types that can be serializable "
"by the stdlib `json` module."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.as_dict:8
#: qiskit.providers.aer.noise.NoiseModel.to_dict:7
#: qiskit.providers.aer.noise.noise_model.NoiseModel.as_dict:8
#: qiskit.providers.aer.noise.noise_model.NoiseModel.to_dict:7
msgid "a dictionary for a noise model."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.from_dict:3
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict:3
msgid "A serialized noise model."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.from_dict:6
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict:6
msgid "the noise model."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.from_dict:9
#: qiskit.providers.aer.noise.noise_model.NoiseModel.from_dict:9
msgid "if dict cannot be converted to NoiseModel."
msgstr ""

#: of qiskit.providers.aer.noise.NoiseModel.set_x90_single_qubit_gates:5
#: qiskit.providers.aer.noise.noise_model.NoiseModel.set_x90_single_qubit_gates:5
msgid "if the input instructions are not valid."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.device.rst:2
msgid "qiskit.providers.aer.noise.device package"
msgstr ""

#: of qiskit.providers.aer.noise.device:1
msgid "Device noise models module Qiskit Aer."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.device.models.rst:2
msgid "qiskit.providers.aer.noise.device.models module"
msgstr ""

#: of qiskit.providers.aer.noise.device.models:1
msgid "Simplified noise models for devices backends."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:1
msgid "Get depolarizing noise quantum error objects for backend gates"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:3
#: qiskit.providers.aer.noise.device.models.basic_device_readout_errors:3
#: qiskit.providers.aer.noise.device.parameters.gate_error_values:3
#: qiskit.providers.aer.noise.device.parameters.gate_param_values:3
#: qiskit.providers.aer.noise.device.parameters.gate_time_values:5
#: qiskit.providers.aer.noise.device.parameters.readout_error_values:3
#: qiskit.providers.aer.noise.device.parameters.thermal_relaxation_values:6
msgid "device backend properties"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:5
msgid "Include depolarizing gate errors [Default: True]."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:7
msgid "Include thermal relaxation errors [Default: True]."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:10
msgid ""
"Override device gate times with custom values. If None use gate times "
"from backend properties. [Default: None]"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:14
msgid "qubit temperature in milli-Kelvin (mK) [Default: 0]."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:17
msgid ""
"If true return errors as standard qobj gates. If false return as unitary "
"qobj instructions [Default: True]."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:22
msgid ""
"A dictionary of pairs name: (qubits, error). If gate error information is"
" not available None will be returned for value."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_gate_errors:28
msgid ""
"If non-default values are used gate_times should be a list of tuples "
"(name, qubits, value) where name is the gate name string, qubits is a "
"list of qubits or None to apply gate time to this gate one any set of "
"qubits, and value is the gate time in nanoseconds."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:1
msgid "Approximate device noise model derived from backend properties."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:4
msgid ""
"properties (BackendProperties): backend properties. gate_error (bool): "
"Include depolarizing gate errors [Default: True]. readout_errors (Bool): "
"Include readout errors in model"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:7
#: qiskit.providers.aer.noise.device.models.basic_device_noise_model:9
msgid "[Default: True]."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:8
msgid "thermal_relaxation (Bool): Include thermal relaxation errors"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:10
msgid "temperature (double): qubit temperature in milli-Kelvin (mK) for"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:11
msgid "thermal relaxation errors [Default: 0]."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:13
msgid "gate_times (list): Custom gate times for thermal relaxation errors."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:13
msgid ""
"Used to extend or override the gate times in the backend properties "
"[Default: None])"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:17
msgid "standard_gates (bool): If true return errors as standard"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:16
msgid "qobj gates. If false return as unitary qobj instructions [Default: True]"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:19
msgid "An approximate noise model for the device backend."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:24
msgid "The noise model includes the following errors:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:27
msgid "If `readout_error=True`:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:27
msgid "Single qubit readout errors on measurements."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:35
msgid "If `gate_error` is True and `thermal_relaxation` is True:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:30
msgid ""
"Single-qubit gate errors consisting of a depolarizing error followed by a"
" thermal relaxation error for the qubit the gate acts on."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:33
msgid ""
"Two-qubit gate errors consisting of a 2-qubit depolarizing error followed"
" by single qubit thermal relaxation errors for all qubits participating "
"in the gate."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:39
msgid "If `gate_error` is True and `thermal_relaxation` is False:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:38
msgid "Single-qubit depolarizing gate errors."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:39
msgid "Multi-qubit depolarizing gate errors."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:43
msgid "If `gate_error` is False and `thermal_relaxation` is True:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:42
msgid ""
"Single-qubit thermal relaxation errors for all qubits participating in a "
"multi-qubit gate."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:45
msgid ""
"For best practice in simulating a backend make sure that the circuit is "
"compiled using the set of basis gates in the noise module by setting:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:48
msgid "`basis_gates = noise_model.basis_gates`"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:50
msgid "and using the device coupling map with:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:50
msgid "`coupling_map = backend.configuration().coupling_map`"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:52
msgid "Secifying custom gate times:"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:54
msgid ""
"The `gate_times` kwarg can be used to specify custom gate times to add "
"gate errors using the T1 and T2 values from the backend properties. This "
"should be passed as a list of tuples"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:57
msgid "`gate_times=[(name, value), ...]`"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:58
msgid ""
"where `name` is the gate name string, and `value` is the gate time in "
"nanoseconds."
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_noise_model:61
msgid ""
"If a custom gate is specified that already exists in the backend "
"properties, the `gate_times` value will override the gate time value from"
" the backend properties. If non-default values are used gate_times should"
" be a list"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_readout_errors:1
msgid "Get readout error objects for each qubit from backend properties"
msgstr ""

#: of qiskit.providers.aer.noise.device.models.basic_device_readout_errors:6
msgid ""
"A list of pairs (qubits, value) for qubits with non-zero readout error "
"values."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.device.parameters.rst:2
msgid "qiskit.providers.aer.noise.device.parameters module"
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters:1
msgid "Functions to extract device error parameters from backend properties."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_error_values:1
#: qiskit.providers.aer.noise.device.parameters.gate_param_values:1
msgid "Get gate error values for backend gate from backend properties"
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_error_values:6
msgid ""
"A list of tuples (name, qubits, value). If gate       error information "
"is not available None will be returned for       value."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_error_values:9
#: qiskit.providers.aer.noise.device.parameters.gate_time_values:11
msgid "A list of tuples (name, qubits, value). If gate"
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_error_values:9
#: qiskit.providers.aer.noise.device.parameters.readout_error_values:9
msgid "error information is not available None will be returned for value."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_param_values:6
msgid ""
"A list of tuples (name, qubits, time, error). If gate       error or "
"gate_time information is not available None       will be returned for "
"value."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_param_values:9
msgid "A list of tuples (name, qubits, time, error). If gate"
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_param_values:9
msgid ""
"error or gate_time information is not available None will be returned for"
" value."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_time_values:1
msgid "Get gate time values for backend gate from backend properties"
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_time_values:3
msgid "Gate time values are returned in nanosecond (ns) units."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_time_values:8
msgid ""
"A list of tuples (name, qubits, value). If gate       time information is"
" not available None will be returned for       value."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.gate_time_values:11
msgid "time information is not available None will be returned for value."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.readout_error_values:1
msgid "Get readout error values for each qubit from backend properties"
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.readout_error_values:6
msgid ""
"A list of readout error values for qubits. If readout       error "
"information is not available None will be returned       for value."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.readout_error_values:9
msgid "A list of readout error values for qubits. If readout"
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.thermal_relaxation_values:1
msgid "Return list of T1, T2 and frequency values from backend properties."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.thermal_relaxation_values:3
msgid ""
"T1 and T2 values are returned in microsecond (µs) units. Frequency is "
"returned in gigahertz (GHz) units."
msgstr ""

#: of qiskit.providers.aer.noise.device.parameters.thermal_relaxation_values:9
msgid ""
"A list of tuples (T1, T2, freq) for each qubit in the device where T1 and"
" T2 are in microsecond units, and frequency is in GHz. If T1, T2, of "
"frequency cannot be loaded for qubit a value of Numpy.inf will be used."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.errors.rst:2
msgid "qiskit.providers.aer.noise.errors package"
msgstr ""

#: of qiskit.providers.aer.noise.errors:1
msgid "Standard error module for Qiskit Aer."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.errors.errorutils.rst:2
msgid "qiskit.providers.aer.noise.errors.errorutils module"
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils:1
msgid "Helper functions for noise model creation."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.circuit2superop:1
msgid "Return the SuperOp for a standard instruction."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.is_matrix_diagonal:1
msgid "Test if row-vector representation of diagonal matrix."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.kraus2instructions:1
msgid "Convert a list of Kraus matrices into qobj circuits."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.kraus2instructions:3
msgid ""
"If any Kraus operators are a unitary matrix they will be converted into "
"unitary qobj instructions. Identity unitary matrices will also be "
"converted into identity qobj instructions."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.kraus2instructions:7
msgid "A list of Kraus matrices for a CPTP map."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.kraus2instructions:9
msgid "Check if the matrix instruction is a standard instruction (default: True)."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.kraus2instructions:12
msgid "Threshold for testing if probabilities are zero."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.kraus2instructions:15
msgid ""
"A list of pairs (p, circuit) where `circuit` is a list of qobj "
"instructions, and `p` is the probability of that circuit for the given "
"error."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.kraus2instructions:20
msgid "If the input Kraus channel is not CPTP."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction:1
msgid "Return a qobj instruction for a Kraus error."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction:3
msgid "A list of square or diagonal Kraus matrices."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction:5
#: qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction:5
msgid "The qubits the matrix is applied to."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction:8
#: qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction:11
msgid "The qobj instruction object."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_kraus_instruction:11
msgid "if the input is not a CPTP Kraus channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction:1
msgid "Return a qobj instruction for a unitary matrix gate."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction:3
msgid "A square or diagonal unitary matrix."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction:7
msgid "Check if the matrix instruction is a standard instruction."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.make_unitary_instruction:14
msgid "if the input is not a unitary matrix."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.qubits_from_mat:1
msgid "Return the number of qubits for a multi-qubit matrix."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.reset_superop:1
msgid "Return a N-qubit reset SuperOp."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates:1
msgid "Return a QASM gate names for a single qubit clifford."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates:3
msgid ""
"The labels are returned in a basis set consisting of ('id', 's', 'sdg', "
"'z', 'h', x', 'y') gates decomposed to use the minimum number of X-90 "
"pulses in a (u1, u2, u3) decomposition."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates:8
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions:8
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix:3
msgid "Clifford index 0, ..., 23."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates:11
msgid "The tuple of basis gates."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_gates:14
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix:9
msgid "If index is out of range [0, 23]."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions:1
msgid "Return a list of qobj instructions for a single qubit cliffords."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions:3
msgid ""
"The instructions are returned in a basis set consisting of ('id', 's', "
"'sdg', 'z', 'h', x', 'y') gates decomposed to use the minimum number of "
"X-90 pulses in a (u1, u2, u3) decomposition."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions:10
msgid "the qubit to apply the Clifford to."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions:13
msgid "The list of instructions."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_instructions:16
msgid "If index is out of range [0, 23] or qubit invalid."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix:1
msgid "Return Numpy array for a single qubit clifford."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.single_qubit_clifford_matrix:6
msgid "The matrix for the indexed clifford."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.standard_gate_instruction:1
msgid "Convert a unitary matrix instruction into a standard gate instruction."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.standard_gate_instruction:3
msgid "A qobj instruction."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.standard_gate_instruction:5
msgid "Ignore global phase on unitary matrix in comparison to canonical unitary."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.standard_gate_instruction:9
#: qiskit.providers.aer.noise.errors.errorutils.standard_gates_instructions:6
msgid "a list of qobj instructions equivalent to in input instruction."
msgstr ""

#: of qiskit.providers.aer.noise.errors.errorutils.standard_gate_unitary:1
msgid "Return the unitary matrix for a standard gate."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.standard_gates_instructions:1
msgid "Convert a list with unitary matrix instructions into standard gates."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.standard_gates_instructions:3
msgid "A list of qobj instructions."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.standard_instruction_channel:1
msgid "Return the SuperOp channel for a standard instruction."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.errorutils.standard_instruction_operator:1
msgid "Return the Operator for a standard gate instruction."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.errors.quantum_error.rst:2
msgid "qiskit.providers.aer.noise.errors.quantum\\_error module"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error:1
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError:1
msgid "Quantum error class for Qiskit Aer noise model"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError:7
msgid "WARNING: The init interface for this class is not finalized and may"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError:4
msgid ""
"change in future releases. For maximum backwards compatibility use the "
"QuantumError generating functions in the `noise.errors` module."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.as_dict:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.as_dict:1
msgid ""
"DEPRECATED: Use to_dict() :returns: The current error as a dictionary. "
":rtype: dict"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.atol:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.atol:1
msgid "The absolute tolerence parameter for float comparisons."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.circuits:1
msgid "Return the list of error circuits."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose:1
msgid "Return the composition error channel self∘other."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose:3
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand:3
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor:3
msgid "a quantum error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose:5
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose:5
#: qiskit.quantum_info.Chi.compose:7 qiskit.quantum_info.Choi.compose:7
#: qiskit.quantum_info.Kraus.compose:7 qiskit.quantum_info.Operator.compose:7
#: qiskit.quantum_info.PTM.compose:7 qiskit.quantum_info.Stinespring.compose:7
#: qiskit.quantum_info.SuperOp.compose:7
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose:7
#: qiskit.quantum_info.operators.channel.chi.Chi.compose:7
#: qiskit.quantum_info.operators.channel.choi.Choi.compose:7
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose:7
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose:7
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose:7
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose:7
#: qiskit.quantum_info.operators.operator.Operator.compose:7
msgid ""
"If False compose in standard order other(self(input)) otherwise compose "
"in reverse order self(other(input)) [default: False]"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose:10
msgid "The composition error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.compose:13
msgid "if other cannot be converted into a QuantumError,"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.copy:1
msgid "Make a copy of current QuantumError."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term:1
msgid "Return a single term from the error."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term:3
msgid "the position of the error term."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term:6
msgid ""
"A pair `(p, circuit)` for error term at `position` < size where `p` is "
"the probability of the error term, and `circuit` is the list of qobj "
"instructions for the error term."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.error_term:11
msgid "If the position is greater than the size of"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand:1
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.kron:1
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor:1
msgid "Return the tensor product quantum error channel self ⊗ other."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand:6
msgid "the tensor product error channel other ⊗ self."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.expand:9
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor:9
msgid "if other cannot be converted to a QuantumError."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.ideal:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.ideal:1
msgid "Return True if current error object is an identity"
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.kron:3
msgid "DEPRECIATED: use QuantumError.tensor instead."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.kron:5
msgid "a quantum error or channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.kron:8
msgid "the tensor product channel self ⊗ other."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.number_of_qubits:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.number_of_qubits:1
msgid "Return the number of qubits for the error."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power:1
msgid "Return the compose of a error channel with itself n times."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power:3
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power:3
msgid "the number of times to compose with self (n>0)."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power:6
msgid "the n-times composition error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.power:9
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power:9
msgid "if the power is not a positive integer."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.probabilities:1
msgid "Return the list of error probabilities."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.rtol:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.rtol:1
msgid "The relative tolerence parameter for float comparisons."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.size:1
msgid "Return the number of error circuit."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.tensor:6
msgid "the tensor product error channel self ⊗ other."
msgstr ""

#: of qiskit.providers.aer.noise.errors.quantum_error.QuantumError.to_dict:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.to_dict:1
msgid "Return the current error as a dictionary."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.to_instruction:1
msgid "Convet the QuantumError to a circuit Instruction."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.quantum_error.QuantumError.to_quantumchannel:1
msgid "Convet the QuantumError to a SuperOp quantum channel."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.errors.readout_error.rst:2
msgid "qiskit.providers.aer.noise.errors.readout\\_error module"
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError:1
msgid "Readout error class for Qiskit Aer noise model."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose:1
msgid "Return the composition readout error self∘other."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose:3
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand:3
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor:3
msgid "a readout error."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose:10
msgid "The composition readout error."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.compose:13
msgid "if other is not a ReadoutError or has incompatible"
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.copy:1
msgid "Make a copy of current ReadoutError."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand:1
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor:1
msgid "Return the tensor product readout error self ⊗ other."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand:6
msgid "the tensor product readout error other ⊗ self."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.expand:9
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor:9
msgid "if other is not a ReadoutError."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power:1
msgid "Return the compose of the readout error with itself n times."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.power:6
msgid "the n-times composition channel."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.probabilities:1
msgid "Return the readout error probabilities matrix."
msgstr ""

#: of qiskit.providers.aer.noise.errors.readout_error.ReadoutError.tensor:6
msgid "the tensor product readout error self ⊗ other."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.readout_error.ReadoutError.to_instruction:1
msgid "Convet the ReadoutError to a circuit Instruction."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.errors.standard_errors.rst:2
msgid "qiskit.providers.aer.noise.errors.standard\\_errors module"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors:1
msgid "Standard quantum computing error channels for Qiskit Aer."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:1
msgid "Single-qubit generalized amplitude damping quantum error channel."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:3
msgid "the amplitude damping parameter."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:5
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:7
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:9
msgid "the population of |1> state at equilibrium (default: 0)."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:8
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:10
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:5
msgid ""
"Convert input Kraus matrices into the canoical Kraus representation "
"(default: True)"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:12
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:14
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:9
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:13
msgid "a quantum error object for a noise model."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:16
msgid ""
"The single-qubit amplitude damping channel is described by the following "
"Kraus matrices:"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:18
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:22
msgid "A0 = sqrt(1 - p1) * [[1, 0],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:19
msgid "[0, sqrt(1 - a)]]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:20
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:24
msgid "A1 = sqrt(1 - p1) * [[0, sqrt(a)],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:21
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:25
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:33
msgid "[0, 0]]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:22
msgid "B0 = sqrt(p1) * [[sqrt(1 - a), 0],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:23
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:29
msgid "[0, 1]]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:24
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:30
msgid "B1 = sqrt(p1) * [[0, 0],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:25
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:31
msgid "[sqrt(a), 0]]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:26
msgid "where a = param_amp, p1 = excited_state_population"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:27
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:35
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:20
msgid ""
"The equilibrium state after infinitely many applications of the channel "
"is:"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:29
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:37
msgid "rho = [[1 - p1, 0]],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.amplitude_damping_error:30
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:38
msgid "[0, p1]]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.coherent_unitary_error:1
msgid "Coherent unitary quantum error channel."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.coherent_unitary_error:3
msgid "unitary error matrix."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.coherent_unitary_error:6
#: qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:13
#: qiskit.providers.aer.noise.errors.standard_errors.kraus_error:11
#: qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error:12
#: qiskit.providers.aer.noise.errors.standard_errors.pauli_error:15
msgid "The quantum error object."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:1
msgid "Depolarizing quantum error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:3
msgid "depolarizing error parameter."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:5
msgid "the number of qubits for the error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:7
#: qiskit.providers.aer.noise.errors.standard_errors.pauli_error:9
msgid ""
"if True return the operators as standard qobj Pauli gate instructions. If"
" false return as unitary matrix qobj instructions. (Default: True)"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:16
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:17
#: qiskit.providers.aer.noise.errors.standard_errors.reset_error:13
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:16
msgid "If noise parameters are invalid."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:20
msgid "The depolarizing channel is defined as:"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:20
msgid "E(ρ) = (1 - λ) ρ + λ * (I / 2 ** n) with 0 <= λ <= 4 ** n / (4 ** n - 1)"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:22
msgid ""
"where λ is the depolarizing error param and n is the number of qubits. If"
" λ = 0 this is the identity channel E(ρ) = ρ If λ = 1 this is a "
"completely depolarizing channel E(ρ) = I / 2 ** n if λ = 4 ** n / (4 ** n"
" - 1) this is a uniform Pauli error channel"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.depolarizing_error:27
msgid "E(ρ) = sum_j P_j ρ P_j / (4 ** n - 1) for all P_j != I."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.kraus_error:1
msgid "Kraus error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.kraus_error:3
msgid "Kraus matrices."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.kraus_error:5
#: qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error:9
msgid "Check if input matrices are standard gates."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.kraus_error:7
msgid ""
"Convert input Kraus matrices into the canoical Kraus representation "
"(default: False)"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.kraus_error:14
#: qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error:15
msgid "if error parameters are invalid."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error:1
msgid "Mixed unitary quantum error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error:3
msgid ""
"The input should be a list of pairs (U[j], p[j]), where `U[j]` is a "
"unitary matrix and `p[j]` is a probability. All probabilities must sum to"
" 1 for the input ops to be valid."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.mixed_unitary_error:7
msgid "unitary error matricies."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.pauli_error:1
msgid "Pauli quantum error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.pauli_error:3
msgid ""
"The input should be a list of pairs (P[j], p[j]), where `P[j]` is a "
"`Pauli` object and `p[j]` is a probability. All probabilities must sum to"
" 1 for the input ops to be valid."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.pauli_error:7
msgid "Pauli error terms."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.pauli_error:18
msgid "If depolarizing probability is less than 0 or greater than 1."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:1
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:1
msgid "Single-qubit combined phase and amplitude damping quantum error channel."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:3
msgid "the amplitude damping error parameter."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:5
msgid "the phase damping error parameter."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:20
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:13
msgid ""
"The single-qubit combined phase and amplitude damping channel is "
"described by the following Kraus matrices:"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:23
msgid "[0, sqrt(1 - a - b)]]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:26
msgid "A2 = sqrt(1 - p1) * [[0, 0],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:27
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:18
msgid "[0, sqrt(b)]]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:28
msgid "B0 = sqrt(p1) * [[sqrt(1 - a - b), 0],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:32
msgid "B2 = sqrt(p1) * [[sqrt(b), 0],"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.phase_amplitude_damping_error:34
#: qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:19
msgid "where a = param_amp, b = param_phase, p1 = excited_state_population"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:3
msgid "the phase damping parameter."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:15
msgid "A0 = [[1, 0],"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:16
msgid "[0, sqrt(1 - b)]]"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:17
msgid "A2 = [[0, 0],"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:22
msgid "rho = [[rho[0, 0], 0]],"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.phase_damping_error:23
msgid "[0, rho[1, 1]]]"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.reset_error:1
msgid "Single qubit reset error channel."
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.reset_error:3
msgid "The probability of no reset is given by 1 - prob0 - prob1"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.reset_error:5
msgid "reset probability to |0>"
msgstr ""

#: of qiskit.providers.aer.noise.errors.standard_errors.reset_error:7
msgid "reset probability to |1>"
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:1
msgid "Single-qubit thermal relaxation quantum error channel."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:3
msgid "the T_1 relaxation time constant."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:5
msgid "the T_2 relaxation time constant."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:7
msgid "the gate time for relaxation error."
msgstr ""

#: of
#: qiskit.providers.aer.noise.errors.standard_errors.thermal_relaxation_error:19
msgid ""
"For parameters to be valid T_2 <= 2 * T_1. If T_2 <= T_1 the error can be"
" expressed as a mixed reset and unitary error channel. If T_1 < T_2 <= 2 "
"* T_1 the error must be expressed as a general non-unitary Kraus error "
"channel."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.noise_model.rst:2
msgid "qiskit.providers.aer.noise.noise\\_model module"
msgstr ""

#: ../../api/qiskit.providers.aer.noise.noiseerror.rst:2
msgid "qiskit.providers.aer.noise.noiseerror module"
msgstr ""

#: of qiskit.providers.aer.noise.noiseerror:1
msgid "Exception for errors raised by Qiskit Aer noise module."
msgstr ""

#: of qiskit.providers.aer.noise.noiseerror.NoiseError:1
msgid "Class for errors raised in qiskit_aer.noise package."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.utils.rst:2
msgid "qiskit.providers.aer.noise.utils package"
msgstr ""

#: of qiskit.providers.aer.noise.utils:1
msgid "Noise utils for Qiskit Aer."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.utils.noise_remapper.rst:2
msgid "qiskit.providers.aer.noise.utils.noise\\_remapper module"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper:1
msgid "Remap qubits in a NoiseModel."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:1
msgid "Remap qubits in a noise model."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:3
msgid ""
"This remaps the specified gate qubits for local quantum errors, the gate "
"and noise qubits for non-local quantum errors, and the gate qubits for "
"local ReadoutErrors. All-qubit quantum and readout errors are unaffected."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:7
msgid "a noise model to remap qubits."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:9
msgid "list or remappings of old qubit to new qubit. See Additional Information."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:12
msgid ""
"if True discard qubits not in remapping keys, if False an identity "
"mapping wil be assumed for unnamed qubits (default: False)."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:16
msgid ""
"display warnings if qubits being remapped are not in the input noise "
"model (Default: True)."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:20
msgid ""
"a new noise model with the same errors but remapped gate and noise qubits"
" for local and non-local errors."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:24
msgid "if remapping has duplicate qubits in the remapped qubits."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:28
msgid "The remapping map be specified as either a list of pairs:"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:29
msgid "[(old, new), ...]"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:30
msgid "Or a list of old qubits where the new qubit is inffered from the position:"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:31
msgid "[old0, old1, ...] -> [(old0, 0), (old1, 1), ...]"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_remapper.remap_noise_model:32
msgid ""
"If `discard_qubits` is False, any qubits in the noise model not specified"
" in the list of old qubits will be added to the remapping as a trivial "
"mapping (qubit, qubit)."
msgstr ""

#: ../../api/qiskit.providers.aer.noise.utils.noise_transformation.rst:2
msgid "qiskit.providers.aer.noise.utils.noise\\_transformation module"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_transformation:1
msgid "Noise transformation module"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_transformation:3
msgid ""
"The goal of this module is to transform one 1-qubit noise channel (given "
"by the QuantumError class) into another, built from specified \"building "
"blocks\" (given as Kraus matrices) such that the new channel is as close "
"as possible to the original one in the Hilber-Schmidt metric."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_transformation:8
msgid ""
"For a typical use case, consider a simulator for circuits built from the "
"Clifford group. Computations on such circuits can be simulated at "
"polynomial time and space, but not all noise channels can be used in such"
" a simulation. To enable noisy Clifford simulation one can transform the "
"given noise channel into the closest one, Hilbert-Schmidt wise, that can "
"be used in a Clifford simulator."
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer:1
msgid "Transforms one quantum channel to another based on a specified criteria."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.channel_matrix_representation:1
msgid ""
"We convert the operators to a matrix by applying the channel to the four "
"basis elements of the 2x2 matrix space representing density operators; "
"this is standard linear algebra"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.channel_matrix_representation:5
msgid "The list of operators to transform into a Matrix"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.channel_matrix_representation:8
msgid "The matrx representation of the operators"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_P:1
msgid ""
"This method creates the matrix P in the f(x) = 1/2(x*P*x)+q*x "
"representation of the objective function :param As: list of symbolic "
"matrices repersenting the channel matrices :type As: list"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_P:7
msgid "The matrix P for the description of the quadaric program"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_channel_operation:1
msgid ""
"Given a quantum state's density function rho, the effect of the channel "
"on this state is: rho -> sum_{i=1}^n E_i * rho * E_i^dagger"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_channel_operation:5
msgid "Density function"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_channel_operation:7
msgid "List of operators"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_channel_operation:10
msgid "The result of applying the list of operators"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_q:1
msgid ""
"This method creates the vector q for the f(x) = 1/2(x*P*x)+q*x "
"representation of the objective function :param As: list of symbolic "
"matrices repersenting the quadratic program :type As: list :param C: "
"matrix representing the the constant channel matrix :type C: matrix"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.compute_q:9
msgid "The vector q for the description of the quadaric program"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.fidelity:1
msgid "Calculates channel fidelity"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.flatten_matrix:1
msgid "The matrix to flatten"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.flatten_matrix:4
msgid "A row vector repesenting the flattened matrix"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_matrices:1
msgid ""
"Generates a list of 4x4 symbolic matrices describing the channel defined "
"from the given operators"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_matrices:4
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.prepare_honesty_constraint:3
msgid "A list of tuples of matrices which represent"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_matrices:17
msgid ""
"We consider this input to symbolically represent a channel in the "
"following manner: define indeterminates x0, x1, ..., xn which are meant "
"to represent probabilities such that xi >=0 and x0 = 1-(x1 + ... + xn) "
"Now consider the quantum channel defined via the Kraus operators "
"{sqrt(x0)I, sqrt(x1)A1, sqrt(x1)B1, ..., sqrt(xn)An, sqrt(xn)Bn, ...} "
"This is the channel C symbolically represented by the operators"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_matrices:25
msgid ""
"A list of 4x4 complex matrices ([D1, D2, ..., Dn], E) such that: The "
"matrix x1*D1 + ... + xn*Dn + E represents the operation of the channel C "
"on the density operator. we find it easier to work with this "
"representation of C when performing the combinatorial optimization."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_quadratic_programming_matrices:1
msgid "a 4x4 symbolic matrix"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_quadratic_programming_matrices:3
msgid "the symbols x1, ..., xn which may occur in the matrix"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.generate_channel_quadratic_programming_matrices:6
msgid ""
"A list of 4x4 complex matrices ([D1, D2, ..., Dn], E) such that: channel "
"== x1*D1 + ... + xn*Dn + E"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel:1
msgid "Extract the numeric constant matrix."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel:3
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel:3
msgid "a 4x4 symbolic matrix."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel:5
msgid "The full list [x1, ..., xn] of symbols used in the matrix."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel:9
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel:8
msgid "a 4x4 numeric matrix."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_const_matrix_from_channel:14
msgid ""
"Each entry of the 4x4 symbolic input channel matrix is assumed to be a "
"polynomial of the form a1x1 + ... + anxn + c. The corresponding entry in "
"the output numeric matrix is c."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel:1
msgid "Extract the numeric parameter matrix."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel:5
msgid "a symbol xi"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.get_matrix_from_channel:13
msgid ""
"Each entry of the 4x4 symbolic input channel matrix is assumed to be a "
"polynomial of the form a1x1 + ... + anxn + c. The corresponding entry in "
"the output numeric matrix is ai."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_circuit:1
msgid ""
"Converts an operator representation to noise circuit :param operator: "
"operator representation. Can be a noise"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_circuit:3
msgid "circuit or a matrix or a list of matrices."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_circuit:6
msgid "The operator, converted to noise circuit representation."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_matrix:1
msgid "Converts an operator representation to Kraus matrix representation"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_matrix:3
msgid ""
"operator representation. Can be a noise circuit or a matrix or a list of "
"matrices."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.operator_matrix:7
msgid "the operator, converted to Kraus representation."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.prepare_channel_operator_list:1
msgid ""
"Prepares a list of channel operators :param ops_list: The list of "
"operators to prepare :type ops_list: List"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.prepare_channel_operator_list:5
msgid "The channel operator list"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.prepare_honesty_constraint:1
msgid "Prepares the honesty constraint"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program:1
msgid ""
"This function solved the quadratic program to minimize the objective "
"function f(x) = 1/2(x*P*x)+q*x subject to the additional constraints Gx "
"<= h"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program:6
msgid ""
"Where P, q are given and G,h are computed to ensure that x represents a "
"probability vector and subject to honesty constraints if required :param "
"P: A matrix representing the P component of the objective function :type "
"P: matrix :param q: A vector representing the q component of the "
"objective function :type q: list"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program:13
msgid "The solution of the quadratic program (represents probabilites)"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program:16
msgid "If cvxopt external module is not installed"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.solve_quadratic_program:20
msgid ""
"This method is the only place in the code where we rely on the cvxopt "
"library should we consider another library, only this method needs to "
"change"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel:1
msgid ""
"This method creates objective function representing the Hilbert-Schmidt "
"norm of the matrix (A-B) obtained as the difference of the input noise "
"channel and the output channel we wish to determine."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel:6
msgid ""
"This function is represented by a matrix P and a vector q, such that f(x)"
" = 1/2(x*P*x)+q*x where x is the vector we wish to minimize, where x "
"represents probabilities for the noise operators that construct the "
"output channel"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel:11
msgid "A list of 4x4 symbolic matrices"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel:13
msgid "a 4x4 constant matrix"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_given_channel:16
msgid ""
"a list of the optimal probabilities for the channel matrices, determined "
"by the quadratic program solver"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:1
msgid "a list of matrices (Kraus operators) for the input channel"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:3
msgid ""
"a list of matrices or tuples of matrices representing Kraus operators "
"that can construct the output channel e.g. [X,Y,Z] represent the Pauli "
"channel and [(|0><0|, |0><1|), |1><0|, |1><1|)] represents the relaxation"
" channel"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:9
msgid ""
"A list of amplitudes that define the output channel.     In the case the "
"input is a list [A1, A2, ..., An] of transform matrices     and [E0, E1, "
"..., Em] of noise kraus operators, the output is     a list [p1, p2, ...,"
" pn] of probabilities such that:     1) p_i >= 0     2) p1 + ... + pn <= "
"1     3) [sqrt(p1)A1, sqrt(p2)A2, ..., sqrt(pn)An, sqrt(1-(p1 + ... + "
"pn))I] is         a list of kraus operators that define the output "
"channel         (which is \"close\" to the input chanel given by [E0, "
"..., Em])      This channel can be thought of as choosing the operator Ai"
" in probability pi and     applying this operator to the quantum state."
"      More generally, if the input is a list of tuples (not neccesarily "
"of the same size):     [(A1, B1, ...), (A2, B2, ...), ... (An, Bn, ...)] "
"then the output is     still a list [p1, p2, ..., pn] and now the output "
"channel is defined by theo     perators:     [sqrt(p1)A1, sqrt(p1)B1, "
"..., sqrt(pn)An, sqrt(pn)Bn, ..., sqrt(1-(p1 + ... + pn))I]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:27
msgid "A list of amplitudes that define the output channel."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:12
msgid ""
"In the case the input is a list [A1, A2, ..., An] of transform matrices "
"and [E0, E1, ..., Em] of noise kraus operators, the output is a list [p1,"
" p2, ..., pn] of probabilities such that: 1) p_i >= 0 2) p1 + ... + pn <="
" 1 3) [sqrt(p1)A1, sqrt(p2)A2, ..., sqrt(pn)An, sqrt(1-(p1 + ... + pn))I]"
" is"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:18
msgid ""
"a list of kraus operators that define the output channel (which is "
"\"close\" to the input chanel given by [E0, ..., Em])"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:21
msgid ""
"This channel can be thought of as choosing the operator Ai in probability"
" pi and applying this operator to the quantum state."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.NoiseTransformer.transform_by_operator_list:24
msgid ""
"More generally, if the input is a list of tuples (not neccesarily of the "
"same size): [(A1, B1, ...), (A2, B2, ...), ... (An, Bn, ...)] then the "
"output is still a list [p1, p2, ..., pn] and now the output channel is "
"defined by theo perators: [sqrt(p1)A1, sqrt(p1)B1, ..., sqrt(pn)An, "
"sqrt(pn)Bn, ..., sqrt(1-(p1 + ... + pn))I]"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:1
msgid "Return an approximate noise model."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:3
msgid "the noise model to be approximated."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:5
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:7
msgid ""
"a name for a premade set of building blocks for the output channel "
"(Default: None)."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:8
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:10
msgid ""
"a dictionary whose values are the building blocks for the output channel "
"(Default: None)."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:11
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:13
msgid "list of building blocks for the output channel (Default: None)."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:15
msgid "the approximate noise model."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:18
msgid "if number of qubits is not supported or approximation"
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_noise_model:23
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:25
msgid ""
"The operator input precedence is as follows: list < dict < string if a "
"string is given, dict is overwritten; if a dict is given, list is "
"overwritten possible values for string are 'pauli', 'reset', 'clifford' "
"For further information see `NoiseTransformer.named_operators`."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:1
msgid "Return an approximate QuantumError bases on the Hilbert-Schmidt metric."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:3
msgid "Currently this is only implemented for 1-qubit QuantumErrors."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:5
msgid "the error to be approximated."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:17
msgid "the approximate quantum error."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:20
msgid "if number of qubits is not supported or approximation     failsed."
msgstr ""

#: of
#: qiskit.providers.aer.noise.utils.noise_transformation.approximate_quantum_error:21
msgid "If there's no information about the noise type"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_transformation.pauli_operators:1
msgid "a list of Pauli operators for 1 and 2 qubits"
msgstr ""

#: of qiskit.providers.aer.noise.utils.noise_transformation.reset_operators:1
msgid "a list of reset operators for 1 and 2 qubits"
msgstr ""

#: ../../api/qiskit.providers.aer.utils.rst:2
msgid "qiskit.providers.aer.utils package"
msgstr ""

#: of qiskit.providers.aer.utils:1
msgid "Utilities"
msgstr ""

#: ../../api/qiskit.providers.aer.utils.helpers.rst:2
msgid "qiskit.providers.aer.utils.helpers module"
msgstr ""

#: of qiskit.providers.aer.utils.helpers:1
msgid "A bunch of usefull helper functions"
msgstr ""

#: of qiskit.providers.aer.utils.helpers.deprecation:1
msgid "Shows a deprecation message to the user"
msgstr ""

#: ../../api/qiskit.providers.aer.utils.qobj_utils.rst:2
msgid "qiskit.providers.aer.utils.qobj\\_utils module"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils:1
msgid ""
"Temporary hacks for qobj until Terra supports Aer instructions (likely "
"0.8)"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils:3
msgid ""
"THESE SHOULD ONLY BE USED UNTIL A PROPER QUANTUM CIRCUIT INTERFACE IS "
"ADDED TO QISKIT TERRA. THEY WILL NOT BE SUPPORTED AFTER THAT."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.append_instr:1
msgid "Append a QasmQobjInstruction to a QobjExperiment."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.append_instr:3
msgid "a Qobj object."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.append_instr:5
#: qiskit.providers.aer.utils.qobj_utils.insert_instr:5
msgid "The index of the experiment in the qobj."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.append_instr:7
#: qiskit.providers.aer.utils.qobj_utils.insert_instr:7
msgid "instruction to insert."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.append_instr:10
#: qiskit.providers.aer.utils.qobj_utils.insert_instr:12
#: qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers:11
msgid "The Qobj object"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.barrier_instr:1
#: qiskit.providers.aer.utils.qobj_utils.iden_instr:1
msgid "Create a barrier QasmQobjInstruction."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.get_instr_pos:1
msgid "Return all locations of QasmQobjInstruction in a Qobj experiment."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.get_instr_pos:3
msgid ""
"The return list is sorted in reverse order so iterating over it to insert"
" new items will work as expected."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.get_instr_pos:6
#: qiskit.providers.aer.utils.qobj_utils.insert_instr:3
msgid "a Qobj object"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.get_instr_pos:8
msgid "The index of the experiment in the qobj"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.get_instr_pos:10
msgid "QasmQobjInstruction name to find"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.get_instr_pos:13
msgid "A list of positions where the QasmQobjInstruction is located."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.insert_instr:1
msgid "Insert a QasmQobjInstruction into a QobjExperiment."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.insert_instr:9
msgid "the position to insert the item."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers:1
msgid "Insert a snapshot instruction after each barrier in qobj."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers:3
msgid ""
"The label of the input snapshot will be appended with \"i\" where \"i\" "
"ranges from 0 to the 1 - number of barriers."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers:6
msgid "a qobj to insert snapshots into"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers:8
msgid "a snapshot instruction."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.insert_snapshots_after_barriers:14
msgid "if the name of the instruction is not an snapshot"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.measure_instr:1
msgid "Create a multi-qubit measure instruction"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.reset_instr:1
msgid "Create a multi-qubit reset instruction"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:1
msgid "Create a snapshot qobj item."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:3
msgid "the snapshot type identifier"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:5
msgid "the snapshot label string"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:7
msgid "qubits snapshot applies to (optional)"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:9
msgid ""
"optional parameters for special snapshot types. See additional "
"information."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:13
msgid "The qobj item for the snapshot instruction."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:30
msgid "Snapshot types:"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:18
msgid ""
"\"statevector\" -- returns the current statevector for each shot "
"\"memory\" -- returns the current memory hex-string for each shot "
"\"register\" -- returns the current register hex-string for each shot "
"\"probabilities\" -- returns the measurement outcome probabilities"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:22
msgid ""
"averaged over all shots, but conditioned on the current memory value. "
"This requires the qubits field to be set."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:28
msgid "\"expval_pauli\" -- returns the expectation value of an operator"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:26
msgid ""
"averaged over all shots, but conditioned on the current memory value. "
"This requires the qubits field to be set and the params field to be set."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:30
msgid "\"expval_matrix\" -- same as expval_pauli but with different params"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:36
msgid "Pauli expectation value params:"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:33
msgid ""
"These are a list of terms [complex_coeff, pauli_str] where string is in "
"little endian: pauli_str CBA applies Pauli A to qubits[0], B to qubits[1]"
" and C to qubits[2]. Example for op 0.5 XX + 0.7 IZ we have [[0.5, 'XX'],"
" [0.7, 'IZ']]"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:38
msgid "Matrix expectation value params:"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.snapshot_instr:39
msgid "TODO"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:1
msgid "Create a unitary gate QasmQobjInstruction."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:3
msgid "an n-qubit unitary matrix"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:5
msgid "qubits to apply the matrix to."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:7
msgid "optional string label for the untiary matrix"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:10
msgid "The qobj item for the unitary instruction."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:13
msgid "if the input matrix is not unitary"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:21
msgid "Qubit Ordering:"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:18
msgid ""
"The n-qubit matrix is ordered in little-endian with respect to the qubits"
" in the label string. For example. If M is a tensor product of single "
"qubit matrices `M = kron(M_(n-1), ..., M_1, M_0)` then `M_0` is applied "
"to `qubits[0]`, `M_1` to `qubits[1]` etc."
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:25
msgid "Label string:"
msgstr ""

#: of qiskit.providers.aer.utils.qobj_utils.unitary_instr:24
msgid ""
"The string label is used for identifying the matrix in a noise model so "
"that noise may be applied to the implementation of this matrix."
msgstr ""

#: ../../api/qiskit.providers.aer.version.rst:2
msgid "qiskit.providers.aer.version module"
msgstr ""

#: of qiskit.providers.aer.version:1
msgid "Helper tools for getting Terra addon version information"
msgstr ""

#: ../../api/qiskit.providers.basicaer.rst:2
msgid "qiskit.providers.basicaer package"
msgstr ""

#: of qiskit.providers.basicaer:1
msgid "BasicAer Provider: Contains Python simulators."
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerError.rst:2
msgid "BasicAerError"
msgstr ""

#: of qiskit.providers.basicaer.BasicAerError:1
#: qiskit.providers.basicaer.exceptions.BasicAerError:1
msgid "Base class for errors raised by Basic Aer."
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:2
msgid "BasicAerJob"
msgstr ""

#: of qiskit.providers.basicaer.BasicAerJob:1
msgid "BasicAerJob class."
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid ":obj:`backend <qiskit.providers.basicaer.BasicAerJob.backend>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid ":obj:`cancel <qiskit.providers.basicaer.BasicAerJob.cancel>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid ":obj:`job_id <qiskit.providers.basicaer.BasicAerJob.job_id>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid ":obj:`qobj <qiskit.providers.basicaer.BasicAerJob.qobj>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid ""
":obj:`result <qiskit.providers.basicaer.BasicAerJob.result>`\\ "
"\\(\\[timeout\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid ":obj:`status <qiskit.providers.basicaer.BasicAerJob.status>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerJob.rst:20:<autosummary>:1
msgid ":obj:`submit <qiskit.providers.basicaer.BasicAerJob.submit>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerProvider.rst:2
msgid "BasicAerProvider"
msgstr ""

#: of qiskit.providers.basicaer.BasicAerProvider:1
msgid "Provider for Basic Aer backends."
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerProvider.rst:15:<autosummary>:1
msgid ""
":obj:`backends <qiskit.providers.basicaer.BasicAerProvider.backends>`\\ "
"\\(\\[name\\, filters\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.BasicAerProvider.rst:15:<autosummary>:1
msgid ""
":obj:`get_backend "
"<qiskit.providers.basicaer.BasicAerProvider.get_backend>`\\ "
"\\(\\[name\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:2
msgid "QasmSimulatorPy"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy:1
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy:1
msgid "Python implementation of a qasm simulator."
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.basicaer.QasmSimulatorPy.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`DEFAULT_OPTIONS "
"<qiskit.providers.basicaer.QasmSimulatorPy.DEFAULT_OPTIONS>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`MAX_QUBITS_MEMORY "
"<qiskit.providers.basicaer.QasmSimulatorPy.MAX_QUBITS_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`SHOW_FINAL_STATE "
"<qiskit.providers.basicaer.QasmSimulatorPy.SHOW_FINAL_STATE>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.basicaer.QasmSimulatorPy.configuration>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
msgid ":obj:`name <qiskit.providers.basicaer.QasmSimulatorPy.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`properties "
"<qiskit.providers.basicaer.QasmSimulatorPy.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`provider <qiskit.providers.basicaer.QasmSimulatorPy.provider>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.basicaer.QasmSimulatorPy.run>`\\ "
"\\(qobj\\[\\, backend\\_options\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
#: of qiskit.providers.basicaer.QasmSimulatorPy.run:1
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run:1
#: qiskit.providers.basicaer.UnitarySimulatorPy.run:1
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:1
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run:1
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run:1
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run:1
msgid "Run qobj asynchronously."
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`run_experiment "
"<qiskit.providers.basicaer.QasmSimulatorPy.run_experiment>`\\ "
"\\(experiment\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
#: of qiskit.providers.basicaer.QasmSimulatorPy.run_experiment:1
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment:1
#: qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment:1
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment:1
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment:1
msgid "Run an experiment (circuit) and return a single experiment result."
msgstr ""

#: ../../api/qiskit.providers.basicaer.QasmSimulatorPy.rst:29:<autosummary>:1
msgid ":obj:`status <qiskit.providers.basicaer.QasmSimulatorPy.status>`\\ \\(\\)"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run:3
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run:3
#: qiskit.providers.basicaer.UnitarySimulatorPy.run:3
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:3
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run:3
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run:3
msgid "payload of the experiment"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run:5
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run:5
#: qiskit.providers.basicaer.UnitarySimulatorPy.run:5
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:5
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run:5
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run:5
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run:5
#: qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config:5
msgid "backend options"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run:8
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run:8
#: qiskit.providers.basicaer.UnitarySimulatorPy.run:8
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:8
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run:8
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run:8
msgid "derived from BaseJob"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run:13
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:13
msgid "backend_options: Is a dict of options for the backend. It may contain"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run:13
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:13
msgid "\"initial_statevector\": vector_like"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run:15
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:15
msgid ""
"The \"initial_statevector\" option specifies a custom initial initial "
"statevector for the simulator to be used instead of the all zero state. "
"This size of this vector must be correct for the number of qubits in all "
"experiments in the qobj."
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run:20
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run:20
msgid "Example::"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run_experiment:3
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment:3
#: qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment:3
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment:3
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment:3
msgid "experiment from qobj experiments list"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run_experiment:6
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment:6
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment:6
msgid ""
"A result dictionary which looks something like::     {    \"name\": name "
"of this experiment (obtained from qobj.experiment header)    \"seed\": "
"random seed used for simulation    \"shots\": number of shots used in the"
" simulation    \"data\":        {        \"counts\": {'0x9: 5, ...},"
"        \"memory\": ['0x9', '0xF', '0x1D', ..., '0x9']        },    "
"\"status\": status string for the simulation    \"success\": boolean    "
"\"time_taken\": simulation time of this single experiment    }"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run_experiment:8
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment:8
#: qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment:8
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment:8
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment:8
msgid "A result dictionary which looks something like::"
msgstr ""

#: of qiskit.providers.basicaer.QasmSimulatorPy.run_experiment:25
#: qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment:25
#: qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy.run_experiment:25
msgid "if an error occurred."
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:2
msgid "StatevectorSimulatorPy"
msgstr ""

#: of qiskit.providers.basicaer.StatevectorSimulatorPy:1
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy:1
msgid "ベースクラス: :class:`qiskit.providers.basicaer.qasm_simulator.QasmSimulatorPy`"
msgstr ""

#: of qiskit.providers.basicaer.StatevectorSimulatorPy:1
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy:1
msgid "Python statevector simulator."
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`DEFAULT_OPTIONS "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.DEFAULT_OPTIONS>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`MAX_QUBITS_MEMORY "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.MAX_QUBITS_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:17:<autosummary>:1
msgid ""
":obj:`SHOW_FINAL_STATE "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.SHOW_FINAL_STATE>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.configuration>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`name <qiskit.providers.basicaer.StatevectorSimulatorPy.name>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`properties "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`provider "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.provider>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.basicaer.StatevectorSimulatorPy.run>`\\ "
"\\(qobj\\[\\, backend\\_options\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`run_experiment "
"<qiskit.providers.basicaer.StatevectorSimulatorPy.run_experiment>`\\ "
"\\(experiment\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.StatevectorSimulatorPy.rst:29:<autosummary>:1
msgid ""
":obj:`status <qiskit.providers.basicaer.StatevectorSimulatorPy.status>`\\"
" \\(\\)"
msgstr ""

#: of qiskit.providers.basicaer.StatevectorSimulatorPy.run:11
#: qiskit.providers.basicaer.UnitarySimulatorPy.run:11
#: qiskit.providers.basicaer.statevector_simulator.StatevectorSimulatorPy.run:11
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run:11
msgid "Additional Information::"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:2
msgid "UnitarySimulatorPy"
msgstr ""

#: of qiskit.providers.basicaer.UnitarySimulatorPy:1
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy:1
msgid "Python implementation of a unitary simulator."
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:16:<autosummary>:1
msgid ""
":obj:`DEFAULT_CONFIGURATION "
"<qiskit.providers.basicaer.UnitarySimulatorPy.DEFAULT_CONFIGURATION>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:16:<autosummary>:1
msgid ""
":obj:`DEFAULT_OPTIONS "
"<qiskit.providers.basicaer.UnitarySimulatorPy.DEFAULT_OPTIONS>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:16:<autosummary>:1
msgid ""
":obj:`MAX_QUBITS_MEMORY "
"<qiskit.providers.basicaer.UnitarySimulatorPy.MAX_QUBITS_MEMORY>`\\"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
msgid ""
":obj:`configuration "
"<qiskit.providers.basicaer.UnitarySimulatorPy.configuration>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
msgid ":obj:`name <qiskit.providers.basicaer.UnitarySimulatorPy.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
msgid ""
":obj:`properties "
"<qiskit.providers.basicaer.UnitarySimulatorPy.properties>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
msgid ""
":obj:`provider <qiskit.providers.basicaer.UnitarySimulatorPy.provider>`\\"
" \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
msgid ""
":obj:`run <qiskit.providers.basicaer.UnitarySimulatorPy.run>`\\ "
"\\(qobj\\[\\, backend\\_options\\]\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
msgid ""
":obj:`run_experiment "
"<qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment>`\\ "
"\\(experiment\\)"
msgstr ""

#: ../../api/qiskit.providers.basicaer.UnitarySimulatorPy.rst:28:<autosummary>:1
msgid ""
":obj:`status <qiskit.providers.basicaer.UnitarySimulatorPy.status>`\\ "
"\\(\\)"
msgstr ""

#: of qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment:6
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment:6
msgid ""
"A result dictionary which looks something like::      {     \"name\": "
"name of this experiment (obtained from qobj.experiment header)     "
"\"seed\": random seed used for simulation     \"shots\": number of shots "
"used in the simulation     \"data\":         {         \"unitary\": "
"[[[0.0, 0.0], [1.0, 0.0]],                     [[1.0, 0.0], [0.0, 0.0]]]"
"         },     \"status\": status string for the simulation     "
"\"success\": boolean     \"time taken\": simulation time of this single "
"experiment     }"
msgstr ""

#: of qiskit.providers.basicaer.UnitarySimulatorPy.run_experiment:25
#: qiskit.providers.basicaer.unitary_simulator.UnitarySimulatorPy.run_experiment:25
msgid "if the number of qubits in the circuit is greater than 24."
msgstr ""

#: ../../api/qiskit.providers.basicaer.basicaertools.rst:2
msgid "qiskit.providers.basicaer.basicaertools module"
msgstr ""

#: of qiskit.providers.basicaer.basicaertools:1
msgid "Contains functions used by the basic aer simulators."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.cx_gate_matrix:1
msgid "Get the matrix for a controlled-NOT gate."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.einsum_matmul_index:1
msgid "Return the index string for Numpy.eignsum matrix-matrix multiplication."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.einsum_matmul_index:3
msgid ""
"The returned indices are to perform a matrix multiplication A.B where the"
" matrix A is an M-qubit matrix, matrix B is an N-qubit matrix, and M <= "
"N, and identity matrices are implied on the subsystems where A has no "
"support on B."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.einsum_matmul_index:8
#: qiskit.providers.basicaer.basicaertools.einsum_vecmul_index:8
msgid ""
"the indices of the right matrix subsystems to contract with the left "
"matrix."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.einsum_matmul_index:11
#: qiskit.providers.basicaer.basicaertools.einsum_vecmul_index:11
msgid "the total number of qubits for the right matrix."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.einsum_matmul_index:14
#: qiskit.providers.basicaer.basicaertools.einsum_vecmul_index:14
msgid "An indices string for the Numpy.einsum function."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.einsum_vecmul_index:1
msgid "Return the index string for Numpy.eignsum matrix-vector multiplication."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.einsum_vecmul_index:3
msgid ""
"The returned indices are to perform a matrix multiplication A.v where the"
" matrix A is an M-qubit matrix, vector v is an N-qubit vector, and M <= "
"N, and identity matrices are implied on the subsystems where A has no "
"support on v."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.single_gate_matrix:1
msgid "Get the matrix for a single qubit."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.single_gate_matrix:3
#: qiskit.providers.basicaer.basicaertools.single_gate_params:3
msgid "the single qubit gate name"
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.single_gate_matrix:5
#: qiskit.providers.basicaer.basicaertools.single_gate_params:5
msgid "the operation parameters op['params']"
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.single_gate_matrix:8
msgid "A numpy array representing the matrix"
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.single_gate_params:1
msgid "Apply a single qubit gate to the qubit."
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.single_gate_params:8
msgid "a tuple of U gate parameters (theta, phi, lam)"
msgstr ""

#: of qiskit.providers.basicaer.basicaertools.single_gate_params:11
msgid "if the gate name is not valid"
msgstr ""

#: ../../api/qiskit.providers.basicaer.exceptions.rst:2
msgid "qiskit.providers.basicaer.exceptions module"
msgstr ""

#: of qiskit.providers.basicaer.exceptions:1
msgid "Exception for errors raised by Basic Aer."
msgstr ""

#: ../../api/qiskit.providers.basicaer.qasm_simulator.rst:2
msgid "qiskit.providers.basicaer.qasm\\_simulator module"
msgstr ""

#: of qiskit.providers.basicaer.qasm_simulator:1
msgid "Contains a (slow) python simulator."
msgstr ""

#: of qiskit.providers.basicaer.qasm_simulator:3
msgid ""
"It simulates a qasm quantum circuit (an experiment) that has been "
"compiled to run on the simulator. It is exponential in the number of "
"qubits."
msgstr ""

#: of qiskit.providers.basicaer.qasm_simulator:6
msgid "The simulator is run using"
msgstr ""

#: of qiskit.providers.basicaer.qasm_simulator:12
msgid ""
"Where the input is a Qobj object and the output is a BasicAerJob object, "
"which can later be queried for the Result object. The result will contain"
" a 'memory' data field, which is a result of measurements for each shot."
msgstr ""

#: ../../api/qiskit.providers.basicaer.statevector_simulator.rst:2
msgid "qiskit.providers.basicaer.statevector\\_simulator module"
msgstr ""

#: of qiskit.providers.basicaer.statevector_simulator:1
msgid "Contains a (slow) python statevector simulator."
msgstr ""

#: of qiskit.providers.basicaer.statevector_simulator:3
msgid ""
"It simulates the statevector through a quantum circuit. It is exponential"
" in the number of qubits."
msgstr ""

#: of qiskit.providers.basicaer.statevector_simulator:6
msgid ""
"We advise using the c++ simulator or online simulator for larger size "
"systems."
msgstr ""

#: of qiskit.providers.basicaer.statevector_simulator:8
msgid "The input is a qobj dictionary and the output is a Result object."
msgstr ""

#: of qiskit.providers.basicaer.statevector_simulator:10
msgid ""
"The input qobj to this simulator has no shots, no measures, no reset, no "
"noise."
msgstr ""

#: ../../api/qiskit.providers.basicaer.unitary_simulator.rst:2
msgid "qiskit.providers.basicaer.unitary\\_simulator module"
msgstr ""

#: of qiskit.providers.basicaer.unitary_simulator:1
msgid "Contains a Python simulator that returns the unitary of the circuit."
msgstr ""

#: of qiskit.providers.basicaer.unitary_simulator:3
msgid ""
"It simulates a unitary of a quantum circuit that has been compiled to run"
" on the simulator. It is exponential in the number of qubits."
msgstr ""

#: of qiskit.providers.basicaer.unitary_simulator:10
msgid ""
"Where the input is a Qobj object and the output is a BasicAerJob object, "
"which can later be queried for the Result object. The result will contain"
" a 'unitary' data field, which is a 2**n x 2**n complex numpy array "
"representing the circuit's unitary matrix."
msgstr ""

#: ../../api/qiskit.providers.exceptions.rst:2
msgid "qiskit.providers.exceptions module"
msgstr ""

#: of qiskit.providers.exceptions:1
msgid "Exceptions for errors raised while handling backends and jobs."
msgstr ""

#: of qiskit.providers.exceptions.JobTimeoutError:1
msgid "ベースクラス: :class:`qiskit.providers.exceptions.JobError`"
msgstr ""

#: ../../api/qiskit.providers.ibmq.rst:2
msgid "qiskit.providers.ibmq package"
msgstr ""

#: of qiskit.providers.ibmq:1
msgid "Backends provided by IBM Quantum Experience."
msgstr ""

#: of qiskit.providers.ibmq.least_busy:1
msgid "Return the least busy backend from a list."
msgstr ""

#: of qiskit.providers.ibmq.least_busy:3
msgid ""
"Return the least busy available backend for those that have a "
"`pending_jobs` in their `status`. Backends such as local backends that do"
" not have this are not considered."
msgstr ""

#: of qiskit.providers.ibmq.least_busy:7
msgid "backends to choose from"
msgstr ""

#: of qiskit.providers.ibmq.least_busy:10
msgid "the the least busy backend"
msgstr ""

#: of qiskit.providers.ibmq.least_busy:13
msgid ""
"if passing a list of backend names that is     either empty or none have "
"attribute ``pending_jobs``"
msgstr ""

#: ../../api/qiskit.providers.ibmq.accountprovider.rst:2
msgid "qiskit.providers.ibmq.accountprovider module"
msgstr ""

#: of qiskit.providers.ibmq.accountprovider:1
#: qiskit.providers.ibmq.accountprovider.AccountProvider:1
msgid "Provider for a single IBM Quantum Experience account."
msgstr ""

#: of qiskit.providers.ibmq.accountprovider.AccountProvider.backends:1
msgid ""
"Return all backends accessible via this provider, subject to optional "
"filtering."
msgstr ""

#: of qiskit.providers.ibmq.accountprovider.AccountProvider.backends:3
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:11
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends:3
msgid "backend name to filter by"
msgstr ""

#: of qiskit.providers.ibmq.accountprovider.AccountProvider.backends:5
msgid ""
"more complex filters, such as lambda functions e.g. "
"AccountProvider.backends(     filters=lambda b: "
"b.configuration['n_qubits'] > 5)"
msgstr ""

#: of qiskit.providers.ibmq.accountprovider.AccountProvider.backends:5
msgid ""
"more complex filters, such as lambda functions e.g. "
"AccountProvider.backends("
msgstr ""

#: of qiskit.providers.ibmq.accountprovider.AccountProvider.backends:7
msgid "filters=lambda b: b.configuration['n_qubits'] > 5)"
msgstr ""

#: of qiskit.providers.ibmq.accountprovider.AccountProvider.backends:9
msgid ""
"simple filters specifying a true/false criteria in the backend "
"configuration or backend status or provider credentials e.g. "
"AccountProvider.backends(n_qubits=5, operational=True)"
msgstr ""

#: of qiskit.providers.ibmq.accountprovider.AccountProvider.backends:13
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:20
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends:12
msgid "list of backends available that match the filter"
msgstr ""

#: ../../api/qiskit.providers.ibmq.api.rst:2
msgid "qiskit.providers.ibmq.api package"
msgstr ""

#: of qiskit.providers.ibmq.api:1 qiskit.providers.ibmq.api.ibmqconnector:1
msgid "IBM Q API connector."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api.exceptions.rst:2
msgid "qiskit.providers.ibmq.api.exceptions module"
msgstr ""

#: of qiskit.providers.ibmq.api.exceptions:1
msgid "Exceptions for IBMQ Connector."
msgstr ""

#: of qiskit.providers.ibmq.api.exceptions.ApiError:1
#: qiskit.providers.ibmq.circuits.exceptions.CircuitError:1
#: qiskit.providers.ibmq.credentials.exceptions.CredentialsError:1
#: qiskit.providers.ibmq.exceptions.IBMQAccountError:1
#: qiskit.providers.ibmq.exceptions.IBMQBackendError:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.exceptions.IBMQError`"
msgstr ""

#: of qiskit.providers.ibmq.api.exceptions.ApiError:1
msgid "IBMQConnector API error handling base class."
msgstr ""

#: of qiskit.providers.ibmq.api.exceptions.BadBackendError:1
#: qiskit.providers.ibmq.api.exceptions.CredentialsError:1
#: qiskit.providers.ibmq.api.exceptions.RegisterSizeError:1
#: qiskit.providers.ibmq.api_v2.exceptions.ApiError:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.api.exceptions.ApiError`"
msgstr ""

#: of qiskit.providers.ibmq.api.exceptions.BadBackendError:1
msgid "Unavailable backend error."
msgstr ""

#: of qiskit.providers.ibmq.api.exceptions.CredentialsError:1
msgid "Exception associated with bad server credentials."
msgstr ""

#: of qiskit.providers.ibmq.api.exceptions.RegisterSizeError:1
msgid "Exception due to exceeding the maximum number of allowed qubits."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api.ibmqconnector.rst:2
msgid "qiskit.providers.ibmq.api.ibmqconnector module"
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector:1
msgid "Connector class that handles the requests to the IBMQ platform."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector:3
msgid "This class exposes a Python API for making requests to the IBMQ platform."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.api_version:1
msgid "Get the API Version of the QX Platform."
msgstr ""

#: of
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.available_backends:1
msgid "Get the backends available to use in the IBMQ Platform."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.backend_defaults:1
msgid "Get the pulse defaults of a backend."
msgstr ""

#: of
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.backend_properties:1
msgid "Get the properties of a backend."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.backend_status:1
msgid "Get the status of a backend."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.cancel_job:1
msgid "Cancel the information about a job, by its id."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.check_credentials:1
msgid "Check if the user has permission in QX platform."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_get:1
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_get:1
msgid "Return information about a Circuit job."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_get:3
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_status:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_get:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_status:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_cancel:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_download_qobj_object_storage:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_properties:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_result_object_storage:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_status:3
msgid "the id of the job."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_get:6
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_get:6
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get:12
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_result_object_storage:6
msgid "job information."
msgstr ""

#: of
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_status:1
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_status:1
msgid "Return the status of a Circuits job."
msgstr ""

#: of
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_job_status:6
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_job_status:6
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket:9
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_status:6
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit:8
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit_object_storage:8
msgid "job status."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run:1
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_run:1
#: qiskit.providers.ibmq.api_v2.rest.root.Api.circuit:1
msgid "Execute a Circuit."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run:3
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_run:3
#: qiskit.providers.ibmq.api_v2.rest.root.Api.circuit:3
msgid "name of the Circuit."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run:5
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_run:5
#: qiskit.providers.ibmq.api_v2.rest.root.Api.circuit:5
msgid "arguments for the Circuit."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run:8
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.circuit_run:8
#: qiskit.providers.ibmq.api_v2.rest.auth.Auth.login:6
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get:10
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get_object_storage:6
#: qiskit.providers.ibmq.api_v2.rest.root.Api.circuit:8
#: qiskit.providers.ibmq.api_v2.rest.root.Api.jobs:10
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job:8
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job_object_storage:8
msgid "json response."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.circuit_run:11
msgid "if the user was not authenticated."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.get_job:1
msgid "Get the information about a job, by its id."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.get_jobs:1
#: qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.get_status_jobs:1
msgid "Get the information about the user jobs."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.get_status_job:1
msgid "Get the status about a job, by its id."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.job_properties:1
msgid "Get the backend properties of a job."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job:1
msgid "Run a Qobj in a IBMQ backend."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job:3
msgid "Qobj to be run, in dictionary form."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job:5
#: qiskit.providers.models.BackendConfiguration:7
#: qiskit.providers.models.BackendProperties:8
#: qiskit.providers.models.BackendStatus:8
#: qiskit.providers.models.PulseBackendConfiguration:7
#: qiskit.providers.models.QasmBackendConfiguration:7 qiskit.result.Result:8
msgid "backend name."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job:8
msgid "if the backend name is not valid."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.IBMQConnector.submit_job:10
msgid "API response."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.get_backend_defaults_url:1
msgid "Return the URL for a backend's pulse defaults."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.get_backend_properties_url:1
msgid "Return the URL for a backend's properties."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.get_backends_url:1
msgid "Return the URL for a backend."
msgstr ""

#: of qiskit.providers.ibmq.api.ibmqconnector.get_job_url:1
msgid "Return the URL for a job."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api.utils.rst:2
msgid "qiskit.providers.ibmq.api.utils module"
msgstr ""

#: of qiskit.providers.ibmq.api.utils:1
msgid "Utilities for IBM Q API connector."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials:1
msgid "Credentials class that manages the tokens."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.get_config:1
msgid "Return the configuration that was set for this Credentials."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.get_token:1
msgid "Return the Authenticated Token to connect with QX Platform."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.get_user_id:1
msgid "Return the user id in QX platform."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.obtain_token:1
msgid "Obtain the token to access to QX Platform."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.obtain_token:3
msgid "when token is invalid or the user has not     accepted the license."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.obtain_token:4
msgid "when the response from the server couldn't be parsed."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.set_token:1
msgid "Set the Access Token to connect with QX Platform API."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Credentials.set_user_id:1
msgid "Set the user id to connect with QX Platform API."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:1
msgid "Request class that performs the HTTP calls."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:5
msgid ""
"Set the proxy information, if present, from the configuration, with the "
"following format::"
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:17
msgid "config = {"
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:16
msgid "'proxies': {"
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:10
msgid "# If using 'urls', assume basic auth or no auth. 'urls': {"
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:12
msgid ""
"'http': 'http://user:password@1.2.3.4:5678', 'https': "
"'http://user:password@1.2.3.4:5678',"
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:14
msgid ""
"} # If using 'ntlm', assume NTLM authentication. 'username_ntlm': "
"'domain\\username', 'password_ntlm': 'password'"
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request:18
#: qiskit.providers.ibmq.api.utils.Request:19
#: qiskit.transpiler.passes.collect_2q_blocks:9
msgid "}"
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request.check_token:1
msgid "Check is the user's token is valid."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request.get:1
msgid "GET Method Wrapper of the REST API."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request.post:1
msgid "POST Method Wrapper of the REST API."
msgstr ""

#: of qiskit.providers.ibmq.api.utils.Request.put:1
msgid "PUT Method Wrapper of the REST API."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rst:2
msgid "qiskit.providers.ibmq.api\\_v2 package"
msgstr ""

#: of qiskit.providers.ibmq.api_v2:1
msgid "IBM Q Experience v2 API connector and utilities."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.clients.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.clients package"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients:1
msgid "IBM Q Experience v2 API clients."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.clients.account.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.clients.account module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account:1
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient:1
msgid "Client for accessing an individual IBM Q Experience account."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient:1
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient:1
#: qiskit.providers.ibmq.api_v2.clients.version.VersionClient:1
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.api_v2.clients.base.BaseClient`"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient:3
msgid "This client provides access to an individual IBM Q hub/group/project."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_properties:1
msgid "Return the properties of a backend."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_properties:6
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_properties:6
msgid "backend properties."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_pulse_defaults:1
msgid "Return the pulse defaults of a backend."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_pulse_defaults:6
msgid "backend pulse defaults."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_status:1
msgid "Return the status of a backend."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.backend_status:6
msgid "backend status."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_cancel:1
msgid "Submit a request for cancelling a job."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_cancel:6
msgid "job cancellation response."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_download_qobj_object_storage:1
msgid "Retrieve and return a Qobj using object storage."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_download_qobj_object_storage:6
msgid "Qobj, in dict form."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket:1
msgid "Return the final status of a job via websocket."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket:5
msgid "seconds to wait for job. If None, wait indefinitely."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_final_status_websocket:12
msgid "if an unexpected error occurred while getting the event loop."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get:1
msgid "Return information about a job."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get:5
#: qiskit.providers.ibmq.api_v2.rest.job.Job.get:3
#: qiskit.providers.ibmq.api_v2.rest.job.build_url_filter:6
msgid "names of the fields to explicitly exclude from the result."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_get:8
msgid ""
"names of the fields, if present, to explicitly include in the result. All"
" the other fields will not be included in the result."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_properties:1
#: qiskit.providers.ibmq.api_v2.rest.job.Job.properties:1
msgid "Return the backend properties of a job."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_result_object_storage:1
msgid "Retrieve and return a result using object storage."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_status:1
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:1
#: qiskit.providers.ibmq.api_v2.rest.job.Job.status:1
msgid "Return the status of a job."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit:1
msgid "Submit a Qobj to a device."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit:5
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit_object_storage:5
#: qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job:5
msgid "the Qobj to be executed, as a dictionary."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.job_submit_object_storage:1
msgid "Submit a Qobj to a device using object storage."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_backends:1
#: qiskit.providers.ibmq.api_v2.rest.root.Api.backends:1
msgid "Return the list of backends."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_backends:3
msgid "a list of backends."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses:1
msgid "Return a list of statuses of jobs, with filtering and pagination."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses:3
#: qiskit.providers.ibmq.api_v2.rest.root.Api.jobs:3
msgid "maximum number of items to return."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses:5
#: qiskit.providers.ibmq.api_v2.rest.root.Api.jobs:5
msgid "offset for the items to return."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses:7
#: qiskit.providers.ibmq.api_v2.rest.root.Api.jobs:7
msgid "additional filtering passed to the query."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.account.AccountClient.list_jobs_statuses:10
msgid "a list of job statuses."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.clients.auth.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.clients.auth module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth:1
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient:1
msgid "Client for accessing authentication features of IBM Q Experience."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.api_version:1
msgid "Return the version of the API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.api_version:3
msgid "versions of the API components."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_access_token:1
msgid "Return the current access token."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_access_token:3
msgid "the access token in use."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_service_urls:1
msgid "Return the current service URLs."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_service_urls:3
msgid ""
"a dict with the base URLs for the services, in the same     format as "
"`.user_urls()`."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_service_urls:5
msgid "a dict with the base URLs for the services, in the same"
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.current_service_urls:6
msgid "format as `.user_urls()`."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_hubs:1
msgid "Retrieve the hubs available to the user."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_hubs:3
msgid ""
"The first entry in the list will be the default one, as indicated by the "
"API (by having `isDefault` in all hub, group, project fields)."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_hubs:6
msgid ""
"a list of dicts with the hubs, which contains the keys     `hub`, "
"`group`, `project`."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_hubs:8
msgid "a list of dicts with the hubs, which contains the keys"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_hubs:9
msgid "`hub`, `group`, `project`."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_urls:1
msgid "Retrieve the API URLs from the authentication server."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_urls:3
msgid ""
"a dict with the base URLs for the services. Currently     supported keys:"
"     * ``http``: the API URL for http communication.     * ``ws``: the "
"API URL for websocket communication."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_urls:7
msgid "a dict with the base URLs for the services. Currently"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.auth.AuthClient.user_urls:6
msgid ""
"supported keys: * ``http``: the API URL for http communication. * ``ws``:"
" the API URL for websocket communication."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.clients.base.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.clients.base module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.base:1
msgid "Base Client for accessing IBM Q Experience."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.base.BaseClient:1
msgid "Abstract class for clients."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.clients.version.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.clients.version module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.version:1
#: qiskit.providers.ibmq.api_v2.clients.version.VersionClient:1
msgid "Client for determining the version of an IBM Q Experience service."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version:1
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version:1
msgid "Return the version info."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version:3
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version:3
msgid ""
"a dict with information about the API version, with the following keys:"
"     * `new_api` (bool): whether the new API is being used And the "
"following optional keys:     * `api-*` (str): the versions of each "
"individual API component"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version:3
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version:3
msgid "a dict with information about the API version, with the following keys:"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version:5
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version:5
msgid "`new_api` (bool): whether the new API is being used"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version:6
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version:6
msgid "And the following optional keys:"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.version.VersionClient.version:7
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder.version:7
msgid "`api-*` (str): the versions of each individual API component"
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.clients.websocket.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.clients.websocket module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket:1
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient:1
msgid "Client for websocket communication with the IBM Q Experience API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient:5
msgid "URL for websocket communication with IBM Q."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient:7
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient:13
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage:7
#: qiskit.providers.models.BackendConfiguration:9
#: qiskit.providers.models.BackendConfiguration:15
#: qiskit.providers.models.BackendProperties:10
#: qiskit.providers.models.BackendProperties:16
#: qiskit.providers.models.BackendStatus:10
#: qiskit.providers.models.BackendStatus:16
#: qiskit.providers.models.BackendStatus:34 qiskit.providers.models.Command:10
#: qiskit.providers.models.GateConfig:10 qiskit.providers.models.GateConfig:23
#: qiskit.providers.models.JobStatus:10 qiskit.providers.models.JobStatus:16
#: qiskit.providers.models.JobStatus:22
#: qiskit.providers.models.PulseBackendConfiguration:9
#: qiskit.providers.models.PulseBackendConfiguration:15
#: qiskit.providers.models.QasmBackendConfiguration:9
#: qiskit.providers.models.QasmBackendConfiguration:15
#: qiskit.qobj.PulseLibraryItem:10 qiskit.qobj.PulseQobj:10
#: qiskit.qobj.PulseQobjConfig:22 qiskit.qobj.PulseQobjInstruction:10
#: qiskit.qobj.QasmQobj:10 qiskit.qobj.QasmQobjInstruction:10
#: qiskit.qobj.Qobj:10 qiskit.qobj.Qobj:34 qiskit.qobj.QobjInstruction:10
#: qiskit.qobj.QobjMeasurementOption:10
#: qiskit.qobj.models.base.QobjInstruction:10
#: qiskit.qobj.models.pulse.PulseLibraryItem:10
#: qiskit.qobj.models.pulse.PulseQobjConfig:22
#: qiskit.qobj.models.pulse.PulseQobjInstruction:10
#: qiskit.qobj.models.pulse.QobjMeasurementOption:10
#: qiskit.qobj.models.qasm.QasmQobjInstruction:10 qiskit.result.Result:10
#: qiskit.result.Result:16 qiskit.result.Result:22 qiskit.result.Result:28
#: qiskit.visualization.bloch.Bloch:20 qiskit.visualization.bloch.Bloch:38
#: qiskit.visualization.bloch.Bloch:76 qiskit.visualization.bloch.Bloch:101
msgid "str"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient:11
msgid "access token for IBM Q."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:3
msgid ""
"Reads status messages from the API, which are issued at regular intervals"
" (20 seconds). When a final state is reached, the server closes the "
"socket."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:7
#: qiskit.providers.ibmq.api_v2.rest.root.Api.job:3
msgid "id of the job."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:9
msgid "timeout, in seconds."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:12
msgid ""
"the API response for the status of a job, as a dict that     contains at "
"least the keys ``status`` and ``id``."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:14
msgid "the API response for the status of a job, as a dict that"
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:15
msgid "contains at least the keys ``status`` and ``id``."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:18
msgid "if the websocket connection ended unexpectedly."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketClient.get_job_status:19
msgid "if the timeout has been reached."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage:1
msgid "Container for a message sent or received via websockets."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage:5
msgid "message type."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage:11
msgid "message data."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage.as_json:1
msgid "Return a json representation of the message."
msgstr ""

#: of
#: qiskit.providers.ibmq.api_v2.clients.websocket.WebsocketMessage.from_bytes:1
msgid "Instantiate a message from a bytes response."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.exceptions.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.exceptions module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions:1
msgid "Exceptions related to the IBM Q Experience API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.ApiError:1
msgid "Generic IBM Q API error."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.AuthenticationLicenseError:1
#: qiskit.providers.ibmq.api_v2.exceptions.RequestsApiError:1
#: qiskit.providers.ibmq.api_v2.exceptions.WebsocketError:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.api_v2.exceptions.ApiError`"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.AuthenticationLicenseError:1
msgid "Exception due to user not accepting latest license agreement via web."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.RequestsApiError:1
msgid "Exception re-raising a RequestException."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.WebsocketAuthenticationError:1
#: qiskit.providers.ibmq.api_v2.exceptions.WebsocketIBMQProtocolError:1
#: qiskit.providers.ibmq.api_v2.exceptions.WebsocketTimeoutError:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.api_v2.exceptions.WebsocketError`"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.WebsocketAuthenticationError:1
msgid "Exception caused during websocket authentication."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.WebsocketError:1
msgid "Exceptions related to websockets."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.WebsocketIBMQProtocolError:1
msgid "Exceptions related to IBM Q protocol error."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.exceptions.WebsocketTimeoutError:1
msgid "Timeout during websocket communication."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rest.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.rest package"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest:1
msgid "REST adaptors for the IBM Q Experience v2 API."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rest.auth.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.rest.auth module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.auth:1
msgid "Authentication REST adapter for the IBM Q Experience v2 API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.auth.Auth:1
#: qiskit.providers.ibmq.api_v2.rest.backend.Backend:1
#: qiskit.providers.ibmq.api_v2.rest.job.Job:1
#: qiskit.providers.ibmq.api_v2.rest.root.Api:1
#: qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase`"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.auth.Auth:1
msgid "Rest adapter for authentication endpoints."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.auth.Auth.login:1
msgid "Login with token."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.auth.Auth.login:3
msgid "API token."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.auth.Auth.user_info:1
msgid "Return user information."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rest.backend.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.rest.backend module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.backend:1
msgid "Backend REST adapter for the IBM Q Experience v2 API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.backend.Backend:1
msgid "Rest adapter for backend related endpoints."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.backend.Backend.pulse_defaults:1
msgid "Return backend pulse defaults."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rest.base.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.rest.base module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base:1
msgid "REST clients for accessing the IBM Q Experience v2 API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase:1
msgid "Base class for REST adaptors."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.URL_MAP:1
msgid "Mapping between the internal name of an endpoint and the actual URL"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url:1
msgid "Return the resolved URL for the specified identifier."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url:3
msgid "internal identifier of the endpoint."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url:6
msgid "the resolved URL of the endpoint (relative to the session     base url)."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url:8
msgid "the resolved URL of the endpoint (relative to the session"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.base.RestAdapterBase.get_url:9
msgid "base url)."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rest.job.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.rest.job module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job:1
msgid "Job REST adapter for the IBM Q Experience v2 API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job:1
msgid "Rest adapter for job related endpoints."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.callback_upload:1
msgid "Notify the API after uploading a Qobj via object storage."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.cancel:1
msgid "Cancel a job."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.download_url:1
msgid "Return an object storage URL for downloading the Qobj."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.get:1
msgid "Return a job."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.get:6
#: qiskit.providers.ibmq.api_v2.rest.job.build_url_filter:9
msgid "names of the fields to explicitly include in the result."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.get_object_storage:1
msgid "Get via object_storage."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.get_object_storage:3
#: qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage:3
msgid "object storage URL."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage:1
msgid "Upload a Qobj via object storage."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage:5
msgid "the qobj to be uploaded, in dict form."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage:8
msgid "text response, that will be empty if the request was     successful."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage:10
msgid "text response, that will be empty if the request was"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.put_object_storage:11
msgid "successful."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.result_url:1
msgid "Return an object storage URL for downloading results."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.Job.upload_url:1
msgid "Return an object storage URL for uploading the Qobj."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.build_url_filter:1
msgid "Return a URL filter based on included and excluded fields."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.build_url_filter:3
msgid ""
"If a field appears in both excluded_fields and included_fields, it is "
"ultimately included."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.job.build_url_filter:13
msgid "the query, as a dict in the format for the API."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rest.root.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.rest.root module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root:1
msgid "Root REST adapter for the IBM Q Experience v2 API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api:1
msgid "Rest adapter for general endpoints."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.backend:1
msgid "Return a adapter for a specific backend."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.backend:6
#: qiskit.providers.ibmq.api_v2.rest.root.Api.job:6
msgid "the backend adapter."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.hubs:1
msgid "Return the list of hubs available to the user."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.job:1
msgid "Return a adapter for a specific job."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.jobs:1
msgid "Return a list of jobs statuses."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job:1
msgid "Submit a job for executing."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job_object_storage:1
msgid "Submit a job for executing, using object storage."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.submit_job_object_storage:5
msgid "number of shots."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.root.Api.version:1
msgid "Return the API versions."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.rest.version_finder.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.rest.version\\_finder module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.version_finder:1
msgid "Version finder for the IBM Q Experience v2 API."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.rest.version_finder.VersionFinder:1
msgid "Rest adapter for the version finder."
msgstr ""

#: ../../api/qiskit.providers.ibmq.api_v2.session.rst:2
msgid "qiskit.providers.ibmq.api\\_v2.session module"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session:1
msgid "Session customized for IBM Q Experience access."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession:1
msgid "ベースクラス: :class:`requests.sessions.Session`"
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession:1
msgid "Session with retry and handling of IBM Q parameters."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession:3
msgid ""
"Custom session for use with IBM Q, that includes a retry mechanism based "
"on urllib3 and handling of specific parameters based on "
"``requests.Session``."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.access_token:1
msgid "Return the session access token."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.request:1
msgid "Constructs a Request, prepending the base url."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.request:3
msgid "method for the new `Request` object."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.request:5
msgid "URL for the new `Request` object."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.request:7
msgid ""
"if `True`, do not send IBM Q specific information (access token) in the "
"request or modify the `url`."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.request:10
msgid "additional arguments for the request."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.request:13
msgid "Request object."
msgstr ""

#: of qiskit.providers.ibmq.api_v2.session.RetrySession.request:16
msgid "if the request failed."
msgstr ""

#: ../../api/qiskit.providers.ibmq.apiconstants.rst:2
msgid "qiskit.providers.ibmq.apiconstants module"
msgstr ""

#: of qiskit.providers.ibmq.apiconstants:1
msgid "Values used by the API for different values."
msgstr ""

#: of qiskit.providers.ibmq.apiconstants.ApiJobKind:1
msgid "Possible values used by the API for a job kind."
msgstr ""

#: of qiskit.providers.ibmq.apiconstants.ApiJobStatus:1
msgid "Possible values used by the API for a job status."
msgstr ""

#: of qiskit.providers.ibmq.apiconstants.ApiJobStatus:3
msgid ""
"The enum names represent the strings returned by the API verbatim in "
"several endpoints (`status()`, websocket information, etc). The general "
"flow is:"
msgstr ""

#: of qiskit.providers.ibmq.apiconstants.ApiJobStatus:7
msgid "`CREATING -> CREATED -> VALIDATING -> VALIDATED -> RUNNING -> COMPLETED`"
msgstr ""

#: ../../api/qiskit.providers.ibmq.circuits.rst:2
msgid "qiskit.providers.ibmq.circuits package"
msgstr ""

#: of qiskit.providers.ibmq.circuits:1
msgid "Module for interacting with Circuits."
msgstr ""

#: ../../api/qiskit.providers.ibmq.circuits.exceptions.rst:2
msgid "qiskit.providers.ibmq.circuits.exceptions module"
msgstr ""

#: of qiskit.providers.ibmq.circuits.exceptions:1
msgid "Exceptions related to Circuits."
msgstr ""

#: of qiskit.providers.ibmq.circuits.exceptions.CircuitAvailabilityError:1
#: qiskit.providers.ibmq.circuits.exceptions.CircuitResultError:1
#: qiskit.providers.ibmq.circuits.exceptions.CircuitSubmitError:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.circuits.exceptions.CircuitError`"
msgstr ""

#: of qiskit.providers.ibmq.circuits.exceptions.CircuitAvailabilityError:1
msgid "Error while accessing a Circuit."
msgstr ""

#: of qiskit.providers.ibmq.circuits.exceptions.CircuitError:1
msgid "Generic Circuit exception."
msgstr ""

#: of qiskit.providers.ibmq.circuits.exceptions.CircuitResultError:1
msgid "Error during the results of a Circuit."
msgstr ""

#: of qiskit.providers.ibmq.circuits.exceptions.CircuitSubmitError:1
msgid "Error while submitting a Circuit."
msgstr ""

#: ../../api/qiskit.providers.ibmq.circuits.manager.rst:2
msgid "qiskit.providers.ibmq.circuits.manager module"
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager:1
msgid "Manager for interacting with Circuits."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager:1
msgid "Class that provides access to the different Circuits."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state:1
msgid "Execute the graph state Circuit."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state:3
msgid ""
"This circuit implements graph state circuits that are measured in a "
"product basis. Measurement angles can be chosen to measure graph state "
"stabilizers (for validation/characterization) or to measure in a basis "
"such that the circuit family may be hard to classically simulate."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state:8
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient:6
msgid "number of qubits to use, in the 2-20 range."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state:10
msgid ""
"square matrix of elements whose values are 0 or 1. The matrix size is "
"`number_of_qubits` by `number_of_qubits` and is expected to be symmetric "
"and have zeros on the diagonal."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state:15
msgid ""
"list of phase angles, each in the interval `[0, 2*pi)` radians. There "
"should be 3 * number_of_qubits elements in the array. The first three "
"elements are the theta, phi, and lambda angles, respectively, of a u3 "
"gate acting on the first qubit. Each of the number_of_qubits triples is "
"interpreted accordingly as the parameters of a u3 gate acting on "
"subsequent qubits."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state:24
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient:14
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.random_uniform:10
msgid "the result of executing the circuit."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.graph_state:27
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient:17
msgid "if the parameters are not valid."
msgstr ""

#: of
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient:1
msgid "Execute the hardware efficient Circuit."
msgstr ""

#: of
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient:3
msgid ""
"This circuit implements the random lattice circuit across a user "
"specified number of qubits and phase angles."
msgstr ""

#: of
#: qiskit.providers.ibmq.circuits.manager.CircuitsManager.hardware_efficient:8
msgid ""
"array of three phase angles (x/y/z) each from 0 to 2*Pi, one set for each"
" qubit of each layer of the lattice. There should be 3 * number_of_qubits"
" * desired lattice depth entries in the array."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.random_uniform:1
msgid "Execute the random uniform Circuit."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.random_uniform:3
msgid ""
"This circuit implements hadamard gates across all available qubits on the"
" device."
msgstr ""

#: of qiskit.providers.ibmq.circuits.manager.CircuitsManager.random_uniform:6
msgid ""
"optional argument for number of qubits to use. If not specified will use "
"all qubits on device."
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.rst:2
msgid "qiskit.providers.ibmq.credentials package"
msgstr ""

#: of qiskit.providers.ibmq.credentials:1
msgid "Utilities for working with credentials for the IBMQ package."
msgstr ""

#: of qiskit.providers.ibmq.credentials.discover_credentials:1
msgid "Automatically discover credentials for IBM Q."
msgstr ""

#: of qiskit.providers.ibmq.credentials.discover_credentials:3
msgid ""
"This method looks for credentials in the following locations, in order, "
"and returning as soon as credentials are found::"
msgstr ""

#: of qiskit.providers.ibmq.credentials.discover_credentials:10
msgid ""
"location for the `qiskitrc` configuration file. If `None`, defaults to "
"`{HOME}/.qiskitrc/qiskitrc`."
msgstr ""

#: of qiskit.providers.ibmq.credentials.discover_credentials:14
msgid ""
"dictionary with the contents of the configuration file, with     the "
"form::      {credentials_unique_id: Credentials}"
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc:11
#: qiskit.providers.ibmq.credentials.discover_credentials:18
msgid "dictionary with the contents of the configuration file, with"
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc:10
#: qiskit.providers.ibmq.credentials.discover_credentials:17
msgid "the form::"
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.configrc.rst:2
msgid "qiskit.providers.ibmq.credentials.configrc module"
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc:1
msgid "Utilities for reading and writing credentials from and to config files."
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc:1
msgid "Read a configuration file and return a dict with its sections."
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc:3
#: qiskit.providers.ibmq.credentials.configrc.remove_credentials:5
#: qiskit.providers.ibmq.credentials.configrc.store_credentials:7
#: qiskit.providers.ibmq.credentials.configrc.write_qiskit_rc:8
msgid ""
"full path to the qiskitrc file. If `None`, the default location is used "
"(`HOME/.qiskit/qiskitrc`)."
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc:7
msgid ""
"dictionary with the contents of the configuration file, with     the "
"form::      {credential_unique_id: Credentials}"
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.configrc.read_credentials_from_qiskitrc:15
msgid ""
"if the file was not parseable. Please note that this     exception is not"
" raised if the file does not exist (instead, an     empty dict is "
"returned)."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.remove_credentials:1
msgid "Remove credentials from qiskitrc."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.remove_credentials:3
msgid "credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.remove_credentials:9
msgid "If there is no account with that name on the     configuration file."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.store_credentials:1
msgid "Store the credentials for a single account in the configuration file."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.store_credentials:3
msgid "credentials instance."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.store_credentials:5
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:10
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:12
msgid "overwrite existing credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.write_qiskit_rc:1
msgid "Write credentials to the configuration file."
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.write_qiskit_rc:3
msgid ""
"dictionary with the credentials, with the form::          "
"{credentials_unique_id: Credentials}"
msgstr ""

#: of qiskit.providers.ibmq.credentials.configrc.write_qiskit_rc:4
msgid "dictionary with the credentials, with the form::"
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.credentials.rst:2
msgid "qiskit.providers.ibmq.credentials.credentials module"
msgstr ""

#: of qiskit.providers.ibmq.credentials.credentials:1
msgid "Model for representing IBM Q credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.credentials.Credentials:1
msgid "IBM Q account credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.credentials.Credentials:3
msgid ""
"Note that, by convention, two credentials that have the same hub, group "
"and project (regardless of other attributes) are considered equivalent. "
"The `unique_id()` returns the unique identifier."
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.credentials.Credentials.connection_parameters:1
msgid "Return a dict of kwargs in the format expected by `requests`."
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.credentials.Credentials.connection_parameters:3
msgid ""
"a dict with connection-related arguments in the format     expected by "
"`requests`. The following keys can be present:     `proxies`, `verify`, "
"`auth`."
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.credentials.Credentials.connection_parameters:6
msgid "a dict with connection-related arguments in the format"
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.credentials.Credentials.connection_parameters:6
msgid ""
"expected by `requests`. The following keys can be present: `proxies`, "
"`verify`, `auth`."
msgstr ""

#: of qiskit.providers.ibmq.credentials.credentials.Credentials.is_ibmq:1
msgid "Return whether the credentials represent a IBMQ account."
msgstr ""

#: of qiskit.providers.ibmq.credentials.credentials.Credentials.unique_id:1
msgid "Return a value that uniquely identifies these credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.credentials.Credentials.unique_id:3
msgid "By convention, we assume (hub, group, project) is always unique."
msgstr ""

#: of qiskit.providers.ibmq.credentials.credentials.Credentials.unique_id:5
msgid "the (hub, group, project) tuple."
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.environ.rst:2
msgid "qiskit.providers.ibmq.credentials.environ module"
msgstr ""

#: of qiskit.providers.ibmq.credentials.environ:1
msgid "Utilities for reading credentials from environment variables."
msgstr ""

#: of qiskit.providers.ibmq.credentials.environ.read_credentials_from_environ:1
msgid "Read the environment variables and return its credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.environ.read_credentials_from_environ:3
#: qiskit.providers.ibmq.credentials.qconfig.read_credentials_from_qconfig:3
msgid ""
"dictionary with the credentials, in the form::      "
"{credentials_unique_id: Credentials}"
msgstr ""

#: of qiskit.providers.ibmq.credentials.environ.read_credentials_from_environ:5
#: qiskit.providers.ibmq.credentials.qconfig.read_credentials_from_qconfig:5
msgid "dictionary with the credentials, in the form::"
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.exceptions.rst:2
msgid "qiskit.providers.ibmq.credentials.exceptions module"
msgstr ""

#: of qiskit.providers.ibmq.credentials.exceptions:1
msgid "Exception for the Credentials module."
msgstr ""

#: of qiskit.providers.ibmq.credentials.exceptions.CredentialsError:1
msgid "Base class for errors raised during credential management."
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.hubgroupproject.rst:2
msgid "qiskit.providers.ibmq.credentials.hubgroupproject module"
msgstr ""

#: of qiskit.providers.ibmq.credentials.hubgroupproject:1
msgid "Model for representing hub/group/project tuples."
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.qconfig.rst:2
msgid "qiskit.providers.ibmq.credentials.qconfig module"
msgstr ""

#: of qiskit.providers.ibmq.credentials.qconfig:1
msgid "Utilities for reading credentials from the deprecated `Qconfig.py` file."
msgstr ""

#: of qiskit.providers.ibmq.credentials.qconfig.read_credentials_from_qconfig:1
msgid "Read a `QConfig.py` file and return its credentials."
msgstr ""

#: of
#: qiskit.providers.ibmq.credentials.qconfig.read_credentials_from_qconfig:10
msgid ""
"if the Qconfig.py was not parseable. Please note that     this exception "
"is not raised if the file does not exist (instead, an     empty dict is "
"returned)."
msgstr ""

#: ../../api/qiskit.providers.ibmq.credentials.updater.rst:2
msgid "qiskit.providers.ibmq.credentials.updater module"
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater:1
msgid "Helper for updating credentials from IBM Q Experience v1 to v2."
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.is_directly_updatable:1
msgid "Returns `True` if credentials can be updated directly."
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.update_credentials:1
msgid "Update or provide information about updating stored credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.update_credentials:3
msgid ""
"This function is an interactive helper to update credentials stored in "
"disk from IBM Q Experience v1 to v2. Upon invocation, the function will "
"inspect the credentials stored in disk and attempt to convert them to the"
" new version, displaying the changes and asking for confirmation before "
"overwriting the credentials."
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.update_credentials:9
msgid ""
"The function attempts to preserve the existing advanced parameters (such "
"as proxies), but has limited conflict resolution handling. For complex "
"configurations with multiple credentials, an alternative is to directly "
"clear the existing credentials via `IBMQ.delete_accounts()` and recreate "
"the configuration from the instructions at the IBM Q Experience site."
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.update_credentials:15
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.update_account:3
msgid "if `True`, disable interactive prompts and perform the changes."
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.update_credentials:19
msgid ""
"if the updating is possible, credentials for IBM Q     Experience version"
" 2; and `None` otherwise."
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.update_credentials:21
msgid "if the updating is possible, credentials for IBM Q"
msgstr ""

#: of qiskit.providers.ibmq.credentials.updater.update_credentials:22
msgid "Experience version 2; and `None` otherwise."
msgstr ""

#: ../../api/qiskit.providers.ibmq.exceptions.rst:2
msgid "qiskit.providers.ibmq.exceptions module"
msgstr ""

#: of qiskit.providers.ibmq.exceptions:1
msgid "Exception for the IBMQ module."
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQAccountError:1
msgid "Base class for errors raised by account management."
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQApiUrlError:1
#: qiskit.providers.ibmq.exceptions.IBMQProviderError:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.exceptions.IBMQAccountError`"
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQApiUrlError:1
msgid "Errors raised due to mixing API versions."
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQBackendError:1
msgid "IBM Q Backend Errors."
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQBackendValueError:1
msgid ""
"ベースクラス: :class:`qiskit.providers.ibmq.exceptions.IBMQError`, "
":class:`ValueError`"
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQBackendValueError:1
msgid "Value errors thrown within IBMQBackend."
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQError:1
msgid "Base class for errors raised by the IBMQ provider module."
msgstr ""

#: of qiskit.providers.ibmq.exceptions.IBMQProviderError:1
msgid "Errors related to provider handling."
msgstr ""

#: ../../api/qiskit.providers.ibmq.ibmqbackend.rst:2
msgid "qiskit.providers.ibmq.ibmqbackend module"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend:1
msgid "Module for interfacing with an IBMQ Backend."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend:1
msgid "Backend class interfacing with an IBMQ backend."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults:1
msgid "Return the pulse defaults for the backend."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults:3
#: qiskit.providers.ibmq.ibmqbackend.IBMQBackend.properties:3
msgid ""
"if True, the return is via a QX API call. Otherwise, a cached version is "
"returned."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults:7
msgid ""
"the pulse defaults for the backend. If the backend     does not support "
"defaults, it returns ``None``."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults:9
msgid "the pulse defaults for the backend. If the backend"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.defaults:10
msgid "does not support defaults, it returns ``None``."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:1
msgid "Return the jobs submitted to this backend."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:3
msgid ""
"Return the jobs submitted to this backend, with optional filtering and "
"pagination. Note that the API has a limit for the number of jobs returned"
" in a single call, and this function might involve making several calls "
"to the API. See also the `skip` parameter for more control over "
"pagination."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:9
msgid ""
"Note that jobs submitted with earlier versions of Qiskit (in particular, "
"those that predate the Qobj format) are not included in the returned "
"list."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:13
msgid "number of jobs to retrieve."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:15
msgid "starting index for the job retrieval."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:17
msgid ""
"only get jobs with this status, where status is e.g. `JobStatus.RUNNING` "
"or `'RUNNING'`"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:21
msgid ""
"`loopback-based filter <https://loopback.io/doc/en/lb2/Querying-"
"data.html>`_. This is an interface to a database ``where`` filter. Some "
"examples of its usage are:  Filter last five jobs with errors::     "
"job_list = backend.jobs(limit=5, status=JobStatus.ERROR)  Filter last "
"five jobs with counts=1024, and counts for states ``00`` and ``11`` each "
"exceeding 400::    cnts_filter = {'shots': 1024,                  "
"'qasms.result.data.counts.00': {'gt': 400},                  "
"'qasms.result.data.counts.11': {'gt': 400}}   job_list = "
"backend.jobs(limit=5, db_filter=cnts_filter)  Filter last five jobs from "
"30 days ago::     past_date = datetime.datetime.now() - "
"datetime.timedelta(days=30)    date_filter = {'creationDate': {'lt': "
"past_date.isoformat()}}    job_list = backend.jobs(limit=5, "
"db_filter=date_filter)"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:21
msgid ""
"`loopback-based filter <https://loopback.io/doc/en/lb2/Querying-"
"data.html>`_. This is an interface to a database ``where`` filter. Some "
"examples of its usage are:"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:26
msgid "Filter last five jobs with errors::"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:30
msgid ""
"Filter last five jobs with counts=1024, and counts for states ``00`` and "
"``11`` each exceeding 400::"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:38
msgid "Filter last five jobs from 30 days ago::"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:45
msgid "list of IBMQJob instances"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.jobs:48
msgid "status keyword value unrecognized"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.properties:1
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.properties:1
msgid "Return the online backend properties."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.properties:7
msgid "The properties of the backend."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job:1
msgid "Return a job submitted to this backend."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job:3
msgid "the job id of the job to retrieve"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job:6
msgid "class instance"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.retrieve_job:9
msgid "if retrieval failed"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run:1
msgid "Run a Qobj asynchronously."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run:3
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run:3
#: qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config:3
msgid "description of job"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.run:6
#: qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run:10
msgid "an instance derived from BaseJob"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.status:1
msgid "Return the online backend status."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.status:3
msgid "The status of the backend."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.status:6
msgid "If status for the backend can't be found."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQBackend.status:7
msgid "If the status can't be formatted properly."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQSimulator:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.ibmqbackend.IBMQBackend`"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQSimulator:1
msgid "Backend class interfacing with an IBMQ simulator."
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.properties:3
msgid "None"
msgstr ""

#: of qiskit.providers.ibmq.ibmqbackend.IBMQSimulator.run:7
#: qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config:7
msgid "noise model"
msgstr ""

#: ../../api/qiskit.providers.ibmq.ibmqfactory.rst:2
msgid "qiskit.providers.ibmq.ibmqfactory module"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory:1
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory:1
msgid "Factory and credentials manager for IBM Q Experience."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_account:1
msgid "List the IBM Q Experience v2 account currently in the session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_account:3
msgid "information about the account currently in the session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_account:6
msgid "if an IBM Q Experience v1 account is already in     use."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts:1
msgid "List all IBM Q Experience v1 accounts currently in the session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts:4
msgid "Note: this method is being deprecated, and is only available when using"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts:4
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_accounts:4
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_accounts:4
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:7
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts:4
msgid "v1 accounts."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts:6
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.active_accounts:3
msgid "a list with information about the accounts currently     in the session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts:8
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.active_accounts:5
msgid "a list with information about the accounts currently"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts:9
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.active_accounts:6
msgid "in the session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.active_accounts:12
msgid "if the method is used with an IBM Q Experience     v2 account."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:1
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends:1
msgid ""
"Return all backends accessible via IBMQ provider, subject to optional "
"filtering."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:9
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:9
msgid "Note: this method is being deprecated. Please use an IBM Q Experience v2"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:4
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:4
msgid "account, and::"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:6
msgid "provider = IBMQ.get_provider(...) provider.backends()"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:9
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:9
msgid "instead."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:13
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends:5
msgid ""
"more complex filters, such as lambda functions e.g. "
"IBMQ.backends(filters=lambda b: b.configuration['n_qubits'] > 5)"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.backends:16
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.backends:8
msgid ""
"simple filters specifying a true/false criteria in the backend "
"configuration or backend status or provider credentials e.g. "
"IBMQ.backends(n_qubits=5, operational=True, hub='internal')"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_account:1
msgid "Delete the saved account from disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_account:3
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_account:6
msgid "if no valid IBM Q Experience v2 credentials found."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_accounts:1
msgid ""
"Delete saved IBM Q Experience v1 accounts from disk, subject to optional "
"filtering."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_accounts:4
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_accounts:4
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:7
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts:4
msgid "Note: this method is being deprecated, and only available when using"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_accounts:6
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.delete_accounts:3
msgid ""
"The filter kwargs can be `token`, `url`, `hub`, `group`, `project`. If no"
" filter is passed, all accounts will be deleted from disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.delete_accounts:9
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_accounts:9
msgid ""
"if the method is used with an IBM Q Experience v2     account, or if no "
"account matched the filter."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_account:1
msgid "Disable the account in the current session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_account:3
msgid ""
"if IBM Q Experience API v1 credentials are found,     or if no account is"
" in use in the session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_accounts:1
msgid "Disable IBM Q Experience v1 accounts in the current session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.disable_accounts:6
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.disable_accounts:3
msgid ""
"The filter kwargs can be `token`, `url`, `hub`, `group`, `project`. If no"
" filter is passed, all accounts in the current session will be disabled."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:1
msgid "Authenticate against IBM Q Experience for use during this session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:6
msgid "Note: with version 0.3 of this qiskit-ibmq-provider package, use of"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:4
msgid ""
"the legacy Quantum Experience and Qconsole (also known as the IBM Q "
"Experience v1) credentials is deprecated. The new default is to use the "
"IBM Q Experience v2 credentials."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:8
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:6
msgid "IBM Q Experience API token."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:10
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:8
msgid "URL for the IBM Q Experience authentication server."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:12
msgid ""
"additional settings for the connection: * proxies (dict): proxy "
"configuration. * verify (bool): verify the server's TLS certificate."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:17
#: qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_account:3
msgid "the provider for the default open access project."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:20
msgid ""
"if an IBM Q Experience v2 account is already in     use, or if attempting"
" using both IBM Q Experience v1 and v2     accounts."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.enable_account:21
msgid ""
"if the input token and url are for an IBM Q     Experience v2 account, "
"but the url is not a valid     authentication URL."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:6
msgid "provider = IBMQ.get_provider(...) provider.get_backend('name')"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_backend:19
msgid ""
"if no backend could be found or     more than one backend matches the "
"filtering criteria."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_provider:1
msgid "Return a provider for a single hub/group/project combination."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_provider:3
msgid "provider that match the specified criteria."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.get_provider:6
msgid ""
"if no provider matches the specified criteria,     or more than one "
"provider match the specified criteria."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_account:1
msgid "Authenticate against IBM Q Experience from stored credentials."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_account:6
msgid ""
"if an IBM Q Experience v1 account is already in     use, or no IBM Q "
"Experience v2 accounts can be found."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:1
msgid ""
"Load IBM Q Experience v1 accounts found in the system into current "
"session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:3
msgid ""
"Will also load v2 accounts for backward compatibility, but can lead to "
"issues if mixing v1 and v2 credentials in other method calls."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:9
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.load_accounts:4
msgid ""
"Automatically load the accounts found in the system. This method looks "
"for credentials in the following locations, in order, and returns as soon"
" as credentials are found:"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:13
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.load_accounts:8
msgid "in the `Qconfig.py` file in the current working directory."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:14
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.load_accounts:9
msgid "in the environment variables."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:15
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.load_accounts:10
msgid "in the `qiskitrc` configuration file"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.load_accounts:17
msgid "If mixing v1 and v2 account credentials"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers:1
msgid "Return a list of providers with optional filtering."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers:3
msgid "name of the hub."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers:5
msgid "name of the group."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers:7
msgid "name of the project."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers:10
msgid "list of providers that match the specified     criteria."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.providers:12
msgid "list of providers that match the specified"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:1
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:1
msgid "Save the account to disk for future use."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:4
msgid "Note: IBM Q Experience v1 credentials are being deprecated. Please"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:4
msgid "use IBM Q Experience v2 credentials instead."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:12
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account:12
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:14
msgid ""
"* proxies (dict): Proxy configuration for the API. * verify (bool): If "
"False, ignores SSL certificates errors"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:13
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account:13
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:15
msgid "proxies (dict): Proxy configuration for the API."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.save_account:14
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account:14
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:16
msgid "verify (bool): If False, ignores SSL certificates errors"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_account:1
msgid "List the account stored on disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_account:3
msgid "dictionary with information about the account stored on disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts:1
msgid "List all IBM Q Experience v1 accounts stored to disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts:6
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.stored_accounts:3
msgid "a list with information about the accounts stored     on disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts:8
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.stored_accounts:5
msgid "a list with information about the accounts stored"
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts:9
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.stored_accounts:6
msgid "on disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.stored_accounts:12
msgid "if the method is used with an IBM Q Experience v2 account."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.update_account:1
msgid ""
"Interactive helper from migrating stored credentials to IBM Q Experience "
"v2."
msgstr ""

#: of qiskit.providers.ibmq.ibmqfactory.IBMQFactory.update_account:7
msgid ""
"if the updating is possible, credentials for the API version 2; and "
"`None` otherwise."
msgstr ""

#: ../../api/qiskit.providers.ibmq.ibmqprovider.rst:2
msgid "qiskit.providers.ibmq.ibmqprovider module"
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider:1
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider:1
msgid "Provider for remote IBMQ backends with admin features."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider:3
msgid ""
"This class is the entry point for handling backends from IBMQ, allowing "
"using different accounts."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.active_accounts:1
msgid "List all accounts currently in the session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.delete_accounts:1
msgid "Delete saved accounts from disk, subject to optional filtering."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.delete_accounts:6
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.disable_accounts:6
msgid "if no account matched the filter."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.disable_accounts:1
msgid "Disable accounts in the current session, subject to optional filtering."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account:1
msgid "Authenticate a new IBMQ account and add for use during this session."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account:3
msgid ""
"Login into Quantum Experience or IBMQ using the provided credentials, "
"adding the account to the current session. The account is not stored in "
"disk."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account:7
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:7
msgid "Quantum Experience or IBM Q API token."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.enable_account:9
#: qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:9
msgid ""
"URL for Quantum Experience or IBM Q (for IBM Q, including the hub, group "
"and project in the URL)."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.load_accounts:1
msgid ""
"Load IBMQ accounts found in the system into current session, subject to "
"optional filtering."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.load_accounts:12
msgid "if no credentials are found."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.save_account:3
msgid ""
"Login into Quantum Experience or IBMQ using the provided credentials, "
"adding the account to the current session. The account is stored in disk "
"for future use."
msgstr ""

#: of qiskit.providers.ibmq.ibmqprovider.IBMQProvider.stored_accounts:1
msgid "List all accounts stored to disk."
msgstr ""

#: ../../api/qiskit.providers.ibmq.ibmqsingleprovider.rst:2
msgid "qiskit.providers.ibmq.ibmqsingleprovider module"
msgstr ""

#: of qiskit.providers.ibmq.ibmqsingleprovider:1
msgid "Provider for a single IBMQ account."
msgstr ""

#: of qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider:1
msgid "Provider for single IBMQ accounts."
msgstr ""

#: of qiskit.providers.ibmq.ibmqsingleprovider.IBMQSingleProvider:3
msgid ""
"Note: this class is not part of the public API and is not guaranteed to "
"be present in future releases."
msgstr ""

#: ../../api/qiskit.providers.ibmq.job.rst:2
msgid "qiskit.providers.ibmq.job package"
msgstr ""

#: of qiskit.providers.ibmq.job:1
msgid "Module representing Jobs communicating with IBM Q."
msgstr ""

#: ../../api/qiskit.providers.ibmq.job.circuitjob.rst:2
msgid "qiskit.providers.ibmq.job.circuitjob module"
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob:1
msgid "Job specific for Circuits."
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob:1
msgid "ベースクラス: :class:`qiskit.providers.ibmq.job.ibmqjob.IBMQJob`"
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob:1
msgid "Job specific for use with Circuits."
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob:3
msgid ""
"Note: this class is experimental, and currently only supports the "
"customizations needed for using it with the manager (which implies "
"initializing with a job_id:"
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob:7
msgid "_wait_for_completion()"
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob:8
msgid "status()"
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob:9
msgid "result()"
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob:11
msgid ""
"In general, the changes involve using a different `self._api.foo()` "
"method for adjusting to the Circuits particularities."
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob.status:1
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.status:1
msgid "Query the API to update the status."
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob.status:3
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.status:3
msgid "The status of the job, once updated."
msgstr ""

#: of qiskit.providers.ibmq.job.circuitjob.CircuitJob.status:6
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.status:6
msgid ""
"if there was an exception in the future being executed     or the server "
"sent an unknown answer."
msgstr ""

#: ../../api/qiskit.providers.ibmq.job.ibmqjob.rst:2
msgid "qiskit.providers.ibmq.job.ibmqjob module"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob:1
msgid "IBMQJob module"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob:3
msgid ""
"This module is used for creating asynchronous job objects for the IBM Q "
"Experience."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:1
msgid "Representation of a job that will be execute on a IBMQ backend."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:3
msgid ""
"Represent the jobs that will be executed on IBM-Q simulators and real "
"devices. Jobs are intended to be created calling ``run()`` on a "
"particular backend."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:7
msgid ""
"Creating a ``Job`` instance does not imply running it. You need to do it "
"in separate steps::"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:13
msgid ""
"An error while submitting a job will cause the next call to ``status()`` "
"to raise. If submitting the job successes, you can inspect the job's "
"status by using ``status()``. Status can be one of ``JobStatus`` "
"members::"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:30
msgid ""
"A call to ``status()`` can raise if something happens at the API level "
"that prevents Qiskit from determining the status of the job. An example "
"of this is a temporary connection lose or a network failure."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:34
msgid ""
"The ``submit()`` and ``status()`` methods are examples of non-blocking "
"API. ``Job`` instances also have `id()` and ``result()`` methods which "
"will block::"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:51
msgid ""
"Both methods can raise if something ath the API level happens that "
"prevent Qiskit from determining the status of the job."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:56
msgid ""
"When querying the API for getting the status, two kinds of errors are "
"possible. The most severe is the one preventing Qiskit from getting a "
"response from the backend. This can be caused by a network failure or a "
"temporary system break. In these cases, calling ``status()`` will raise."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob:61
msgid ""
"If Qiskit successfully retrieves the status of a job, it could be it "
"finished with errors. In that case, ``status()`` will simply return "
"``JobStatus.ERROR`` and you can call ``error_message()`` to get more "
"info."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.cancel:1
msgid "Attempt to cancel a job."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.cancel:5
msgid ""
"This function waits for a job ID to become available if the job has been "
"submitted but not yet queued."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.cancel:8
msgid ""
"True if job can be cancelled, else False. Note this operation might not "
"be possible depending on the environment."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.cancel:12
msgid "if there was some unexpected failure in the server."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.creation_date:1
msgid "Return creation date."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.error_message:1
msgid "Provide details about the reason of failure."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.error_message:5
#: qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result:5
msgid ""
"Some IBMQ job results can be read only once. A second attempt to query "
"the API for the job will fail, as the job is \"consumed\"."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.error_message:8
msgid ""
"The first call to this method in an ``IBMQJob`` instance will query the "
"API and consume the job if it errored at some point (otherwise it will "
"return ``None``). Subsequent calls to that instance's method will also "
"return the failure details, since they are cached. However, attempting to"
" retrieve the error details again in another instance or session might "
"fail due to the job having been consumed."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.error_message:15
msgid "An error report if the job errored or ``None`` otherwise."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.job_id:1
msgid "Return the job ID assigned by the API."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.job_id:3
msgid ""
"If the job ID is not set because the job is still initializing, this call"
" will block until a job ID is available or the timeout is reached."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.job_id:6
msgid "number of seconds to wait for the job ID."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.job_id:9
msgid "the job ID."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.properties:1
msgid "Return the backend properties for this job."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.properties:3
msgid ""
"The properties might not be available if the job hasn't completed, in "
"which case None is returned."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.properties:6
msgid ""
"the backend properties used for this job, or None if     properties are "
"not available."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.properties:8
msgid "the backend properties used for this job, or None if"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.properties:9
msgid "properties are not available."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.qobj:3
msgid ""
"Note that this method might involve querying the API for results if the "
"Job has been created in a previous Qiskit session."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.queue_position:1
msgid "Return the position in the server queue."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.queue_position:3
msgid "Position in the queue."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result:1
msgid "Return the result of the job."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result:8
msgid ""
"The first call to this method in an ``IBMQJob`` instance will query the "
"API and consume the job if it finished successfully (otherwise it will "
"raise a ``JobError`` exception without consuming the job). Subsequent "
"calls to that instance's method will also return the results, since they "
"are cached. However, attempting to retrieve the results again in another "
"instance or session might fail due to the job having been consumed."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result:16
msgid "number of seconds to wait for job"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result:18
msgid "time between queries to IBM Q server"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.result:24
msgid "if attempted to recover a result on a failed job."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.submit:1
msgid "Submit job to IBM-Q."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.submit:4
#: qiskit.tools.parallel.parallel_map:32 qiskit.tools.parallel_map:32
msgid "Events:"
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.submit:4
msgid "ibmq.job.start: The job has started."
msgstr ""

#: of qiskit.providers.ibmq.job.ibmqjob.IBMQJob.submit:6
msgid "If we have already submitted the job."
msgstr ""

#: ../../api/qiskit.providers.ibmq.job.utils.rst:2
msgid "qiskit.providers.ibmq.job.utils module"
msgstr ""

#: of qiskit.providers.ibmq.job.utils:1
msgid "Utilities for working with IBM Q Jobs."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.build_error_report:1
msgid "Build an user-friendly error report for a failed job."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.build_error_report:3
msgid "result section of the job response."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.build_error_report:6
msgid "the error report."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.current_utc_time:1
msgid "Gets the current time in UTC format."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.current_utc_time:3
msgid "current time in UTC format."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.is_job_queued:1
msgid "Checks whether a job has been queued or not."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.is_job_queued:3
msgid "status response of the job."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.is_job_queued:6
msgid "a pair indicating if the job is queued and in which     position."
msgstr ""

#: of qiskit.providers.ibmq.job.utils.is_job_queued:8
msgid "a pair indicating if the job is queued and in which"
msgstr ""

#: of qiskit.providers.ibmq.job.utils.is_job_queued:9
msgid "position."
msgstr ""

#: ../../api/qiskit.providers.ibmq.utils.rst:2
msgid "qiskit.providers.ibmq.utils package"
msgstr ""

#: of qiskit.providers.ibmq.utils:1
msgid "Utilities related to the IBMQ Provider."
msgstr ""

#: ../../api/qiskit.providers.ibmq.utils.deprecation.rst:2
msgid "qiskit.providers.ibmq.utils.deprecation module"
msgstr ""

#: of qiskit.providers.ibmq.utils.deprecation:1
msgid "Utilities for transitioning from IBM Q Experience v1 to v2."
msgstr ""

#: of qiskit.providers.ibmq.utils.deprecation.deprecated:1
msgid "Decorator that signals that the function has been deprecated."
msgstr ""

#: of qiskit.providers.ibmq.utils.deprecation.deprecated:3
msgid "function to be decorated."
msgstr ""

#: of qiskit.providers.ibmq.utils.deprecation.deprecated:6
msgid "the decorated function."
msgstr ""

#: ../../api/qiskit.providers.ibmq.utils.qobj_utils.rst:2
msgid "qiskit.providers.ibmq.utils.qobj\\_utils module"
msgstr ""

#: of qiskit.providers.ibmq.utils.qobj_utils:1
msgid "Utilities related to Qobj."
msgstr ""

#: of qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config:1
msgid "Update a Qobj configuration from options and noise model."
msgstr ""

#: of qiskit.providers.ibmq.utils.qobj_utils.update_qobj_config:10
msgid "qobj."
msgstr ""

#: ../../api/qiskit.providers.ibmq.version.rst:2
msgid "qiskit.providers.ibmq.version module"
msgstr ""

#: of qiskit.providers.ibmq.version:1
msgid "Contains the package version."
msgstr ""

#: ../../api/qiskit.providers.models.rst:2
msgid "qiskit.providers.models package"
msgstr ""

#: of qiskit.providers.models:1
msgid "Qiskit schema-conformant objects used by the backends and providers."
msgstr ""

#: ../../api/qiskit.providers.models.BackendConfiguration.rst:2
msgid "BackendConfiguration"
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:1
msgid "Model for BackendConfiguration."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``BackendConfigurationSchema``. .. attribute:: backend_name"
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:13
#: qiskit.providers.models.BackendProperties:14
#: qiskit.providers.models.BackendStatus:14
#: qiskit.providers.models.PulseBackendConfiguration:13
#: qiskit.providers.models.QasmBackendConfiguration:13
msgid "backend version in the form X.Y.Z."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:19
#: qiskit.providers.models.PulseBackendConfiguration:19
#: qiskit.providers.models.QasmBackendConfiguration:19
msgid "number of qubits."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:25
#: qiskit.providers.models.PulseBackendConfiguration:25
#: qiskit.providers.models.QasmBackendConfiguration:25
msgid "list of basis gates names on the backend."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:27
#: qiskit.providers.models.GateConfig:16
#: qiskit.providers.models.PulseBackendConfiguration:27
#: qiskit.providers.models.PulseBackendConfiguration:125
#: qiskit.providers.models.QasmBackendConfiguration:27
msgid "list[str]"
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:31
#: qiskit.providers.models.PulseBackendConfiguration:31
#: qiskit.providers.models.QasmBackendConfiguration:31
msgid "list of basis gates on the backend."
msgstr ""

#: ../../api/qiskit.providers.models.GateConfig.rst:2 of
#: qiskit.providers.models.BackendConfiguration:33
#: qiskit.providers.models.PulseBackendConfiguration:33
#: qiskit.providers.models.QasmBackendConfiguration:33
msgid "GateConfig"
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:37
#: qiskit.providers.models.PulseBackendConfiguration:37
#: qiskit.providers.models.QasmBackendConfiguration:37
msgid "backend is local or remote."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:43
#: qiskit.providers.models.PulseBackendConfiguration:43
#: qiskit.providers.models.QasmBackendConfiguration:43
msgid "backend is a simulator."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:49
#: qiskit.providers.models.PulseBackendConfiguration:49
#: qiskit.providers.models.QasmBackendConfiguration:49
msgid "backend supports conditional operations."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:55
#: qiskit.providers.models.PulseBackendConfiguration:55
#: qiskit.providers.models.QasmBackendConfiguration:55
msgid "backend supports open pulse."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:61
#: qiskit.providers.models.PulseBackendConfiguration:61
#: qiskit.providers.models.QasmBackendConfiguration:61
msgid "backend supports memory."
msgstr ""

#: of qiskit.providers.models.BackendConfiguration:67
#: qiskit.providers.models.PulseBackendConfiguration:67
#: qiskit.providers.models.QasmBackendConfiguration:67
msgid "maximum number of shots supported."
msgstr ""

#: ../../api/qiskit.providers.models.BackendConfiguration.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.BackendConfiguration.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.BackendConfiguration.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.BackendConfiguration.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.BackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`as_dict <qiskit.providers.models.BackendConfiguration.as_dict>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict "
"<qiskit.providers.models.BackendConfiguration.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`to_dict <qiskit.providers.models.BackendConfiguration.to_dict>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendProperties.rst:2
msgid "BackendProperties"
msgstr ""

#: of qiskit.providers.models.BackendProperties:1
msgid "Model for BackendProperties."
msgstr ""

#: of qiskit.providers.models.BackendProperties:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``BackendPropertiesSchema``."
msgstr ""

#: of qiskit.providers.models.BackendProperties:20
msgid "last date/time that a property was updated."
msgstr ""

#: of qiskit.providers.models.BackendProperties:22
msgid "datetime"
msgstr ""

#: of qiskit.providers.models.BackendProperties:26
msgid "system qubit parameters."
msgstr ""

#: of qiskit.providers.models.BackendProperties:28
msgid "list[list[Nduv]]"
msgstr ""

#: of qiskit.providers.models.BackendProperties:32
msgid "system gate parameters."
msgstr ""

#: of qiskit.providers.models.BackendProperties:34
msgid "list[Gate]"
msgstr ""

#: of qiskit.providers.models.BackendProperties:38
msgid "general parameters."
msgstr ""

#: of qiskit.providers.models.BackendProperties:40
msgid "list[Nduv]"
msgstr ""

#: ../../api/qiskit.providers.models.BackendProperties.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.BackendProperties.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.BackendProperties.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.BackendProperties.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.BackendProperties.rst:23:<autosummary>:1
msgid ""
":obj:`as_dict <qiskit.providers.models.BackendProperties.as_dict>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendProperties.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.models.BackendProperties.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendProperties.rst:23:<autosummary>:1
msgid ""
":obj:`to_dict <qiskit.providers.models.BackendProperties.to_dict>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendStatus.rst:2
msgid "BackendStatus"
msgstr ""

#: of qiskit.providers.models.BackendStatus:1
msgid "Model for BackendStatus."
msgstr ""

#: of qiskit.providers.models.BackendStatus:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``BackendStatusSchema``."
msgstr ""

#: of qiskit.providers.models.BackendStatus:20
msgid "backend operational and accepting jobs."
msgstr ""

#: of qiskit.providers.models.BackendStatus:26
msgid "number of pending jobs on the backend."
msgstr ""

#: of qiskit.providers.models.BackendStatus:32
#: qiskit.providers.models.JobStatus:20
msgid "status message."
msgstr ""

#: ../../api/qiskit.providers.models.BackendStatus.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.BackendStatus.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.BackendStatus.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.BackendStatus.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.BackendStatus.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.providers.models.BackendStatus.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendStatus.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.models.BackendStatus.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.BackendStatus.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.providers.models.BackendStatus.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.Command.rst:2
msgid "Command"
msgstr ""

#: of qiskit.providers.models.Command:1
msgid "Model for Command."
msgstr ""

#: of qiskit.providers.models.Command:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``CommandSchema``."
msgstr ""

#: of qiskit.providers.models.Command:8
msgid "Pulse command name."
msgstr ""

#: ../../api/qiskit.providers.models.Command.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.Command.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.Command.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.providers.models.Command.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.Command.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.providers.models.Command.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.Command.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.models.Command.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.Command.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.providers.models.Command.to_dict>`\\ \\(\\)"
msgstr ""

#: of qiskit.providers.models.GateConfig:1 qiskit.providers.models.UchannelLO:1
msgid "Model for GateConfig."
msgstr ""

#: of qiskit.providers.models.GateConfig:3 qiskit.providers.models.UchannelLO:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``GateConfigSchema``."
msgstr ""

#: of qiskit.providers.models.GateConfig:8
msgid "the gate name as it will be referred to in Qasm."
msgstr ""

#: of qiskit.providers.models.GateConfig:14
msgid "variable names for the gate parameters (if any)."
msgstr ""

#: of qiskit.providers.models.GateConfig:20
msgid "definition of this gate in terms of Qasm primitives U and CX."
msgstr ""

#: ../../api/qiskit.providers.models.GateConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.GateConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.GateConfig.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.GateConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.GateConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.providers.models.GateConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.GateConfig.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.models.GateConfig.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.GateConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.providers.models.GateConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: of qiskit.providers.models.JobStatus:1
msgid "Model for JobStatus."
msgstr ""

#: of qiskit.providers.models.JobStatus:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``JobStatusSchema``."
msgstr ""

#: of qiskit.providers.models.JobStatus:8
msgid "backend job_id."
msgstr ""

#: of qiskit.providers.models.JobStatus:14
msgid "status of the job."
msgstr ""

#: ../../api/qiskit.providers.models.JobStatus.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.JobStatus.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.JobStatus.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.providers.models.JobStatus.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.JobStatus.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.providers.models.JobStatus.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.JobStatus.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.models.JobStatus.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.JobStatus.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.providers.models.JobStatus.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:2
msgid "PulseBackendConfiguration"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:1
#: qiskit.providers.models.QasmBackendConfiguration:1
msgid ""
"ベースクラス: "
":class:`qiskit.providers.models.backendconfiguration.BackendConfiguration`"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:1
msgid "Model for PulseBackendConfiguration."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``PulseBackendConfigurationSchema``. .. attribute:: backend_name"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:73
msgid "Number of u-channels."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:79
msgid "U-channel relationship on device los."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:81
msgid "list[UchannelLO]"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:85
msgid "Supported measurement levels."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:87
msgid "list[int]"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:91
msgid "Qubit lo ranges for each qubit with form (min, max) in GHz."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:94
#: qiskit.providers.models.PulseBackendConfiguration:101
msgid "list[list[float]]"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:98
msgid "Measurement lo ranges for each qubit with form (min, max) in GHz."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:105
msgid "Qubit drive channel timestep in nanoseconds."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:107
#: qiskit.providers.models.PulseBackendConfiguration:113
#: qiskit.visualization.bloch.Bloch:32 qiskit.visualization.bloch.Bloch:70
msgid "float"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:111
msgid "Measurement drive channel timestep in nanoseconds."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:117
msgid "Supported repition times for device in microseconds."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:119
#: qiskit.qobj.PulseQobjConfig:16 qiskit.qobj.PulseQobjConfig:34
#: qiskit.qobj.models.pulse.PulseQobjConfig:16
#: qiskit.qobj.models.pulse.PulseQobjConfig:34
msgid "list[float]"
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:123
msgid "Supported measurement kernels."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:129
msgid "Supported discriminators."
msgstr ""

#: of qiskit.providers.models.PulseBackendConfiguration:133
#: qiskit.providers.models.QasmBackendConfiguration:73
msgid "Optional fields."
msgstr ""

#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.PulseBackendConfiguration.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.PulseBackendConfiguration.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`as_dict "
"<qiskit.providers.models.PulseBackendConfiguration.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict "
"<qiskit.providers.models.PulseBackendConfiguration.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.PulseBackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`to_dict "
"<qiskit.providers.models.PulseBackendConfiguration.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:2
msgid "PulseDefaults"
msgstr ""

#: of qiskit.providers.models.PulseDefaults:1
msgid "Model for PulseDefaults."
msgstr ""

#: of qiskit.providers.models.PulseDefaults:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``PulseDefaultsSchema``."
msgstr ""

#: of qiskit.providers.models.PulseDefaults:8
msgid "Estimated qubit frequencies in GHz."
msgstr ""

#: of qiskit.providers.models.PulseDefaults:10
#: qiskit.providers.models.PulseDefaults:17
msgid "list[number]"
msgstr ""

#: of qiskit.providers.models.PulseDefaults:14
msgid "Estimated measurement cavity frequencies in GHz."
msgstr ""

#: of qiskit.providers.models.PulseDefaults:21
msgid "Default buffer time (in units of dt) between pulses."
msgstr ""

#: of qiskit.providers.models.PulseDefaults:27
msgid "Backend pulse library."
msgstr ""

#: of qiskit.providers.models.PulseDefaults:29
msgid "list[PulseLibraryItem]"
msgstr ""

#: of qiskit.providers.models.PulseDefaults:33
msgid "Backend command definition."
msgstr ""

#: of qiskit.providers.models.PulseDefaults:35
msgid "list[Command]"
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.PulseDefaults.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.PulseDefaults.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:24:<autosummary>:1
msgid ":obj:`as_dict <qiskit.providers.models.PulseDefaults.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:24:<autosummary>:1
msgid ""
":obj:`build_cmd_def "
"<qiskit.providers.models.PulseDefaults.build_cmd_def>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:24:<autosummary>:1 of
#: qiskit.providers.models.PulseDefaults.build_cmd_def:1
msgid "Construct the `CmdDef` object for the backend."
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:24:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.models.PulseDefaults.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.PulseDefaults.rst:24:<autosummary>:1
msgid ":obj:`to_dict <qiskit.providers.models.PulseDefaults.to_dict>`\\ \\(\\)"
msgstr ""

#: of qiskit.providers.models.PulseDefaults.build_cmd_def:3
msgid "`CmdDef` instance generated from defaults"
msgstr ""

#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:2
msgid "QasmBackendConfiguration"
msgstr ""

#: of qiskit.providers.models.QasmBackendConfiguration:1
msgid "Model for QasmBackendConfiguration."
msgstr ""

#: of qiskit.providers.models.QasmBackendConfiguration:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``QasmBackendConfigurationSchema``. .. attribute:: backend_name"
msgstr ""

#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.QasmBackendConfiguration.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.QasmBackendConfiguration.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`as_dict "
"<qiskit.providers.models.QasmBackendConfiguration.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict "
"<qiskit.providers.models.QasmBackendConfiguration.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.QasmBackendConfiguration.rst:23:<autosummary>:1
msgid ""
":obj:`to_dict "
"<qiskit.providers.models.QasmBackendConfiguration.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.UchannelLO.rst:2
msgid "UchannelLO"
msgstr ""

#: of qiskit.providers.models.UchannelLO:8
msgid "Qubit that scale corresponds too."
msgstr ""

#: of qiskit.providers.models.UchannelLO:14
msgid "Scale factor for qubit frequency."
msgstr ""

#: of qiskit.providers.models.UchannelLO:16
msgid "complex"
msgstr ""

#: ../../api/qiskit.providers.models.UchannelLO.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.providers.models.UchannelLO.schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.UchannelLO.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.providers.models.UchannelLO.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.providers.models.UchannelLO.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.providers.models.UchannelLO.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.models.UchannelLO.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.providers.models.UchannelLO.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.providers.models.UchannelLO.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.providers.models.UchannelLO.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.providers.providerutils.rst:2
msgid "qiskit.providers.providerutils module"
msgstr ""

#: of qiskit.providers.providerutils:1
msgid "Utilities for providers."
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:1
msgid "Return the backends matching the specified filtering."
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:3
msgid ""
"Filter the `backends` list by their `configuration` or `status` "
"attributes, or from a boolean callable. The criteria for filtering can be"
" specified via `**kwargs` or as a callable via `filters`, and the "
"backends must fulfill all specified conditions."
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:8
msgid "list of backends."
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:10
msgid "filtering conditions as a callable."
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:12
msgid "dict of criteria."
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:15
msgid "a list of backend instances matching the     conditions."
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:17
msgid "a list of backend instances matching the"
msgstr ""

#: of qiskit.providers.providerutils.filter_backends:18
msgid "conditions."
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:1
msgid "Resolve backend name from a deprecated name or an alias."
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:3
msgid ""
"A group will be resolved in order of member priorities, depending on "
"availability."
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:6
msgid "name of backend to resolve"
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:8
msgid "list of available backends."
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:10
msgid "str]): dict of deprecated names."
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:11
msgid "list[str]]): dict of aliased names."
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:13
msgid "resolved name (name of an available backend)"
msgstr ""

#: of qiskit.providers.providerutils.resolve_backend_name:16
msgid ""
"if name cannot be resolved through regular available     names, nor "
"deprecated, nor alias names."
msgstr ""

#: ../../api/qiskit.pulse.rst:2
msgid "qiskit.pulse package"
msgstr ""

#: of qiskit.pulse:1
msgid "Module for Pulses."
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:2
msgid "Acquire"
msgstr ""

#: of qiskit.pulse.Acquire:1 qiskit.pulse.FrameChange:1
#: qiskit.pulse.PersistentValue:1 qiskit.pulse.SamplePulse:1
#: qiskit.pulse.commands.acquire.Acquire:1
#: qiskit.pulse.commands.frame_change.FrameChange:1
#: qiskit.pulse.commands.persistent_value.PersistentValue:1
#: qiskit.pulse.commands.sample_pulse.SamplePulse:1
msgid "ベースクラス: :class:`qiskit.pulse.commands.command.Command`"
msgstr ""

#: of qiskit.pulse.Acquire:1 qiskit.pulse.commands.acquire:1
#: qiskit.pulse.commands.acquire.Acquire:1
msgid "Acquire."
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
msgid ":obj:`ALIAS <qiskit.pulse.Acquire.ALIAS>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
msgid ":obj:`discriminator <qiskit.pulse.Acquire.discriminator>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1 of
#: qiskit.pulse.Acquire.discriminator:1
#: qiskit.pulse.commands.acquire.Acquire.discriminator:1
msgid "Return discrimination settings."
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.Acquire.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
#: ../../api/qiskit.pulse.FrameChange.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.PersistentValue.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.SamplePulse.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Acquire.duration:1 qiskit.pulse.FrameChange.duration:1
#: qiskit.pulse.PersistentValue.duration:1 qiskit.pulse.SamplePulse.duration:1
#: qiskit.pulse.Snapshot.duration:1
#: qiskit.pulse.commands.command.Command.duration:1
msgid "Duration of this command."
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
msgid ":obj:`kernel <qiskit.pulse.Acquire.kernel>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1 of
#: qiskit.pulse.Acquire.kernel:1 qiskit.pulse.commands.acquire.Acquire.kernel:1
msgid "Return kernel settings."
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.Acquire.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
#: ../../api/qiskit.pulse.FrameChange.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.PersistentValue.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.SamplePulse.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Acquire.name:1 qiskit.pulse.FrameChange.name:1
#: qiskit.pulse.PersistentValue.name:1 qiskit.pulse.SamplePulse.name:1
#: qiskit.pulse.Snapshot.name:1 qiskit.pulse.commands.command.Command.name:1
msgid "Name of this command."
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:19:<autosummary>:1
msgid ":obj:`pulseIndex <qiskit.pulse.Acquire.pulseIndex>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:26:<autosummary>:1
msgid ""
":obj:`__call__ <qiskit.pulse.Acquire.__call__>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:26:<autosummary>:1
#: ../../api/qiskit.pulse.FrameChange.rst:24:<autosummary>:1
#: ../../api/qiskit.pulse.PersistentValue.rst:24:<autosummary>:1
#: ../../api/qiskit.pulse.SamplePulse.rst:25:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Acquire.__call__:1 qiskit.pulse.FrameChange.__call__:1
#: qiskit.pulse.PersistentValue.__call__:1 qiskit.pulse.SamplePulse.__call__:1
#: qiskit.pulse.Snapshot.__call__:1
msgid ""
"Creates an Instruction obtained from call to `to_instruction` wrapped in "
"a Schedule."
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:26:<autosummary>:1
msgid ""
":obj:`to_instruction <qiskit.pulse.Acquire.to_instruction>`\\ "
"\\(qubits\\, ...\\[\\, name\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.Acquire.rst:26:<autosummary>:1
#: ../../api/qiskit.pulse.FrameChange.rst:24:<autosummary>:1
#: ../../api/qiskit.pulse.PersistentValue.rst:24:<autosummary>:1
#: ../../api/qiskit.pulse.SamplePulse.rst:25:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Acquire.to_instruction:1
#: qiskit.pulse.FrameChange.to_instruction:1
#: qiskit.pulse.PersistentValue.to_instruction:1
#: qiskit.pulse.SamplePulse.to_instruction:1
#: qiskit.pulse.Snapshot.to_instruction:1
#: qiskit.pulse.commands.acquire.Acquire.to_instruction:1
#: qiskit.pulse.commands.command.Command.to_instruction:1
#: qiskit.pulse.commands.frame_change.FrameChange.to_instruction:1
#: qiskit.pulse.commands.persistent_value.PersistentValue.to_instruction:1
#: qiskit.pulse.commands.sample_pulse.SamplePulse.to_instruction:1
#: qiskit.pulse.commands.snapshot.Snapshot.to_instruction:1
msgid "Create an instruction from command."
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:2
msgid "AcquireChannel"
msgstr ""

#: of qiskit.pulse.AcquireChannel:1 qiskit.pulse.MemorySlot:1
#: qiskit.pulse.RegisterSlot:1 qiskit.pulse.channels.channels.AcquireChannel:1
#: qiskit.pulse.channels.channels.MemorySlot:1
#: qiskit.pulse.channels.channels.RegisterSlot:1
#: qiskit.pulse.channels.channels.SnapshotChannel:1
#: qiskit.pulse.channels.pulse_channels.PulseChannel:1
msgid "ベースクラス: :class:`qiskit.pulse.channels.channels.Channel`"
msgstr ""

#: of qiskit.pulse.AcquireChannel:1
#: qiskit.pulse.channels.channels.AcquireChannel:1
msgid "Acquire channel."
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:17:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.AcquireChannel.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.ControlChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.DriveChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.MeasureChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.MemorySlot.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.RegisterSlot.rst:17:<autosummary>:1 of
#: qiskit.pulse.AcquireChannel.buffer:1 qiskit.pulse.ControlChannel.buffer:1
#: qiskit.pulse.DriveChannel.buffer:1 qiskit.pulse.MeasureChannel.buffer:1
#: qiskit.pulse.MemorySlot.buffer:1 qiskit.pulse.RegisterSlot.buffer:1
#: qiskit.pulse.channels.channels.Channel.buffer:1
msgid "Return the buffer for this channel."
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:17:<autosummary>:1
msgid ":obj:`index <qiskit.pulse.AcquireChannel.index>`\\"
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.ControlChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.DriveChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.MeasureChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.MemorySlot.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.RegisterSlot.rst:17:<autosummary>:1 of
#: qiskit.pulse.AcquireChannel.index:1 qiskit.pulse.ControlChannel.index:1
#: qiskit.pulse.DriveChannel.index:1 qiskit.pulse.MeasureChannel.index:1
#: qiskit.pulse.MemorySlot.index:1 qiskit.pulse.RegisterSlot.index:1
#: qiskit.pulse.channels.channels.Channel.index:1
msgid "Return the index of this channel."
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.AcquireChannel.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.ControlChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.DriveChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.MeasureChannel.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.MemorySlot.rst:17:<autosummary>:1
#: ../../api/qiskit.pulse.RegisterSlot.rst:17:<autosummary>:1 of
#: qiskit.pulse.AcquireChannel.name:1 qiskit.pulse.ControlChannel.name:1
#: qiskit.pulse.DriveChannel.name:1 qiskit.pulse.MeasureChannel.name:1
#: qiskit.pulse.MemorySlot.name:1 qiskit.pulse.RegisterSlot.name:1
#: qiskit.pulse.channels.channels.Channel.name:1
msgid "Return the name of this channel."
msgstr ""

#: ../../api/qiskit.pulse.AcquireChannel.rst:17:<autosummary>:1
msgid ":obj:`prefix <qiskit.pulse.AcquireChannel.prefix>`\\"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:2
msgid "CmdDef"
msgstr ""

#: of qiskit.pulse.CmdDef:1 qiskit.pulse.cmd_def.CmdDef:1
msgid "Command definition class. Relates `Gate`s to `Schedule`s."
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ""
":obj:`add <qiskit.pulse.CmdDef.add>`\\ \\(cmd\\_name\\, qubits\\, "
"Iterable\\[int\\]\\]\\, ...\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1 of
#: qiskit.pulse.CmdDef.add:1 qiskit.pulse.cmd_def.CmdDef.add:1
msgid "Add a command to the `CommandDefinition`"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ":obj:`cmd_qubits <qiskit.pulse.CmdDef.cmd_qubits>`\\ \\(cmd\\_name\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1 of
#: qiskit.pulse.CmdDef.cmd_qubits:1 qiskit.pulse.cmd_def.CmdDef.cmd_qubits:1
msgid "Get all qubit orderings this command exists for."
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ":obj:`cmds <qiskit.pulse.CmdDef.cmds>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1 of
#: qiskit.pulse.CmdDef.cmds:1 qiskit.pulse.cmd_def.CmdDef.cmds:1
msgid "Return all command names available in CmdDef."
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ""
":obj:`from_defaults <qiskit.pulse.CmdDef.from_defaults>`\\ "
"\\(flat\\_cmd\\_def\\, pulse\\_library\\, ...\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid "Create command definition from backend defaults output."
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ""
":obj:`get <qiskit.pulse.CmdDef.get>`\\ \\(cmd\\_name\\, qubits\\, "
"Iterable\\[int\\]\\]\\, \\*\\*params\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid "Get command from command definition."
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ""
":obj:`get_parameters <qiskit.pulse.CmdDef.get_parameters>`\\ "
"\\(cmd\\_name\\, qubits\\, Iterable\\[int\\]\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid "Get command parameters from command definition."
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ""
":obj:`has <qiskit.pulse.CmdDef.has>`\\ \\(cmd\\_name\\, qubits\\, "
"Iterable\\[int\\]\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1 of
#: qiskit.pulse.CmdDef.has:1 qiskit.pulse.cmd_def.CmdDef.has:1
msgid "Has command of name with qubits."
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1
msgid ""
":obj:`pop <qiskit.pulse.CmdDef.pop>`\\ \\(cmd\\_name\\, qubits\\, "
"Iterable\\[int\\]\\]\\, \\*\\*params\\)"
msgstr ""

#: ../../api/qiskit.pulse.CmdDef.rst:21:<autosummary>:1 of
#: qiskit.pulse.CmdDef.pop:1 qiskit.pulse.cmd_def.CmdDef.pop:1
msgid "Pop command from command definition."
msgstr ""

#: of qiskit.pulse.CmdDef.add:3 qiskit.pulse.CmdDef.has:3
#: qiskit.pulse.CmdDef.pop:3 qiskit.pulse.cmd_def.CmdDef.add:3
#: qiskit.pulse.cmd_def.CmdDef.has:3 qiskit.pulse.cmd_def.CmdDef.pop:3
msgid "Name of the command"
msgstr ""

#: of qiskit.pulse.CmdDef.add:4 qiskit.pulse.cmd_def.CmdDef.add:4
msgid "Qubits command applies to"
msgstr ""

#: of qiskit.pulse.CmdDef.add:5 qiskit.pulse.cmd_def.CmdDef.add:5
msgid "Schedule to be added"
msgstr ""

#: of qiskit.pulse.CmdDef.from_defaults:1
#: qiskit.pulse.cmd_def.CmdDef.from_defaults:1
msgid ""
"Create command definition from backend defaults output. :param "
"flat_cmd_def: Command definition list returned by backend :param "
"pulse_library: Dictionary of `SamplePulse`s"
msgstr ""

#: of qiskit.pulse.CmdDef.get:1 qiskit.pulse.cmd_def.CmdDef.get:1
msgid ""
"Get command from command definition. :param cmd_name: Name of the command"
" :param qubits: Ordered list of qubits command applies to :param "
"\\*\\*params: Command parameters to be used to generate schedule"
msgstr ""

#: of qiskit.pulse.CmdDef.get:6 qiskit.pulse.CmdDef.get_parameters:5
#: qiskit.pulse.CmdDef.pop:7 qiskit.pulse.cmd_def.CmdDef.get:6
#: qiskit.pulse.cmd_def.CmdDef.get_parameters:5
#: qiskit.pulse.cmd_def.CmdDef.pop:7
msgid "If command for qubits is not available"
msgstr ""

#: of qiskit.pulse.CmdDef.get_parameters:1
#: qiskit.pulse.cmd_def.CmdDef.get_parameters:1
msgid ""
"Get command parameters from command definition. :param cmd_name: Name of "
"the command :param qubits: Ordered list of qubits command applies to"
msgstr ""

#: of qiskit.pulse.CmdDef.has:4 qiskit.pulse.CmdDef.pop:4
#: qiskit.pulse.cmd_def.CmdDef.has:4 qiskit.pulse.cmd_def.CmdDef.pop:4
msgid "Ordered list of qubits command applies to"
msgstr ""

#: of qiskit.pulse.CmdDef.pop:5 qiskit.pulse.cmd_def.CmdDef.pop:5
msgid "Command parameters to be used to generate schedule"
msgstr ""

#: ../../api/qiskit.pulse.ControlChannel.rst:2
msgid "ControlChannel"
msgstr ""

#: of qiskit.pulse.ControlChannel:1 qiskit.pulse.DriveChannel:1
#: qiskit.pulse.MeasureChannel:1
#: qiskit.pulse.channels.pulse_channels.ControlChannel:1
#: qiskit.pulse.channels.pulse_channels.DriveChannel:1
#: qiskit.pulse.channels.pulse_channels.MeasureChannel:1
msgid "ベースクラス: :class:`qiskit.pulse.channels.pulse_channels.PulseChannel`"
msgstr ""

#: of qiskit.pulse.ControlChannel:1
#: qiskit.pulse.channels.pulse_channels.ControlChannel:1
msgid "Control Channel."
msgstr ""

#: ../../api/qiskit.pulse.ControlChannel.rst:17:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.ControlChannel.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ControlChannel.rst:17:<autosummary>:1
msgid ":obj:`index <qiskit.pulse.ControlChannel.index>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ControlChannel.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.ControlChannel.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ControlChannel.rst:17:<autosummary>:1
msgid ":obj:`prefix <qiskit.pulse.ControlChannel.prefix>`\\"
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:2
msgid "DeviceSpecification"
msgstr ""

#: of qiskit.pulse.DeviceSpecification:1
#: qiskit.pulse.channels.device_specification.DeviceSpecification:1
msgid ""
"Implement a device specification, which is usually constructed from "
"backend info."
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:16:<autosummary>:1
msgid ":obj:`c <qiskit.pulse.DeviceSpecification.c>`\\"
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:16:<autosummary>:1 of
#: qiskit.pulse.DeviceSpecification.c:1
#: qiskit.pulse.channels.device_specification.DeviceSpecification.c:1
msgid "Return register slots in this device."
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:16:<autosummary>:1
msgid ":obj:`mem <qiskit.pulse.DeviceSpecification.mem>`\\"
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:16:<autosummary>:1 of
#: qiskit.pulse.DeviceSpecification.mem:1
#: qiskit.pulse.channels.device_specification.DeviceSpecification.mem:1
msgid "Return memory slots in this device."
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:16:<autosummary>:1
msgid ":obj:`q <qiskit.pulse.DeviceSpecification.q>`\\"
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:16:<autosummary>:1 of
#: qiskit.pulse.DeviceSpecification.q:1
#: qiskit.pulse.channels.device_specification.DeviceSpecification.q:1
msgid "Return qubits in this device."
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:22:<autosummary>:1
msgid ""
":obj:`create_from <qiskit.pulse.DeviceSpecification.create_from>`\\ "
"\\(backend\\)"
msgstr ""

#: ../../api/qiskit.pulse.DeviceSpecification.rst:22:<autosummary>:1
msgid "Create device specification with values in backend configuration."
msgstr ""

#: of qiskit.pulse.DeviceSpecification.create_from:1
#: qiskit.pulse.channels.device_specification.DeviceSpecification.create_from:1
msgid ""
"Create device specification with values in backend configuration. :param "
"backend: backend configuration :type backend: Backend"
msgstr ""

#: of qiskit.pulse.DeviceSpecification.create_from:5
#: qiskit.pulse.channels.device_specification.DeviceSpecification.create_from:5
msgid "created device specification"
msgstr ""

#: of qiskit.pulse.DeviceSpecification.create_from:8
#: qiskit.pulse.channels.device_specification.DeviceSpecification.create_from:8
msgid "when an invalid backend is specified"
msgstr ""

#: ../../api/qiskit.pulse.Discriminator.rst:2
msgid "Discriminator"
msgstr ""

#: of qiskit.pulse.Discriminator:1 qiskit.pulse.Kernel:1
#: qiskit.pulse.commands.meas_opts.Discriminator:1
#: qiskit.pulse.commands.meas_opts.Kernel:1
msgid "ベースクラス: :class:`qiskit.pulse.commands.meas_opts.MeasOpts`"
msgstr ""

#: of qiskit.pulse.Discriminator:1
#: qiskit.pulse.commands.meas_opts.Discriminator:1
msgid "Discriminator."
msgstr ""

#: ../../api/qiskit.pulse.Discriminator.rst:15:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.Discriminator.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Discriminator.rst:15:<autosummary>:1
#: ../../api/qiskit.pulse.Kernel.rst:15:<autosummary>:1 of
#: qiskit.pulse.Discriminator.name:1 qiskit.pulse.Kernel.name:1
#: qiskit.pulse.commands.meas_opts.MeasOpts.name:1
msgid "Return parameter name."
msgstr ""

#: ../../api/qiskit.pulse.Discriminator.rst:15:<autosummary>:1
msgid ":obj:`params <qiskit.pulse.Discriminator.params>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Discriminator.rst:15:<autosummary>:1
#: ../../api/qiskit.pulse.Kernel.rst:15:<autosummary>:1 of
#: qiskit.pulse.Discriminator.params:1 qiskit.pulse.Kernel.params:1
#: qiskit.pulse.commands.meas_opts.MeasOpts.params:1
msgid "Return parameter dict."
msgstr ""

#: ../../api/qiskit.pulse.DriveChannel.rst:2
msgid "DriveChannel"
msgstr ""

#: of qiskit.pulse.DriveChannel:1
#: qiskit.pulse.channels.pulse_channels.DriveChannel:1
msgid "Drive Channel."
msgstr ""

#: ../../api/qiskit.pulse.DriveChannel.rst:17:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.DriveChannel.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.DriveChannel.rst:17:<autosummary>:1
msgid ":obj:`index <qiskit.pulse.DriveChannel.index>`\\"
msgstr ""

#: ../../api/qiskit.pulse.DriveChannel.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.DriveChannel.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.DriveChannel.rst:17:<autosummary>:1
msgid ":obj:`prefix <qiskit.pulse.DriveChannel.prefix>`\\"
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:2
msgid "FrameChange"
msgstr ""

#: of qiskit.pulse.FrameChange:1 qiskit.pulse.commands.frame_change:1
#: qiskit.pulse.commands.frame_change.FrameChange:1
msgid "Frame change pulse."
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:17:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.FrameChange.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.FrameChange.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:17:<autosummary>:1
msgid ":obj:`phase <qiskit.pulse.FrameChange.phase>`\\"
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:17:<autosummary>:1 of
#: qiskit.pulse.FrameChange.phase:1
#: qiskit.pulse.commands.frame_change.FrameChange.phase:1
msgid "Framechange phase."
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:17:<autosummary>:1
msgid ":obj:`pulseIndex <qiskit.pulse.FrameChange.pulseIndex>`\\"
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:24:<autosummary>:1
msgid ""
":obj:`__call__ <qiskit.pulse.FrameChange.__call__>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../api/qiskit.pulse.FrameChange.rst:24:<autosummary>:1
msgid ""
":obj:`to_instruction <qiskit.pulse.FrameChange.to_instruction>`\\ "
"\\(channel\\[\\, name\\]\\)"
msgstr ""

#: of qiskit.pulse.Instruction:1 qiskit.pulse.Schedule:1
#: qiskit.pulse.commands.instruction.Instruction:1
msgid "ベースクラス: :class:`qiskit.pulse.interfaces.ScheduleComponent`"
msgstr ""

#: of qiskit.pulse.Instruction:1
#: qiskit.pulse.commands.instruction.Instruction:1
msgid "An abstract class for leaf nodes of schedule."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.Instruction.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid "Buffer for schedule."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`channels <qiskit.pulse.Instruction.channels>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Instruction.channels:1 qiskit.pulse.Schedule.channels:1
#: qiskit.pulse.Snapshot.channels:1
#: qiskit.pulse.commands.instruction.Instruction.channels:1
msgid "Returns channels that this schedule uses."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`command <qiskit.pulse.Instruction.command>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Instruction.command:1 qiskit.pulse.Snapshot.command:1
#: qiskit.pulse.commands.instruction.Instruction.command:1
msgid "Acquire command."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.Instruction.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1 of
#: qiskit.pulse.Instruction.duration:1
#: qiskit.pulse.commands.instruction.Instruction.duration:1
msgid "Duration of this instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`instructions <qiskit.pulse.Instruction.instructions>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Instruction.instructions:1 qiskit.pulse.Schedule.instructions:1
#: qiskit.pulse.Snapshot.instructions:1
#: qiskit.pulse.commands.instruction.Instruction.instructions:1
msgid "Iterable for getting instructions from Schedule tree."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.Instruction.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1 of
#: qiskit.pulse.Instruction.name:1
#: qiskit.pulse.commands.instruction.Instruction.name:1
msgid "Name of this instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`start_time <qiskit.pulse.Instruction.start_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Instruction.start_time:1 qiskit.pulse.Snapshot.start_time:1
#: qiskit.pulse.commands.instruction.Instruction.start_time:1
msgid "Relative begin time of this instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`stop_time <qiskit.pulse.Instruction.stop_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Instruction.stop_time:1 qiskit.pulse.Snapshot.stop_time:1
#: qiskit.pulse.commands.instruction.Instruction.stop_time:1
msgid "Relative end time of this instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
msgid ":obj:`timeslots <qiskit.pulse.Instruction.timeslots>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:22:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Instruction.timeslots:1 qiskit.pulse.Snapshot.timeslots:1
#: qiskit.pulse.commands.instruction.Instruction.timeslots:1
msgid "Occupied time slots by this instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ""
":obj:`append <qiskit.pulse.Instruction.append>`\\ \\(schedule\\, "
"buffer\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.append:1 qiskit.pulse.Schedule.append:1
#: qiskit.pulse.ScheduleComponent.append:1 qiskit.pulse.Snapshot.append:1
#: qiskit.pulse.commands.instruction.Instruction.append:1
#: qiskit.pulse.interfaces.ScheduleComponent.append:1
msgid ""
"Return a new schedule with `schedule` inserted at the maximum time over "
"all channels shared between `self` and `schedule`."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ""
":obj:`ch_duration <qiskit.pulse.Instruction.ch_duration>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.ch_duration:1 qiskit.pulse.Snapshot.ch_duration:1
#: qiskit.pulse.commands.instruction.Instruction.ch_duration:1
msgid "Return duration of the supplied channels in this Instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ""
":obj:`ch_start_time <qiskit.pulse.Instruction.ch_start_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.ch_start_time:1
#: qiskit.pulse.Snapshot.ch_start_time:1
#: qiskit.pulse.commands.instruction.Instruction.ch_start_time:1
msgid "Return minimum start time for supplied channels."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ""
":obj:`ch_stop_time <qiskit.pulse.Instruction.ch_stop_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.ch_stop_time:1 qiskit.pulse.Snapshot.ch_stop_time:1
#: qiskit.pulse.commands.instruction.Instruction.ch_stop_time:1
msgid "Return maximum start time for supplied channels."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ":obj:`draw <qiskit.pulse.Instruction.draw>`\\ \\(dt\\[\\, style\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.draw:1 qiskit.pulse.Snapshot.draw:1
#: qiskit.pulse.commands.instruction.Instruction.draw:1
msgid "Plot the instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ":obj:`flatten <qiskit.pulse.Instruction.flatten>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.flatten:1 qiskit.pulse.Snapshot.flatten:1
#: qiskit.pulse.commands.instruction.Instruction.flatten:1
msgid "Return itself as already single instruction."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ""
":obj:`insert <qiskit.pulse.Instruction.insert>`\\ \\(start\\_time\\, "
"schedule\\, buffer\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.insert:1 qiskit.pulse.Schedule.insert:1
#: qiskit.pulse.Snapshot.insert:1
#: qiskit.pulse.commands.instruction.Instruction.insert:1
msgid ""
"Return a new schedule with `schedule` inserted within `self` at "
"`start_time`."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ":obj:`shift <qiskit.pulse.Instruction.shift>`\\ \\(time\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.shift:1 qiskit.pulse.Schedule.shift:1
#: qiskit.pulse.Snapshot.shift:1
#: qiskit.pulse.commands.instruction.Instruction.shift:1
msgid "Return a new schedule shifted forward by `time`."
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
msgid ":obj:`union <qiskit.pulse.Instruction.union>`\\ \\(\\*schedules\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Instruction.rst:36:<autosummary>:1
#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1 of
#: qiskit.pulse.Instruction.union:1 qiskit.pulse.Schedule.union:1
#: qiskit.pulse.Snapshot.union:1
#: qiskit.pulse.commands.instruction.Instruction.union:1
msgid "Return a new schedule which is the union of `self` and `schedule`."
msgstr ""

#: of qiskit.pulse.Instruction.buffer:1 qiskit.pulse.Schedule.buffer:1
#: qiskit.pulse.ScheduleComponent.buffer:1 qiskit.pulse.Snapshot.buffer:1
#: qiskit.pulse.commands.instruction.Instruction.buffer:1
#: qiskit.pulse.interfaces.ScheduleComponent.buffer:1
msgid "Buffer for schedule. To be used when appending"
msgstr ""

#: of qiskit.pulse.Instruction.command:3 qiskit.pulse.Snapshot.command:3
#: qiskit.pulse.commands.instruction.Instruction.command:3
msgid "Returns: Command"
msgstr ""

#: of qiskit.pulse.Instruction.append:4 qiskit.pulse.Schedule.append:4
#: qiskit.pulse.ScheduleComponent.append:4 qiskit.pulse.Snapshot.append:4
#: qiskit.pulse.commands.instruction.Instruction.append:4
#: qiskit.pulse.interfaces.ScheduleComponent.append:4
msgid "schedule to be appended"
msgstr ""

#: of qiskit.pulse.Instruction.append:5 qiskit.pulse.Schedule.append:5
#: qiskit.pulse.ScheduleComponent.append:5
#: qiskit.pulse.ScheduleComponent.insert:5 qiskit.pulse.Snapshot.append:5
#: qiskit.pulse.commands.instruction.Instruction.append:5
#: qiskit.pulse.interfaces.ScheduleComponent.append:5
#: qiskit.pulse.interfaces.ScheduleComponent.insert:5 qiskit.pulse.ops.append:9
msgid "Obey buffer when appending"
msgstr ""

#: of qiskit.pulse.Instruction.append:6 qiskit.pulse.Instruction.insert:6
#: qiskit.pulse.Instruction.shift:4 qiskit.pulse.Instruction.union:4
#: qiskit.pulse.Schedule.append:6 qiskit.pulse.Schedule.insert:6
#: qiskit.pulse.Schedule.shift:4 qiskit.pulse.Schedule.union:4
#: qiskit.pulse.ScheduleComponent.append:6
#: qiskit.pulse.ScheduleComponent.insert:6
#: qiskit.pulse.ScheduleComponent.union:4 qiskit.pulse.Snapshot.append:6
#: qiskit.pulse.Snapshot.insert:6 qiskit.pulse.Snapshot.shift:4
#: qiskit.pulse.Snapshot.union:4
#: qiskit.pulse.commands.instruction.Instruction.append:6
#: qiskit.pulse.commands.instruction.Instruction.insert:6
#: qiskit.pulse.commands.instruction.Instruction.shift:4
#: qiskit.pulse.commands.instruction.Instruction.union:4
#: qiskit.pulse.interfaces.ScheduleComponent.append:6
#: qiskit.pulse.interfaces.ScheduleComponent.insert:6
#: qiskit.pulse.interfaces.ScheduleComponent.union:4 qiskit.pulse.ops.append:10
#: qiskit.pulse.ops.insert:7
msgid "Name of the new schedule. Defaults to name of parent"
msgstr ""

#: of qiskit.pulse.Instruction.ch_duration:3
#: qiskit.pulse.Instruction.ch_start_time:3
#: qiskit.pulse.Instruction.ch_stop_time:3 qiskit.pulse.Schedule.ch_duration:3
#: qiskit.pulse.Schedule.ch_start_time:3 qiskit.pulse.Schedule.ch_stop_time:3
#: qiskit.pulse.Snapshot.ch_duration:3 qiskit.pulse.Snapshot.ch_start_time:3
#: qiskit.pulse.Snapshot.ch_stop_time:3
#: qiskit.pulse.commands.instruction.Instruction.ch_duration:3
#: qiskit.pulse.commands.instruction.Instruction.ch_start_time:3
#: qiskit.pulse.commands.instruction.Instruction.ch_stop_time:3
msgid "Supplied channels"
msgstr ""

#: of qiskit.pulse.Instruction.draw:3 qiskit.pulse.Schedule.draw:3
#: qiskit.pulse.Snapshot.draw:3
#: qiskit.pulse.commands.instruction.Instruction.draw:3
#: qiskit.visualization.pulse_drawer:5
#: qiskit.visualization.pulse_visualization.pulse_drawer:5
msgid "Time interval of samples"
msgstr ""

#: of qiskit.pulse.Instruction.draw:4 qiskit.pulse.SamplePulse.draw:4
#: qiskit.pulse.Schedule.draw:4 qiskit.pulse.Snapshot.draw:4
#: qiskit.pulse.commands.instruction.Instruction.draw:4
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:4
#: qiskit.visualization.pulse_drawer:7
#: qiskit.visualization.pulse_visualization.pulse_drawer:7
msgid "A style sheet to configure plot appearance"
msgstr ""

#: of qiskit.pulse.Instruction.draw:6 qiskit.pulse.SamplePulse.draw:6
#: qiskit.pulse.Schedule.draw:6 qiskit.pulse.Snapshot.draw:6
#: qiskit.pulse.commands.instruction.Instruction.draw:6
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:6
#: qiskit.visualization.pulse_drawer:9
#: qiskit.visualization.pulse_visualization.pulse_drawer:9
msgid "Name required to save pulse image"
msgstr ""

#: of qiskit.pulse.Instruction.draw:7 qiskit.pulse.SamplePulse.draw:7
#: qiskit.pulse.Schedule.draw:7 qiskit.pulse.Snapshot.draw:7
#: qiskit.pulse.commands.instruction.Instruction.draw:7
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:7
msgid "A function for interpolation"
msgstr ""

#: of qiskit.pulse.Instruction.draw:8 qiskit.pulse.SamplePulse.draw:8
#: qiskit.pulse.Schedule.draw:8 qiskit.pulse.Snapshot.draw:8
#: qiskit.pulse.commands.instruction.Instruction.draw:8
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:8
#: qiskit.visualization.matplotlib.SamplePulseDrawer.draw:9
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw:11
msgid "Relative visual scaling of waveform amplitudes"
msgstr ""

#: of qiskit.pulse.Instruction.draw:10 qiskit.pulse.Schedule.draw:10
#: qiskit.pulse.Snapshot.draw:10
#: qiskit.pulse.commands.instruction.Instruction.draw:10
#: qiskit.visualization.pulse_drawer:16
#: qiskit.visualization.pulse_visualization.pulse_drawer:16
msgid "A list of channel names to plot"
msgstr ""

#: of qiskit.pulse.Instruction.draw:11 qiskit.pulse.Schedule.draw:11
#: qiskit.pulse.Snapshot.draw:11
#: qiskit.pulse.commands.instruction.Instruction.draw:11
#: qiskit.visualization.pulse_drawer:18
#: qiskit.visualization.pulse_visualization.pulse_drawer:18
msgid "Plot empty channels"
msgstr ""

#: of qiskit.pulse.Instruction.draw:12 qiskit.pulse.Schedule.draw:12
#: qiskit.pulse.Snapshot.draw:12
#: qiskit.pulse.commands.instruction.Instruction.draw:12
#: qiskit.visualization.pulse_drawer:20
#: qiskit.visualization.pulse_visualization.pulse_drawer:20
msgid "A tuple of time range to plot"
msgstr ""

#: of qiskit.pulse.Instruction.draw:13 qiskit.pulse.SamplePulse.draw:10
#: qiskit.pulse.Schedule.draw:13 qiskit.pulse.Snapshot.draw:13
#: qiskit.pulse.commands.instruction.Instruction.draw:13
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:10
#: qiskit.visualization.pulse_drawer:22
#: qiskit.visualization.pulse_visualization.pulse_drawer:22
msgid ""
"When set true show the circuit in a new window (this depends on the "
"matplotlib backend being used supporting this)"
msgstr ""

#: of qiskit.pulse.Instruction.draw:15 qiskit.pulse.Schedule.draw:15
#: qiskit.pulse.Snapshot.draw:15
#: qiskit.pulse.commands.instruction.Instruction.draw:15
#: qiskit.visualization.pulse_drawer:25
#: qiskit.visualization.pulse_visualization.pulse_drawer:25
msgid "Draw event table for supported commands"
msgstr ""

#: of qiskit.pulse.Instruction.draw:16 qiskit.pulse.Schedule.draw:16
#: qiskit.pulse.Snapshot.draw:16
#: qiskit.pulse.commands.instruction.Instruction.draw:16
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw:19
#: qiskit.visualization.pulse_drawer:27
#: qiskit.visualization.pulse_visualization.pulse_drawer:27
msgid "Label individual instructions"
msgstr ""

#: of qiskit.pulse.Instruction.draw:17 qiskit.pulse.Schedule.draw:17
#: qiskit.pulse.Snapshot.draw:17
#: qiskit.pulse.commands.instruction.Instruction.draw:17
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw:21
#: qiskit.visualization.pulse_drawer:29
#: qiskit.visualization.pulse_visualization.pulse_drawer:29
msgid "Add framechange indicators"
msgstr ""

#: of qiskit.pulse.Instruction.draw:19 qiskit.pulse.Schedule.draw:19
#: qiskit.pulse.Snapshot.draw:19
#: qiskit.pulse.commands.instruction.Instruction.draw:19
msgid "A matplotlib figure object of the pulse schedule."
msgstr ""

#: of qiskit.pulse.Instruction.insert:3 qiskit.pulse.Schedule.insert:3
#: qiskit.pulse.ScheduleComponent.insert:3 qiskit.pulse.Snapshot.insert:3
#: qiskit.pulse.commands.instruction.Instruction.insert:3
#: qiskit.pulse.interfaces.ScheduleComponent.insert:3
msgid "time to be inserted"
msgstr ""

#: of qiskit.pulse.Instruction.insert:4 qiskit.pulse.Schedule.insert:4
#: qiskit.pulse.ScheduleComponent.insert:4 qiskit.pulse.Snapshot.insert:4
#: qiskit.pulse.commands.instruction.Instruction.insert:4
#: qiskit.pulse.interfaces.ScheduleComponent.insert:4
msgid "schedule to be inserted"
msgstr ""

#: of qiskit.pulse.Instruction.insert:5 qiskit.pulse.Schedule.insert:5
#: qiskit.pulse.Snapshot.insert:5
#: qiskit.pulse.commands.instruction.Instruction.insert:5
#: qiskit.pulse.ops.insert:6
msgid "Obey buffer when inserting"
msgstr ""

#: of qiskit.pulse.Instruction.shift:3 qiskit.pulse.Schedule.shift:3
#: qiskit.pulse.Snapshot.shift:3
#: qiskit.pulse.commands.instruction.Instruction.shift:3
msgid "Time to shift by"
msgstr ""

#: of qiskit.pulse.Instruction.union:3 qiskit.pulse.Schedule.union:3
#: qiskit.pulse.ScheduleComponent.union:3 qiskit.pulse.Snapshot.union:3
#: qiskit.pulse.commands.instruction.Instruction.union:3
#: qiskit.pulse.interfaces.ScheduleComponent.union:3
msgid "Schedules to be take the union with the parent `Schedule`."
msgstr ""

#: ../../api/qiskit.pulse.Kernel.rst:2
msgid "Kernel"
msgstr ""

#: of qiskit.pulse.Kernel:1 qiskit.pulse.commands.meas_opts.Kernel:1
msgid "Kernel."
msgstr ""

#: ../../api/qiskit.pulse.Kernel.rst:15:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.Kernel.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Kernel.rst:15:<autosummary>:1
msgid ":obj:`params <qiskit.pulse.Kernel.params>`\\"
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:2
msgid "LoConfig"
msgstr ""

#: of qiskit.pulse.LoConfig:1 qiskit.pulse.configuration.LoConfig:1
msgid "Pulse channel LO frequency container."
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:15:<autosummary>:1
msgid ":obj:`meas_los <qiskit.pulse.LoConfig.meas_los>`\\"
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:15:<autosummary>:1 of
#: qiskit.pulse.LoConfig.meas_los:1
#: qiskit.pulse.configuration.LoConfig.meas_los:1
msgid "Returns dictionary mapping measure channels (MeasureChannel) to los."
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:15:<autosummary>:1
msgid ":obj:`qubit_los <qiskit.pulse.LoConfig.qubit_los>`\\"
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:15:<autosummary>:1 of
#: qiskit.pulse.LoConfig.qubit_los:1
#: qiskit.pulse.configuration.LoConfig.qubit_los:1
msgid "Returns dictionary mapping qubit channels (DriveChannel) to los."
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1
msgid ":obj:`add_lo <qiskit.pulse.LoConfig.add_lo>`\\ \\(channel\\, ...\\)"
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1 of
#: qiskit.pulse.LoConfig.add_lo:1 qiskit.pulse.configuration.LoConfig.add_lo:1
msgid "Add a lo mapping for a channel."
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1
msgid ""
":obj:`add_lo_range <qiskit.pulse.LoConfig.add_lo_range>`\\ \\(channel\\, "
"lo\\_range\\, Tuple\\[int\\]\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1 of
#: qiskit.pulse.LoConfig.add_lo_range:1
#: qiskit.pulse.configuration.LoConfig.add_lo_range:1
msgid "Add lo range to configuration."
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1
msgid ""
":obj:`channel_lo <qiskit.pulse.LoConfig.channel_lo>`\\ \\(channel\\, "
"...\\)"
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1 of
#: qiskit.pulse.LoConfig.channel_lo:1
#: qiskit.pulse.configuration.LoConfig.channel_lo:1
msgid "Return channel lo."
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1
msgid ":obj:`check_lo <qiskit.pulse.LoConfig.check_lo>`\\ \\(channel\\, ...\\)"
msgstr ""

#: ../../api/qiskit.pulse.LoConfig.rst:24:<autosummary>:1 of
#: qiskit.pulse.LoConfig.check_lo:1
#: qiskit.pulse.configuration.LoConfig.check_lo:1
msgid "Check that lo is valid for channel."
msgstr ""

#: of qiskit.pulse.LoConfig.add_lo_range:3
#: qiskit.pulse.configuration.LoConfig.add_lo_range:3
msgid "Channel to add lo range for"
msgstr ""

#: of qiskit.pulse.LoConfig.add_lo_range:4
#: qiskit.pulse.configuration.LoConfig.add_lo_range:4
msgid "Lo range to add"
msgstr ""

#: of qiskit.pulse.LoConfig.channel_lo:3
#: qiskit.pulse.configuration.LoConfig.channel_lo:3
msgid "Channel to get lo for"
msgstr ""

#: of qiskit.pulse.LoConfig.channel_lo:5
#: qiskit.pulse.configuration.LoConfig.channel_lo:5
msgid "If channel is not configured"
msgstr ""

#: of qiskit.pulse.LoConfig.channel_lo:7
#: qiskit.pulse.configuration.LoConfig.channel_lo:7
msgid "Lo of supplied channel if present"
msgstr ""

#: of qiskit.pulse.LoConfig.check_lo:3
#: qiskit.pulse.configuration.LoConfig.check_lo:3
msgid "Channel to validate lo for"
msgstr ""

#: of qiskit.pulse.LoConfig.check_lo:4
#: qiskit.pulse.configuration.LoConfig.check_lo:4
msgid "lo frequency"
msgstr ""

#: of qiskit.pulse.LoConfig.check_lo:6
#: qiskit.pulse.configuration.LoConfig.check_lo:6
msgid "If freq is outside of channels range"
msgstr ""

#: ../../api/qiskit.pulse.LoRange.rst:2
msgid "LoRange"
msgstr ""

#: of qiskit.pulse.LoRange:1 qiskit.pulse.configuration.LoRange:1
msgid "Range of LO frequency."
msgstr ""

#: ../../api/qiskit.pulse.LoRange.rst:15:<autosummary>:1
msgid ":obj:`lower_bound <qiskit.pulse.LoRange.lower_bound>`\\"
msgstr ""

#: ../../api/qiskit.pulse.LoRange.rst:15:<autosummary>:1 of
#: qiskit.pulse.LoRange.lower_bound:1
#: qiskit.pulse.configuration.LoRange.lower_bound:1
msgid "Lower bound of the LO range"
msgstr ""

#: ../../api/qiskit.pulse.LoRange.rst:15:<autosummary>:1
msgid ":obj:`upper_bound <qiskit.pulse.LoRange.upper_bound>`\\"
msgstr ""

#: ../../api/qiskit.pulse.LoRange.rst:15:<autosummary>:1 of
#: qiskit.pulse.LoRange.upper_bound:1
#: qiskit.pulse.configuration.LoRange.upper_bound:1
msgid "Upper bound of the LO range"
msgstr ""

#: ../../api/qiskit.pulse.LoRange.rst:21:<autosummary>:1
msgid ":obj:`includes <qiskit.pulse.LoRange.includes>`\\ \\(lo\\_freq\\)"
msgstr ""

#: ../../api/qiskit.pulse.LoRange.rst:21:<autosummary>:1 of
#: qiskit.pulse.LoRange.includes:1
#: qiskit.pulse.configuration.LoRange.includes:1
msgid "Whether `lo_freq` is within the `LoRange`."
msgstr ""

#: of qiskit.pulse.LoRange.includes:3
#: qiskit.pulse.configuration.LoRange.includes:3
msgid "LO frequency to be validated"
msgstr ""

#: of qiskit.pulse.LoRange.includes:5
#: qiskit.pulse.configuration.LoRange.includes:5
msgid "True if lo_freq is included in this range, otherwise False"
msgstr ""

#: ../../api/qiskit.pulse.MeasureChannel.rst:2
msgid "MeasureChannel"
msgstr ""

#: of qiskit.pulse.MeasureChannel:1
#: qiskit.pulse.channels.pulse_channels.MeasureChannel:1
msgid "Measure Channel."
msgstr ""

#: ../../api/qiskit.pulse.MeasureChannel.rst:17:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.MeasureChannel.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.MeasureChannel.rst:17:<autosummary>:1
msgid ":obj:`index <qiskit.pulse.MeasureChannel.index>`\\"
msgstr ""

#: ../../api/qiskit.pulse.MeasureChannel.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.MeasureChannel.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.MeasureChannel.rst:17:<autosummary>:1
msgid ":obj:`prefix <qiskit.pulse.MeasureChannel.prefix>`\\"
msgstr ""

#: ../../api/qiskit.pulse.MemorySlot.rst:2
msgid "MemorySlot"
msgstr ""

#: of qiskit.pulse.MemorySlot:1 qiskit.pulse.channels.channels.MemorySlot:1
msgid "Memory slot channel."
msgstr ""

#: ../../api/qiskit.pulse.MemorySlot.rst:17:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.MemorySlot.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.MemorySlot.rst:17:<autosummary>:1
msgid ":obj:`index <qiskit.pulse.MemorySlot.index>`\\"
msgstr ""

#: ../../api/qiskit.pulse.MemorySlot.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.MemorySlot.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.MemorySlot.rst:17:<autosummary>:1
msgid ":obj:`prefix <qiskit.pulse.MemorySlot.prefix>`\\"
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:2
msgid "PersistentValue"
msgstr ""

#: of qiskit.pulse.PersistentValue:1 qiskit.pulse.commands.persistent_value:1
#: qiskit.pulse.commands.persistent_value.PersistentValue:1
msgid "Persistent value."
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:17:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.PersistentValue.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.PersistentValue.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:17:<autosummary>:1
msgid ":obj:`pulseIndex <qiskit.pulse.PersistentValue.pulseIndex>`\\"
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:17:<autosummary>:1
msgid ":obj:`value <qiskit.pulse.PersistentValue.value>`\\"
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:17:<autosummary>:1 of
#: qiskit.pulse.PersistentValue.value:1
#: qiskit.pulse.commands.persistent_value.PersistentValue.value:1
msgid "Persistent value amplitude."
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:24:<autosummary>:1
msgid ""
":obj:`__call__ <qiskit.pulse.PersistentValue.__call__>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../api/qiskit.pulse.PersistentValue.rst:24:<autosummary>:1
msgid ""
":obj:`to_instruction <qiskit.pulse.PersistentValue.to_instruction>`\\ "
"\\(channel\\[\\, name\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.PulseError.rst:2
msgid "PulseError"
msgstr ""

#: of qiskit.pulse.PulseError:1 qiskit.pulse.exceptions.PulseError:1
msgid "Errors raised by the pulse module."
msgstr ""

#: ../../api/qiskit.pulse.RegisterSlot.rst:2
msgid "RegisterSlot"
msgstr ""

#: of qiskit.pulse.RegisterSlot:1 qiskit.pulse.channels.channels.RegisterSlot:1
msgid "Classical resister slot channel."
msgstr ""

#: ../../api/qiskit.pulse.RegisterSlot.rst:17:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.RegisterSlot.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.RegisterSlot.rst:17:<autosummary>:1
msgid ":obj:`index <qiskit.pulse.RegisterSlot.index>`\\"
msgstr ""

#: ../../api/qiskit.pulse.RegisterSlot.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.RegisterSlot.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.RegisterSlot.rst:17:<autosummary>:1
msgid ":obj:`prefix <qiskit.pulse.RegisterSlot.prefix>`\\"
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:2
msgid "SamplePulse"
msgstr ""

#: of qiskit.pulse.SamplePulse:1
#: qiskit.pulse.commands.sample_pulse.SamplePulse:1
msgid "Container for functional pulse."
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:17:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.SamplePulse.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:17:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.SamplePulse.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:17:<autosummary>:1
msgid ":obj:`pulseIndex <qiskit.pulse.SamplePulse.pulseIndex>`\\"
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:17:<autosummary>:1
msgid ":obj:`samples <qiskit.pulse.SamplePulse.samples>`\\"
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:17:<autosummary>:1 of
#: qiskit.pulse.SamplePulse.samples:1
#: qiskit.pulse.commands.sample_pulse.SamplePulse.samples:1
msgid "Return sample values."
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:25:<autosummary>:1
msgid ""
":obj:`__call__ <qiskit.pulse.SamplePulse.__call__>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:25:<autosummary>:1
msgid ":obj:`draw <qiskit.pulse.SamplePulse.draw>`\\ \\(dt\\[\\, style\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:25:<autosummary>:1 of
#: qiskit.pulse.SamplePulse.draw:1
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:1
msgid "Plot the interpolated envelope of pulse."
msgstr ""

#: ../../api/qiskit.pulse.SamplePulse.rst:25:<autosummary>:1
msgid ""
":obj:`to_instruction <qiskit.pulse.SamplePulse.to_instruction>`\\ "
"\\(channel\\[\\, name\\]\\)"
msgstr ""

#: of qiskit.pulse.SamplePulse.draw:3
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:3
msgid "Time interval of samples."
msgstr ""

#: of qiskit.pulse.SamplePulse.draw:13
#: qiskit.pulse.commands.sample_pulse.SamplePulse.draw:13
msgid "A matplotlib figure object of the pulse envelope."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:2
msgid "Schedule"
msgstr ""

#: of qiskit.pulse.Schedule:1
msgid "Schedule of `ScheduleComponent`s. The composite node of a schedule tree."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.Schedule.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`channels <qiskit.pulse.Schedule.channels>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.Schedule.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1 of
#: qiskit.pulse.Schedule.duration:1 qiskit.pulse.ScheduleComponent.duration:1
#: qiskit.pulse.interfaces.ScheduleComponent.duration:1
msgid "Duration of this schedule component."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`instructions <qiskit.pulse.Schedule.instructions>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.Schedule.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1 of
#: qiskit.pulse.Schedule.name:1 qiskit.pulse.ScheduleComponent.name:1
#: qiskit.pulse.interfaces.ScheduleComponent.name:1
msgid "Name of ScheduleComponent."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`start_time <qiskit.pulse.Schedule.start_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1 of
#: qiskit.pulse.Schedule.start_time:1
#: qiskit.pulse.ScheduleComponent.start_time:1
#: qiskit.pulse.interfaces.ScheduleComponent.start_time:1
msgid "Starting time of this schedule component."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`stop_time <qiskit.pulse.Schedule.stop_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1 of
#: qiskit.pulse.Schedule.stop_time:1 qiskit.pulse.ScheduleComponent.stop_time:1
#: qiskit.pulse.interfaces.ScheduleComponent.stop_time:1
msgid "Stopping time of this schedule component."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
msgid ":obj:`timeslots <qiskit.pulse.Schedule.timeslots>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:21:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1 of
#: qiskit.pulse.Schedule.timeslots:1 qiskit.pulse.ScheduleComponent.timeslots:1
#: qiskit.pulse.interfaces.ScheduleComponent.timeslots:1
msgid "Occupied time slots by this schedule component."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ""
":obj:`append <qiskit.pulse.Schedule.append>`\\ \\(schedule\\, buffer\\, "
"name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ":obj:`ch_duration <qiskit.pulse.Schedule.ch_duration>`\\ \\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1 of
#: qiskit.pulse.Schedule.ch_duration:1
msgid "Return duration of schedule over supplied channels."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ""
":obj:`ch_start_time <qiskit.pulse.Schedule.ch_start_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1 of
#: qiskit.pulse.Schedule.ch_start_time:1
msgid "Return minimum start time over supplied channels."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ""
":obj:`ch_stop_time <qiskit.pulse.Schedule.ch_stop_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1 of
#: qiskit.pulse.Schedule.ch_stop_time:1
msgid "Return maximum start time over supplied channels."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ":obj:`draw <qiskit.pulse.Schedule.draw>`\\ \\(dt\\[\\, style\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1 of
#: qiskit.pulse.Schedule.draw:1
msgid "Plot the schedule."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ":obj:`flatten <qiskit.pulse.Schedule.flatten>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1 of
#: qiskit.pulse.Schedule.flatten:1 qiskit.pulse.ScheduleComponent.flatten:1
#: qiskit.pulse.interfaces.ScheduleComponent.flatten:1
msgid ""
"Return a new schedule which is the flattened schedule contained all "
"`instructions`."
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ""
":obj:`insert <qiskit.pulse.Schedule.insert>`\\ \\(start\\_time\\, "
"schedule\\, buffer\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ":obj:`shift <qiskit.pulse.Schedule.shift>`\\ \\(time\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Schedule.rst:35:<autosummary>:1
msgid ":obj:`union <qiskit.pulse.Schedule.union>`\\ \\(\\*schedules\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:2
msgid "ScheduleComponent"
msgstr ""

#: of qiskit.pulse.ScheduleComponent:1
#: qiskit.pulse.interfaces.ScheduleComponent:1
msgid "Common interface for components of schedule."
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.ScheduleComponent.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`channels <qiskit.pulse.ScheduleComponent.channels>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1 of
#: qiskit.pulse.ScheduleComponent.channels:1
#: qiskit.pulse.interfaces.ScheduleComponent.channels:1
msgid "Return channels used by schedule."
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.ScheduleComponent.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`instructions <qiskit.pulse.ScheduleComponent.instructions>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1 of
#: qiskit.pulse.ScheduleComponent.instructions:1
#: qiskit.pulse.interfaces.ScheduleComponent.instructions:1
msgid "Return iterable for all `Instruction`s in `Schedule` tree."
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.ScheduleComponent.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`start_time <qiskit.pulse.ScheduleComponent.start_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`stop_time <qiskit.pulse.ScheduleComponent.stop_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:21:<autosummary>:1
msgid ":obj:`timeslots <qiskit.pulse.ScheduleComponent.timeslots>`\\"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ""
":obj:`append <qiskit.pulse.ScheduleComponent.append>`\\ \\(schedule\\, "
"buffer\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ""
":obj:`ch_duration <qiskit.pulse.ScheduleComponent.ch_duration>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1 of
#: qiskit.pulse.ScheduleComponent.ch_duration:1
#: qiskit.pulse.interfaces.ScheduleComponent.ch_duration:1
msgid "Duration of the `channels` in schedule component."
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ""
":obj:`ch_start_time <qiskit.pulse.ScheduleComponent.ch_start_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1 of
#: qiskit.pulse.ScheduleComponent.ch_start_time:1
#: qiskit.pulse.interfaces.ScheduleComponent.ch_start_time:1
msgid "Starting time of the `channels` in schedule component."
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ""
":obj:`ch_stop_time <qiskit.pulse.ScheduleComponent.ch_stop_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1 of
#: qiskit.pulse.ScheduleComponent.ch_stop_time:1
#: qiskit.pulse.interfaces.ScheduleComponent.ch_stop_time:1
msgid "Stopping of the `channels` in schedule component."
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ":obj:`flatten <qiskit.pulse.ScheduleComponent.flatten>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ""
":obj:`insert <qiskit.pulse.ScheduleComponent.insert>`\\ "
"\\(start\\_time\\, schedule\\, buffer\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1 of
#: qiskit.pulse.ScheduleComponent.insert:1
#: qiskit.pulse.interfaces.ScheduleComponent.insert:1
msgid "Return a new schedule with `schedule` inserted at `start_time` of `self`."
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ":obj:`shift <qiskit.pulse.ScheduleComponent.shift>`\\ \\(time\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1
msgid ""
":obj:`union <qiskit.pulse.ScheduleComponent.union>`\\ \\(\\*schedules\\, "
"name\\)"
msgstr ""

#: ../../api/qiskit.pulse.ScheduleComponent.rst:34:<autosummary>:1 of
#: qiskit.pulse.ScheduleComponent.union:1
#: qiskit.pulse.interfaces.ScheduleComponent.union:1
msgid ""
"Return a new schedule which is the union of the parent `Schedule` and "
"`schedule`."
msgstr ""

#: of qiskit.pulse.ScheduleComponent.shift:1
#: qiskit.pulse.interfaces.ScheduleComponent.shift:1
msgid ""
"Return a new schedule shifted forward by `time`. :param time: Time to "
"shift by :param name: Name of the new schedule. Defaults to name of "
"parent"
msgstr ""

#: of qiskit.pulse.Snapshot:1 qiskit.pulse.commands.snapshot.Snapshot:1
msgid ""
"ベースクラス: :class:`qiskit.pulse.commands.command.Command`, "
":class:`qiskit.pulse.commands.instruction.Instruction`"
msgstr ""

#: of qiskit.pulse.Snapshot:1 qiskit.pulse.commands.snapshot:1
#: qiskit.pulse.commands.snapshot.Snapshot:1
msgid "Snapshot."
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`buffer <qiskit.pulse.Snapshot.buffer>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`channels <qiskit.pulse.Snapshot.channels>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`command <qiskit.pulse.Snapshot.command>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`duration <qiskit.pulse.Snapshot.duration>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`instructions <qiskit.pulse.Snapshot.instructions>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`name <qiskit.pulse.Snapshot.name>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`pulseIndex <qiskit.pulse.Snapshot.pulseIndex>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`start_time <qiskit.pulse.Snapshot.start_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`stop_time <qiskit.pulse.Snapshot.stop_time>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`timeslots <qiskit.pulse.Snapshot.timeslots>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1
msgid ":obj:`type <qiskit.pulse.Snapshot.type>`\\"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:24:<autosummary>:1 of
#: qiskit.pulse.Snapshot.type:1 qiskit.pulse.commands.snapshot.Snapshot.type:1
msgid "Type of snapshot."
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ""
":obj:`__call__ <qiskit.pulse.Snapshot.__call__>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ""
":obj:`append <qiskit.pulse.Snapshot.append>`\\ \\(schedule\\, buffer\\, "
"name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ":obj:`ch_duration <qiskit.pulse.Snapshot.ch_duration>`\\ \\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ""
":obj:`ch_start_time <qiskit.pulse.Snapshot.ch_start_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ""
":obj:`ch_stop_time <qiskit.pulse.Snapshot.ch_stop_time>`\\ "
"\\(\\*channels\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ":obj:`draw <qiskit.pulse.Snapshot.draw>`\\ \\(dt\\[\\, style\\]\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ":obj:`flatten <qiskit.pulse.Snapshot.flatten>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ""
":obj:`insert <qiskit.pulse.Snapshot.insert>`\\ \\(start\\_time\\, "
"schedule\\, buffer\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ":obj:`shift <qiskit.pulse.Snapshot.shift>`\\ \\(time\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ":obj:`to_instruction <qiskit.pulse.Snapshot.to_instruction>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.pulse.Snapshot.rst:40:<autosummary>:1
msgid ":obj:`union <qiskit.pulse.Snapshot.union>`\\ \\(\\*schedules\\, name\\)"
msgstr ""

#: ../../api/qiskit.pulse.channels.rst:2
msgid "qiskit.pulse.channels package"
msgstr ""

#: of qiskit.pulse.channels:1
msgid "Device-related classes for pulse."
msgstr ""

#: ../../api/qiskit.pulse.channels.channels.rst:2
msgid "qiskit.pulse.channels.channels module"
msgstr ""

#: of qiskit.pulse.channels.channels:1
msgid "Channels."
msgstr ""

#: of qiskit.pulse.channels.channels.Channel:1
msgid "Base class of channels."
msgstr ""

#: of qiskit.pulse.channels.channels.SnapshotChannel:1
msgid "Snapshot channel."
msgstr ""

#: ../../api/qiskit.pulse.channels.device_specification.rst:2
msgid "qiskit.pulse.channels.device\\_specification module"
msgstr ""

#: of qiskit.pulse.channels.device_specification:1
msgid "Specification of the device."
msgstr ""

#: ../../api/qiskit.pulse.channels.pulse_channels.rst:2
msgid "qiskit.pulse.channels.pulse\\_channels module"
msgstr ""

#: of qiskit.pulse.channels.pulse_channels:1
msgid "Channels support signal output."
msgstr ""

#: of qiskit.pulse.channels.pulse_channels.PulseChannel:1
msgid "Base class of Channel supporting pulse output."
msgstr ""

#: ../../api/qiskit.pulse.channels.qubit.rst:2
msgid "qiskit.pulse.channels.qubit module"
msgstr ""

#: of qiskit.pulse.channels.qubit:1 qiskit.pulse.channels.qubit.Qubit:1
msgid "Physical qubit."
msgstr ""

#: of qiskit.pulse.channels.qubit.Qubit.acquire:1
msgid "Return the primary acquire channel of this qubit."
msgstr ""

#: of qiskit.pulse.channels.qubit.Qubit.controls:1
msgid "Return the control channels for this qubit."
msgstr ""

#: of qiskit.pulse.channels.qubit.Qubit.drive:1
msgid "Return the drive channel of this qubit."
msgstr ""

#: of qiskit.pulse.channels.qubit.Qubit.index:1
msgid "Return the index of this qubit."
msgstr ""

#: of qiskit.pulse.channels.qubit.Qubit.measure:1
msgid "Return the measure channel of this qubit."
msgstr ""

#: ../../api/qiskit.pulse.cmd_def.rst:2
msgid "qiskit.pulse.cmd\\_def module"
msgstr ""

#: of qiskit.pulse.cmd_def:1
msgid "Command definition module. Relates circuit gates to pulse commands."
msgstr ""

#: ../../api/qiskit.pulse.commands.rst:2
msgid "qiskit.pulse.commands package"
msgstr ""

#: of qiskit.pulse.commands:1
msgid "Command classes for pulse."
msgstr ""

#: ../../api/qiskit.pulse.commands.acquire.rst:2
msgid "qiskit.pulse.commands.acquire module"
msgstr ""

#: of qiskit.pulse.commands.acquire.AcquireInstruction:1
#: qiskit.pulse.commands.frame_change.FrameChangeInstruction:1
#: qiskit.pulse.commands.persistent_value.PersistentValueInstruction:1
#: qiskit.pulse.commands.sample_pulse.PulseInstruction:1
msgid "ベースクラス: :class:`qiskit.pulse.commands.instruction.Instruction`"
msgstr ""

#: of qiskit.pulse.commands.acquire.AcquireInstruction:1
msgid "Pulse to acquire measurement result."
msgstr ""

#: of qiskit.pulse.commands.acquire.AcquireInstruction.acquires:1
msgid "Acquire channels to be acquired on."
msgstr ""

#: of qiskit.pulse.commands.acquire.AcquireInstruction.mem_slots:1
msgid "MemorySlots."
msgstr ""

#: of qiskit.pulse.commands.acquire.AcquireInstruction.reg_slots:1
msgid "RegisterSlots."
msgstr ""

#: ../../api/qiskit.pulse.commands.command.rst:2
msgid "qiskit.pulse.commands.command module"
msgstr ""

#: of qiskit.pulse.commands.command:1
msgid "Base command."
msgstr ""

#: of qiskit.pulse.commands.command.Command:1
msgid "Super abstract class of command group."
msgstr ""

#: ../../api/qiskit.pulse.commands.frame_change.rst:2
msgid "qiskit.pulse.commands.frame\\_change module"
msgstr ""

#: of qiskit.pulse.commands.frame_change.FrameChangeInstruction:1
msgid "Instruction to change frame of an `PulseChannel`."
msgstr ""

#: ../../api/qiskit.pulse.commands.instruction.rst:2
msgid "qiskit.pulse.commands.instruction module"
msgstr ""

#: of qiskit.pulse.commands.instruction:1
msgid "Instruction = Leaf node of schedule."
msgstr ""

#: ../../api/qiskit.pulse.commands.meas_opts.rst:2
msgid "qiskit.pulse.commands.meas\\_opts module"
msgstr ""

#: of qiskit.pulse.commands.meas_opts:1
#: qiskit.pulse.commands.meas_opts.MeasOpts:1
msgid "Measurement options."
msgstr ""

#: ../../api/qiskit.pulse.commands.persistent_value.rst:2
msgid "qiskit.pulse.commands.persistent\\_value module"
msgstr ""

#: of qiskit.pulse.commands.persistent_value.PersistentValueInstruction:1
msgid "Instruction to keep persistent value."
msgstr ""

#: ../../api/qiskit.pulse.commands.pulse_decorators.rst:2
msgid "qiskit.pulse.commands.pulse\\_decorators module"
msgstr ""

#: of qiskit.pulse.commands.pulse_decorators:1
msgid "Pulse decorators."
msgstr ""

#: of qiskit.pulse.commands.pulse_decorators.functional_pulse:1
#: qiskit.pulse.functional_pulse:1
msgid ""
"A decorator for generating SamplePulse from python callable. :param func:"
" A function describing pulse envelope. :type func: callable"
msgstr ""

#: of qiskit.pulse.commands.pulse_decorators.functional_pulse:5
#: qiskit.pulse.functional_pulse:5
msgid "when invalid function is specified."
msgstr ""

#: ../../api/qiskit.pulse.commands.sample_pulse.rst:2
msgid "qiskit.pulse.commands.sample\\_pulse module"
msgstr ""

#: of qiskit.pulse.commands.sample_pulse:1
msgid "Sample pulse."
msgstr ""

#: of qiskit.pulse.commands.sample_pulse.PulseInstruction:1
msgid "Instruction to drive a pulse to an `PulseChannel`."
msgstr ""

#: ../../api/qiskit.pulse.commands.snapshot.rst:2
msgid "qiskit.pulse.commands.snapshot module"
msgstr ""

#: ../../api/qiskit.pulse.configuration.rst:2
msgid "qiskit.pulse.configuration module"
msgstr ""

#: of qiskit.pulse.configuration:1
msgid "Configurations for pulse experiments."
msgstr ""

#: ../../api/qiskit.pulse.exceptions.rst:2
msgid "qiskit.pulse.exceptions module"
msgstr ""

#: of qiskit.pulse.exceptions:1
msgid "Exception for errors raised by pulse module."
msgstr ""

#: ../../api/qiskit.pulse.functional_pulse.rst:2
msgid "functional_pulse"
msgstr ""

#: ../../api/qiskit.pulse.interfaces.rst:2
msgid "qiskit.pulse.interfaces module"
msgstr ""

#: of qiskit.pulse.interfaces:1
msgid ""
"ScheduleComponent, a common interface for components of schedule "
"(Instruction and Schedule)."
msgstr ""

#: ../../api/qiskit.pulse.ops.rst:2
msgid "qiskit.pulse.ops module"
msgstr ""

#: of qiskit.pulse.ops:1
msgid "Schedule operations."
msgstr ""

#: of qiskit.pulse.ops.append:5
msgid "Return a new schedule with by appending `child` to `parent` at"
msgstr ""

#: of qiskit.pulse.ops.append:2
msgid ""
"the last time of the `parent` schedule's channels over the intersection "
"of the parent and child schedule's channels."
msgstr ""

#: of qiskit.pulse.ops.append:5
msgid ""
"$t = \\textrm{max}({x.stop\\_time |x \\in parent.channels \\cap "
"child.channels})$"
msgstr ""

#: of qiskit.pulse.ops.append:7
msgid "The schedule to be inserted into"
msgstr ""

#: of qiskit.pulse.ops.append:8
msgid "The schedule to insert"
msgstr ""

#: of qiskit.pulse.ops.flatten:1
msgid "Create a flattened schedule."
msgstr ""

#: of qiskit.pulse.ops.flatten:3
msgid "Schedules to flatten"
msgstr ""

#: of qiskit.pulse.ops.flatten:4 qiskit.pulse.ops.union:4
msgid "Name of the new schedule. Defaults to first element of `schedules`"
msgstr ""

#: of qiskit.pulse.ops.insert:1
msgid ""
"Return a new schedule with the `child` schedule inserted into the "
"`parent` at `start_time`."
msgstr ""

#: of qiskit.pulse.ops.insert:3
msgid "Schedule to be inserted into"
msgstr ""

#: of qiskit.pulse.ops.insert:4
msgid "Time to be inserted defined with respect to `parent`"
msgstr ""

#: of qiskit.pulse.ops.insert:5
msgid "Schedule to insert"
msgstr ""

#: of qiskit.pulse.ops.shift:1
msgid "Return schedule shifted by `time`."
msgstr ""

#: of qiskit.pulse.ops.shift:3
msgid "The schedule to shift"
msgstr ""

#: of qiskit.pulse.ops.shift:4
msgid "The time to shift by"
msgstr ""

#: of qiskit.pulse.ops.shift:5
msgid "Name of shifted schedule. Defaults to name of `schedule`"
msgstr ""

#: of qiskit.pulse.ops.union:1
msgid "Create a union (and also shift if desired) of all input `Schedule`s."
msgstr ""

#: of qiskit.pulse.ops.union:3
msgid "Schedules to take the union of"
msgstr ""

#: ../../api/qiskit.pulse.pulse_lib.rst:2
msgid "qiskit.pulse.pulse\\_lib package"
msgstr ""

#: of qiskit.pulse.pulse_lib:1
msgid "Module for builtin pulse_lib."
msgstr ""

#: ../../api/qiskit.pulse.pulse_lib.continuous.rst:2
msgid "qiskit.pulse.pulse\\_lib.continuous module"
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous:1
msgid "Module for builtin continuous pulse functions."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.constant:1
msgid "Continuous constant pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.constant:3
#: qiskit.pulse.pulse_lib.continuous.drag:8
#: qiskit.pulse.pulse_lib.continuous.gaussian:5
#: qiskit.pulse.pulse_lib.continuous.gaussian_deriv:3
#: qiskit.pulse.pulse_lib.continuous.gaussian_square:3
#: qiskit.pulse.pulse_lib.continuous.zero:3
msgid "Times to output pulse for."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.constant:4
#: qiskit.pulse.pulse_lib.discrete.constant:6
msgid "Complex pulse amplitude."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.cos:1
#: qiskit.pulse.pulse_lib.continuous.sin:1
msgid "Continuous cosine wave."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.cos:3
#: qiskit.pulse.pulse_lib.continuous.sawtooth:3
#: qiskit.pulse.pulse_lib.continuous.sin:3
#: qiskit.pulse.pulse_lib.continuous.square:3
#: qiskit.pulse.pulse_lib.continuous.triangle:3
msgid "Times to output wave for."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.cos:4
#: qiskit.pulse.pulse_lib.continuous.gaussian_square:4
#: qiskit.pulse.pulse_lib.continuous.sin:4
#: qiskit.pulse.pulse_lib.discrete.cos:6
#: qiskit.pulse.pulse_lib.discrete.gaussian_square:9
#: qiskit.pulse.pulse_lib.discrete.sin:4
msgid "Pulse amplitude."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.cos:5
#: qiskit.pulse.pulse_lib.continuous.sin:5
msgid "Pulse frequency, units of 1/dt."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.cos:6
#: qiskit.pulse.pulse_lib.continuous.sawtooth:6
#: qiskit.pulse.pulse_lib.continuous.sin:6
#: qiskit.pulse.pulse_lib.continuous.square:6
#: qiskit.pulse.pulse_lib.continuous.triangle:6
#: qiskit.pulse.pulse_lib.discrete.cos:8
#: qiskit.pulse.pulse_lib.discrete.sawtooth:6
#: qiskit.pulse.pulse_lib.discrete.sin:6
#: qiskit.pulse.pulse_lib.discrete.square:8
#: qiskit.pulse.pulse_lib.discrete.triangle:8
msgid "Pulse phase."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:1
msgid ""
"Continuous Y-only correction DRAG pulse for standard nonlinear oscillator"
" (SNO) [1]."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:6
#: qiskit.pulse.pulse_lib.discrete.drag:10
msgid "[1] Gambetta, J. M., Motzoi, F., Merkel, S. T. & Wilhelm, F. K."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:4
#: qiskit.pulse.pulse_lib.discrete.drag:8
msgid ""
"Analytic control methods for high-fidelity unitary operations in a weakly"
" nonlinear oscillator. Phys. Rev. A 83, 012308 (2011)."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:9
#: qiskit.pulse.pulse_lib.continuous.gaussian_deriv:4
#: qiskit.pulse.pulse_lib.discrete.drag:13
#: qiskit.pulse.pulse_lib.discrete.gaussian_deriv:6
msgid "Pulse amplitude at `center`."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:10
#: qiskit.pulse.pulse_lib.continuous.gaussian:10
#: qiskit.pulse.pulse_lib.continuous.gaussian_deriv:5
msgid "Center (mean) of pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:11
#: qiskit.pulse.pulse_lib.continuous.gaussian:11
#: qiskit.pulse.pulse_lib.continuous.gaussian_deriv:6
#: qiskit.pulse.pulse_lib.discrete.drag:14
#: qiskit.pulse.pulse_lib.discrete.gaussian:11
#: qiskit.pulse.pulse_lib.discrete.gaussian_deriv:7
msgid "Width (standard deviation) of pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:12
#: qiskit.pulse.pulse_lib.discrete.drag:15
msgid ""
"Y correction amplitude. For the SNO this is "
"$\\beta=-\\frac{\\lambda_1^2}{4\\Delta_2}$. Where $\\lambds_1$ is the "
"relative coupling strength between the first excited and second excited "
"states and $\\Delta_2$ is the detuning between the resepective excited "
"states."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:15
#: qiskit.pulse.pulse_lib.continuous.gaussian:12
msgid ""
"Subtract baseline to gaussian pulses to make sure $\\Omega_g(center \\pm "
"zeroed_width/2)=0$ is satisfied. This is used to avoid large "
"discontinuities at the start of a gaussian pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.drag:18
#: qiskit.pulse.pulse_lib.continuous.gaussian:15
msgid ""
"If `zeroed_width` is not `None` and `rescale_amp=True` the pulse will be "
"rescaled so that $\\Omega_g(center)-\\Omega_g(center\\pm "
"zeroed_width/2)=amp$."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian:1
msgid "Continuous unnormalized gaussian pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian:3
#: qiskit.pulse.pulse_lib.discrete.gaussian:7
msgid ""
"Integrated area under curve is $\\Omega_g(amp, sigma) = amp \\times "
"np.sqrt(2\\pi \\sigma^2)$"
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian:6
msgid ""
"Pulse amplitude at `center`. If `zeroed_width` is set pulse amplitude at "
"center will be $amp-\\Omega_g(center\\pm zeroed_width/2)$ unless "
"`rescale_amp` is set, in which case all samples will be rescaled such "
"that the center amplitude will be `amp`."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian:17
msgid ""
"Return centered and standard deviation normalized pulse location. $x"
"=(times-center)/sigma."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian_deriv:1
msgid "Continuous unnormalized gaussian derivative pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian_deriv:7
msgid "Return gaussian with which derivative was taken with."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian_square:1
msgid "Continuous gaussian square pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian_square:5
msgid "Center of the square pulse component."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian_square:6
msgid "Width of the square pulse component."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian_square:7
#: qiskit.pulse.pulse_lib.discrete.gaussian_square:10
msgid "Width (standard deviation) of gaussian rise/fall portion of the pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.gaussian_square:8
msgid ""
"Subtract baseline of gaussian square pulse to enforce "
"$\\OmegaSquare(center \\pm zeroed_width/2)=0$."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.sawtooth:1
msgid "Continuous sawtooth wave."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.sawtooth:4
#: qiskit.pulse.pulse_lib.continuous.square:4
#: qiskit.pulse.pulse_lib.continuous.triangle:4
#: qiskit.pulse.pulse_lib.discrete.sawtooth:4
#: qiskit.pulse.pulse_lib.discrete.square:6
#: qiskit.pulse.pulse_lib.discrete.triangle:6
msgid "Pulse amplitude. Wave range is [-amp, amp]."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.sawtooth:5
#: qiskit.pulse.pulse_lib.continuous.square:5
#: qiskit.pulse.pulse_lib.continuous.triangle:5
msgid "Pulse period, units of dt."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.square:1
msgid "Continuous square wave."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.triangle:1
msgid "Continuous triangle wave."
msgstr ""

#: of qiskit.pulse.pulse_lib.continuous.zero:1
msgid "Continuous zero pulse."
msgstr ""

#: ../../api/qiskit.pulse.pulse_lib.discrete.rst:2
msgid "qiskit.pulse.pulse\\_lib.discrete module"
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete:1
msgid "Module for builtin discrete pulses."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete:3
msgid "Note the sampling strategy use for all discrete pulses is `left`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.constant:1
msgid "Generates constant-sampled `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.constant:3
#: qiskit.pulse.pulse_lib.discrete.cos:3 qiskit.pulse.pulse_lib.discrete.drag:5
#: qiskit.pulse.pulse_lib.discrete.gaussian:5
#: qiskit.pulse.pulse_lib.discrete.gaussian_deriv:3
#: qiskit.pulse.pulse_lib.discrete.gaussian_square:6
#: qiskit.pulse.pulse_lib.discrete.square:3
#: qiskit.pulse.pulse_lib.discrete.triangle:3
msgid ""
"Applies `left` sampling strategy to generate discrete pulse from "
"continuous function."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.constant:5
#: qiskit.pulse.pulse_lib.discrete.cos:5
#: qiskit.pulse.pulse_lib.discrete.drag:12
#: qiskit.pulse.pulse_lib.discrete.gaussian:9
#: qiskit.pulse.pulse_lib.discrete.gaussian_deriv:5
#: qiskit.pulse.pulse_lib.discrete.gaussian_square:8
#: qiskit.pulse.pulse_lib.discrete.sawtooth:3
#: qiskit.pulse.pulse_lib.discrete.sin:3
#: qiskit.pulse.pulse_lib.discrete.square:5
#: qiskit.pulse.pulse_lib.discrete.triangle:5
#: qiskit.pulse.pulse_lib.discrete.zero:3
msgid "Duration of pulse. Must be greater than zero."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.constant:7
#: qiskit.pulse.pulse_lib.discrete.cos:9
#: qiskit.pulse.pulse_lib.discrete.drag:18
#: qiskit.pulse.pulse_lib.discrete.gaussian:12
#: qiskit.pulse.pulse_lib.discrete.gaussian_deriv:8
#: qiskit.pulse.pulse_lib.discrete.gaussian_square:13
#: qiskit.pulse.pulse_lib.discrete.sawtooth:7
#: qiskit.pulse.pulse_lib.discrete.sin:7
#: qiskit.pulse.pulse_lib.discrete.square:9
#: qiskit.pulse.pulse_lib.discrete.triangle:9
#: qiskit.pulse.pulse_lib.discrete.zero:4
msgid "Name of pulse."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.cos:1
msgid "Generates cosine wave `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.cos:7
#: qiskit.pulse.pulse_lib.discrete.sin:5
msgid "Pulse frequency, units of 1/dt. If `None` defaults to single cycle."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.drag:1
msgid ""
"Generates Y-only correction DRAG `SamplePulse` for standard nonlinear "
"oscillator (SNO) [1]."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.drag:3
#: qiskit.pulse.pulse_lib.discrete.gaussian:3
msgid ""
"Centered at `duration/2` and zeroed at `t=-1` to prevent large initial "
"discontinuity."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.gaussian:1
msgid "Generates unnormalized gaussian `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.gaussian:10
msgid "Pulse amplitude at `duration/2`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.gaussian_deriv:1
msgid "Generates unnormalized gaussian derivative `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.gaussian_square:1
msgid "Generates gaussian square `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.gaussian_square:3
msgid ""
"Centered at `duration/2` and zeroed at `t=-1` and `t=duration+1` to "
"prevent large initial/final discontinuities."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.gaussian_square:11
msgid ""
"Number of samples over which pulse rise and fall happen. Width of square "
"portion of pulse will be `duration-2*risefall`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.sawtooth:1
msgid "Generates sawtooth wave `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.sawtooth:5
#: qiskit.pulse.pulse_lib.discrete.square:7
#: qiskit.pulse.pulse_lib.discrete.triangle:7
msgid "Pulse period, units of dt. If `None` defaults to single cycle."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.sin:1
msgid "Generates sine wave `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.square:1
msgid "Generates square wave `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.triangle:1
msgid "Generates triangle wave `SamplePulse`."
msgstr ""

#: of qiskit.pulse.pulse_lib.discrete.zero:1
msgid "Generates zero-sampled `SamplePulse`."
msgstr ""

#: ../../api/qiskit.pulse.samplers.rst:2
msgid "qiskit.pulse.samplers package"
msgstr ""

#: of qiskit.pulse.samplers:1
msgid "Module for Samplers."
msgstr ""

#: ../../api/qiskit.pulse.samplers.decorators.rst:2
msgid "qiskit.pulse.samplers.decorators module"
msgstr ""

#: of qiskit.pulse.samplers.decorators:1
msgid ""
"Sampler decorator module for sampling of continuous pulses to discrete "
"pulses to be exposed to user."
msgstr ""

#: of qiskit.pulse.samplers.decorators:4
msgid ""
"Some atypical boilerplate has been added to solve the problem of "
"decorators not preserving their wrapped function signatures. Below we "
"explain the problem that samplers solve and how we implement this."
msgstr ""

#: of qiskit.pulse.samplers.decorators:11
msgid ""
"A sampler is a function that takes an continuous pulse function with "
"signature:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:9 qiskit.pulse.samplers.strategies:9
msgid "```python def f(times: np.ndarray, *args, **kwargs) -> np.ndarray:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:11 qiskit.pulse.samplers.decorators:15
#: qiskit.pulse.samplers.decorators:28 qiskit.pulse.samplers.decorators:46
#: qiskit.pulse.samplers.strategies:6 qiskit.pulse.samplers.strategies:11
msgid "..."
msgstr ""

#: of qiskit.pulse.samplers.decorators:12 qiskit.pulse.samplers.decorators:101
#: qiskit.pulse.samplers.strategies:7 qiskit.pulse.samplers.strategies:12
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:27
#: qiskit.tools.qcvv.tomography.TomographyBasis:34
#: qiskit.tools.qcvv.tomography.TomographyBasis:46
msgid "```"
msgstr ""

#: of qiskit.pulse.samplers.decorators:15
msgid "and returns a new function:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:15
msgid "def f(duration: int, *args, **kwargs) -> SamplePulse:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:17
msgid ""
"Samplers are used to build up pulse commands from continuous pulse "
"functions."
msgstr ""

#: of qiskit.pulse.samplers.decorators:19
msgid ""
"In Python the creation of a dynamic function that wraps another function "
"will cause the underlying signature and documentation of the underlying "
"function to be overwritten. In order to circumvent this issue the Python "
"standard library provides the decorator `functools.wraps` which allows "
"the programmer to expose the names and signature of the wrapped function "
"as those of the dynamic function."
msgstr ""

#: of qiskit.pulse.samplers.decorators:28
msgid "Samplers are implemented by creating a function with signature"
msgstr ""

#: of qiskit.pulse.samplers.decorators:26
msgid ""
"@sampler def left(continuous_pulse: Callable, duration: int, *args, "
"**kwargs)"
msgstr ""

#: of qiskit.pulse.samplers.decorators:30
msgid ""
"This will create a sampler function for `left`. Since it is a dynamic "
"function it would not have the docstring of `left` available too `help`. "
"This could be fixed by wrapping with `functools.wraps` in the `sampler`, "
"but this would then cause the signature to be that of the sampler "
"function which is called on the continuous pulse, below:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:34
msgid "`(continuous_pulse: Callable, duration: int, *args, **kwargs)``"
msgstr ""

#: of qiskit.pulse.samplers.decorators:35
msgid ""
"This is not correct for the sampler as the output sampled functions "
"accept only a function. For the standard sampler we get around this by "
"not using `functools.wraps` and explicitly defining our samplers such as "
"`left`, `right` and `midpoint` and calling `sampler` internally on the "
"function that implements the sampling schemes such as `left_sample`, "
"`right_sample` and `midpoint_sample` respectively. See `left` for an "
"example of this."
msgstr ""

#: of qiskit.pulse.samplers.decorators:42
msgid ""
"In this way our standard samplers will expose the proper help signature, "
"but a user can still create their own sampler with"
msgstr ""

#: of qiskit.pulse.samplers.decorators:44
msgid "@sampler def custom_sampler(time, *args, **kwargs):"
msgstr ""

#: of qiskit.pulse.samplers.decorators:47
msgid ""
"However, in this case it will be missing documentation of the underlying "
"sampling methods. We believe that the definition of custom samplers will "
"be rather infrequent."
msgstr ""

#: of qiskit.pulse.samplers.decorators:50
msgid ""
"However, users will frequently apply sampler instances too continuous "
"pulses. Therefore, a different approach was required for sampled "
"continuous functions (the output of an continuous pulse function "
"decorated by a sampler instance)."
msgstr ""

#: of qiskit.pulse.samplers.decorators:54
msgid ""
"A sampler instance is a decorator that may be used to wrap continuous "
"pulse functions such as linear below: ```python"
msgstr ""

#: of qiskit.pulse.samplers.decorators:57
msgid "@left def linear(times: np.ndarray, m: float, b: float) -> np.ndarray:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:59
msgid "```Linear test function Args:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:61
msgid "times: Input times. m: Slope. b: Intercept"
msgstr ""

#: of qiskit.pulse.samplers.decorators:65 qiskit.pulse.samplers.decorators:100
msgid "np.ndarray"
msgstr ""

#: of qiskit.pulse.samplers.decorators:66
msgid "``` return m*times+b"
msgstr ""

#: of qiskit.pulse.samplers.decorators:68
msgid ""
"``` Which after decoration may be called with a duration rather than an "
"array of times"
msgstr ""

#: of qiskit.pulse.samplers.decorators:70
msgid "```python duration = 10 pulse_command = linear(10, 0.1, 0.1) ```"
msgstr ""

#: of qiskit.pulse.samplers.decorators:100
msgid "If one calls help on `linear` they will find"
msgstr ""

#: of qiskit.pulse.samplers.decorators:75
msgid ""
"``` linear(duration:int, *args, **kwargs) -> numpy.ndarray Discretized "
"continuous pulse function: `linear` using sampler: `_left`."
msgstr ""

#: of qiskit.pulse.samplers.decorators:80
msgid ""
"The first argument (time) of the continuous pulse function has been "
"replaced with a discretized `duration` of type (int)."
msgstr ""

#: of qiskit.pulse.samplers.decorators:84
msgid "duration (int) *args: Remaining arguments of continuous pulse function."
msgstr ""

#: of qiskit.pulse.samplers.decorators:86 qiskit.pulse.samplers.decorators:88
msgid "See continuous pulse function documentation below."
msgstr ""

#: of qiskit.pulse.samplers.decorators:88
msgid "**kwargs: Remaining kwargs of continuous pulse function."
msgstr ""

#: of qiskit.pulse.samplers.decorators:90
msgid "Sampled continuous function:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:92
msgid ""
"function linear in module test.python.pulse.test_samplers "
"linear(x:numpy.ndarray, m:float, b:float) -> numpy.ndarray"
msgstr ""

#: of qiskit.pulse.samplers.decorators:94
msgid "Linear test function Args:"
msgstr ""

#: of qiskit.pulse.samplers.decorators:96
msgid "x: Input times. m: Slope. b: Intercept"
msgstr ""

#: of qiskit.pulse.samplers.decorators:102
msgid ""
"This is partly because `functools.wraps` has been used on the underlying "
"function. This in itself is not sufficient as the signature of the "
"sampled function has `duration`, whereas the signature of the continuous "
"function is `time`."
msgstr ""

#: of qiskit.pulse.samplers.decorators:106
msgid ""
"This is acheived by removing `__wrapped__` set by `functools.wraps` in "
"order to preserve the correct signature and also applying "
"`_update_annotations` and `_update_docstring` to the generated function "
"which corrects the function annotations and adds an informative docstring"
" respectively."
msgstr ""

#: of qiskit.pulse.samplers.decorators:111
msgid ""
"The user therefore has access to the correct sampled function docstring "
"in its entirety, while still seeing the signature for the continuous "
"pulse function and all of its arguments."
msgstr ""

#: of qiskit.pulse.samplers.decorators.left:1
msgid "Left sampling strategy decorator."
msgstr ""

#: of qiskit.pulse.samplers.decorators.left:3
#: qiskit.pulse.samplers.decorators.midpoint:3
#: qiskit.pulse.samplers.decorators.right:3
msgid "See `pulse.samplers.sampler` for more information."
msgstr ""

#: of qiskit.pulse.samplers.decorators.left:6
#: qiskit.pulse.samplers.decorators.midpoint:6
#: qiskit.pulse.samplers.decorators.right:6
msgid "For `duration`, return:"
msgstr ""

#: of qiskit.pulse.samplers.decorators.left:6
msgid ""
"$$\\{f(t) \\in \\mathbb{C} | t \\in \\mathbb{Z} \\wedge  "
"0<=t<\\texttt{duration}\\}$$"
msgstr ""

#: of qiskit.pulse.samplers.decorators.left:8
#: qiskit.pulse.samplers.decorators.midpoint:8
#: qiskit.pulse.samplers.decorators.right:8
msgid "To sample."
msgstr ""

#: of qiskit.pulse.samplers.decorators.midpoint:1
msgid "Midpoint sampling strategy decorator."
msgstr ""

#: of qiskit.pulse.samplers.decorators.midpoint:6
msgid ""
"$$\\{f(t+0.5) \\in \\mathbb{C} | t \\in \\mathbb{Z} \\wedge  "
"0<=t<\\texttt{duration}\\}$$"
msgstr ""

#: of qiskit.pulse.samplers.decorators.right:1
msgid "Right sampling strategy decorator."
msgstr ""

#: of qiskit.pulse.samplers.decorators.right:6
msgid ""
"$$\\{f(t) \\in \\mathbb{C} | t \\in \\mathbb{Z} \\wedge  "
"0<t<=\\texttt{duration}\\}$$"
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:1
msgid "Sampler decorator base method."
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:3
msgid ""
"Samplers are used for converting an continuous function to a discretized "
"pulse."
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:5
msgid "They operate on a function with the signature:"
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:6
msgid "`def f(times: np.ndarray, *args, **kwargs) -> np.ndarray`"
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:7
msgid ""
"Where `times` is a numpy array of floats with length n_times and the "
"output array is a complex numpy array with length n_times. The output of "
"the decorator is an instance of `FunctionalPulse` with signature:"
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:10
msgid "`def g(duration: int, *args, **kwargs) -> SamplePulse`"
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:12
msgid ""
"Note if your continuous pulse function outputs a `complex` scalar rather "
"than a `np.ndarray`, you should first vectorize it before applying a "
"sampler."
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:16
msgid "This class implements the sampler boilerplate for the sampler."
msgstr ""

#: of qiskit.pulse.samplers.decorators.sampler:18
msgid "A sampler function to be decorated."
msgstr ""

#: ../../api/qiskit.pulse.samplers.strategies.rst:2
msgid "qiskit.pulse.samplers.strategies module"
msgstr ""

#: of qiskit.pulse.samplers.strategies:1
msgid "Sampler strategy module for sampler functions."
msgstr ""

#: of qiskit.pulse.samplers.strategies:6
msgid "Sampler functions have signature."
msgstr ""

#: of qiskit.pulse.samplers.strategies:4
msgid ""
"```python def sampler_function(continuous_pulse: Callable, duration: int,"
" *args, **kwargs) -> np.ndarray:"
msgstr ""

#: of qiskit.pulse.samplers.strategies:11
msgid "where the supplied `continuous_pulse` is a function with signature:"
msgstr ""

#: of qiskit.pulse.samplers.strategies:13
msgid ""
"The sampler will call the `continuous_pulse` function with a set of times"
" it will decide according to the sampling strategy it implments along "
"with the passed `args` and `kwargs`."
msgstr ""

#: of qiskit.pulse.samplers.strategies.left_sample:1
msgid ""
"Left sample a continuous function. :param continuous_pulse: Continuous "
"pulse function to sample. :param duration: Duration to sample for. :param"
" \\*args: Continuous pulse function args. :param \\*\\*kwargs: Continuous"
" pulse function kwargs."
msgstr ""

#: of qiskit.pulse.samplers.strategies.midpoint_sample:1
#: qiskit.pulse.samplers.strategies.right_sample:1
msgid ""
"Sampling strategy for decorator. :param continuous_pulse: Continuous "
"pulse function to sample. :param duration: Duration to sample for. :param"
" \\*args: Continuous pulse function args. :param \\*\\*kwargs: Continuous"
" pulse function kwargs."
msgstr ""

#: ../../api/qiskit.pulse.timeslots.rst:2
msgid "qiskit.pulse.timeslots module"
msgstr ""

#: of qiskit.pulse.timeslots:1
msgid "Timeslots for channels."
msgstr ""

#: of qiskit.pulse.timeslots.Interval:1
msgid "Time interval."
msgstr ""

#: of qiskit.pulse.timeslots.Interval.begin:1
msgid "Begin time of this interval."
msgstr ""

#: of qiskit.pulse.timeslots.Interval.duration:1
msgid "Duration of this interval."
msgstr ""

#: of qiskit.pulse.timeslots.Interval.end:1
msgid "End time of this interval."
msgstr ""

#: of qiskit.pulse.timeslots.Interval.has_overlap:1
msgid "Check if self has overlap with `interval`."
msgstr ""

#: of qiskit.pulse.timeslots.Interval.has_overlap:3
msgid "interval to be examined"
msgstr ""

#: of qiskit.pulse.timeslots.Interval.has_overlap:5
msgid "True if self has overlap with `interval` otherwise False"
msgstr ""

#: of qiskit.pulse.timeslots.Interval.shift:1
msgid "Return a new interval shifted by `time` from self"
msgstr ""

#: of qiskit.pulse.timeslots.Interval.shift:3
#: qiskit.pulse.timeslots.Timeslot.shift:3
msgid "time to be shifted"
msgstr ""

#: of qiskit.pulse.timeslots.Interval.shift:5
msgid "interval shifted by `time`"
msgstr ""

#: of qiskit.pulse.timeslots.Timeslot:1
msgid "Named tuple of (Interval, Channel)."
msgstr ""

#: of qiskit.pulse.timeslots.Timeslot.channel:1
msgid "Channel of this time slot."
msgstr ""

#: of qiskit.pulse.timeslots.Timeslot.interval:1
msgid "Interval of this time slot."
msgstr ""

#: of qiskit.pulse.timeslots.Timeslot.shift:1
msgid "Return a new Timeslot shifted by `time`."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection:1
msgid "Collection of `Timeslot`s."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.ch_duration:1
#: qiskit.pulse.timeslots.TimeslotCollection.duration:1
msgid "Return maximum duration of timeslots over all channels."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.ch_duration:3
msgid "Channels over which to obtain the duration."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.ch_start_time:1
#: qiskit.pulse.timeslots.TimeslotCollection.start_time:1
msgid "Return earliest start time in this collection."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.ch_start_time:3
msgid "Channels over which to obtain start_time."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.ch_stop_time:1
#: qiskit.pulse.timeslots.TimeslotCollection.stop_time:1
msgid "Return maximum time of timeslots over all channels."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.ch_stop_time:3
msgid "Channels over which to obtain stop time."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.channels:1
msgid "Channels within the timeslot collection."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.is_mergeable_with:1
msgid "Return if self is mergeable with `timeslots`."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.is_mergeable_with:3
msgid "TimeslotCollection to be checked"
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.merged:1
msgid "Return a new TimeslotCollection merged with a specified `timeslots`"
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.merged:3
msgid "TimeslotCollection to be merged"
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.shift:1
msgid "Return a new TimeslotCollection shifted by `time`."
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.shift:3
msgid "time to be shifted by"
msgstr ""

#: of qiskit.pulse.timeslots.TimeslotCollection.timeslots:1
msgid "`Timeslot`s in collection."
msgstr ""

#: ../../api/qiskit.qasm.rst:2
msgid "qiskit.qasm package"
msgstr ""

#: of qiskit.qasm:1
msgid "Tools for QASM."
msgstr ""

#: of qiskit.qasm:3
msgid ""
"Use Unrollers in qiskit.unroll to convert a QASM specification to a "
"qiskit circuit."
msgstr ""

#: ../../api/qiskit.qasm.Qasm.rst:2
msgid "Qasm"
msgstr ""

#: of qiskit.qasm.Qasm:1
msgid "OPENQASM circuit object."
msgstr ""

#: ../../api/qiskit.qasm.Qasm.rst:16:<autosummary>:1
msgid ":obj:`get_filename <qiskit.qasm.Qasm.get_filename>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qasm.Qasm.rst:16:<autosummary>:1
msgid ":obj:`get_tokens <qiskit.qasm.Qasm.get_tokens>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qasm.Qasm.rst:16:<autosummary>:1 of
#: qiskit.qasm.Qasm.get_tokens:1 qiskit.qasm.qasmparser.QasmParser.get_tokens:1
msgid "Returns a generator of the tokens."
msgstr ""

#: ../../api/qiskit.qasm.Qasm.rst:16:<autosummary>:1
msgid ":obj:`parse <qiskit.qasm.Qasm.parse>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qasm.QasmError.rst:2
msgid "QasmError"
msgstr ""

#: of qiskit.qasm.QasmError:1 qiskit.qasm.exceptions.QasmError:1
msgid "Base class for errors raised while parsing OPENQASM."
msgstr ""

#: ../../api/qiskit.qasm.exceptions.rst:2
msgid "qiskit.qasm.exceptions module"
msgstr ""

#: of qiskit.qasm.exceptions:1
msgid "Exception for errors raised while parsing OPENQASM."
msgstr ""

#: ../../api/qiskit.qasm.node.rst:2
msgid "qiskit.qasm.node package"
msgstr ""

#: of qiskit.qasm.node:1
msgid "QASM nodes."
msgstr ""

#: ../../api/qiskit.qasm.node.barrier.rst:2
msgid "qiskit.qasm.node.barrier module"
msgstr ""

#: of qiskit.qasm.node.barrier:1 qiskit.qasm.node.barrier.Barrier:1
msgid "Node for an OPENQASM barrier statement."
msgstr ""

#: of qiskit.qasm.node.barrier.Barrier:1 qiskit.qasm.node.binaryop.BinaryOp:1
#: qiskit.qasm.node.binaryoperator.BinaryOperator:1
#: qiskit.qasm.node.cnot.Cnot:1 qiskit.qasm.node.creg.Creg:1
#: qiskit.qasm.node.customunitary.CustomUnitary:1
#: qiskit.qasm.node.expressionlist.ExpressionList:1
#: qiskit.qasm.node.external.External:1 qiskit.qasm.node.format.Format:1
#: qiskit.qasm.node.gate.Gate:1 qiskit.qasm.node.gatebody.GateBody:1
#: qiskit.qasm.node.id.Id:1 qiskit.qasm.node.idlist.IdList:1
#: qiskit.qasm.node.if_.If:1 qiskit.qasm.node.indexedid.IndexedId:1
#: qiskit.qasm.node.intnode.Int:1 qiskit.qasm.node.measure.Measure:1
#: qiskit.qasm.node.opaque.Opaque:1 qiskit.qasm.node.prefix.Prefix:1
#: qiskit.qasm.node.primarylist.PrimaryList:1
#: qiskit.qasm.node.program.Program:1 qiskit.qasm.node.qreg.Qreg:1
#: qiskit.qasm.node.real.Real:1 qiskit.qasm.node.reset.Reset:1
#: qiskit.qasm.node.unaryoperator.UnaryOperator:1
#: qiskit.qasm.node.universalunitary.UniversalUnitary:1
msgid "ベースクラス: :class:`qiskit.qasm.node.node.Node`"
msgstr ""

#: of qiskit.qasm.node.barrier.Barrier:3
msgid "children[0] is a primarylist node."
msgstr ""

#: of qiskit.qasm.node.barrier.Barrier.qasm:1
#: qiskit.qasm.node.binaryop.BinaryOp.qasm:1 qiskit.qasm.node.cnot.Cnot.qasm:1
#: qiskit.qasm.node.creg.Creg.qasm:1
#: qiskit.qasm.node.customunitary.CustomUnitary.qasm:1
#: qiskit.qasm.node.expressionlist.ExpressionList.qasm:1
#: qiskit.qasm.node.external.External.qasm:1 qiskit.qasm.node.gate.Gate.qasm:1
#: qiskit.qasm.node.gatebody.GateBody.qasm:1 qiskit.qasm.node.id.Id.qasm:1
#: qiskit.qasm.node.idlist.IdList.qasm:1 qiskit.qasm.node.if_.If.qasm:1
#: qiskit.qasm.node.indexedid.IndexedId.qasm:1
#: qiskit.qasm.node.intnode.Int.qasm:1 qiskit.qasm.node.measure.Measure.qasm:1
#: qiskit.qasm.node.opaque.Opaque.qasm:1 qiskit.qasm.node.prefix.Prefix.qasm:1
#: qiskit.qasm.node.primarylist.PrimaryList.qasm:1
#: qiskit.qasm.node.program.Program.qasm:1 qiskit.qasm.node.qreg.Qreg.qasm:1
#: qiskit.qasm.node.real.Real.qasm:1 qiskit.qasm.node.reset.Reset.qasm:1
#: qiskit.qasm.node.universalunitary.UniversalUnitary.qasm:1
msgid "Return the corresponding OPENQASM string."
msgstr ""

#: ../../api/qiskit.qasm.node.binaryop.rst:2
msgid "qiskit.qasm.node.binaryop module"
msgstr ""

#: of qiskit.qasm.node.binaryop:1 qiskit.qasm.node.binaryop.BinaryOp:1
msgid "Node for an OPENQASM binary operation expression."
msgstr ""

#: of qiskit.qasm.node.binaryop.BinaryOp:3
msgid ""
"children[0] is the operation, as a binary operator node. children[1] is "
"the left expression. children[2] is the right expression."
msgstr ""

#: of qiskit.qasm.node.binaryop.BinaryOp.latex:1
#: qiskit.qasm.node.external.External.latex:1
#: qiskit.qasm.node.intnode.Int.latex:1 qiskit.qasm.node.prefix.Prefix.latex:1
#: qiskit.qasm.node.real.Real.latex:1
msgid "Return the corresponding math mode latex string."
msgstr ""

#: of qiskit.qasm.node.binaryop.BinaryOp.real:1
#: qiskit.qasm.node.external.External.real:1 qiskit.qasm.node.id.Id.real:1
#: qiskit.qasm.node.intnode.Int.real:1 qiskit.qasm.node.prefix.Prefix.real:1
#: qiskit.qasm.node.real.Real.real:1
msgid "Return the correspond floating point number."
msgstr ""

#: of qiskit.qasm.node.binaryop.BinaryOp.sym:1 qiskit.qasm.node.id.Id.sym:1
#: qiskit.qasm.node.intnode.Int.sym:1 qiskit.qasm.node.prefix.Prefix.sym:1
#: qiskit.qasm.node.real.Real.sym:1
msgid "Return the correspond symbolic number."
msgstr ""

#: ../../api/qiskit.qasm.node.binaryoperator.rst:2
msgid "qiskit.qasm.node.binaryoperator module"
msgstr ""

#: of qiskit.qasm.node.binaryoperator:1
#: qiskit.qasm.node.binaryoperator.BinaryOperator:1
msgid "Node for an OPENQASM binary operator."
msgstr ""

#: of qiskit.qasm.node.binaryoperator.BinaryOperator:3
#: qiskit.qasm.node.intnode.Int:3 qiskit.qasm.node.real.Real:3
#: qiskit.qasm.node.unaryoperator.UnaryOperator:3
msgid "This node has no children. The data is in the value field."
msgstr ""

#: of qiskit.qasm.node.binaryoperator.BinaryOperator.operation:1
#: qiskit.qasm.node.unaryoperator.UnaryOperator.operation:1
msgid "Return the operator as a function f(left, right)."
msgstr ""

#: of qiskit.qasm.node.binaryoperator.BinaryOperator.qasm:1
msgid "Return the QASM representation."
msgstr ""

#: ../../api/qiskit.qasm.node.cnot.rst:2
msgid "qiskit.qasm.node.cnot module"
msgstr ""

#: of qiskit.qasm.node.cnot:1 qiskit.qasm.node.cnot.Cnot:1
msgid "Node for an OPENQASM CNOT statement."
msgstr ""

#: of qiskit.qasm.node.cnot.Cnot:3
msgid ""
"children[0], children[1] are id nodes if CX is inside a gate body, "
"otherwise they are primary nodes."
msgstr ""

#: ../../api/qiskit.qasm.node.creg.rst:2
msgid "qiskit.qasm.node.creg module"
msgstr ""

#: of qiskit.qasm.node.creg:1 qiskit.qasm.node.creg.Creg:1
msgid "Node for an OPENQASM creg statement."
msgstr ""

#: of qiskit.qasm.node.creg.Creg:3 qiskit.qasm.node.qreg.Qreg:3
msgid "children[0] is an indexedid node."
msgstr ""

#: of qiskit.qasm.node.creg.Creg.to_string:1
#: qiskit.qasm.node.qreg.Qreg.to_string:1
msgid "Print the node data, with indent."
msgstr ""

#: ../../api/qiskit.qasm.node.customunitary.rst:2
msgid "qiskit.qasm.node.customunitary module"
msgstr ""

#: of qiskit.qasm.node.customunitary:1
#: qiskit.qasm.node.customunitary.CustomUnitary:1
msgid "Node for an OPENQASM custom gate statement."
msgstr ""

#: of qiskit.qasm.node.customunitary.CustomUnitary:3
msgid ""
"children[0] is an id node. children[1] is an exp_list (if len==3) or "
"primary_list. children[2], if present, is a primary_list."
msgstr ""

#: of qiskit.qasm.node.customunitary.CustomUnitary:7
msgid ""
"Has properties: .id = id node .name = gate name string .arguments = None "
"or exp_list node .bitlist = primary_list node"
msgstr ""

#: ../../api/qiskit.qasm.node.expressionlist.rst:2
msgid "qiskit.qasm.node.expressionlist module"
msgstr ""

#: of qiskit.qasm.node.expressionlist:1
#: qiskit.qasm.node.expressionlist.ExpressionList:1
msgid "Node for an OPENQASM expression list."
msgstr ""

#: of qiskit.qasm.node.expressionlist.ExpressionList:3
msgid "children are expression nodes."
msgstr ""

#: of qiskit.qasm.node.expressionlist.ExpressionList.size:1
msgid "Return the number of expressions."
msgstr ""

#: ../../api/qiskit.qasm.node.external.rst:2
msgid "qiskit.qasm.node.external module"
msgstr ""

#: of qiskit.qasm.node.external:1 qiskit.qasm.node.external.External:1
msgid "Node for an OPENQASM external function."
msgstr ""

#: of qiskit.qasm.node.external.External:3
msgid ""
"children[0] is an id node with the name of the function. children[1] is "
"an expression node."
msgstr ""

#: of qiskit.qasm.node.external.External.sym:1
msgid "Return the corresponding symbolic expression."
msgstr ""

#: ../../api/qiskit.qasm.node.format.rst:2
msgid "qiskit.qasm.node.format module"
msgstr ""

#: of qiskit.qasm.node.format:1 qiskit.qasm.node.format.Format:1
msgid "Node for an OPENQASM file identifier/version statement."
msgstr ""

#: of qiskit.qasm.node.format.Format.qasm:1
msgid "Return the corresponding format string."
msgstr ""

#: of qiskit.qasm.node.format.Format.version:1
msgid "Return the version."
msgstr ""

#: ../../api/qiskit.qasm.node.gate.rst:2
msgid "qiskit.qasm.node.gate module"
msgstr ""

#: of qiskit.qasm.node.gate:1 qiskit.qasm.node.gate.Gate:1
msgid "Node for an OPENQASM gate definition."
msgstr ""

#: of qiskit.qasm.node.gate.Gate:3
msgid ""
"children[0] is an id node. If len(children) is 3, children[1] is an "
"idlist node, and children[2] is a gatebody node. Otherwise, children[1] "
"is an expressionlist node, children[2] is an idlist node, and children[3]"
" is a gatebody node."
msgstr ""

#: of qiskit.qasm.node.gate.Gate.n_args:1
#: qiskit.qasm.node.opaque.Opaque.n_args:1
msgid "Return the number of parameter expressions."
msgstr ""

#: of qiskit.qasm.node.gate.Gate.n_bits:1
#: qiskit.qasm.node.opaque.Opaque.n_bits:1
msgid "Return the number of qubit arguments."
msgstr ""

#: ../../api/qiskit.qasm.node.gatebody.rst:2
msgid "qiskit.qasm.node.gatebody module"
msgstr ""

#: of qiskit.qasm.node.gatebody:1 qiskit.qasm.node.gatebody.GateBody:1
msgid "Node for an OPENQASM custom gate body."
msgstr ""

#: of qiskit.qasm.node.gatebody.GateBody:3
msgid ""
"children is a list of gate operation nodes. These are one of barrier, "
"custom_unitary, U, or CX."
msgstr ""

#: of qiskit.qasm.node.gatebody.GateBody.calls:1
msgid "Return a list of custom gate names in this gate body."
msgstr ""

#: ../../api/qiskit.qasm.node.id.rst:2
msgid "qiskit.qasm.node.id module"
msgstr ""

#: of qiskit.qasm.node.id:1 qiskit.qasm.node.id.Id:1
msgid "Node for an OPENQASM id."
msgstr ""

#: of qiskit.qasm.node.id.Id:3
msgid ""
"The node has no children but has fields name, line, and file. There is a "
"flag is_bit that is set when XXXXX to help with scoping."
msgstr ""

#: of qiskit.qasm.node.id.Id.latex:1
msgid "Return the correspond math mode latex string."
msgstr ""

#: of qiskit.qasm.node.id.Id.to_string:1
msgid "Print the node with indent."
msgstr ""

#: ../../api/qiskit.qasm.node.idlist.rst:2
msgid "qiskit.qasm.node.idlist module"
msgstr ""

#: of qiskit.qasm.node.idlist:1 qiskit.qasm.node.idlist.IdList:1
msgid "Node for an OPENQASM idlist."
msgstr ""

#: of qiskit.qasm.node.idlist.IdList:3
msgid "children is a list of id nodes."
msgstr ""

#: of qiskit.qasm.node.idlist.IdList.size:1
msgid "Return the length of the list."
msgstr ""

#: ../../api/qiskit.qasm.node.if_.rst:2
msgid "qiskit.qasm.node.if\\_ module"
msgstr ""

#: of qiskit.qasm.node.if_:1 qiskit.qasm.node.if_.If:1
msgid "Node for an OPENQASM if statement."
msgstr ""

#: of qiskit.qasm.node.if_.If:3
msgid ""
"children[0] is an id node. children[1] is an integer node. children[2] is"
" quantum operation node, including U, CX, custom_unitary, measure, reset,"
" (and BUG: barrier, if)."
msgstr ""

#: ../../api/qiskit.qasm.node.indexedid.rst:2
msgid "qiskit.qasm.node.indexedid module"
msgstr ""

#: of qiskit.qasm.node.indexedid:1 qiskit.qasm.node.indexedid.IndexedId:1
msgid "Node for an OPENQASM indexed id."
msgstr ""

#: of qiskit.qasm.node.indexedid.IndexedId:3
msgid "children[0] is an id node. children[1] is an Int node."
msgstr ""

#: of qiskit.qasm.node.indexedid.IndexedId.to_string:1
#: qiskit.qasm.node.intnode.Int.to_string:1
#: qiskit.qasm.node.node.Node.to_string:1
#: qiskit.qasm.node.real.Real.to_string:1
msgid "Print with indent."
msgstr ""

#: ../../api/qiskit.qasm.node.intnode.rst:2
msgid "qiskit.qasm.node.intnode module"
msgstr ""

#: of qiskit.qasm.node.intnode:1 qiskit.qasm.node.intnode.Int:1
msgid "Node for an OPENQASM integer."
msgstr ""

#: ../../api/qiskit.qasm.node.measure.rst:2
msgid "qiskit.qasm.node.measure module"
msgstr ""

#: of qiskit.qasm.node.measure:1 qiskit.qasm.node.measure.Measure:1
msgid "Node for an OPENQASM measure statement."
msgstr ""

#: of qiskit.qasm.node.measure.Measure:3
msgid ""
"children[0] is a primary node (id or indexedid) children[1] is a primary "
"node (id or indexedid)"
msgstr ""

#: ../../api/qiskit.qasm.node.node.rst:2
msgid "qiskit.qasm.node.node module"
msgstr ""

#: of qiskit.qasm.node.node:1 qiskit.qasm.node.node.Node:1
msgid "Base node object for the OPENQASM syntax tree."
msgstr ""

#: of qiskit.qasm.node.node.Node.add_child:1
msgid "Add a child node."
msgstr ""

#: of qiskit.qasm.node.node.Node.is_expression:1
msgid "Return True if this is an expression node."
msgstr ""

#: ../../api/qiskit.qasm.node.nodeexception.rst:2
msgid "qiskit.qasm.node.nodeexception module"
msgstr ""

#: of qiskit.qasm.node.nodeexception:1
msgid "Exception for errors raised while interpreting nodes."
msgstr ""

#: of qiskit.qasm.node.nodeexception.NodeException:1
msgid "Base class for errors raised while interpreting nodes."
msgstr ""

#: ../../api/qiskit.qasm.node.opaque.rst:2
msgid "qiskit.qasm.node.opaque module"
msgstr ""

#: of qiskit.qasm.node.opaque:1 qiskit.qasm.node.opaque.Opaque:1
msgid "Node for an OPENQASM opaque gate declaration."
msgstr ""

#: of qiskit.qasm.node.opaque.Opaque:3
msgid ""
"children[0] is an id node. If len(children) is 3, children[1] is an "
"expressionlist node, and children[2] is an idlist node. Otherwise, "
"children[1] is an idlist node."
msgstr ""

#: ../../api/qiskit.qasm.node.prefix.rst:2
msgid "qiskit.qasm.node.prefix module"
msgstr ""

#: of qiskit.qasm.node.prefix:1 qiskit.qasm.node.prefix.Prefix:1
msgid "Node for an OPENQASM prefix expression."
msgstr ""

#: of qiskit.qasm.node.prefix.Prefix:3
msgid "children[0] is a unary operator node. children[1] is an expression node."
msgstr ""

#: ../../api/qiskit.qasm.node.primarylist.rst:2
msgid "qiskit.qasm.node.primarylist module"
msgstr ""

#: of qiskit.qasm.node.primarylist:1 qiskit.qasm.node.primarylist.PrimaryList:1
msgid "Node for an OPENQASM primarylist."
msgstr ""

#: of qiskit.qasm.node.primarylist.PrimaryList:3
msgid "children is a list of primary nodes. Primary nodes are indexedid or id."
msgstr ""

#: of qiskit.qasm.node.primarylist.PrimaryList.size:1
msgid "Return the size of the list."
msgstr ""

#: ../../api/qiskit.qasm.node.program.rst:2
msgid "qiskit.qasm.node.program module"
msgstr ""

#: of qiskit.qasm.node.program:1 qiskit.qasm.node.program.Program:1
msgid "Node for an OPENQASM program."
msgstr ""

#: of qiskit.qasm.node.program.Program:3
msgid "children is a list of nodes (statements)."
msgstr ""

#: ../../api/qiskit.qasm.node.qreg.rst:2
msgid "qiskit.qasm.node.qreg module"
msgstr ""

#: of qiskit.qasm.node.qreg:1 qiskit.qasm.node.qreg.Qreg:1
msgid "Node for an OPENQASM qreg statement."
msgstr ""

#: ../../api/qiskit.qasm.node.real.rst:2
msgid "qiskit.qasm.node.real module"
msgstr ""

#: of qiskit.qasm.node.real:1 qiskit.qasm.node.real.Real:1
msgid "Node for an OPENQASM real number."
msgstr ""

#: ../../api/qiskit.qasm.node.reset.rst:2
msgid "qiskit.qasm.node.reset module"
msgstr ""

#: of qiskit.qasm.node.reset:1 qiskit.qasm.node.reset.Reset:1
msgid "Node for an OPENQASM reset statement."
msgstr ""

#: of qiskit.qasm.node.reset.Reset:3
msgid "children[0] is a primary node (id or indexedid)"
msgstr ""

#: ../../api/qiskit.qasm.node.unaryoperator.rst:2
msgid "qiskit.qasm.node.unaryoperator module"
msgstr ""

#: of qiskit.qasm.node.unaryoperator:1
#: qiskit.qasm.node.unaryoperator.UnaryOperator:1
msgid "Node for an OPENQASM unary operator."
msgstr ""

#: of qiskit.qasm.node.unaryoperator.UnaryOperator.qasm:1
msgid "Return QASM representation."
msgstr ""

#: ../../api/qiskit.qasm.node.universalunitary.rst:2
msgid "qiskit.qasm.node.universalunitary module"
msgstr ""

#: of qiskit.qasm.node.universalunitary:1
#: qiskit.qasm.node.universalunitary.UniversalUnitary:1
msgid "Node for an OPENQASM U statement."
msgstr ""

#: of qiskit.qasm.node.universalunitary.UniversalUnitary:3
msgid ""
"children[0] is an expressionlist node. children[1] is a primary node (id "
"or indexedid)."
msgstr ""

#: ../../api/qiskit.qasm.qasmlexer.rst:2
msgid "qiskit.qasm.qasmlexer module"
msgstr ""

#: of qiskit.qasm.qasmlexer:1 qiskit.qasm.qasmlexer.QasmLexer:1
msgid "OPENQASM Lexer."
msgstr ""

#: of qiskit.qasm.qasmlexer:3 qiskit.qasm.qasmlexer.QasmLexer:3
msgid ""
"This is a wrapper around the PLY lexer to support the \"include\" "
"statement by creating a stack of lexers."
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.input:1
msgid "Set the input text data."
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.pop:1
msgid "Pop a PLY lexer off the stack."
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.push:1
msgid "Push a PLY lexer on the stack to parse filename."
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_ASSIGN:1
msgid "->"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_COMMENT:1
msgid "//.*"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_CX:1
msgid "CX"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_FORMAT:1
msgid "OPENQASM\\s+(\\d+)\\.(\\d+)"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_ID:1
msgid "[a-z][a-zA-Z0-9_]*"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_INCLUDE:1
msgid "include"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_MATCHES:1
msgid "=="
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_NNINTEGER:1
msgid "[1-9]+[0-9]*|0"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_REAL:1
msgid "(([0-9]+|([0-9]+)?\\.[0-9]+|[0-9]+\\.)[eE][+-]?[0-9]+)|(([0-9]+)?\\.[0-9]+|[0-9]+\\.)"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_STRING:1
msgid "\\\"([^\\\\\\\"]|\\\\.)*\\\""
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_U:1
msgid "U"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.t_newline:1
msgid "\\n+"
msgstr ""

#: of qiskit.qasm.qasmlexer.QasmLexer.token:1
msgid "Return the next token."
msgstr ""

#: ../../api/qiskit.qasm.qasmparser.rst:2
msgid "qiskit.qasm.qasmparser module"
msgstr ""

#: of qiskit.qasm.qasmparser:1
msgid "OpenQASM parser."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser:1
msgid "OPENQASM Parser."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.find_column:1
msgid "Compute the column."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.find_column:3
msgid "Input is the input text string. token is a token instance."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.id_tuple_list:1
msgid "Return a list of (name, index) tuples for this id node."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_barrier:1
msgid "barrier : BARRIER primary_list"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_bit_list_0:1
msgid "bit_list : id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_bit_list_1:1
msgid "bit_list : bit_list ',' id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_creg_decl:1
msgid "creg_decl : CREG indexed_id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_creg_decl_e:1
msgid "creg_decl : CREG error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_decl:4
#: qiskit.qasm.qasmparser.QasmParser.p_statement:4
msgid "decl"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_decl:3
msgid "qreg_decl ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_decl
msgid "creg_decl ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_decl
msgid "qreg_decl error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_decl
msgid "creg_decl error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_decl
msgid "gate_decl"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_exp_list_0:1
msgid "exp_list : expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_exp_list_1:1
msgid "exp_list : exp_list ',' expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_0:4
#: qiskit.qasm.qasmparser.QasmParser.p_expression_1:1
msgid "expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_0:3
msgid "expression '*' expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_0
msgid "expression '/' expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_0
msgid "expression '+' expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_0
msgid "expression '-' expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_0
msgid "expression '^' expression"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_1
msgid "'-' expression %prec negative"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_1
msgid "'+' expression %prec positive"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_expression_2:1
msgid "expression : unary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_format:1
msgid "format : FORMAT"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_format_0:1
msgid "format : FORMAT error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_body_0:1
msgid "gate_body : '{' '}'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_body_1:1
msgid "gate_body : '{' gate_op_list '}'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_decl_0:1
msgid "gate_decl : GATE id gate_scope bit_list gate_body"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_decl_1:1
msgid "gate_decl : GATE id gate_scope '(' ')' bit_list gate_body"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_decl_2:1
msgid "gate_decl : GATE id gate_scope '(' gate_id_list ')' bit_list gate_body"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_id_list_0:1
msgid "gate_id_list : id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_id_list_1:1
msgid "gate_id_list : gate_id_list ',' id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_0:1
msgid "gate_op : U '(' exp_list ')' id ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_0e1:1
msgid "gate_op : U '(' exp_list ')' error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_0e2:1
msgid "gate_op : U '(' exp_list error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_1:1
msgid "gate_op : CX id ',' id ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_1e1:1
msgid "gate_op : CX error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_1e2:1
msgid "gate_op : CX id ',' error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_2:1
msgid "gate_op : id id_list ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_2e:1
msgid "gate_op : id  id_list error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_3:1
msgid "gate_op : id '(' ')' id_list ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_4:1
msgid "gate_op : id '(' exp_list ')' id_list ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_4e0:1
msgid "gate_op : id '(' ')'  error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_4e1:1
msgid "gate_op : id '('   error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_5:1
msgid "gate_op : BARRIER id_list ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_5e:1
msgid "gate_op : BARRIER error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_list_0:1
msgid "gate_op_list : gate_op"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_op_list_1:1
msgid "gate_op_list : gate_op_list gate_op"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_gate_scope:1
msgid "gate_scope :"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_id:1
msgid "id : ID"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_id_e:1
msgid "id : error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_id_list_0:1
msgid "id_list : id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_id_list_1:1
msgid "id_list : id_list ',' id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_if:1
msgid ""
"if : IF '(' id MATCHES NNINTEGER ')' quantum_op if : IF '(' id error if :"
" IF '(' id MATCHES error if : IF '(' id MATCHES NNINTEGER error if : IF "
"error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_ignore:1
msgid "ignore : STRING"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_indexed_id:2
#: qiskit.qasm.qasmparser.QasmParser.p_primary
msgid "indexed_id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_indexed_id:1
msgid "id '[' NNINTEGER ']'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_indexed_id
msgid "id '[' NNINTEGER error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_indexed_id
msgid "id '[' error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_main:1
msgid "main : program"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_measure:1
msgid "measure : MEASURE primary ASSIGN primary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_measure_e:1
msgid "measure : MEASURE primary error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_opaque_0:1
msgid "opaque : OPAQUE id gate_scope bit_list"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_opaque_1:1
msgid "opaque : OPAQUE id gate_scope '(' ')' bit_list"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_opaque_1e:1
msgid "opaque : OPAQUE id gate_scope '(' error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_opaque_2:1
msgid "opaque : OPAQUE id gate_scope '(' gate_id_list ')' bit_list"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_primary:1
msgid "primary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_primary
msgid "id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_primary_list_0:1
msgid "primary_list : primary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_primary_list_1:1
msgid "primary_list : primary_list ',' primary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_program_0:1
msgid "program : statement"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_program_1:1
msgid "program : program statement"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_qreg_decl:1
msgid "qreg_decl : QREG indexed_id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_qreg_decl_e:1
msgid "qreg_decl : QREG error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_quantum_op:5
msgid "quantum_op"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_quantum_op:4
msgid "unitary_op"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_quantum_op
msgid "opaque"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_quantum_op
msgid "measure"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_quantum_op
msgid "barrier"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_quantum_op
msgid "reset"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_quantum_op
msgid "if"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_reset:1
msgid "reset : RESET primary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_statement:5
msgid "statement"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_statement
msgid "quantum_op ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_statement
msgid "format ';'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_statement
msgid "ignore"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_statement
msgid "quantum_op error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_statement
msgid "format error"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unary_0:1
msgid "unary : NNINTEGER"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unary_1:1
msgid "unary : REAL"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unary_2:1
msgid "unary : PI"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unary_3:1
msgid "unary : id"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unary_4:1
msgid "unary : '(' expression ')'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unary_6:1
msgid "unary : id '(' expression ')'"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unitary_op_0:1
msgid "unitary_op : U '(' exp_list ')' primary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unitary_op_1:1
msgid "unitary_op : CX primary ',' primary"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unitary_op_2:1
msgid "unitary_op : id primary_list"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unitary_op_3:1
msgid "unitary_op : id '(' ')' primary_list"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.p_unitary_op_4:1
msgid "unitary_op : id '(' exp_list ')' primary_list"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.parse:1
msgid "Parse some data."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.parse_debug:1
msgid "Set the parse_deb field."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.pop_scope:1
msgid "Return to the previous scope."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.print_tree:1
msgid "Print parsed OPENQASM."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.push_scope:1
msgid "Enter a new scope."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.run:1
msgid "Parser runner."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.run:3
msgid "To use this module stand-alone."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.update_symtab:1
msgid "Update a node in the symbol table."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.update_symtab:3
msgid ""
"Everything in the symtab must be a node with these attributes: name - the"
" string name of the object type - the string type of the object line - "
"the source line where the type was first found file - the source file "
"where the type was first found"
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_as_gate:1
msgid "Verify a user defined gate call."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_bit_list:1
msgid "Verify each qubit in a list of ids."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_declared_bit:1
msgid "Verify a qubit id against the gate prototype."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_distinct:1
msgid "Check that objects in list_of_nodes represent distinct (qu)bits."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_distinct:3
msgid ""
"list_of_nodes is a list containing nodes of type id, indexed_id, "
"primary_list, or id_list. We assume these are all the same type 'qreg' or"
" 'creg'. This method raises an exception if list_of_nodes refers to the "
"same object more than once."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_exp_list:1
msgid "Verify each expression in a list."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_reg:1
msgid "Verify a register."
msgstr ""

#: of qiskit.qasm.qasmparser.QasmParser.verify_reg_list:1
msgid "Verify a list of registers."
msgstr ""

#: ../../api/qiskit.qiskiterror.rst:2
msgid "qiskit.qiskiterror module"
msgstr ""

#: of qiskit.qiskiterror:1
msgid "Exception for errors raised by Qiskit."
msgstr ""

#: of qiskit.qiskiterror:3
msgid ""
"Note: this module will be deprecated in Terra 0.8+. Please import the "
"exceptions from the `qiskit.exceptions` module instead."
msgstr ""

#: ../../api/qiskit.qobj.rst:2
msgid "qiskit.qobj package"
msgstr ""

#: of qiskit.qobj:1
msgid "Module for the Qobj structure."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItem.rst:2
msgid "PulseLibraryItem"
msgstr ""

#: of qiskit.qobj.PulseLibraryItem:1
#: qiskit.qobj.models.pulse.PulseLibraryItem:1
msgid "Model for PulseLibraryItem."
msgstr ""

#: of qiskit.qobj.PulseLibraryItem:3
#: qiskit.qobj.models.pulse.PulseLibraryItem:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``PulseLibraryItemSchema``."
msgstr ""

#: of qiskit.qobj.PulseLibraryItem:8
#: qiskit.qobj.models.pulse.PulseLibraryItem:8
msgid "name of pulse"
msgstr ""

#: of qiskit.qobj.PulseLibraryItem:14
#: qiskit.qobj.models.pulse.PulseLibraryItem:14
msgid "list of complex values defining pulse shape"
msgstr ""

#: of qiskit.qobj.PulseLibraryItem:16
#: qiskit.qobj.models.pulse.PulseLibraryItem:16
msgid "list[complex]]"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItem.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.PulseLibraryItem.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItem.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.PulseLibraryItem.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItem.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.PulseLibraryItem.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItem.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.PulseLibraryItem.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItem.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.PulseLibraryItem.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:2
msgid "PulseLibraryItemSchema"
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema:1
#: qiskit.qobj.models.pulse.PulseLibraryItemSchema:1
msgid "Schema for PulseLibraryItem."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:17:<autosummary>:1
msgid ":obj:`TYPE_MAPPING <qiskit.qobj.PulseLibraryItemSchema.TYPE_MAPPING>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:17:<autosummary>:1
msgid ":obj:`dict_class <qiskit.qobj.PulseLibraryItemSchema.dict_class>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:17:<autosummary>:1
msgid ":obj:`opts <qiskit.qobj.PulseLibraryItemSchema.opts>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:17:<autosummary>:1
msgid ":obj:`set_class <qiskit.qobj.PulseLibraryItemSchema.set_class>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ":obj:`accessor <qiskit.qobj.PulseLibraryItemSchema.accessor>`\\ \\(func\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
"Decorator that registers a function for pulling values from an object to "
"serialize."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dump <qiskit.qobj.PulseLibraryItemSchema.dump>`\\ \\(obj\\[\\, "
"many\\, update\\_fields\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.dump:1
#: qiskit.qobj.PulseQobjInstructionSchema.dump:1
#: qiskit.validation.BaseSchema.dump:1
msgid ""
"Serialize an object to native Python data types according to this "
"Schema's fields."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dump_additional_data "
"<qiskit.qobj.PulseLibraryItemSchema.dump_additional_data>`\\ "
"\\(valid\\_data\\, many\\, ...\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.dump_additional_data:1
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data:1
#: qiskit.validation.BaseSchema.dump_additional_data:1
#: qiskit.validation.base.BaseSchema.dump_additional_data:1
msgid "Include unknown fields after dumping."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dumps <qiskit.qobj.PulseLibraryItemSchema.dumps>`\\ \\(obj\\[\\, "
"many\\, update\\_fields\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.dumps:1
#: qiskit.qobj.PulseQobjInstructionSchema.dumps:1
#: qiskit.validation.BaseSchema.dumps:1
msgid "Same as :meth:`dump`, except return a JSON-encoded string."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`error_handler <qiskit.qobj.PulseLibraryItemSchema.error_handler>`\\"
" \\(func\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid "Decorator that registers an error handler function for the schema."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`get_attribute <qiskit.qobj.PulseLibraryItemSchema.get_attribute>`\\"
" \\(attr\\, obj\\, default\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.get_attribute:1
#: qiskit.qobj.PulseQobjInstructionSchema.get_attribute:1
#: qiskit.validation.BaseSchema.get_attribute:1
msgid "Defines how to pull values from an object to serialize."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`handle_error <qiskit.qobj.PulseLibraryItemSchema.handle_error>`\\ "
"\\(error\\, data\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.handle_error:1
#: qiskit.qobj.PulseQobjInstructionSchema.handle_error:1
#: qiskit.validation.BaseSchema.handle_error:1
msgid "Custom error handler function for the schema."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`load <qiskit.qobj.PulseLibraryItemSchema.load>`\\ \\(data\\[\\, "
"many\\, partial\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.load:1
#: qiskit.qobj.PulseQobjInstructionSchema.load:1
#: qiskit.validation.BaseSchema.load:1
msgid ""
"Deserialize a data structure to an object defined by this Schema's fields"
" and :meth:`make_object`."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`load_additional_data "
"<qiskit.qobj.PulseLibraryItemSchema.load_additional_data>`\\ "
"\\(valid\\_data\\, many\\, ...\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data:1
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data:1
#: qiskit.validation.BaseSchema.load_additional_data:1
#: qiskit.validation.base.BaseSchema.load_additional_data:1
msgid "Include unknown fields after load."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`loads <qiskit.qobj.PulseLibraryItemSchema.loads>`\\ "
"\\(json\\_data\\[\\, many\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.loads:1
#: qiskit.qobj.PulseQobjInstructionSchema.loads:1
#: qiskit.validation.BaseSchema.loads:1
msgid "Same as :meth:`load`, except it takes a JSON string as input."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`make_model <qiskit.qobj.PulseLibraryItemSchema.make_model>`\\ "
"\\(data\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.make_model:1
#: qiskit.qobj.PulseQobjInstructionSchema.make_model:1
#: qiskit.validation.BaseSchema.make_model:1
#: qiskit.validation.base.BaseSchema.make_model:1
msgid "Make ``load`` return a ``model_cls`` instance instead of a dict."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`on_bind_field <qiskit.qobj.PulseLibraryItemSchema.on_bind_field>`\\"
" \\(field\\_name\\, field\\_obj\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid "Hook to modify a field when it is bound to the `Schema`."
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
msgid ""
":obj:`validate <qiskit.qobj.PulseLibraryItemSchema.validate>`\\ "
"\\(data\\[\\, many\\, partial\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseLibraryItemSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1 of
#: qiskit.qobj.PulseLibraryItemSchema.validate:1
#: qiskit.qobj.PulseQobjInstructionSchema.validate:1
#: qiskit.validation.BaseSchema.validate:1
msgid ""
"Validate `data` against the schema, returning a dictionary of validation "
"errors."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.accessor:1
#: qiskit.qobj.PulseQobjInstructionSchema.accessor:1
#: qiskit.validation.BaseSchema.accessor:1
msgid ""
"Decorator that registers a function for pulling values from an object to "
"serialize. The function receives the :class:`Schema` instance, the "
"``key`` of the value to get, the ``obj`` to serialize, and an optional "
"``default`` value."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.accessor:6
#: qiskit.qobj.PulseLibraryItemSchema.error_handler:20
#: qiskit.qobj.PulseQobjInstructionSchema.accessor:6
#: qiskit.qobj.PulseQobjInstructionSchema.error_handler:20
#: qiskit.validation.BaseSchema.accessor:6
#: qiskit.validation.BaseSchema.error_handler:20
msgid "Set the ``error_handler`` class Meta option instead."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump:4
#: qiskit.qobj.PulseLibraryItemSchema.dumps:3
#: qiskit.qobj.PulseQobjInstructionSchema.dump:4
#: qiskit.qobj.PulseQobjInstructionSchema.dumps:3
#: qiskit.validation.BaseSchema.dump:4 qiskit.validation.BaseSchema.dumps:3
msgid "The object to serialize."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump:5
#: qiskit.qobj.PulseLibraryItemSchema.dumps:4
#: qiskit.qobj.PulseQobjInstructionSchema.dump:5
#: qiskit.qobj.PulseQobjInstructionSchema.dumps:4
#: qiskit.validation.BaseSchema.dump:5 qiskit.validation.BaseSchema.dumps:4
msgid ""
"Whether to serialize `obj` as a collection. If `None`, the value for "
"`self.many` is used."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump:7
#: qiskit.qobj.PulseLibraryItemSchema.dumps:6
#: qiskit.qobj.PulseQobjInstructionSchema.dump:7
#: qiskit.qobj.PulseQobjInstructionSchema.dumps:6
#: qiskit.validation.BaseSchema.dump:7 qiskit.validation.BaseSchema.dumps:6
msgid ""
"Whether to update the schema's field classes. Typically set to `True`, "
"but may be `False` when serializing a homogenous collection. This "
"parameter is used by `fields.Nested` to avoid multiple updates."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump:10
#: qiskit.qobj.PulseLibraryItemSchema.dumps:9
#: qiskit.qobj.PulseLibraryItemSchema.load:10
#: qiskit.qobj.PulseLibraryItemSchema.loads:9
#: qiskit.qobj.PulseQobjInstructionSchema.dump:10
#: qiskit.qobj.PulseQobjInstructionSchema.dumps:9
#: qiskit.qobj.PulseQobjInstructionSchema.load:10
#: qiskit.qobj.PulseQobjInstructionSchema.loads:9
#: qiskit.validation.BaseSchema.dump:10 qiskit.validation.BaseSchema.dumps:9
#: qiskit.validation.BaseSchema.load:10 qiskit.validation.BaseSchema.loads:9
msgid "A tuple of the form (``data``, ``errors``)"
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump:11
#: qiskit.qobj.PulseLibraryItemSchema.dumps:10
#: qiskit.qobj.PulseQobjInstructionSchema.dump:11
#: qiskit.qobj.PulseQobjInstructionSchema.dumps:10
#: qiskit.validation.BaseSchema.dump:11 qiskit.validation.BaseSchema.dumps:10
msgid "`MarshalResult`, a `collections.namedtuple`"
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump_additional_data:3
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data:3
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data:3
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data:3
#: qiskit.validation.BaseSchema.dump_additional_data:3
#: qiskit.validation.BaseSchema.load_additional_data:3
#: qiskit.validation.base.BaseSchema.dump_additional_data:3
#: qiskit.validation.base.BaseSchema.load_additional_data:3
msgid "Unknown fields are added with no processing at all."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump_additional_data:5
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data:5
#: qiskit.validation.BaseSchema.dump_additional_data:5
#: qiskit.validation.base.BaseSchema.dump_additional_data:5
msgid "data collected and returned by ``dump()``."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump_additional_data:7
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data:7
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data:7
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data:7
#: qiskit.validation.BaseSchema.dump_additional_data:7
#: qiskit.validation.BaseSchema.load_additional_data:7
#: qiskit.validation.base.BaseSchema.dump_additional_data:7
#: qiskit.validation.base.BaseSchema.load_additional_data:7
msgid "if True, data and original_data are a list."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump_additional_data:9
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data:9
#: qiskit.validation.BaseSchema.dump_additional_data:9
#: qiskit.validation.base.BaseSchema.dump_additional_data:9
msgid "object passed to ``dump()`` in the first place."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump_additional_data:13
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data:13
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data:13
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data:13
#: qiskit.validation.BaseSchema.dump_additional_data:13
#: qiskit.validation.BaseSchema.load_additional_data:13
#: qiskit.validation.base.BaseSchema.dump_additional_data:13
#: qiskit.validation.base.BaseSchema.load_additional_data:13
msgid "the same ``valid_data`` extended with the unknown attributes."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.dump_additional_data:16
#: qiskit.qobj.PulseLibraryItemSchema.load_additional_data:16
#: qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data:16
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data:16
#: qiskit.validation.BaseSchema.dump_additional_data:16
#: qiskit.validation.BaseSchema.load_additional_data:16
#: qiskit.validation.base.BaseSchema.dump_additional_data:16
#: qiskit.validation.base.BaseSchema.load_additional_data:16
msgid "Inspired by https://github.com/marshmallow-code/marshmallow/pull/595."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.error_handler:1
#: qiskit.qobj.PulseQobjInstructionSchema.error_handler:1
#: qiskit.validation.BaseSchema.error_handler:1
msgid ""
"Decorator that registers an error handler function for the schema. The "
"function receives the :class:`Schema` instance, a dictionary of errors, "
"and the serialized object (if serializing data) or data dictionary (if "
"deserializing data) as arguments."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.error_handler:6
#: qiskit.qobj.PulseQobjInstructionSchema.error_handler:6
#: qiskit.validation.BaseSchema.error_handler:6
#: qiskit.validation.fields.containers.List:4
msgid "Example: ::"
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.handle_error:3
#: qiskit.qobj.PulseQobjInstructionSchema.handle_error:3
#: qiskit.validation.BaseSchema.handle_error:3
msgid "The `ValidationError` raised during (de)serialization."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.handle_error:4
#: qiskit.qobj.PulseQobjInstructionSchema.handle_error:4
#: qiskit.validation.BaseSchema.handle_error:4
msgid "The original input data."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.load:4
#: qiskit.qobj.PulseQobjInstructionSchema.load:4
#: qiskit.validation.BaseSchema.load:4
msgid "The data to deserialize."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.load:5
#: qiskit.qobj.PulseQobjInstructionSchema.load:5
#: qiskit.validation.BaseSchema.load:5
msgid ""
"Whether to deserialize `data` as a collection. If `None`, the value for "
"`self.many` is used."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.load:7
#: qiskit.qobj.PulseLibraryItemSchema.loads:6
#: qiskit.qobj.PulseLibraryItemSchema.validate:7
#: qiskit.qobj.PulseQobjInstructionSchema.load:7
#: qiskit.qobj.PulseQobjInstructionSchema.loads:6
#: qiskit.qobj.PulseQobjInstructionSchema.validate:7
#: qiskit.validation.BaseSchema.load:7 qiskit.validation.BaseSchema.loads:6
#: qiskit.validation.BaseSchema.validate:7
msgid ""
"Whether to ignore missing fields. If `None`, the value for `self.partial`"
" is used. If its value is an iterable, only missing fields listed in that"
" iterable will be ignored."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.load:11
#: qiskit.qobj.PulseLibraryItemSchema.loads:10
#: qiskit.qobj.PulseQobjInstructionSchema.load:11
#: qiskit.qobj.PulseQobjInstructionSchema.loads:10
#: qiskit.validation.BaseSchema.load:11 qiskit.validation.BaseSchema.loads:10
msgid "`UnmarshalResult`, a `collections.namedtuple`"
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.load_additional_data:5
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data:5
#: qiskit.validation.BaseSchema.load_additional_data:5
#: qiskit.validation.base.BaseSchema.load_additional_data:5
msgid "validated data returned by ``load()``."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.load_additional_data:9
#: qiskit.qobj.PulseQobjInstructionSchema.load_additional_data:9
#: qiskit.validation.BaseSchema.load_additional_data:9
#: qiskit.validation.base.BaseSchema.load_additional_data:9
msgid "data passed to ``load()`` in the first place."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.loads:3
#: qiskit.qobj.PulseQobjInstructionSchema.loads:3
#: qiskit.validation.BaseSchema.loads:3
msgid "A JSON string of the data to deserialize."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.loads:4
#: qiskit.qobj.PulseQobjInstructionSchema.loads:4
#: qiskit.validation.BaseSchema.loads:4
msgid ""
"Whether to deserialize `obj` as a collection. If `None`, the value for "
"`self.many` is used."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.on_bind_field:1
#: qiskit.qobj.PulseQobjInstructionSchema.on_bind_field:1
#: qiskit.validation.BaseSchema.on_bind_field:1
msgid "Hook to modify a field when it is bound to the `Schema`. No-op by default."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.validate:4
#: qiskit.qobj.PulseQobjInstructionSchema.validate:4
#: qiskit.validation.BaseSchema.validate:4
msgid "The data to validate."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.validate:5
#: qiskit.qobj.PulseQobjInstructionSchema.validate:5
#: qiskit.validation.BaseSchema.validate:5
msgid ""
"Whether to validate `data` as a collection. If `None`, the value for "
"`self.many` is used."
msgstr ""

#: of qiskit.qobj.PulseLibraryItemSchema.validate:10
#: qiskit.qobj.PulseQobjInstructionSchema.validate:10
#: qiskit.validation.BaseSchema.validate:10
msgid "A dictionary of validation errors."
msgstr ""

#: ../../api/qiskit.qobj.PulseQobj.rst:2
msgid "PulseQobj"
msgstr ""

#: of qiskit.qobj.PulseQobj:1 qiskit.qobj.QasmQobj:1
msgid "ベースクラス: :class:`qiskit.qobj.qobj.Qobj`"
msgstr ""

#: of qiskit.qobj.PulseQobj:1
msgid "Model for PulseQobj inherit from Qobj."
msgstr ""

#: of qiskit.qobj.PulseQobj:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``PulseQobjSchema``."
msgstr ""

#: of qiskit.qobj.PulseQobj:8 qiskit.qobj.QasmQobj:8 qiskit.qobj.Qobj:8
msgid "Qobj identifier."
msgstr ""

#: of qiskit.qobj.PulseQobj:14 qiskit.qobj.QasmQobj:14 qiskit.qobj.Qobj:14
msgid "config settings for the Qobj."
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjConfig.rst:2 of qiskit.qobj.PulseQobj:16
msgid "PulseQobjConfig"
msgstr ""

#: of qiskit.qobj.PulseQobj:20 qiskit.qobj.QasmQobj:20 qiskit.qobj.Qobj:20
msgid "list of experiments."
msgstr ""

#: of qiskit.qobj.PulseQobj:22
msgid "list[PulseQobjExperiment]"
msgstr ""

#: of qiskit.qobj.PulseQobj:26 qiskit.qobj.QasmQobj:26 qiskit.qobj.Qobj:26
msgid "headers."
msgstr ""

#: ../../api/qiskit.qobj.QobjHeader.rst:2 of qiskit.qobj.PulseQobj:28
#: qiskit.qobj.QasmQobj:28 qiskit.qobj.Qobj:28
msgid "QobjHeader"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobj.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.PulseQobj.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobj.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.PulseQobj.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobj.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.PulseQobj.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobj.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.PulseQobj.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobj.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.PulseQobj.to_dict>`\\ \\(\\)"
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:1 qiskit.qobj.QasmQobjConfig:1
#: qiskit.qobj.models.pulse.PulseQobjConfig:1
#: qiskit.qobj.models.qasm.QasmQobjConfig:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjConfig`"
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:1 qiskit.qobj.models.pulse.PulseQobjConfig:1
msgid "Model for PulseQobjConfig inherit from QobjConfig."
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:3 qiskit.qobj.models.pulse.PulseQobjConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``PulseQobjConfigSchema``."
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:8 qiskit.qobj.models.pulse.PulseQobjConfig:8
msgid "a value represents the level of measurement."
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:14
#: qiskit.qobj.models.pulse.PulseQobjConfig:14
msgid "local oscillator frequency of measurement pulse."
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:20
#: qiskit.qobj.models.pulse.PulseQobjConfig:20
msgid "a level of measurement information."
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:26
#: qiskit.qobj.models.pulse.PulseQobjConfig:26
msgid "a pulse library."
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:28
#: qiskit.qobj.models.pulse.PulseQobjConfig:28
msgid "list[qiskit.qobj.PulseLibraryItem]"
msgstr ""

#: of qiskit.qobj.PulseQobjConfig:32
#: qiskit.qobj.models.pulse.PulseQobjConfig:32
msgid "local oscillator frequency of driving pulse."
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.PulseQobjConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjConfig.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.PulseQobjConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.PulseQobjConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjConfig.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.PulseQobjConfig.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.PulseQobjConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:2
msgid "PulseQobjExperiment"
msgstr ""

#: of qiskit.qobj.PulseQobjExperiment:1 qiskit.qobj.QasmQobjExperiment:1
#: qiskit.qobj.models.pulse.PulseQobjExperiment:1
#: qiskit.qobj.models.qasm.QasmQobjExperiment:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjExperiment`"
msgstr ""

#: of qiskit.qobj.PulseQobjExperiment:1
#: qiskit.qobj.models.pulse.PulseQobjExperiment:1
msgid "Model for PulseQobjExperiment inherit from QobjExperiment."
msgstr ""

#: of qiskit.qobj.PulseQobjExperiment:3
#: qiskit.qobj.models.pulse.PulseQobjExperiment:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``PulseQobjExperimentSchema``."
msgstr ""

#: of qiskit.qobj.PulseQobjExperiment:8 qiskit.qobj.QasmQobjExperiment:8
#: qiskit.qobj.QobjExperiment:8 qiskit.qobj.models.base.QobjExperiment:8
#: qiskit.qobj.models.pulse.PulseQobjExperiment:8
#: qiskit.qobj.models.qasm.QasmQobjExperiment:8
msgid "list of instructions."
msgstr ""

#: of qiskit.qobj.PulseQobjExperiment:10
#: qiskit.qobj.models.pulse.PulseQobjExperiment:10
msgid "list[PulseQobjInstruction]"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.PulseQobjExperiment.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.PulseQobjExperiment.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.PulseQobjExperiment.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.PulseQobjExperiment.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperiment.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.PulseQobjExperiment.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:2
msgid "PulseQobjExperimentConfig"
msgstr ""

#: of qiskit.qobj.PulseQobjExperimentConfig:1
#: qiskit.qobj.QasmQobjExperimentConfig:1
#: qiskit.qobj.models.pulse.PulseQobjExperimentConfig:1
#: qiskit.qobj.models.qasm.QasmQobjExperimentConfig:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjExperimentConfig`"
msgstr ""

#: of qiskit.qobj.PulseQobjExperimentConfig:1
#: qiskit.qobj.models.pulse.PulseQobjExperimentConfig:1
msgid "Model for PulseQobjExperimentConfig inherit from QobjExperimentConfig."
msgstr ""

#: of qiskit.qobj.PulseQobjExperimentConfig:3
#: qiskit.qobj.models.pulse.PulseQobjExperimentConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``PulseQobjExperimentConfigSchema``."
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.PulseQobjExperimentConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.qobj.PulseQobjExperimentConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.PulseQobjExperimentConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.PulseQobjExperimentConfig.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjExperimentConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.PulseQobjExperimentConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:2
msgid "PulseQobjInstruction"
msgstr ""

#: of qiskit.qobj.PulseQobjInstruction:1 qiskit.qobj.QasmQobjInstruction:1
#: qiskit.qobj.models.pulse.PulseQobjInstruction:1
#: qiskit.qobj.models.qasm.QasmQobjInstruction:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjInstruction`"
msgstr ""

#: of qiskit.qobj.PulseQobjInstruction:1
#: qiskit.qobj.models.pulse.PulseQobjInstruction:1
msgid "Model for PulseQobjInstruction inherit from QobjInstruction."
msgstr ""

#: of qiskit.qobj.PulseQobjInstruction:3
#: qiskit.qobj.models.pulse.PulseQobjInstruction:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``PulseQobjInstructionSchema``."
msgstr ""

#: of qiskit.qobj.PulseQobjInstruction:8 qiskit.qobj.QasmQobjInstruction:8
#: qiskit.qobj.QobjInstruction:8 qiskit.qobj.models.base.QobjInstruction:8
#: qiskit.qobj.models.pulse.PulseQobjInstruction:8
#: qiskit.qobj.models.qasm.QasmQobjInstruction:8
msgid "name of the instruction"
msgstr ""

#: of qiskit.qobj.PulseQobjInstruction:14
#: qiskit.qobj.models.pulse.PulseQobjInstruction:14
msgid "timing of executing the instruction"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.PulseQobjInstruction.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.PulseQobjInstruction.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.PulseQobjInstruction.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.PulseQobjInstruction.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstruction.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.PulseQobjInstruction.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:2
msgid "PulseQobjInstructionSchema"
msgstr ""

#: of qiskit.qobj.PulseQobjInstructionSchema:1
#: qiskit.qobj.models.pulse.PulseQobjInstructionSchema:1
#: qiskit.qobj.models.qasm.QasmQobjInstructionSchema:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjInstructionSchema`"
msgstr ""

#: of qiskit.qobj.PulseQobjInstructionSchema:1
#: qiskit.qobj.models.pulse.PulseQobjInstructionSchema:1
msgid "Schema for PulseQobjInstruction."
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:17:<autosummary>:1
msgid ""
":obj:`TYPE_MAPPING "
"<qiskit.qobj.PulseQobjInstructionSchema.TYPE_MAPPING>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:17:<autosummary>:1
msgid ":obj:`dict_class <qiskit.qobj.PulseQobjInstructionSchema.dict_class>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:17:<autosummary>:1
msgid ":obj:`opts <qiskit.qobj.PulseQobjInstructionSchema.opts>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:17:<autosummary>:1
msgid ":obj:`set_class <qiskit.qobj.PulseQobjInstructionSchema.set_class>`\\"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`accessor <qiskit.qobj.PulseQobjInstructionSchema.accessor>`\\ "
"\\(func\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dump <qiskit.qobj.PulseQobjInstructionSchema.dump>`\\ \\(obj\\[\\, "
"many\\, update\\_fields\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dump_additional_data "
"<qiskit.qobj.PulseQobjInstructionSchema.dump_additional_data>`\\ "
"\\(valid\\_data\\, many\\, ...\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dumps <qiskit.qobj.PulseQobjInstructionSchema.dumps>`\\ "
"\\(obj\\[\\, many\\, update\\_fields\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`error_handler "
"<qiskit.qobj.PulseQobjInstructionSchema.error_handler>`\\ \\(func\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`get_attribute "
"<qiskit.qobj.PulseQobjInstructionSchema.get_attribute>`\\ \\(attr\\, "
"obj\\, default\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`handle_error "
"<qiskit.qobj.PulseQobjInstructionSchema.handle_error>`\\ \\(error\\, "
"data\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`load <qiskit.qobj.PulseQobjInstructionSchema.load>`\\ \\(data\\[\\,"
" many\\, partial\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`load_additional_data "
"<qiskit.qobj.PulseQobjInstructionSchema.load_additional_data>`\\ "
"\\(valid\\_data\\, many\\, ...\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`loads <qiskit.qobj.PulseQobjInstructionSchema.loads>`\\ "
"\\(json\\_data\\[\\, many\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`make_model <qiskit.qobj.PulseQobjInstructionSchema.make_model>`\\ "
"\\(data\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`on_bind_field "
"<qiskit.qobj.PulseQobjInstructionSchema.on_bind_field>`\\ "
"\\(field\\_name\\, field\\_obj\\)"
msgstr ""

#: ../../api/qiskit.qobj.PulseQobjInstructionSchema.rst:35:<autosummary>:1
msgid ""
":obj:`validate <qiskit.qobj.PulseQobjInstructionSchema.validate>`\\ "
"\\(data\\[\\, many\\, partial\\]\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobj.rst:2
msgid "QasmQobj"
msgstr ""

#: of qiskit.qobj.QasmQobj:1
msgid "Model for QasmQobj inherit from Qobj."
msgstr ""

#: of qiskit.qobj.QasmQobj:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QasmQobjSchema``."
msgstr ""

#: of qiskit.qobj.QasmQobj:16
msgid "QASMQobjConfig"
msgstr ""

#: of qiskit.qobj.QasmQobj:22
msgid "list[QASMQobjExperiment]"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobj.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QasmQobj.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobj.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QasmQobj.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobj.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QasmQobj.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobj.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.QasmQobj.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobj.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QasmQobj.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjConfig.rst:2
msgid "QasmQobjConfig"
msgstr ""

#: of qiskit.qobj.QasmQobjConfig:1 qiskit.qobj.models.qasm.QasmQobjConfig:1
msgid "Model for QasmQobjConfig inherit from QobjConfig."
msgstr ""

#: of qiskit.qobj.QasmQobjConfig:3 qiskit.qobj.models.qasm.QasmQobjConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QasmQobjConfigSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QasmQobjConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjConfig.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QasmQobjConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QasmQobjConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjConfig.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.QasmQobjConfig.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QasmQobjConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:2
msgid "QasmQobjExperiment"
msgstr ""

#: of qiskit.qobj.QasmQobjExperiment:1
#: qiskit.qobj.models.qasm.QasmQobjExperiment:1
msgid "Model for QasmQobjExperiment inherit from QobjExperiment."
msgstr ""

#: of qiskit.qobj.QasmQobjExperiment:3
#: qiskit.qobj.models.qasm.QasmQobjExperiment:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QasmQobjExperimentSchema``."
msgstr ""

#: of qiskit.qobj.QasmQobjExperiment:10
#: qiskit.qobj.models.qasm.QasmQobjExperiment:10
msgid "list[QasmQobjInstruction]"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QasmQobjExperiment.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QasmQobjExperiment.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QasmQobjExperiment.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.QasmQobjExperiment.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperiment.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QasmQobjExperiment.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:2
msgid "QasmQobjExperimentConfig"
msgstr ""

#: of qiskit.qobj.QasmQobjExperimentConfig:1
#: qiskit.qobj.models.qasm.QasmQobjExperimentConfig:1
msgid "Model for QasmQobjExperimentConfig inherit from QobjExperimentConfig."
msgstr ""

#: of qiskit.qobj.QasmQobjExperimentConfig:3
#: qiskit.qobj.models.qasm.QasmQobjExperimentConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``QasmQobjExperimentConfigSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QasmQobjExperimentConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:15:<autosummary>:1
msgid ""
":obj:`shallow_schema "
"<qiskit.qobj.QasmQobjExperimentConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QasmQobjExperimentConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.QasmQobjExperimentConfig.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjExperimentConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QasmQobjExperimentConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:2
msgid "QasmQobjInstruction"
msgstr ""

#: of qiskit.qobj.QasmQobjInstruction:1
#: qiskit.qobj.models.qasm.QasmQobjInstruction:1
msgid "Model for QasmQobjInstruction inherit from QobjInstruction."
msgstr ""

#: of qiskit.qobj.QasmQobjInstruction:3
#: qiskit.qobj.models.qasm.QasmQobjInstruction:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``QasmQobjInstructionSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QasmQobjInstruction.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QasmQobjInstruction.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QasmQobjInstruction.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.QasmQobjInstruction.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QasmQobjInstruction.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QasmQobjInstruction.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.Qobj.rst:2
msgid "Qobj"
msgstr ""

#: of qiskit.qobj.Qobj:1
msgid "Model for Qobj."
msgstr ""

#: of qiskit.qobj.Qobj:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QobjSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QobjConfig.rst:2 of qiskit.qobj.Qobj:16
msgid "QobjConfig"
msgstr ""

#: of qiskit.qobj.Qobj:22
msgid "list[QobjExperiment]"
msgstr ""

#: of qiskit.qobj.Qobj:32
msgid "Qobj type."
msgstr ""

#: ../../api/qiskit.qobj.Qobj.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.Qobj.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.Qobj.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.Qobj.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.Qobj.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.Qobj.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.Qobj.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.Qobj.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.Qobj.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.Qobj.to_dict>`\\ \\(\\)"
msgstr ""

#: of qiskit.qobj.QobjConfig:1 qiskit.qobj.models.base.QobjConfig:1
msgid "Model for QobjConfig."
msgstr ""

#: of qiskit.qobj.QobjConfig:3 qiskit.qobj.models.base.QobjConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QobjConfigSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QobjConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QobjConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjConfig.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QobjConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QobjConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjConfig.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.QobjConfig.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QobjConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperiment.rst:2
msgid "QobjExperiment"
msgstr ""

#: of qiskit.qobj.QobjExperiment:1 qiskit.qobj.models.base.QobjExperiment:1
msgid "Model for QobjExperiment."
msgstr ""

#: of qiskit.qobj.QobjExperiment:3 qiskit.qobj.models.base.QobjExperiment:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QobjExperimentSchema``."
msgstr ""

#: of qiskit.qobj.QobjExperiment:10 qiskit.qobj.models.base.QobjExperiment:10
msgid "list[QobjInstruction]"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperiment.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QobjExperiment.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperiment.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QobjExperiment.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperiment.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QobjExperiment.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperiment.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.QobjExperiment.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperiment.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QobjExperiment.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:2
msgid "QobjExperimentConfig"
msgstr ""

#: of qiskit.qobj.QobjExperimentConfig:1
#: qiskit.qobj.models.base.QobjExperimentConfig:1
msgid "Model for QobjExperimentConfig."
msgstr ""

#: of qiskit.qobj.QobjExperimentConfig:3
#: qiskit.qobj.models.base.QobjExperimentConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``QobjExperimentConfigSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QobjExperimentConfig.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QobjExperimentConfig.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QobjExperimentConfig.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.QobjExperimentConfig.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentConfig.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QobjExperimentConfig.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:2
msgid "QobjExperimentHeader"
msgstr ""

#: of qiskit.qobj.QobjExperimentHeader:1
#: qiskit.qobj.models.base.QobjExperimentHeader:1
msgid "Model for QobjExperimentHeader."
msgstr ""

#: of qiskit.qobj.QobjExperimentHeader:3
#: qiskit.qobj.models.base.QobjExperimentHeader:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``QobjExperimentHeaderSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QobjExperimentHeader.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QobjExperimentHeader.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QobjExperimentHeader.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.QobjExperimentHeader.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjExperimentHeader.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QobjExperimentHeader.to_dict>`\\ \\(\\)"
msgstr ""

#: of qiskit.qobj.QobjHeader:1 qiskit.qobj.models.base.QobjHeader:1
msgid "Model for QobjHeader."
msgstr ""

#: of qiskit.qobj.QobjHeader:3 qiskit.qobj.models.base.QobjHeader:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QobjHeaderSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QobjHeader.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QobjHeader.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjHeader.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QobjHeader.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjHeader.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QobjHeader.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjHeader.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.QobjHeader.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjHeader.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QobjHeader.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjInstruction.rst:2
msgid "QobjInstruction"
msgstr ""

#: of qiskit.qobj.QobjInstruction:1 qiskit.qobj.models.base.QobjInstruction:1
msgid "Model for QobjInstruction."
msgstr ""

#: of qiskit.qobj.QobjInstruction:3 qiskit.qobj.models.base.QobjInstruction:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``QobjInstructionSchema``."
msgstr ""

#: ../../api/qiskit.qobj.QobjInstruction.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QobjInstruction.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjInstruction.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QobjInstruction.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjInstruction.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QobjInstruction.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjInstruction.rst:23:<autosummary>:1
msgid ":obj:`from_dict <qiskit.qobj.QobjInstruction.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjInstruction.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QobjInstruction.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:2
msgid "QobjMeasurementOption"
msgstr ""

#: of qiskit.qobj.QobjMeasurementOption:1
#: qiskit.qobj.models.pulse.QobjMeasurementOption:1
msgid "Model for QobjMeasurementOption."
msgstr ""

#: of qiskit.qobj.QobjMeasurementOption:3
#: qiskit.qobj.models.pulse.QobjMeasurementOption:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``QobjMeasurementOptionSchema``."
msgstr ""

#: of qiskit.qobj.QobjMeasurementOption:8
#: qiskit.qobj.models.pulse.QobjMeasurementOption:8
msgid "name of option specified in the backend"
msgstr ""

#: of qiskit.qobj.QobjMeasurementOption:14
#: qiskit.qobj.models.pulse.QobjMeasurementOption:14
msgid "measurement parameter"
msgstr ""

#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.qobj.QobjMeasurementOption.schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.qobj.QobjMeasurementOption.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:23:<autosummary>:1
msgid ":obj:`as_dict <qiskit.qobj.QobjMeasurementOption.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:23:<autosummary>:1
msgid ""
":obj:`from_dict <qiskit.qobj.QobjMeasurementOption.from_dict>`\\ "
"\\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.qobj.QobjMeasurementOption.rst:23:<autosummary>:1
msgid ":obj:`to_dict <qiskit.qobj.QobjMeasurementOption.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.qobj.converters.rst:2
msgid "qiskit.qobj.converters package"
msgstr ""

#: of qiskit.qobj.converters:1
msgid "Helper modules to convert qiskit frontend object to proper qobj model."
msgstr ""

#: ../../api/qiskit.qobj.converters.lo_config.rst:2
msgid "qiskit.qobj.converters.lo\\_config module"
msgstr ""

#: of qiskit.qobj.converters.lo_config:1
msgid ""
"Helper class used to convert a user lo configuration into a list of "
"frequencies."
msgstr ""

#: of qiskit.qobj.converters.lo_config.LoConfigConverter:1
msgid ""
"This class supports to convert LoConfig into ~`lo_freq` attribute of "
"configs. The format of LO frequency setup can be easily modified by "
"replacing `get_qubit_los` and `get_meas_los` to align with your backend."
msgstr ""

#: of qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los:1
msgid ""
"Embed default meas LO frequencies from backend and format them to list "
"object. If configured lo frequency is the same as default, this method "
"returns `None`."
msgstr ""

#: of qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los:4
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los:4
msgid "A dictionary of LOs to format."
msgstr ""

#: of qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los:7
msgid "A list of meas LOs."
msgstr ""

#: of qiskit.qobj.converters.lo_config.LoConfigConverter.get_meas_los:10
#: qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los:10
msgid "when LO frequencies are missing."
msgstr ""

#: of qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los:1
msgid ""
"Embed default qubit LO frequencies from backend and format them to list "
"object. If configured lo frequency is the same as default, this method "
"returns `None`."
msgstr ""

#: of qiskit.qobj.converters.lo_config.LoConfigConverter.get_qubit_los:7
msgid "A list of qubit LOs."
msgstr ""

#: ../../api/qiskit.qobj.converters.pulse_instruction.rst:2
msgid "qiskit.qobj.converters.pulse\\_instruction module"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction:1
msgid ""
"Helper class used to convert a pulse instruction into "
"PulseQobjInstruction."
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.ConversionMethodBinder:1
msgid "Conversion method registrar."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.ConversionMethodBinder.get_bound_method:1
msgid "Get conversion method for bound object."
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:1
msgid "Converts pulse Instructions to Qobj models."
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:3
msgid ""
"Converter is constructed with qobj model and experimental configuration, "
"and returns proper qobj instruction to each backend."
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:6
msgid ""
"Third party providers can be add their own custom pulse instructions by "
"providing custom converter methods."
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:10
msgid ""
"To create a custom converter for custom instruction ``` class "
"CustomConverter(InstructionToQobjConverter):"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:14
msgid ""
"@bind_instruction(CustomInstruction) def convert_custom_command(self, "
"shift, instruction):"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:19
msgid "command_dict = {"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:17
msgid ""
"'name': 'custom_command', 't0': shift+instruction.start_time, 'param1': "
"instruction.param1, 'param2': instruction.param2"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:21
msgid "} if self._run_config('option1', True):"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:23
msgid "command_dict.update({"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:24
msgid "'param3': instruction.param3"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:25
msgid "})"
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter:26
msgid "return self.qobj_model(**command_dict)"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_acquire:1
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_acquire:1
msgid "Return converted `AcquireInstruction`."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_acquire:3
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_drive:3
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_frame_change:3
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_persistent_value:3
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_snapshot:3
msgid "Offset time."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_acquire:5
msgid "acquire instruction."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_acquire:8
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_drive:8
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_frame_change:8
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_persistent_value:8
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_snapshot:8
msgid "Dictionary of required parameters."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_drive:1
msgid "Return converted `PulseInstruction`."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_drive:5
msgid "drive instruction."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_frame_change:1
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_frame_change:1
msgid "Return converted `FrameChangeInstruction`."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_frame_change:5
msgid "frame change instruction."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_persistent_value:1
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_persistent_value:1
msgid "Return converted `PersistentValueInstruction`."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_persistent_value:5
msgid "persistent value instruction."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_snapshot:1
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_snapshot:1
msgid "Return converted `Snapshot`."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.InstructionToQobjConverter.convert_snapshot:5
msgid "snapshot instruction."
msgstr ""

#: of qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter:1
msgid "Converts Qobj models to pulse Instructions"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.bind_pulse:1
msgid "Bind the supplied pulse to a converter method by pulse name."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.bind_pulse:3
msgid "Pulse to bind"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_acquire:3
msgid "acquire qobj"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_acquire:6
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_frame_change:6
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_persistent_value:6
msgid "Converted and scheduled Instruction"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_frame_change:3
msgid "frame change qobj"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_persistent_value:3
msgid "persistent value qobj"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_snapshot:3
msgid "snapshot qobj"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.convert_snapshot:6
msgid "Converted and scheduled Snapshot"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel:1
msgid "Parse and retrieve channel from ch string."
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel:3
msgid "Channel to match"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel:6
msgid "Matched channel"
msgstr ""

#: of
#: qiskit.qobj.converters.pulse_instruction.QobjToInstructionConverter.get_channel:9
msgid "Is raised if valid channel is not matched"
msgstr ""

#: ../../api/qiskit.qobj.models.rst:2
msgid "qiskit.qobj.models package"
msgstr ""

#: of qiskit.qobj.models:1
msgid "Models for the Qobj."
msgstr ""

#: ../../api/qiskit.qobj.models.base.rst:2
msgid "qiskit.qobj.models.base module"
msgstr ""

#: of qiskit.qobj.models.base:1
msgid "The generic qobj models."
msgstr ""

#: of qiskit.qobj.models.base.QobjConfigSchema:1
msgid "Base Schema for QobjConfig."
msgstr ""

#: of qiskit.qobj.models.base.QobjExperimentConfigSchema:1
msgid "Base Schema for QobjExperimentConfig."
msgstr ""

#: of qiskit.qobj.models.base.QobjExperimentHeaderSchema:1
msgid "Base Schema for QobjExperimentHeader."
msgstr ""

#: of qiskit.qobj.models.base.QobjExperimentSchema:1
msgid "Base Schema for QobjExperiment."
msgstr ""

#: of qiskit.qobj.models.base.QobjHeaderSchema:1
msgid "Base Schema for QobjHeader."
msgstr ""

#: of qiskit.qobj.models.base.QobjInstructionSchema:1
msgid "Base Schema for QobjInstruction."
msgstr ""

#: ../../api/qiskit.qobj.models.pulse.rst:2
msgid "qiskit.qobj.models.pulse module"
msgstr ""

#: of qiskit.qobj.models.pulse:1
msgid "The pulse qobj models."
msgstr ""

#: of qiskit.qobj.models.pulse.PulseQobjConfigSchema:1
#: qiskit.qobj.models.qasm.QasmQobjConfigSchema:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjConfigSchema`"
msgstr ""

#: of qiskit.qobj.models.pulse.PulseQobjConfigSchema:1
msgid "Schema for PulseQobjConfig of device backend."
msgstr ""

#: of qiskit.qobj.models.pulse.PulseQobjExperimentConfigSchema:1
#: qiskit.qobj.models.qasm.QasmQobjExperimentConfigSchema:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjExperimentConfigSchema`"
msgstr ""

#: of qiskit.qobj.models.pulse.PulseQobjExperimentConfigSchema:1
msgid "Schema for PulseQobjExperimentConfig."
msgstr ""

#: of qiskit.qobj.models.pulse.PulseQobjExperimentSchema:1
#: qiskit.qobj.models.qasm.QasmQobjExperimentSchema:1
msgid "ベースクラス: :class:`qiskit.qobj.models.base.QobjExperimentSchema`"
msgstr ""

#: of qiskit.qobj.models.pulse.PulseQobjExperimentSchema:1
msgid "Schema for PulseQobjExperiment."
msgstr ""

#: of qiskit.qobj.models.pulse.QobjMeasurementOptionSchema:1
msgid "Schema for QobjMeasOptiton."
msgstr ""

#: ../../api/qiskit.qobj.models.qasm.rst:2
msgid "qiskit.qobj.models.qasm module"
msgstr ""

#: of qiskit.qobj.models.qasm:1
msgid "The qasm qobj models."
msgstr ""

#: of qiskit.qobj.models.qasm.QasmQobjConfigSchema:1
msgid "Schema for QasmQobjConfig."
msgstr ""

#: of qiskit.qobj.models.qasm.QasmQobjExperimentConfigSchema:1
msgid "Schema for QasmQobjExperimentConfig."
msgstr ""

#: of qiskit.qobj.models.qasm.QasmQobjExperimentSchema:1
msgid "Schema for QasmQobjExperiment."
msgstr ""

#: of qiskit.qobj.models.qasm.QasmQobjInstructionSchema:1
msgid "Schema for QasmQobjInstruction."
msgstr ""

#: ../../api/qiskit.qobj.utils.rst:2
msgid "qiskit.qobj.utils module"
msgstr ""

#: of qiskit.qobj.utils:1
msgid "Qobj utilities and enums."
msgstr ""

#: of qiskit.qobj.utils.MeasReturnType:1 qiskit.qobj.utils.QobjType:1
msgid "ベースクラス: :class:`str`, :class:`enum.Enum`"
msgstr ""

#: of qiskit.qobj.utils.MeasReturnType:1
msgid "PulseQobjConfig meas_return allowed values."
msgstr ""

#: of qiskit.qobj.utils.QobjType:1
msgid "Qobj.type allowed values."
msgstr ""

#: of qiskit.qobj.utils.validate_qobj_against_schema:1
#: qiskit.qobj.validate_qobj_against_schema:1
msgid "Validates a QObj against the .json schema."
msgstr ""

#: of qiskit.qobj.utils.validate_qobj_against_schema:3
#: qiskit.qobj.validate_qobj_against_schema:3
msgid "Qobj to be validated."
msgstr ""

#: ../../api/qiskit.qobj.validate_qobj_against_schema.rst:2
msgid "validate_qobj_against_schema"
msgstr ""

#: ../../api/qiskit.quantum_info.rst:2
msgid "qiskit.quantum\\_info package"
msgstr ""

#: of qiskit.quantum_info:1
msgid "Quantum Information methods."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:2
msgid "Chi"
msgstr ""

#: of qiskit.quantum_info.Chi:1 qiskit.quantum_info.Choi:1
#: qiskit.quantum_info.Kraus:1 qiskit.quantum_info.PTM:1
#: qiskit.quantum_info.Stinespring:1 qiskit.quantum_info.SuperOp:1
#: qiskit.quantum_info.operators.channel.chi.Chi:1
#: qiskit.quantum_info.operators.channel.choi.Choi:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus:1
#: qiskit.quantum_info.operators.channel.ptm.PTM:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp:1
msgid ""
"ベースクラス: "
":class:`qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel`"
msgstr ""

#: of qiskit.quantum_info.Chi:1 qiskit.quantum_info.operators.channel.chi.Chi:1
msgid "Pauli basis Chi-matrix representation of a quantum channel"
msgstr ""

#: of qiskit.quantum_info.Chi:3 qiskit.quantum_info.operators.channel.chi.Chi:3
msgid "The Chi-matrix is the Pauli-basis representation of the Chi-Matrix."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`add <qiskit.quantum_info.Chi.add>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.Chi.add:1 qiskit.quantum_info.Chi.multiply:1
#: qiskit.quantum_info.Choi.add:1 qiskit.quantum_info.Choi.multiply:1
#: qiskit.quantum_info.Kraus.add:1 qiskit.quantum_info.Kraus.multiply:1
#: qiskit.quantum_info.PTM.add:1 qiskit.quantum_info.PTM.multiply:1
#: qiskit.quantum_info.Stinespring.add:1
#: qiskit.quantum_info.Stinespring.multiply:1 qiskit.quantum_info.SuperOp.add:1
#: qiskit.quantum_info.SuperOp.multiply:1
#: qiskit.quantum_info.operators.channel.chi.Chi.add:1
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply:1
#: qiskit.quantum_info.operators.channel.choi.Choi.add:1
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.add:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply:1
msgid "Return the QuantumChannel self + other."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ""
":obj:`compose <qiskit.quantum_info.Chi.compose>`\\ \\(other\\[\\, "
"qargs\\, front\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.Chi.compose:1 qiskit.quantum_info.Choi.compose:1
#: qiskit.quantum_info.Kraus.compose:1 qiskit.quantum_info.Operator.compose:1
#: qiskit.quantum_info.PTM.compose:1 qiskit.quantum_info.Stinespring.compose:1
#: qiskit.quantum_info.SuperOp.compose:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose:1
#: qiskit.quantum_info.operators.channel.chi.Chi.compose:1
#: qiskit.quantum_info.operators.channel.choi.Choi.compose:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose:1
#: qiskit.quantum_info.operators.operator.Operator.compose:1
msgid "Return the composition channel self∘other."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`conjugate <qiskit.quantum_info.Chi.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.Chi.conjugate:1 qiskit.quantum_info.Choi.conjugate:1
#: qiskit.quantum_info.Kraus.conjugate:1 qiskit.quantum_info.PTM.conjugate:1
#: qiskit.quantum_info.Stinespring.conjugate:1
#: qiskit.quantum_info.SuperOp.conjugate:1
#: qiskit.quantum_info.operators.channel.chi.Chi.conjugate:1
#: qiskit.quantum_info.operators.channel.choi.Choi.conjugate:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.conjugate:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.conjugate:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.conjugate:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.conjugate:1
msgid "Return the conjugate of the QuantumChannel."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`expand <qiskit.quantum_info.Chi.expand>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.Chi.expand:1 qiskit.quantum_info.Choi.expand:1
#: qiskit.quantum_info.Kraus.expand:1 qiskit.quantum_info.PTM.expand:1
#: qiskit.quantum_info.Stinespring.expand:1
#: qiskit.quantum_info.SuperOp.expand:1
#: qiskit.quantum_info.operators.channel.chi.Chi.expand:1
#: qiskit.quantum_info.operators.channel.choi.Choi.expand:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand:1
msgid "Return the tensor product channel other ⊗ self."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`multiply <qiskit.quantum_info.Chi.multiply>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`power <qiskit.quantum_info.Chi.power>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1 of
#: qiskit.quantum_info.Chi.power:1 qiskit.quantum_info.Choi.power:1
#: qiskit.quantum_info.Kraus.power:1 qiskit.quantum_info.PTM.power:1
#: qiskit.quantum_info.Stinespring.power:1
#: qiskit.quantum_info.operators.channel.chi.Chi.power:1
#: qiskit.quantum_info.operators.channel.choi.Choi.power:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.power:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power:1
msgid "The matrix power of the channel."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`subtract <qiskit.quantum_info.Chi.subtract>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.Chi.subtract:1 qiskit.quantum_info.Choi.subtract:1
#: qiskit.quantum_info.Kraus.subtract:1 qiskit.quantum_info.PTM.subtract:1
#: qiskit.quantum_info.Stinespring.subtract:1
#: qiskit.quantum_info.SuperOp.subtract:1
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract:1
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract:1
msgid "Return the QuantumChannel self - other."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`tensor <qiskit.quantum_info.Chi.tensor>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.Chi.tensor:1 qiskit.quantum_info.Choi.tensor:1
#: qiskit.quantum_info.Kraus.tensor:1 qiskit.quantum_info.PTM.tensor:1
#: qiskit.quantum_info.Stinespring.tensor:1
#: qiskit.quantum_info.SuperOp.tensor:1
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor:1
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor:1
msgid "Return the tensor product channel self ⊗ other."
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
msgid ":obj:`transpose <qiskit.quantum_info.Chi.transpose>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Chi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.Chi.transpose:1 qiskit.quantum_info.Choi.transpose:1
#: qiskit.quantum_info.Kraus.transpose:1 qiskit.quantum_info.PTM.transpose:1
#: qiskit.quantum_info.Stinespring.transpose:1
#: qiskit.quantum_info.SuperOp.transpose:1
#: qiskit.quantum_info.operators.channel.chi.Chi.transpose:1
#: qiskit.quantum_info.operators.channel.choi.Choi.transpose:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.transpose:1
#: qiskit.quantum_info.operators.channel.ptm.PTM.transpose:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.transpose:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.transpose:1
msgid "Return the transpose of the QuantumChannel."
msgstr ""

#: of qiskit.quantum_info.Chi.add:3 qiskit.quantum_info.Chi.compose:3
#: qiskit.quantum_info.Chi.expand:3 qiskit.quantum_info.Chi.subtract:3
#: qiskit.quantum_info.Chi.tensor:3 qiskit.quantum_info.Choi.add:3
#: qiskit.quantum_info.Choi.compose:3 qiskit.quantum_info.Choi.expand:3
#: qiskit.quantum_info.Choi.subtract:3 qiskit.quantum_info.Choi.tensor:3
#: qiskit.quantum_info.PTM.add:3 qiskit.quantum_info.PTM.compose:3
#: qiskit.quantum_info.PTM.expand:3 qiskit.quantum_info.PTM.subtract:3
#: qiskit.quantum_info.PTM.tensor:3 qiskit.quantum_info.SuperOp.add:3
#: qiskit.quantum_info.SuperOp.compose:3 qiskit.quantum_info.SuperOp.expand:3
#: qiskit.quantum_info.SuperOp.subtract:3 qiskit.quantum_info.SuperOp.tensor:3
#: qiskit.quantum_info.operators.channel.chi.Chi.add:3
#: qiskit.quantum_info.operators.channel.chi.Chi.compose:3
#: qiskit.quantum_info.operators.channel.chi.Chi.expand:3
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract:3
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor:3
#: qiskit.quantum_info.operators.channel.choi.Choi.add:3
#: qiskit.quantum_info.operators.channel.choi.Choi.compose:3
#: qiskit.quantum_info.operators.channel.choi.Choi.expand:3
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract:3
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor:3
#: qiskit.quantum_info.operators.channel.ptm.PTM.add:3
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose:3
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand:3
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract:3
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor:3
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add:3
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose:3
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand:3
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract:3
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor:3
msgid "a quantum channel."
msgstr ""

#: of qiskit.quantum_info.Chi.add:6
#: qiskit.quantum_info.operators.channel.chi.Chi.add:6
msgid "the linear addition self + other as a Chi object."
msgstr ""

#: of qiskit.quantum_info.Chi.add:9 qiskit.quantum_info.Chi.compose:15
#: qiskit.quantum_info.Chi.subtract:9 qiskit.quantum_info.SuperOp.compose:15
#: qiskit.quantum_info.operators.channel.chi.Chi.add:9
#: qiskit.quantum_info.operators.channel.chi.Chi.compose:15
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract:9
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose:15
msgid "if other is not a QuantumChannel subclass, or"
msgstr ""

#: of qiskit.quantum_info.Chi.compose:5 qiskit.quantum_info.Choi.compose:5
#: qiskit.quantum_info.Kraus.compose:5 qiskit.quantum_info.Operator.compose:5
#: qiskit.quantum_info.PTM.compose:5 qiskit.quantum_info.Stinespring.compose:5
#: qiskit.quantum_info.SuperOp.compose:5
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose:5
#: qiskit.quantum_info.operators.channel.chi.Chi.compose:5
#: qiskit.quantum_info.operators.channel.choi.Choi.compose:5
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose:5
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose:5
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose:5
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose:5
#: qiskit.quantum_info.operators.operator.Operator.compose:5
msgid "a list of subsystem positions to compose other on."
msgstr ""

#: of qiskit.quantum_info.Chi.compose:12
#: qiskit.quantum_info.operators.channel.chi.Chi.compose:12
msgid "The composition channel as a Chi object."
msgstr ""

#: of qiskit.quantum_info.Chi.expand:6
#: qiskit.quantum_info.operators.channel.chi.Chi.expand:6
msgid "the tensor product channel other ⊗ self as a Chi object."
msgstr ""

#: of qiskit.quantum_info.Chi.expand:9 qiskit.quantum_info.Chi.tensor:9
#: qiskit.quantum_info.operators.channel.chi.Chi.expand:9
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor:9
msgid "if other is not a QuantumChannel subclass."
msgstr ""

#: of qiskit.quantum_info.Chi.multiply:3 qiskit.quantum_info.Choi.multiply:3
#: qiskit.quantum_info.Kraus.multiply:3 qiskit.quantum_info.Operator.multiply:3
#: qiskit.quantum_info.PTM.multiply:3
#: qiskit.quantum_info.Stinespring.multiply:3
#: qiskit.quantum_info.SuperOp.multiply:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:3
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply:3
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply:3
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply:3
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply:3
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply:3
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply:3
#: qiskit.quantum_info.operators.operator.Operator.multiply:3
msgid "a complex number."
msgstr ""

#: of qiskit.quantum_info.Chi.multiply:6
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply:6
msgid "the scalar multiplication other * self as a Chi object."
msgstr ""

#: of qiskit.quantum_info.Chi.multiply:9 qiskit.quantum_info.Choi.multiply:9
#: qiskit.quantum_info.Kraus.multiply:9 qiskit.quantum_info.PTM.multiply:9
#: qiskit.quantum_info.Stinespring.multiply:10
#: qiskit.quantum_info.SuperOp.multiply:9
#: qiskit.quantum_info.operators.channel.chi.Chi.multiply:9
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply:9
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply:9
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply:9
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply:10
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply:9
msgid "if other is not a valid scalar."
msgstr ""

#: of qiskit.quantum_info.Chi.power:3 qiskit.quantum_info.Choi.power:3
#: qiskit.quantum_info.Kraus.power:3 qiskit.quantum_info.PTM.power:3
#: qiskit.quantum_info.Stinespring.power:3 qiskit.quantum_info.SuperOp.power:3
#: qiskit.quantum_info.operators.channel.chi.Chi.power:3
#: qiskit.quantum_info.operators.channel.choi.Choi.power:3
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power:3
#: qiskit.quantum_info.operators.channel.ptm.PTM.power:3
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power:3
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power:3
msgid "compute the matrix power of the superoperator matrix."
msgstr ""

#: of qiskit.quantum_info.Chi.power:6
#: qiskit.quantum_info.operators.channel.chi.Chi.power:6
msgid "the matrix power of the SuperOp converted to a Chi channel."
msgstr ""

#: of qiskit.quantum_info.Chi.power:9 qiskit.quantum_info.Choi.power:9
#: qiskit.quantum_info.Kraus.power:9 qiskit.quantum_info.PTM.power:9
#: qiskit.quantum_info.Stinespring.power:10 qiskit.quantum_info.SuperOp.power:9
#: qiskit.quantum_info.operators.channel.chi.Chi.power:9
#: qiskit.quantum_info.operators.channel.choi.Choi.power:9
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power:9
#: qiskit.quantum_info.operators.channel.ptm.PTM.power:9
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power:10
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power:9
msgid "if the input and output dimensions of the"
msgstr ""

#: of qiskit.quantum_info.Chi.subtract:6
#: qiskit.quantum_info.operators.channel.chi.Chi.subtract:6
msgid "the linear subtraction self - other as Chi object."
msgstr ""

#: of qiskit.quantum_info.Chi.tensor:6
#: qiskit.quantum_info.operators.channel.chi.Chi.tensor:6
msgid "the tensor product channel self ⊗ other as a Chi object."
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:2
msgid "Choi"
msgstr ""

#: of qiskit.quantum_info.Choi:1
#: qiskit.quantum_info.operators.channel.choi.Choi:1
msgid "Choi-matrix representation of a quantum channel"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`add <qiskit.quantum_info.Choi.add>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ""
":obj:`compose <qiskit.quantum_info.Choi.compose>`\\ \\(other\\[\\, "
"qargs\\, front\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`conjugate <qiskit.quantum_info.Choi.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`expand <qiskit.quantum_info.Choi.expand>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`multiply <qiskit.quantum_info.Choi.multiply>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`power <qiskit.quantum_info.Choi.power>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`subtract <qiskit.quantum_info.Choi.subtract>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`tensor <qiskit.quantum_info.Choi.tensor>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Choi.rst:22:<autosummary>:1
msgid ":obj:`transpose <qiskit.quantum_info.Choi.transpose>`\\ \\(\\)"
msgstr ""

#: of qiskit.quantum_info.Choi.add:6
#: qiskit.quantum_info.operators.channel.choi.Choi.add:6
msgid "the linear addition self + other as a Choi object."
msgstr ""

#: of qiskit.quantum_info.Choi.add:9 qiskit.quantum_info.Choi.compose:15
#: qiskit.quantum_info.Choi.subtract:9 qiskit.quantum_info.PTM.add:9
#: qiskit.quantum_info.PTM.compose:15 qiskit.quantum_info.PTM.subtract:9
#: qiskit.quantum_info.Stinespring.add:10
#: qiskit.quantum_info.Stinespring.compose:15
#: qiskit.quantum_info.Stinespring.subtract:10
#: qiskit.quantum_info.SuperOp.add:9 qiskit.quantum_info.SuperOp.subtract:9
#: qiskit.quantum_info.operators.channel.choi.Choi.add:9
#: qiskit.quantum_info.operators.channel.choi.Choi.compose:15
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract:9
#: qiskit.quantum_info.operators.channel.ptm.PTM.add:9
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose:15
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract:9
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add:10
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose:15
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract:10
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add:9
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract:9
msgid "if other cannot be converted to a channel or"
msgstr ""

#: of qiskit.quantum_info.Choi.compose:12
#: qiskit.quantum_info.operators.channel.choi.Choi.compose:12
msgid "The composition channel as a Choi object."
msgstr ""

#: of qiskit.quantum_info.Choi.expand:6
#: qiskit.quantum_info.operators.channel.choi.Choi.expand:6
msgid "the tensor product channel other ⊗ self as a Choi object."
msgstr ""

#: of qiskit.quantum_info.Choi.expand:9 qiskit.quantum_info.Choi.tensor:9
#: qiskit.quantum_info.Kraus.expand:10 qiskit.quantum_info.Kraus.tensor:10
#: qiskit.quantum_info.PTM.expand:9 qiskit.quantum_info.PTM.tensor:9
#: qiskit.quantum_info.Stinespring.expand:10
#: qiskit.quantum_info.Stinespring.tensor:10
#: qiskit.quantum_info.SuperOp.expand:10 qiskit.quantum_info.SuperOp.tensor:10
#: qiskit.quantum_info.operators.channel.choi.Choi.expand:9
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor:9
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand:10
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor:10
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand:9
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor:9
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand:10
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor:10
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand:10
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor:10
msgid "if other cannot be converted to a channel."
msgstr ""

#: of qiskit.quantum_info.Choi.multiply:6
#: qiskit.quantum_info.operators.channel.choi.Choi.multiply:6
msgid "the scalar multiplication other * self as a Choi object."
msgstr ""

#: of qiskit.quantum_info.Choi.power:6
#: qiskit.quantum_info.operators.channel.choi.Choi.power:6
msgid "the matrix power of the SuperOp converted to a Choi channel."
msgstr ""

#: of qiskit.quantum_info.Choi.subtract:6
#: qiskit.quantum_info.operators.channel.choi.Choi.subtract:6
msgid "the linear subtraction self - other as Choi object."
msgstr ""

#: of qiskit.quantum_info.Choi.tensor:6
#: qiskit.quantum_info.operators.channel.choi.Choi.tensor:6
msgid "the tensor product channel self ⊗ other as a Choi object."
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:2
msgid "Kraus"
msgstr ""

#: of qiskit.quantum_info.Kraus:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus:1
msgid "Kraus representation of a quantum channel."
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:14:<autosummary>:1
msgid ":obj:`data <qiskit.quantum_info.Kraus.data>`\\"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:14:<autosummary>:1 of
#: qiskit.quantum_info.Kraus.data:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.data:1
msgid "Return list of Kraus matrices for channel."
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`add <qiskit.quantum_info.Kraus.add>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ""
":obj:`compose <qiskit.quantum_info.Kraus.compose>`\\ \\(other\\[\\, "
"qargs\\, front\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`conjugate <qiskit.quantum_info.Kraus.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`expand <qiskit.quantum_info.Kraus.expand>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ""
":obj:`is_cptp <qiskit.quantum_info.Kraus.is_cptp>`\\ \\(\\[atol\\, "
"rtol\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1 of
#: qiskit.quantum_info.Kraus.is_cptp:1
#: qiskit.quantum_info.Stinespring.is_cptp:1
#: qiskit.quantum_info.operators.channel.kraus.Kraus.is_cptp:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.is_cptp:1
msgid "Return True if completely-positive trace-preserving."
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`multiply <qiskit.quantum_info.Kraus.multiply>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`power <qiskit.quantum_info.Kraus.power>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`subtract <qiskit.quantum_info.Kraus.subtract>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`tensor <qiskit.quantum_info.Kraus.tensor>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Kraus.rst:29:<autosummary>:1
msgid ":obj:`transpose <qiskit.quantum_info.Kraus.transpose>`\\ \\(\\)"
msgstr ""

#: of qiskit.quantum_info.Kraus.add:3 qiskit.quantum_info.Kraus.compose:3
#: qiskit.quantum_info.Kraus.expand:3 qiskit.quantum_info.Kraus.subtract:3
#: qiskit.quantum_info.Kraus.tensor:3 qiskit.quantum_info.Stinespring.add:3
#: qiskit.quantum_info.Stinespring.compose:3
#: qiskit.quantum_info.Stinespring.expand:3
#: qiskit.quantum_info.Stinespring.subtract:3
#: qiskit.quantum_info.Stinespring.tensor:3
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add:3
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose:3
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand:3
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract:3
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor:3
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add:3
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose:3
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand:3
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract:3
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor:3
msgid "a quantum channel subclass."
msgstr ""

#: of qiskit.quantum_info.Kraus.add:6
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add:6
msgid "the linear addition self + other as a Kraus object."
msgstr ""

#: of qiskit.quantum_info.Kraus.add:9 qiskit.quantum_info.Kraus.compose:15
#: qiskit.quantum_info.Kraus.subtract:9
#: qiskit.quantum_info.operators.channel.kraus.Kraus.add:9
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose:15
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract:9
msgid "if other cannot be converted to a channel, or"
msgstr ""

#: of qiskit.quantum_info.Kraus.compose:12
#: qiskit.quantum_info.operators.channel.kraus.Kraus.compose:12
msgid "The composition channel as a Kraus object."
msgstr ""

#: of qiskit.quantum_info.Kraus.expand:6
#: qiskit.quantum_info.operators.channel.kraus.Kraus.expand:6
msgid "the tensor product channel other ⊗ self as a Kraus object."
msgstr ""

#: of qiskit.quantum_info.Kraus.multiply:6
#: qiskit.quantum_info.operators.channel.kraus.Kraus.multiply:6
msgid "the scalar multiplication other * self as a Kraus object."
msgstr ""

#: of qiskit.quantum_info.Kraus.power:6
#: qiskit.quantum_info.operators.channel.kraus.Kraus.power:6
msgid "the matrix power of the SuperOp converted to a Kraus channel."
msgstr ""

#: of qiskit.quantum_info.Kraus.subtract:6
#: qiskit.quantum_info.operators.channel.kraus.Kraus.subtract:6
msgid "the linear subtraction self - other as Kraus object."
msgstr ""

#: of qiskit.quantum_info.Kraus.tensor:6
#: qiskit.quantum_info.operators.channel.kraus.Kraus.tensor:6
msgid "the tensor product channel self ⊗ other as a Kraus object."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:2
msgid "Operator"
msgstr ""

#: of qiskit.quantum_info.Operator:1
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel:1
#: qiskit.quantum_info.operators.operator.Operator:1
msgid "ベースクラス: :class:`qiskit.quantum_info.operators.base_operator.BaseOperator`"
msgstr ""

#: of qiskit.quantum_info.Operator:1
#: qiskit.quantum_info.operators.operator.Operator:1
msgid "Matrix operator class"
msgstr ""

#: of qiskit.quantum_info.Operator:3
#: qiskit.quantum_info.operators.operator.Operator:3
msgid ""
"This represents a matrix operator `M` that acts on a statevector as: "
"`M|v⟩` or on a density matrix as M.ρ.M^dagger."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`add <qiskit.quantum_info.Operator.add>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.add:1 qiskit.quantum_info.Operator.multiply:1
#: qiskit.quantum_info.operators.operator.Operator.add:1
#: qiskit.quantum_info.operators.operator.Operator.multiply:1
msgid "Return the operator self + other."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ""
":obj:`compose <qiskit.quantum_info.Operator.compose>`\\ \\(other\\[\\, "
"qargs\\, front\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`conjugate <qiskit.quantum_info.Operator.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.conjugate:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.conjugate:1
#: qiskit.quantum_info.operators.operator.Operator.conjugate:1
msgid "Return the conjugate of the operator."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`expand <qiskit.quantum_info.Operator.expand>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.expand:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand:1
#: qiskit.quantum_info.operators.operator.Operator.expand:1
msgid "Return the tensor product operator other ⊗ self."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ""
":obj:`is_unitary <qiskit.quantum_info.Operator.is_unitary>`\\ "
"\\(\\[atol\\, rtol\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.is_unitary:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.is_unitary:1
#: qiskit.quantum_info.operators.operator.Operator.is_unitary:1
msgid "Return True if operator is a unitary matrix."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`multiply <qiskit.quantum_info.Operator.multiply>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`power <qiskit.quantum_info.Operator.power>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.power:1
#: qiskit.quantum_info.operators.operator.Operator.power:1
msgid "Return the matrix power of the operator."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`subtract <qiskit.quantum_info.Operator.subtract>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.subtract:1
#: qiskit.quantum_info.operators.operator.Operator.subtract:1
msgid "Return the operator self - other."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`tensor <qiskit.quantum_info.Operator.tensor>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.tensor:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:1
#: qiskit.quantum_info.operators.operator.Operator.tensor:1
msgid "Return the tensor product operator self ⊗ other."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ""
":obj:`to_instruction <qiskit.quantum_info.Operator.to_instruction>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.to_instruction:1
#: qiskit.quantum_info.operators.operator.Operator.to_instruction:1
msgid "Convert to a UnitaryGate instruction."
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`to_operator <qiskit.quantum_info.Operator.to_operator>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.to_operator:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.to_operator:1
#: qiskit.quantum_info.operators.operator.Operator.to_operator:1
msgid "Convert operator to matrix operator class"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1
msgid ":obj:`transpose <qiskit.quantum_info.Operator.transpose>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Operator.rst:25:<autosummary>:1 of
#: qiskit.quantum_info.Operator.transpose:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.transpose:1
#: qiskit.quantum_info.operators.operator.Operator.transpose:1
msgid "Return the transpose of the operator."
msgstr ""

#: of qiskit.quantum_info.Operator.add:3 qiskit.quantum_info.Operator.compose:3
#: qiskit.quantum_info.Operator.expand:3
#: qiskit.quantum_info.Operator.subtract:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.add:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:3
#: qiskit.quantum_info.operators.operator.Operator.add:3
#: qiskit.quantum_info.operators.operator.Operator.compose:3
#: qiskit.quantum_info.operators.operator.Operator.expand:3
#: qiskit.quantum_info.operators.operator.Operator.subtract:3
msgid "an operator object."
msgstr ""

#: of qiskit.quantum_info.Operator.add:6
#: qiskit.quantum_info.operators.operator.Operator.add:6
msgid "the operator self + other."
msgstr ""

#: of qiskit.quantum_info.Operator.add:9
#: qiskit.quantum_info.Operator.subtract:9
#: qiskit.quantum_info.operators.base_operator.BaseOperator.add:9
#: qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:9
#: qiskit.quantum_info.operators.operator.Operator.add:9
#: qiskit.quantum_info.operators.operator.Operator.subtract:9
msgid "if other is not an operator, or has incompatible"
msgstr ""

#: of qiskit.quantum_info.Operator.compose:12
#: qiskit.quantum_info.operators.base_operator.BaseOperator.compose:12
#: qiskit.quantum_info.operators.operator.Operator.compose:12
msgid "The composed operator."
msgstr ""

#: of qiskit.quantum_info.Operator.compose:15
#: qiskit.quantum_info.operators.operator.Operator.compose:15
msgid "if other cannot be converted to an Operator or has"
msgstr ""

#: of qiskit.quantum_info.Operator.expand:6
#: qiskit.quantum_info.operators.base_operator.BaseOperator.expand:6
#: qiskit.quantum_info.operators.operator.Operator.expand:6
msgid "the tensor product operator other ⊗ self."
msgstr ""

#: of qiskit.quantum_info.Operator.expand:9
#: qiskit.quantum_info.Operator.tensor:9
#: qiskit.quantum_info.operators.operator.Operator.expand:9
#: qiskit.quantum_info.operators.operator.Operator.tensor:9
msgid "if other cannot be converted to an operator."
msgstr ""

#: of qiskit.quantum_info.Operator.multiply:6
#: qiskit.quantum_info.operators.operator.Operator.multiply:6
msgid "the operator other * self."
msgstr ""

#: of qiskit.quantum_info.Operator.multiply:9
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:9
#: qiskit.quantum_info.operators.operator.Operator.multiply:9
msgid "if other is not a valid complex number."
msgstr ""

#: of qiskit.quantum_info.Operator.power:3
#: qiskit.quantum_info.operators.operator.Operator.power:3
msgid "the power to raise the matrix to."
msgstr ""

#: of qiskit.quantum_info.Operator.power:6
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power:6
#: qiskit.quantum_info.operators.operator.Operator.power:6
msgid "the n-times composed operator."
msgstr ""

#: of qiskit.quantum_info.Operator.power:9
#: qiskit.quantum_info.operators.base_operator.BaseOperator.power:9
#: qiskit.quantum_info.operators.operator.Operator.power:9
msgid "if the input and output dimensions of the operator"
msgstr ""

#: of qiskit.quantum_info.Operator.subtract:6
#: qiskit.quantum_info.operators.operator.Operator.subtract:6
msgid "the operator self - other."
msgstr ""

#: of qiskit.quantum_info.Operator.tensor:3
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:3
#: qiskit.quantum_info.operators.operator.Operator.tensor:3
msgid "a operator subclass object."
msgstr ""

#: of qiskit.quantum_info.Operator.tensor:6
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:6
#: qiskit.quantum_info.operators.operator.Operator.tensor:6
msgid "the tensor product operator self ⊗ other."
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:2
msgid "PTM"
msgstr ""

#: of qiskit.quantum_info.PTM:1 qiskit.quantum_info.operators.channel.ptm.PTM:1
msgid "Initialize a quantum channel Pauli-Transfer Matrix operator."
msgstr ""

#: of qiskit.quantum_info.PTM:3 qiskit.quantum_info.operators.channel.ptm.PTM:3
msgid "Instruction or BaseOperator or matrix): data to initialize superoperator."
msgstr ""

#: of qiskit.quantum_info.PTM:6 qiskit.quantum_info.operators.channel.ptm.PTM:6
msgid "the input subsystem dimensions. [Default: None]"
msgstr ""

#: of qiskit.quantum_info.PTM:9 qiskit.quantum_info.operators.channel.ptm.PTM:9
msgid "the output subsystem dimensions. [Default: None]"
msgstr ""

#: of qiskit.quantum_info.PTM:13
#: qiskit.quantum_info.operators.channel.ptm.PTM:13
msgid "if input data is not an N-qubit channel or"
msgstr ""

#: of qiskit.quantum_info.PTM:18
#: qiskit.quantum_info.operators.channel.ptm.PTM:18
msgid ""
"If the input or output dimensions are None, they will be automatically "
"determined from the input data. The PTM representation is only valid for "
"N-qubit channels."
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`add <qiskit.quantum_info.PTM.add>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ""
":obj:`compose <qiskit.quantum_info.PTM.compose>`\\ \\(other\\[\\, "
"qargs\\, front\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`conjugate <qiskit.quantum_info.PTM.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`expand <qiskit.quantum_info.PTM.expand>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`multiply <qiskit.quantum_info.PTM.multiply>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`power <qiskit.quantum_info.PTM.power>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`subtract <qiskit.quantum_info.PTM.subtract>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`tensor <qiskit.quantum_info.PTM.tensor>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.PTM.rst:22:<autosummary>:1
msgid ":obj:`transpose <qiskit.quantum_info.PTM.transpose>`\\ \\(\\)"
msgstr ""

#: of qiskit.quantum_info.PTM.add:6
#: qiskit.quantum_info.operators.channel.ptm.PTM.add:6
msgid "the linear addition self + other as a PTM object."
msgstr ""

#: of qiskit.quantum_info.PTM.compose:12
#: qiskit.quantum_info.operators.channel.ptm.PTM.compose:12
msgid "The composition channel as a PTM object."
msgstr ""

#: of qiskit.quantum_info.PTM.expand:6
#: qiskit.quantum_info.operators.channel.ptm.PTM.expand:6
msgid "the tensor product channel other ⊗ self as a PTM object."
msgstr ""

#: of qiskit.quantum_info.PTM.multiply:6
#: qiskit.quantum_info.operators.channel.ptm.PTM.multiply:6
msgid "the scalar multiplication other * self as a PTM object."
msgstr ""

#: of qiskit.quantum_info.PTM.power:6
#: qiskit.quantum_info.operators.channel.ptm.PTM.power:6
msgid "the matrix power of the SuperOp converted to a PTM channel."
msgstr ""

#: of qiskit.quantum_info.PTM.subtract:6
#: qiskit.quantum_info.operators.channel.ptm.PTM.subtract:6
msgid "the linear subtraction self - other as PTM object."
msgstr ""

#: of qiskit.quantum_info.PTM.tensor:6
#: qiskit.quantum_info.operators.channel.ptm.PTM.tensor:6
msgid "the tensor product channel self ⊗ other as a PTM object."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:2
msgid "Pauli"
msgstr ""

#: of qiskit.quantum_info.Pauli:1 qiskit.quantum_info.operators.pauli.Pauli:1
msgid "A simple class representing Pauli Operators."
msgstr ""

#: of qiskit.quantum_info.Pauli:3 qiskit.quantum_info.operators.pauli.Pauli:3
msgid ""
"The form is P_zx = (-i)^dot(z,x) Z^z X^x where z and x are elements of "
"Z_2^n. That is, there are 4^n elements (no phases in this group)."
msgstr ""

#: of qiskit.quantum_info.Pauli:6 qiskit.quantum_info.operators.pauli.Pauli:6
msgid ""
"For example, for 1 qubit P_00 = Z^0 X^0 = I P_01 = X P_10 = Z P_11 = -iZX"
" = (-i) iY = Y"
msgstr ""

#: of qiskit.quantum_info.Pauli:12 qiskit.quantum_info.operators.pauli.Pauli:12
msgid ""
"The overload __mul__ does not track the sign: P1*P2 = Z^(z1+z2) X^(x1+x2)"
" but sgn_prod does __mul__ and track the phase: P1*P2 = "
"(-i)^dot(z1+z2,x1+x2) Z^(z1+z2) X^(x1+x2) where the sums are taken modulo"
" 2."
msgstr ""

#: of qiskit.quantum_info.Pauli:16 qiskit.quantum_info.operators.pauli.Pauli:16
msgid "Pauli vectors z and x are supposed to be defined as boolean numpy arrays."
msgstr ""

#: of qiskit.quantum_info.Pauli:18 qiskit.quantum_info.operators.pauli.Pauli:18
msgid ""
"Ref. Jeroen Dehaene and Bart De Moor Clifford group, stabilizer states, "
"and linear and quadratic operations over GF(2) Phys. Rev. A 68, 042318 – "
"Published 20 October 2003"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:16:<autosummary>:1
msgid ":obj:`numberofqubits <qiskit.quantum_info.Pauli.numberofqubits>`\\"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:16:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.numberofqubits:1
#: qiskit.quantum_info.operators.pauli.Pauli.numberofqubits:1
msgid "Number of qubits."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:16:<autosummary>:1
msgid ":obj:`x <qiskit.quantum_info.Pauli.x>`\\"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:16:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.x:1 qiskit.quantum_info.operators.pauli.Pauli.x:1
msgid "Getter of x."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:16:<autosummary>:1
msgid ":obj:`z <qiskit.quantum_info.Pauli.z>`\\"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:16:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.z:1 qiskit.quantum_info.operators.pauli.Pauli.z:1
msgid "Getter of z."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ""
":obj:`append_paulis <qiskit.quantum_info.Pauli.append_paulis>`\\ "
"\\(\\[paulis\\, pauli\\_labels\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.append_paulis:1
#: qiskit.quantum_info.operators.pauli.Pauli.append_paulis:1
msgid "Append pauli at the end."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ""
":obj:`delete_qubits <qiskit.quantum_info.Pauli.delete_qubits>`\\ "
"\\(indices\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.delete_qubits:1
#: qiskit.quantum_info.operators.pauli.Pauli.delete_qubits:1
msgid "Delete pauli at the indices."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`from_label <qiskit.quantum_info.Pauli.from_label>`\\ \\(label\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.from_label:1
#: qiskit.quantum_info.operators.pauli.Pauli.from_label:1
msgid "Take pauli string to construct pauli."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ""
":obj:`insert_paulis <qiskit.quantum_info.Pauli.insert_paulis>`\\ "
"\\(\\[indices\\, paulis\\, pauli\\_labels\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.insert_paulis:1
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:1
msgid "Insert or append pauli to the targeted indices."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`kron <qiskit.quantum_info.Pauli.kron>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.kron:1
#: qiskit.quantum_info.operators.pauli.Pauli.kron:1
msgid "Kron product of two paulis."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ""
":obj:`pauli_single <qiskit.quantum_info.Pauli.pauli_single>`\\ "
"\\(num\\_qubits\\, index\\, pauli\\_label\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.pauli_single:1
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single:1
msgid ""
"Generate single qubit pauli at index with pauli_label with length "
"num_qubits."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ""
":obj:`random <qiskit.quantum_info.Pauli.random>`\\ \\(num\\_qubits\\[\\, "
"seed\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.random:1
#: qiskit.quantum_info.operators.pauli.Pauli.random:1
msgid "Return a random Pauli on number of qubits."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`sgn_prod <qiskit.quantum_info.Pauli.sgn_prod>`\\ \\(p1\\, p2\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.sgn_prod:1
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod:1
msgid "Multiply two Paulis and track the phase."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`to_instruction <qiskit.quantum_info.Pauli.to_instruction>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.to_instruction:1
#: qiskit.quantum_info.operators.pauli.Pauli.to_instruction:1
msgid "Convert to Pauli circuit instruction."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`to_label <qiskit.quantum_info.Pauli.to_label>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.to_label:1
#: qiskit.quantum_info.operators.pauli.Pauli.to_label:1
msgid "Present the pauli labels in I, X, Y, Z format."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`to_matrix <qiskit.quantum_info.Pauli.to_matrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.to_matrix:1
#: qiskit.quantum_info.operators.pauli.Pauli.to_matrix:1
msgid "Convert Pauli to a matrix representation."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`to_operator <qiskit.quantum_info.Pauli.to_operator>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.to_operator:1
#: qiskit.quantum_info.operators.pauli.Pauli.to_operator:1
msgid "Convert to Operator object."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ":obj:`to_spmatrix <qiskit.quantum_info.Pauli.to_spmatrix>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.to_spmatrix:1
#: qiskit.quantum_info.operators.pauli.Pauli.to_spmatrix:1
msgid "Convert Pauli to a sparse matrix representation (CSR format)."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ""
":obj:`update_x <qiskit.quantum_info.Pauli.update_x>`\\ \\(x\\[\\, "
"indices\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.update_x:1
#: qiskit.quantum_info.operators.pauli.Pauli.update_x:1
msgid "Update partial or entire x."
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1
msgid ""
":obj:`update_z <qiskit.quantum_info.Pauli.update_z>`\\ \\(z\\[\\, "
"indices\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Pauli.rst:36:<autosummary>:1 of
#: qiskit.quantum_info.Pauli.update_z:1
#: qiskit.quantum_info.operators.pauli.Pauli.update_z:1
msgid "Update partial or entire z."
msgstr ""

#: of qiskit.quantum_info.Pauli.append_paulis:3
#: qiskit.quantum_info.Pauli.insert_paulis:7
#: qiskit.quantum_info.operators.pauli.Pauli.append_paulis:3
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:7
msgid "the to-be-inserted or appended pauli"
msgstr ""

#: of qiskit.quantum_info.Pauli.append_paulis:5
#: qiskit.quantum_info.Pauli.insert_paulis:9
#: qiskit.quantum_info.operators.pauli.Pauli.append_paulis:5
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:9
msgid "the to-be-inserted or appended pauli label"
msgstr ""

#: of qiskit.quantum_info.Pauli.append_paulis:8
#: qiskit.quantum_info.Pauli.delete_qubits:6
#: qiskit.quantum_info.Pauli.insert_paulis:19 qiskit.quantum_info.Pauli.kron:8
#: qiskit.quantum_info.Pauli.update_x:8 qiskit.quantum_info.Pauli.update_z:8
#: qiskit.quantum_info.operators.pauli.Pauli.append_paulis:8
#: qiskit.quantum_info.operators.pauli.Pauli.delete_qubits:6
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:19
#: qiskit.quantum_info.operators.pauli.Pauli.kron:8
#: qiskit.quantum_info.operators.pauli.Pauli.update_x:8
#: qiskit.quantum_info.operators.pauli.Pauli.update_z:8
msgid "self"
msgstr ""

#: of qiskit.quantum_info.Pauli.delete_qubits:3
#: qiskit.quantum_info.operators.pauli.Pauli.delete_qubits:3
msgid "the indices of to-be-deleted paulis"
msgstr ""

#: of qiskit.quantum_info.Pauli.from_label:3
#: qiskit.quantum_info.operators.pauli.Pauli.from_label:3
msgid ""
"The qubit index of pauli label is q_{n-1} ... q_0. E.g., a pauli is "
"$P_{n-1} \\otimes ... \\otimes P_0$"
msgstr ""

#: of qiskit.quantum_info.Pauli.from_label:6
#: qiskit.quantum_info.Pauli.to_label:5
#: qiskit.quantum_info.operators.pauli.Pauli.from_label:6
#: qiskit.quantum_info.operators.pauli.Pauli.to_label:5
msgid "pauli label"
msgstr ""

#: of qiskit.quantum_info.Pauli.from_label:9
#: qiskit.quantum_info.operators.pauli.Pauli.from_label:9
msgid "the constructed pauli"
msgstr ""

#: of qiskit.quantum_info.Pauli.from_label:12
#: qiskit.quantum_info.operators.pauli.Pauli.from_label:12
msgid "invalid character in the label"
msgstr ""

#: of qiskit.quantum_info.Pauli.insert_paulis:3
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:3
msgid "If indices is None, it means append at the end."
msgstr ""

#: of qiskit.quantum_info.Pauli.insert_paulis:5
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:5
msgid "the qubit indices to be inserted"
msgstr ""

#: of qiskit.quantum_info.Pauli.insert_paulis:14
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:14
msgid ""
"the indices refers to the localion of original paulis, e.g. if indices = "
"[0, 2], pauli_labels = ['Z', 'I'] and original pauli = 'ZYXI' the pauli "
"will be updated to ZY'I'XI'Z' 'Z' and 'I' are inserted before the qubit "
"at 0 and 2."
msgstr ""

#: of qiskit.quantum_info.Pauli.insert_paulis:22
#: qiskit.quantum_info.operators.pauli.Pauli.insert_paulis:22
msgid "provide both `paulis` and `pauli_labels` at the same time"
msgstr ""

#: of qiskit.quantum_info.Pauli.kron:3
#: qiskit.quantum_info.operators.pauli.Pauli.kron:3
msgid "Order is $P_2 (other) \\otimes P_1 (self)$"
msgstr ""

#: of qiskit.quantum_info.Pauli.kron:5
#: qiskit.quantum_info.operators.pauli.Pauli.kron:5
msgid "P2"
msgstr ""

#: of qiskit.quantum_info.Pauli.pauli_single:3
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single:3
msgid "the length of pauli"
msgstr ""

#: of qiskit.quantum_info.Pauli.pauli_single:5
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single:5
msgid "the qubit index to insert the single qubii"
msgstr ""

#: of qiskit.quantum_info.Pauli.pauli_single:7
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single:7
msgid "pauli"
msgstr ""

#: of qiskit.quantum_info.Pauli.pauli_single:10
#: qiskit.quantum_info.operators.pauli.Pauli.pauli_single:10
msgid "single qubit pauli"
msgstr ""

#: of qiskit.quantum_info.Pauli.random:3 qiskit.quantum_info.basis_state:5
#: qiskit.quantum_info.operators.pauli.Pauli.random:3
#: qiskit.quantum_info.projector:3
#: qiskit.quantum_info.states.states.basis_state:5
#: qiskit.quantum_info.states.states.projector:3
msgid "the number of qubits"
msgstr ""

#: of qiskit.quantum_info.Pauli.random:5
#: qiskit.quantum_info.operators.pauli.Pauli.random:5
#: qiskit.quantum_info.random.utils.random_density_matrix:12
#: qiskit.quantum_info.random.utils.random_state:6
#: qiskit.quantum_info.random.utils.random_unitary:5
#: qiskit.quantum_info.random_density_matrix:12
#: qiskit.quantum_info.random_state:6 qiskit.quantum_info.random_unitary:5
msgid "Optional. To set a random seed."
msgstr ""

#: of qiskit.quantum_info.Pauli.random:8
#: qiskit.quantum_info.operators.pauli.Pauli.random:8
msgid "the random pauli"
msgstr ""

#: of qiskit.quantum_info.Pauli.sgn_prod:3
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod:3
msgid "$P_3 = P_1 \\otimes P_2$: X*Y"
msgstr ""

#: of qiskit.quantum_info.Pauli.sgn_prod:5
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod:5
msgid "pauli 1"
msgstr ""

#: of qiskit.quantum_info.Pauli.sgn_prod:7
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod:7
msgid "pauli 2"
msgstr ""

#: of qiskit.quantum_info.Pauli.sgn_prod:10
#: qiskit.quantum_info.operators.pauli.Pauli.sgn_prod:10
msgid ""
"the multiplied pauli complex: the sign of the multiplication, 1, -1, 1j "
"or -1j"
msgstr ""

#: of qiskit.quantum_info.Pauli.to_label:3
#: qiskit.quantum_info.operators.pauli.Pauli.to_label:3
msgid "Order is $q_{n-1} .... q_0$"
msgstr ""

#: of qiskit.quantum_info.Pauli.to_matrix:3
#: qiskit.quantum_info.Pauli.to_spmatrix:3
#: qiskit.quantum_info.operators.pauli.Pauli.to_matrix:3
#: qiskit.quantum_info.operators.pauli.Pauli.to_spmatrix:3
msgid "Order is q_{n-1} .... q_0, i.e., $P_{n-1} \\otimes ... P_0$"
msgstr ""

#: of qiskit.quantum_info.Pauli.to_matrix:5
#: qiskit.quantum_info.operators.pauli.Pauli.to_matrix:5
msgid "a matrix that represents the pauli."
msgstr ""

#: of qiskit.quantum_info.Pauli.to_spmatrix:5
#: qiskit.quantum_info.operators.pauli.Pauli.to_spmatrix:5
msgid "a sparse matrix with CSR format that represnets the pauli."
msgstr ""

#: of qiskit.quantum_info.Pauli.update_x:3
#: qiskit.quantum_info.operators.pauli.Pauli.update_x:3
msgid "to-be-updated x"
msgstr ""

#: of qiskit.quantum_info.Pauli.update_x:5 qiskit.quantum_info.Pauli.update_z:5
#: qiskit.quantum_info.operators.pauli.Pauli.update_x:5
#: qiskit.quantum_info.operators.pauli.Pauli.update_z:5
msgid "to-be-updated qubit indices"
msgstr ""

#: of qiskit.quantum_info.Pauli.update_x:11
#: qiskit.quantum_info.operators.pauli.Pauli.update_x:11
msgid "when updating whole x, the number of qubits must be the same."
msgstr ""

#: of qiskit.quantum_info.Pauli.update_z:3
#: qiskit.quantum_info.operators.pauli.Pauli.update_z:3
msgid "to-be-updated z"
msgstr ""

#: of qiskit.quantum_info.Pauli.update_z:11
#: qiskit.quantum_info.operators.pauli.Pauli.update_z:11
msgid "when updating whole z, the number of qubits must be the same."
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:2
msgid "Stinespring"
msgstr ""

#: of qiskit.quantum_info.Stinespring:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring:1
msgid "Stinespring representation of a quantum channel"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:14:<autosummary>:1
msgid ":obj:`data <qiskit.quantum_info.Stinespring.data>`\\"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:14:<autosummary>:1 of
#: qiskit.quantum_info.Stinespring.data:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.data:1
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.data:1
msgid "Return data."
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`add <qiskit.quantum_info.Stinespring.add>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ""
":obj:`compose <qiskit.quantum_info.Stinespring.compose>`\\ \\(other\\[\\,"
" qargs\\, front\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`conjugate <qiskit.quantum_info.Stinespring.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`expand <qiskit.quantum_info.Stinespring.expand>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ""
":obj:`is_cptp <qiskit.quantum_info.Stinespring.is_cptp>`\\ \\(\\[atol\\, "
"rtol\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`multiply <qiskit.quantum_info.Stinespring.multiply>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`power <qiskit.quantum_info.Stinespring.power>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`subtract <qiskit.quantum_info.Stinespring.subtract>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`tensor <qiskit.quantum_info.Stinespring.tensor>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.Stinespring.rst:29:<autosummary>:1
msgid ":obj:`transpose <qiskit.quantum_info.Stinespring.transpose>`\\ \\(\\)"
msgstr ""

#: of qiskit.quantum_info.Stinespring.add:6
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.add:6
msgid "the linear addition self + other as a Stinespring object."
msgstr ""

#: of qiskit.quantum_info.Stinespring.compose:12
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.compose:12
msgid "The composition channel as a Stinespring object."
msgstr ""

#: of qiskit.quantum_info.Stinespring.expand:6
#: qiskit.quantum_info.Stinespring.tensor:6
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.expand:6
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.tensor:6
msgid "the tensor product channel other ⊗ self as a Stinespring object."
msgstr ""

#: of qiskit.quantum_info.Stinespring.multiply:6
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.multiply:6
msgid "the scalar multiplication other * self as a Stinespring object."
msgstr ""

#: of qiskit.quantum_info.Stinespring.power:6
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.power:6
msgid "the matrix power of the SuperOp converted to a Stinespring channel."
msgstr ""

#: of qiskit.quantum_info.Stinespring.subtract:6
#: qiskit.quantum_info.operators.channel.stinespring.Stinespring.subtract:6
msgid "the linear subtraction self - other as Stinespring object."
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:2
msgid "SuperOp"
msgstr ""

#: of qiskit.quantum_info.SuperOp:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp:1
msgid "Superoperator representation of a quantum channel"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`add <qiskit.quantum_info.SuperOp.add>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ""
":obj:`compose <qiskit.quantum_info.SuperOp.compose>`\\ \\(other\\[\\, "
"qargs\\, front\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`conjugate <qiskit.quantum_info.SuperOp.conjugate>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`expand <qiskit.quantum_info.SuperOp.expand>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`multiply <qiskit.quantum_info.SuperOp.multiply>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`power <qiskit.quantum_info.SuperOp.power>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1 of
#: qiskit.quantum_info.SuperOp.power:1
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power:1
msgid "Return the compose of a QuantumChannel with itself n times."
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`subtract <qiskit.quantum_info.SuperOp.subtract>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`tensor <qiskit.quantum_info.SuperOp.tensor>`\\ \\(other\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.SuperOp.rst:22:<autosummary>:1
msgid ":obj:`transpose <qiskit.quantum_info.SuperOp.transpose>`\\ \\(\\)"
msgstr ""

#: of qiskit.quantum_info.SuperOp.add:6
#: qiskit.quantum_info.operators.channel.superop.SuperOp.add:6
msgid "the linear addition self + other as a SuperOp object."
msgstr ""

#: of qiskit.quantum_info.SuperOp.compose:12
#: qiskit.quantum_info.operators.channel.superop.SuperOp.compose:12
msgid "The composition channel as a SuperOp object."
msgstr ""

#: of qiskit.quantum_info.SuperOp.expand:6
#: qiskit.quantum_info.operators.channel.superop.SuperOp.expand:6
msgid "the tensor product channel other ⊗ self as a SuperOp object."
msgstr ""

#: of qiskit.quantum_info.SuperOp.multiply:6
#: qiskit.quantum_info.operators.channel.superop.SuperOp.multiply:6
msgid "the scalar multiplication other * self as a SuperOp object."
msgstr ""

#: of qiskit.quantum_info.SuperOp.power:6
#: qiskit.quantum_info.operators.channel.superop.SuperOp.power:6
msgid "the n-times composition channel as a SuperOp object."
msgstr ""

#: of qiskit.quantum_info.SuperOp.subtract:6
#: qiskit.quantum_info.operators.channel.superop.SuperOp.subtract:6
msgid "the linear subtraction self - other as SuperOp object."
msgstr ""

#: of qiskit.quantum_info.SuperOp.tensor:6
#: qiskit.quantum_info.operators.channel.superop.SuperOp.tensor:6
msgid "the tensor product channel self ⊗ other as a SuperOp object."
msgstr ""

#: ../../api/qiskit.quantum_info.analyzation.rst:2
msgid "qiskit.quantum\\_info.analyzation package"
msgstr ""

#: of qiskit.quantum_info.analyzation:1
msgid "Module for functions for post processing results."
msgstr ""

#: ../../api/qiskit.quantum_info.analyzation.average.rst:2
msgid "qiskit.quantum\\_info.analyzation.average module"
msgstr ""

#: of qiskit.quantum_info.analyzation.average:1
msgid "A collection of useful functions for post processing results."
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:1
msgid "Compute the mean value of an diagonal observable."
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:3
msgid ""
"Takes in a diagonal observable in dictionary, list or matrix format and "
"then calculates the sum_i value(i) P(i) where value(i) is the value of "
"the observable for state i."
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:7
msgid "a dict of outcomes from an experiment"
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:9
msgid "The observable to be averaged over."
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:12
msgid "{\"00\": 1, \"11\": 1, \"01\": -1, \"10\": -1}"
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:13
msgid "[[1, 0, 0, 0], [0, -1, 0, 0, ], [0, 0, -1, 0], [0, 0, 0, 1]]"
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:14
msgid "[1, -1, -1, 1]"
msgstr ""

#: of qiskit.quantum_info.analyzation.average.average_data:17
msgid "Average of the observable"
msgstr ""

#: ../../api/qiskit.quantum_info.analyzation.make_observable.rst:2
msgid "qiskit.quantum\\_info.analyzation.make\\_observable module"
msgstr ""

#: of qiskit.quantum_info.analyzation.make_observable:1
msgid "Helper functions for building dictionaries from matrices and lists."
msgstr ""

#: of qiskit.quantum_info.analyzation.make_observable.make_dict_observable:1
msgid "Convert an observable in matrix form to dictionary form."
msgstr ""

#: of qiskit.quantum_info.analyzation.make_observable.make_dict_observable:3
msgid ""
"Takes in a diagonal observable as a matrix and converts it to a "
"dictionary form. Can also handle a list sorted of the diagonal elements."
msgstr ""

#: of qiskit.quantum_info.analyzation.make_observable.make_dict_observable:6
msgid "The observable to be converted to dictionary"
msgstr ""

#: of qiskit.quantum_info.analyzation.make_observable.make_dict_observable:10
msgid ""
"A dictionary with all observable states as keys, and corresponding values"
" being the observed value for that state"
msgstr ""

#: ../../api/qiskit.quantum_info.basis_state.rst:2
msgid "basis_state"
msgstr ""

#: of qiskit.quantum_info.basis_state:1
#: qiskit.quantum_info.states.states.basis_state:1
msgid "Return a basis state ndarray."
msgstr ""

#: of qiskit.quantum_info.basis_state:3
#: qiskit.quantum_info.states.states.basis_state:3
msgid "a string representing the state."
msgstr ""

#: of qiskit.quantum_info.basis_state:8
#: qiskit.quantum_info.states.states.basis_state:8
msgid "state(2**num) a quantum state with basis basis state."
msgstr ""

#: of qiskit.quantum_info.basis_state:9
#: qiskit.quantum_info.states.states.basis_state:9
msgid "ndarray  Raises:    QiskitError: if the dimensions is wrong"
msgstr ""

#: of qiskit.quantum_info.basis_state:9
#: qiskit.quantum_info.states.states.basis_state:9
msgid "ndarray"
msgstr ""

#: of qiskit.quantum_info.basis_state:11
#: qiskit.quantum_info.states.states.basis_state:11
msgid "Raises:"
msgstr ""

#: of qiskit.quantum_info.basis_state:12
#: qiskit.quantum_info.states.states.basis_state:12
msgid "QiskitError: if the dimensions is wrong"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.rst:2
msgid "qiskit.quantum\\_info.operators package"
msgstr ""

#: of qiskit.quantum_info.operators:1
msgid "Quantum Operators."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.base_operator.rst:2
msgid "qiskit.quantum\\_info.operators.base\\_operator module"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator:1
msgid "Abstract BaseOperator class."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator:1
msgid "Abstract linear operator base class"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add:1
#: qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:1
msgid "Return the linear operator self + other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.add:6
msgid "the linear operator self + other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.adjoint:1
msgid "Return the adjoint of the operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.compose:15
msgid "if other cannot be converted to an operator, or has"
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.copy:1
msgid "Make a copy of current operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.dim:1
msgid "Return tuple (input_shape, output_shape)."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.expand:9
#: qiskit.quantum_info.operators.base_operator.BaseOperator.tensor:9
msgid "if other is not an operator."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.input_dims:1
msgid "Return tuple of input dimension for specified subsystems."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.multiply:6
msgid "the linear operator other * self."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.output_dims:1
msgid "Return tuple of output dimension for specified subsystems."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.power:1
msgid "Return the compose of a operator with itself n times."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.rep:1
msgid "Return operator representation string."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:1
msgid "Return the linear operator self - other."
msgstr ""

#: of qiskit.quantum_info.operators.base_operator.BaseOperator.subtract:6
msgid "the linear operator self - other."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.rst:2
msgid "qiskit.quantum\\_info.operators.channel package"
msgstr ""

#: of qiskit.quantum_info.operators.channel:1
msgid "Quantum Channel Representations Package"
msgstr ""

#: of qiskit.quantum_info.operators.channel:3
msgid "For explanation of terminology and details of operations see Ref. [1]"
msgstr ""

#: of qiskit.quantum_info.operators.channel:8
#: qiskit.quantum_info.operators.channel.chi:16
#: qiskit.quantum_info.operators.channel.choi:17
#: qiskit.quantum_info.operators.channel.kraus:19
#: qiskit.quantum_info.operators.channel.ptm:22
#: qiskit.quantum_info.operators.channel.stinespring:19
#: qiskit.quantum_info.operators.channel.superop:16
msgid ""
"[1] C.J. Wood, J.D. Biamonte, D.G. Cory, Quant. Inf. Comp. 15, 0579-0811 "
"(2015)"
msgstr ""

#: of qiskit.quantum_info.operators.channel:8
#: qiskit.quantum_info.operators.channel.chi:15
#: qiskit.quantum_info.operators.channel.choi:16
#: qiskit.quantum_info.operators.channel.kraus:18
#: qiskit.quantum_info.operators.channel.ptm:21
#: qiskit.quantum_info.operators.channel.stinespring:18
#: qiskit.quantum_info.operators.channel.superop:15
msgid "Open access: arXiv:1111.6950 [quant-ph]"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.chi.rst:2
msgid "qiskit.quantum\\_info.operators.channel.chi module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.chi:1
msgid "Chi-matrix representation of a Quantum Channel."
msgstr ""

#: of qiskit.quantum_info.operators.channel.chi:4
msgid "This is the matrix χ such that:"
msgstr ""

#: of qiskit.quantum_info.operators.channel.chi:6
msgid "E(ρ) = sum_{i, j} χ_{i,j} P_i.ρ.P_j^dagger"
msgstr ""

#: of qiskit.quantum_info.operators.channel.chi:8
#: qiskit.quantum_info.operators.channel.ptm:8
msgid ""
"where [P_i, i=0,...4^{n-1}] is the n-qubit Pauli basis in lexicographic "
"order."
msgstr ""

#: of qiskit.quantum_info.operators.channel.chi:10
#: qiskit.quantum_info.operators.channel.choi:11
#: qiskit.quantum_info.operators.channel.kraus:13
#: qiskit.quantum_info.operators.channel.ptm:16
#: qiskit.quantum_info.operators.channel.stinespring:13
#: qiskit.quantum_info.operators.channel.superop:10
msgid "See [1] for further details."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.choi.rst:2
msgid "qiskit.quantum\\_info.operators.channel.choi module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.choi:1
msgid "Choi-matrix representation of a Quantum Channel."
msgstr ""

#: of qiskit.quantum_info.operators.channel.choi:4
msgid ""
"For a quantum channel E, the Choi matrix Λ is defined by: Λ = sum_{i,j} "
"|i⟩⟨j|⊗E(|i⟩⟨j|)"
msgstr ""

#: of qiskit.quantum_info.operators.channel.choi:7
msgid "Evolution of a density matrix with respect to the Choi-matrix is given by:"
msgstr ""

#: of qiskit.quantum_info.operators.channel.choi:9
msgid "E(ρ) = Tr_{1}[Λ.(ρ^T⊗I)]"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.kraus.rst:2
msgid "qiskit.quantum\\_info.operators.channel.kraus module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.kraus:1
msgid "Kraus representation of a Quantum Channel."
msgstr ""

#: of qiskit.quantum_info.operators.channel.kraus:4
msgid ""
"The Kraus representation for a quantum channel E is given by a set of "
"matrics [A_i] such that"
msgstr ""

#: of qiskit.quantum_info.operators.channel.kraus:6
msgid "E(ρ) = sum_i A_i.ρ.A_i^dagger"
msgstr ""

#: of qiskit.quantum_info.operators.channel.kraus:8
msgid ""
"A general operator map G can also be written using the generalized Kraus "
"representation which is given by two sets of matrices [A_i], [B_i] such "
"that"
msgstr ""

#: of qiskit.quantum_info.operators.channel.kraus:11
msgid "G(ρ) = sum_i A_i.ρ.B_i^dagger"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.ptm.rst:2
msgid "qiskit.quantum\\_info.operators.channel.ptm module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.ptm:1
msgid "Pauli Transfer Matrix (PTM) representation of a Quantum Channel."
msgstr ""

#: of qiskit.quantum_info.operators.channel.ptm:3
msgid ""
"The PTM is the n-qubit superoperator defined with respect to "
"vectorization in the Pauli basis. For a quantum channel E, the PTM is "
"defined by"
msgstr ""

#: of qiskit.quantum_info.operators.channel.ptm:6
msgid "PTM_{i,j} = Tr[P_i.E(P_j)]"
msgstr ""

#: of qiskit.quantum_info.operators.channel.ptm:10
msgid "Evolution is given by"
msgstr ""

#: of qiskit.quantum_info.operators.channel.ptm:12
msgid "|E(ρ)⟩⟩_p = PTM|ρ⟩⟩_p"
msgstr ""

#: of qiskit.quantum_info.operators.channel.ptm:14
msgid ""
"where |A⟩⟩_p denotes vectorization in the Pauli basis: ⟨i|A⟩⟩_p = "
"Tr[P_i.A]"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.quantum_channel.rst:2
msgid "qiskit.quantum\\_info.operators.channel.quantum\\_channel module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.quantum_channel:1
msgid "Abstract base class for Quantum Channels."
msgstr ""

#: of qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel:1
msgid "Quantum channel representation base class."
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.is_cp:1
msgid "Test if Choi-matrix is completely-positive (CP)"
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.is_cptp:1
msgid "Return True if completely-positive trace-preserving (CPTP)."
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.is_tp:1
msgid "Test if a channel is completely-positive (CP)"
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.is_unitary:1
msgid "Return True if QuantumChannel is a unitary channel."
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_instruction:1
msgid "Convert to a Kraus or UnitaryGate circuit instruction."
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_instruction:3
msgid ""
"If the channel is unitary it will be added as a unitary gate, otherwise "
"it will be added as a kraus simulator instruction."
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_instruction:6
msgid "A kraus instruction for the channel."
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_instruction:9
msgid "if input data is not an N-qubit CPTP quantum channel."
msgstr ""

#: of
#: qiskit.quantum_info.operators.channel.quantum_channel.QuantumChannel.to_operator:1
msgid "Try to convert channel to a unitary representation Operator."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.stinespring.rst:2
msgid "qiskit.quantum\\_info.operators.channel.stinespring module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.stinespring:1
msgid "Stinespring representation of a Quantum Channel."
msgstr ""

#: of qiskit.quantum_info.operators.channel.stinespring:4
msgid ""
"The Stinespring representation for a quantum channel E is given by a "
"rectangular matrix A such that"
msgstr ""

#: of qiskit.quantum_info.operators.channel.stinespring:6
msgid "E(ρ) = Tr_2[A.ρ.A^dagger]"
msgstr ""

#: of qiskit.quantum_info.operators.channel.stinespring:8
msgid ""
"A general operator map G can also be written using the generalized Kraus "
"representation which is given by two matrices A, B such that"
msgstr ""

#: of qiskit.quantum_info.operators.channel.stinespring:11
msgid "G(ρ) = Tr_2[A.ρ.B^dagger]"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.superop.rst:2
msgid "qiskit.quantum\\_info.operators.channel.superop module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.superop:1
msgid "Superoperator representation of a Quantum Channel."
msgstr ""

#: of qiskit.quantum_info.operators.channel.superop:4
msgid ""
"For a quantum channel E, the superoperator is defined as the matrix S "
"such that"
msgstr ""

#: of qiskit.quantum_info.operators.channel.superop:6
msgid "|E(ρ)⟩⟩ = S|ρ⟩⟩"
msgstr ""

#: of qiskit.quantum_info.operators.channel.superop:8
msgid "where |A⟩⟩ denotes the column stacking vectorization of a matrix A."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.channel.transformations.rst:2
msgid "qiskit.quantum\\_info.operators.channel.transformations module"
msgstr ""

#: of qiskit.quantum_info.operators.channel.transformations:1
msgid "Transformations between QuantumChannel represenations."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.measures.rst:2
msgid "qiskit.quantum\\_info.operators.measures module"
msgstr ""

#: of qiskit.quantum_info.operators.measures:1
msgid "A collection of useful quantum information functions for operators."
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:1
#: qiskit.quantum_info.process_fidelity:1
msgid "Return the process fidelity between two quantum channels."
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:3
#: qiskit.quantum_info.process_fidelity:3
msgid "This is given by"
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:5
#: qiskit.quantum_info.process_fidelity:5
msgid "F_p(E1, E2) = Tr[S2^dagger.S1])/dim^2"
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:7
#: qiskit.quantum_info.process_fidelity:7
msgid ""
"where S1 and S2 are the SuperOp matrices for channels E1 and E2, and dim "
"is the dimension of the input output statespace."
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:10
#: qiskit.quantum_info.operators.measures.process_fidelity:12
#: qiskit.quantum_info.process_fidelity:10
#: qiskit.quantum_info.process_fidelity:12
msgid "a quantum channel or unitary matrix."
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:14
#: qiskit.quantum_info.process_fidelity:14
msgid "require input channels to be CPTP [Default: True]."
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:17
#: qiskit.quantum_info.process_fidelity:17
#: qiskit.quantum_info.state_fidelity:21
#: qiskit.quantum_info.states.measures.state_fidelity:21
msgid "The state fidelity F(state1, state2)."
msgstr ""

#: of qiskit.quantum_info.operators.measures.process_fidelity:20
#: qiskit.quantum_info.process_fidelity:20
msgid "if inputs channels do not have the same dimensions,"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.operator.rst:2
msgid "qiskit.quantum\\_info.operators.operator module"
msgstr ""

#: of qiskit.quantum_info.operators.operator:1
msgid "Matrix Operator class."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.pauli.rst:2
msgid "qiskit.quantum\\_info.operators.pauli module"
msgstr ""

#: of qiskit.quantum_info.operators.pauli:1
msgid "Tools for working with Pauli Operators."
msgstr ""

#: of qiskit.quantum_info.operators.pauli:3
msgid "A simple pauli class and some tools."
msgstr ""

#: of qiskit.quantum_info.operators.pauli.pauli_group:1
#: qiskit.quantum_info.pauli_group:1
msgid "Return the Pauli group with 4^n elements."
msgstr ""

#: of qiskit.quantum_info.operators.pauli.pauli_group:3
#: qiskit.quantum_info.pauli_group:3
msgid ""
"The phases have been removed. case 'weight' is ordered by Pauli weights "
"and case 'tensor' is ordered by I,X,Y,Z counting lowest qubit fastest."
msgstr ""

#: of qiskit.quantum_info.operators.pauli.pauli_group:9
#: qiskit.quantum_info.pauli_group:9
msgid "determines ordering of group elements ('weight' or 'tensor')"
msgstr ""

#: of qiskit.quantum_info.operators.pauli.pauli_group:12
#: qiskit.quantum_info.pauli_group:12
msgid "list of Pauli objects"
msgstr ""

#: of qiskit.quantum_info.operators.pauli.pauli_group:15
#: qiskit.quantum_info.pauli_group:15
msgid "case is not 'weight' or 'tensor'"
msgstr ""

#: of qiskit.quantum_info.operators.pauli.pauli_group:16
#: qiskit.quantum_info.pauli_group:16
msgid "number_of_qubits is larger than 4"
msgstr ""

#: ../../api/qiskit.quantum_info.operators.predicates.rst:2
msgid "qiskit.quantum\\_info.operators.predicates module"
msgstr ""

#: of qiskit.quantum_info.operators.predicates:1
msgid "Predicates for operators."
msgstr ""

#: of qiskit.quantum_info.operators.predicates.is_diagonal_matrix:1
msgid "Test if an array is a diagonal matrix"
msgstr ""

#: of qiskit.quantum_info.operators.predicates.is_hermitian_matrix:1
msgid "Test if an array is a Hermitian matrix"
msgstr ""

#: of qiskit.quantum_info.operators.predicates.is_identity_matrix:1
msgid "Test if an array is an identity matrix."
msgstr ""

#: of
#: qiskit.quantum_info.operators.predicates.is_positive_semidefinite_matrix:1
msgid "Test if a matrix is positive semidefinite"
msgstr ""

#: of qiskit.quantum_info.operators.predicates.is_square_matrix:1
msgid "Test if an array is a square matrix."
msgstr ""

#: of qiskit.quantum_info.operators.predicates.is_symmetric_matrix:1
msgid "Test if an array is a symmetrix matrix"
msgstr ""

#: of qiskit.quantum_info.operators.predicates.is_unitary_matrix:1
msgid "Test if an array is a unitary matrix."
msgstr ""

#: ../../api/qiskit.quantum_info.operators.quaternion.rst:2
msgid "qiskit.quantum\\_info.operators.quaternion module"
msgstr ""

#: of qiskit.quantum_info.operators.quaternion:1
msgid "A module for using quaternions."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion:1
msgid "A class representing a Quaternion."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.norm:1
msgid "Norm of quaternion."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.normalize:1
msgid ""
"Normalizes a Quaternion to unit length so that it represents a valid "
"rotation."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.normalize:4
msgid "Do an inplace normalization."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.normalize:7
msgid "Normalized quaternion."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.to_matrix:1
msgid "Converts a unit-length quaternion to a rotation matrix."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.to_matrix:3
msgid "Rotation matrix."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.to_zyz:1
msgid "Converts a unit-length quaternion to a sequence of ZYZ Euler angles."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.Quaternion.to_zyz:4
#: qiskit.quantum_info.operators.quaternion.quaternion_from_euler:3
msgid "Array of Euler angles."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation:1
msgid "Return quaternion for rotation about given axis."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation:3
msgid "Angle in radians."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation:5
msgid "Axis for rotation"
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation:8
msgid "Quaternion for axis rotation."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_axis_rotation:11
msgid "Invalid input axis."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_euler:1
msgid "Generate a quaternion from a set of Euler angles."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_euler:5
msgid "Order of Euler rotations.  'yzy' is default."
msgstr ""

#: of qiskit.quantum_info.operators.quaternion.quaternion_from_euler:8
msgid "Quaternion representation of Euler rotation."
msgstr ""

#: ../../api/qiskit.quantum_info.pauli_group.rst:2
msgid "pauli_group"
msgstr ""

#: ../../api/qiskit.quantum_info.process_fidelity.rst:2
msgid "process_fidelity"
msgstr ""

#: ../../api/qiskit.quantum_info.projector.rst:2
msgid "projector"
msgstr ""

#: of qiskit.quantum_info.projector:1
#: qiskit.quantum_info.states.states.projector:1
msgid "maps a pure state to a state matrix"
msgstr ""

#: of qiskit.quantum_info.projector:5
#: qiskit.quantum_info.states.states.projector:5
msgid "determine if state matrix of column work"
msgstr ""

#: of qiskit.quantum_info.projector:8
#: qiskit.quantum_info.states.states.projector:8
msgid ""
"state_mat(2**num, 2**num) if flatten is false ndarray:  state_mat(4**num)"
" if flatten is true stacked on by the column"
msgstr ""

#: ../../api/qiskit.quantum_info.purity.rst:2
msgid "purity"
msgstr ""

#: of qiskit.quantum_info.purity:1 qiskit.quantum_info.states.states.purity:1
#: qiskit.tools.qi.qi.purity:1
msgid "Calculate the purity of a quantum state."
msgstr ""

#: of qiskit.quantum_info.purity:3 qiskit.quantum_info.states.states.purity:3
#: qiskit.tools.qi.qi.purity:3
msgid "a quantum state"
msgstr ""

#: of qiskit.quantum_info.purity:6 qiskit.quantum_info.states.states.purity:6
#: qiskit.tools.qi.qi.purity:6
msgid "purity."
msgstr ""

#: ../../api/qiskit.quantum_info.random.rst:2
msgid "qiskit.quantum\\_info.random package"
msgstr ""

#: of qiskit.quantum_info.random:1
msgid "Methods for generating random quantum information objects."
msgstr ""

#: ../../api/qiskit.quantum_info.random.utils.rst:2
msgid "qiskit.quantum\\_info.random.utils module"
msgstr ""

#: of qiskit.quantum_info.random.utils:1
msgid "Methods to create random unitaries, states, etc."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_density_matrix:1
#: qiskit.quantum_info.random_density_matrix:1
msgid "Generate a random density matrix rho."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_density_matrix:3
#: qiskit.quantum_info.random_density_matrix:3
msgid "the length of the density matrix."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_density_matrix:5
#: qiskit.quantum_info.random_density_matrix:5
msgid "the rank of the density matrix. The default value is full-rank."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_density_matrix:8
#: qiskit.quantum_info.random_density_matrix:8
msgid ""
"the method to use. 'Hilbert-Schmidt': sample rho from the Hilbert-Schmidt"
" metric. 'Bures': sample rho from the Bures metric."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_density_matrix:15
#: qiskit.quantum_info.random_density_matrix:15
msgid "rho (length, length) a density matrix."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_density_matrix:18
#: qiskit.quantum_info.random_density_matrix:18
msgid "if the method is not valid."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_state:1
#: qiskit.quantum_info.random_state:1
msgid ""
"Return a random quantum state from the uniform (Haar) measure on state "
"space."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_state:4
#: qiskit.quantum_info.random_state:4
msgid "the dim of the state spaxe"
msgstr ""

#: of qiskit.quantum_info.random.utils.random_state:9
#: qiskit.quantum_info.random_state:9
msgid "state(2**num) a random quantum state."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_unitary:1
#: qiskit.quantum_info.random_unitary:1
msgid "Return a random dim x dim unitary Operator from the Haar measure."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_unitary:3
#: qiskit.quantum_info.random_unitary:3
msgid "the dim of the state space."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_unitary:8
#: qiskit.quantum_info.random_unitary:8
msgid "(dim, dim) unitary operator."
msgstr ""

#: of qiskit.quantum_info.random.utils.random_unitary:11
#: qiskit.quantum_info.random_unitary:11
msgid "if dim is not a positive power of 2."
msgstr ""

#: ../../api/qiskit.quantum_info.random_density_matrix.rst:2
msgid "random_density_matrix"
msgstr ""

#: ../../api/qiskit.quantum_info.random_state.rst:2
msgid "random_state"
msgstr ""

#: ../../api/qiskit.quantum_info.random_unitary.rst:2
msgid "random_unitary"
msgstr ""

#: ../../api/qiskit.quantum_info.state_fidelity.rst:2
msgid "state_fidelity"
msgstr ""

#: of qiskit.quantum_info.state_fidelity:1
#: qiskit.quantum_info.states.measures.state_fidelity:1
msgid "Return the state fidelity between two quantum states."
msgstr ""

#: of qiskit.quantum_info.state_fidelity:3
#: qiskit.quantum_info.states.measures.state_fidelity:3
msgid ""
"Either input may be a state vector, or a density matrix. The state "
"fidelity (F) for two density matrices is defined as::"
msgstr ""

#: of qiskit.quantum_info.state_fidelity:8
#: qiskit.quantum_info.states.measures.state_fidelity:8
msgid "For a pure state and mixed state the fidelity is given by::"
msgstr ""

#: of qiskit.quantum_info.state_fidelity:12
#: qiskit.quantum_info.states.measures.state_fidelity:12
msgid "For two pure states the fidelity is given by::"
msgstr ""

#: of qiskit.quantum_info.state_fidelity:16
#: qiskit.quantum_info.state_fidelity:18
#: qiskit.quantum_info.states.measures.state_fidelity:16
#: qiskit.quantum_info.states.measures.state_fidelity:18
msgid "a quantum state vector or density matrix."
msgstr ""

#: ../../api/qiskit.quantum_info.states.rst:2
msgid "qiskit.quantum\\_info.states package"
msgstr ""

#: of qiskit.quantum_info.states:1
msgid "Quantum States."
msgstr ""

#: ../../api/qiskit.quantum_info.states.measures.rst:2
msgid "qiskit.quantum\\_info.states.measures module"
msgstr ""

#: of qiskit.quantum_info.states.measures:1 qiskit.quantum_info.states.states:1
msgid "A collection of useful quantum information functions for states."
msgstr ""

#: ../../api/qiskit.quantum_info.states.states.rst:2
msgid "qiskit.quantum\\_info.states.states module"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.rst:2
msgid "qiskit.quantum\\_info.synthesis package"
msgstr ""

#: of qiskit.quantum_info.synthesis:1
msgid "State and Unitary synthesis methods."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:2
msgid "TwoQubitBasisDecomposer"
msgstr ""

#: of qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer:1
msgid ""
"A class for decomposing 2-qubit unitaries into minimal number of uses of "
"a 2-qubit basis gate."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid ""
":obj:`__call__ "
"<qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.__call__>`\\ "
"\\(target\\[\\, basis\\_fidelity\\]\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
#: of qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.__call__:1
msgid ""
"Decompose a two-qubit unitary over fixed basis + SU(2) using the best "
"approximation given that each basis application has a finite fidelity."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid ""
":obj:`decomp0 "
"<qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp0>`\\ "
"\\(target\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid "Decompose target ~Ud(x, y, z) with 0 uses of the basis gate."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid ""
":obj:`decomp1 "
"<qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp1>`\\ "
"\\(target\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid "Decompose target ~Ud(x, y, z) with 1 uses of the basis gate ~Ud(a, b, c)."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid ""
":obj:`decomp2_supercontrolled "
"<qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp2_supercontrolled>`\\"
" \\(target\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid "Decompose target ~Ud(x, y, z) with 2 uses of the basis gate."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid ""
":obj:`decomp3_supercontrolled "
"<qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp3_supercontrolled>`\\"
" \\(target\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid "Decompose target with 3 uses of the basis."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
msgid ""
":obj:`traces "
"<qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.traces>`\\ "
"\\(target\\)"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.rst:19:<autosummary>:1
#: of qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.traces:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer.traces:1
msgid ""
"Give the expected traces |Tr(U.Utarget^dag)| for different number of "
"basis gates"
msgstr ""

#: of qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp0:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer.decomp0:1
msgid ""
"Decompose target ~Ud(x, y, z) with 0 uses of the basis gate. Result Ur "
"has trace: |Tr(Ur.Utarget^dag)| = 4|(cos(x)cos(y)cos(z)+ j "
"sin(x)sin(y)sin(z)|, which is optimal for all targets and bases"
msgstr ""

#: of qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp1:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer.decomp1:1
msgid ""
"Decompose target ~Ud(x, y, z) with 1 uses of the basis gate ~Ud(a, b, c)."
" Result Ur has trace: |Tr(Ur.Utarget^dag)| = 4|cos(x-a)cos(y-b)cos(z-c) +"
" j sin(x-a)sin(y-b)sin(z-c)|, which is optimal for all targets and bases "
"with z==0 or c==0"
msgstr ""

#: of
#: qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp2_supercontrolled:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer.decomp2_supercontrolled:1
msgid ""
"Decompose target ~Ud(x, y, z) with 2 uses of the basis gate. For "
"supercontrolled basis ~Ud(pi/4, b, 0), all b, result Ur has trace: "
"|Tr(Ur.Utarget^dag)| = 4cos(z) which is the optimal approximation for "
"basis of CNOT-class ~Ud(pi/4, 0, 0) or DCNOT-class ~Ud(pi/4, pi/4, 0) and"
" any target. May be sub-optimal for b!=0 (eg there exists exact "
"decomposition for any target using B"
msgstr ""

#: of
#: qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp2_supercontrolled:7
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer.decomp2_supercontrolled:7
msgid "B~Ud(pi/4, pi/8, 0), but not this decomposition.)"
msgstr ""

#: of
#: qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp2_supercontrolled:8
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer.decomp2_supercontrolled:8
msgid ""
"This is an exact decomposition for supercontrolled basis and target "
"~Ud(x, y, 0). No guarantees for non-supercontrolled basis."
msgstr ""

#: of
#: qiskit.quantum_info.synthesis.TwoQubitBasisDecomposer.decomp3_supercontrolled:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitBasisDecomposer.decomp3_supercontrolled:1
msgid ""
"Decompose target with 3 uses of the basis. This is an exact decomposition"
" for supercontrolled basis ~Ud(pi/4, b, 0), all b, and any target. No "
"guarantees for non-supercontrolled basis."
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.euler_angles_1q.rst:2
msgid "euler_angles_1q"
msgstr ""

#: of qiskit.quantum_info.synthesis.euler_angles_1q:1
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q:1
msgid "Compute Euler angles for a single-qubit gate."
msgstr ""

#: of qiskit.quantum_info.synthesis.euler_angles_1q:3
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q:3
msgid ""
"Find angles (theta, phi, lambda) such that unitary_matrix = phase * "
"Rz(phi) * Ry(theta) * Rz(lambda)"
msgstr ""

#: of qiskit.quantum_info.synthesis.euler_angles_1q:6
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q:6
msgid "2x2 unitary matrix"
msgstr ""

#: of qiskit.quantum_info.synthesis.euler_angles_1q:9
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q:9
msgid "(theta, phi, lambda) Euler angles of SU(2)"
msgstr ""

#: of qiskit.quantum_info.synthesis.euler_angles_1q:12
#: qiskit.quantum_info.synthesis.two_qubit_decompose.euler_angles_1q:12
msgid "if unitary_matrix not 2x2, or failure"
msgstr ""

#: ../../api/qiskit.quantum_info.synthesis.two_qubit_decompose.rst:2
msgid "qiskit.quantum\\_info.synthesis.two\\_qubit\\_decompose module"
msgstr ""

#: of qiskit.quantum_info.synthesis.two_qubit_decompose:1
msgid ""
"Expand 2-qubit Unitary operators into an equivalent decomposition over "
"SU(2)+fixed 2q basis gate, using the KAK method."
msgstr ""

#: of qiskit.quantum_info.synthesis.two_qubit_decompose:4
msgid ""
"May be exact or approximate expansion. In either case uses the minimal "
"number of basis applications."
msgstr ""

#: of qiskit.quantum_info.synthesis.two_qubit_decompose:7
msgid ""
"Method is described in Appendix B of Cross, A. W., Bishop, L. S., "
"Sheldon, S., Nation, P. D. & Gambetta, J. M. Validating quantum computers"
" using randomized model circuits. arXiv:1811.12926 [quant-ph] (2018)."
msgstr ""

#: of
#: qiskit.quantum_info.synthesis.two_qubit_decompose.TwoQubitWeylDecomposition:1
msgid ""
"Decompose two-qubit unitary U = (K1l⊗K1r).Exp(i a xx + i b yy + i c "
"zz).(K2l⊗K2r) , where U ∈ U(4), (K1l|K1r|K2l|K2r) ∈ SU(2), and we stay in"
" the \"Weyl Chamber\" 𝜋/4 ≥ a ≥ b ≥ |c|"
msgstr ""

#: of qiskit.quantum_info.synthesis.two_qubit_decompose.Ud:1
msgid "Generates the array Exp(i(a xx + b yy + c zz))"
msgstr ""

#: of
#: qiskit.quantum_info.synthesis.two_qubit_decompose.decompose_two_qubit_product_gate:1
msgid ""
"Decompose U = Ul⊗Ur where U in SU(4), and Ul, Ur in SU(2). Throws "
"QiskitError if this isn't possible."
msgstr ""

#: of qiskit.quantum_info.synthesis.two_qubit_decompose.rz_array:1
msgid "Return numpy array for Rz(theta)."
msgstr ""

#: of qiskit.quantum_info.synthesis.two_qubit_decompose.rz_array:3
msgid "Rz(theta) = diag(exp(-i*theta/2),exp(i*theta/2))"
msgstr ""

#: of qiskit.quantum_info.synthesis.two_qubit_decompose.trace_to_fid:1
msgid ""
"Average gate fidelity is Fbar = (d + |Tr (Utarget.U^dag)|^2) / d(d+1) M. "
"Horodecki, P. Horodecki and R. Horodecki, PRA 60, 1888 (1999)"
msgstr ""

#: ../../api/qiskit.result.rst:2
msgid "qiskit.result package"
msgstr ""

#: of qiskit.result:1
msgid "Module for working with results."
msgstr ""

#: ../../api/qiskit.result.Result.rst:2
msgid "Result"
msgstr ""

#: of qiskit.result.Result:1
msgid "Model for Results."
msgstr ""

#: of qiskit.result.Result:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``ResultSchema``."
msgstr ""

#: of qiskit.result.Result:14
msgid "backend version, in the form X.Y.Z."
msgstr ""

#: of qiskit.result.Result:20
msgid "user-generated Qobj id."
msgstr ""

#: of qiskit.result.Result:26
msgid "unique execution id from the backend."
msgstr ""

#: of qiskit.result.Result:32
msgid ""
"True if complete input qobj executed correctly. (Implies each experiment "
"success)"
msgstr ""

#: of qiskit.result.Result:39
msgid "corresponding results for array of experiments of the input qobj"
msgstr ""

#: of qiskit.result.Result:42
msgid "ExperimentResult"
msgstr ""

#: ../../api/qiskit.result.Result.rst:15:<autosummary>:1
msgid ":obj:`schema <qiskit.result.Result.schema>`\\"
msgstr ""

#: ../../api/qiskit.result.Result.rst:15:<autosummary>:1
msgid ":obj:`shallow_schema <qiskit.result.Result.shallow_schema>`\\"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ":obj:`as_dict <qiskit.result.Result.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ":obj:`data <qiskit.result.Result.data>`\\ \\(\\[experiment\\]\\)"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1 of
#: qiskit.result.Result.data:1
msgid "Get the raw data for an experiment."
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ":obj:`from_dict <qiskit.result.Result.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ""
":obj:`get_counts <qiskit.result.Result.get_counts>`\\ "
"\\(\\[experiment\\]\\)"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1 of
#: qiskit.result.Result.get_counts:1
msgid "Get the histogram data of an experiment."
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ""
":obj:`get_memory <qiskit.result.Result.get_memory>`\\ "
"\\(\\[experiment\\]\\)"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1 of
#: qiskit.result.Result.get_memory:1
msgid ""
"Get the sequence of memory states (readouts) for each shot The data from "
"the experiment is a list of format ['00000', '01000', '10100', '10100', "
"'11101', '11100', '00101', ..., '01010']"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ""
":obj:`get_statevector <qiskit.result.Result.get_statevector>`\\ "
"\\(\\[experiment\\, decimals\\]\\)"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1 of
#: qiskit.result.Result.get_statevector:1
msgid "Get the final statevector of an experiment."
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ""
":obj:`get_unitary <qiskit.result.Result.get_unitary>`\\ "
"\\(\\[experiment\\, decimals\\]\\)"
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1 of
#: qiskit.result.Result.get_unitary:1
msgid "Get the final unitary of an experiment."
msgstr ""

#: ../../api/qiskit.result.Result.rst:28:<autosummary>:1
msgid ":obj:`to_dict <qiskit.result.Result.to_dict>`\\ \\(\\)"
msgstr ""

#: of qiskit.result.Result.data:3
msgid ""
"Note this data will be a single classical and quantum register and in a "
"format required by the results schema. We recomened that most users use "
"the get_xxx method, and the data will be post-processed for the data "
"type."
msgstr ""

#: of qiskit.result.Result.data:7
msgid ""
"the index of the experiment. Several types are accepted for convenience::"
" * str: the name of the experiment. * QuantumCircuit: the name of the "
"circuit instance will be used. * Schedule: the name of the schedule "
"instance will be used. * int: the position of the experiment. * None: if "
"there is only one experiment, returns it."
msgstr ""

#: of qiskit.result.Result.data:16
msgid ""
"A dictionary of results data for an experiment. The data depends on the "
"backend it ran on and the settings of `meas_level`, `meas_return` and "
"`memory`.  QASM backends return a dictionary of dictionary with the key "
"'counts' and  with the counts, with the second dictionary keys containing"
" a string in hex format (``0x123``) and values equal to the number of "
"times this outcome was measured.  Statevector backends return a "
"dictionary with key 'statevector' and values being a list[list[complex "
"components]] list of 2^n_qubits complex amplitudes. Where each complex "
"number is represented as a 2 entry list for each component. For example, "
"a list of [0.5+1j, 0-1j] would be represented as [[0.5, 1], [0, -1]].  "
"Unitary backends return a dictionary with key 'unitary' and values being "
"a list[list[list[complex components]]] list of 2^n_qubits x 2^n_qubits "
"complex amplitudes in a two entry list for each component. For example if"
" the amplitude is [[0.5+0j, 0-1j], ...] the value returned will be "
"[[[0.5, 0], [0, -1]], ...].  The simulator backends also have an optional"
" key 'snapshots' which returns a dict of snapshots specified by the "
"simulator backend. The value is of the form dict[slot: dict[str: array]] "
"where the keys are the requested snapshot slots, and the values are a "
"dictionary of the snapshots."
msgstr ""

#: of qiskit.result.Result.data:16
msgid ""
"A dictionary of results data for an experiment. The data depends on the "
"backend it ran on and the settings of `meas_level`, `meas_return` and "
"`memory`."
msgstr ""

#: of qiskit.result.Result.data:20
msgid ""
"QASM backends return a dictionary of dictionary with the key 'counts' and"
"  with the counts, with the second dictionary keys containing a string in"
" hex format (``0x123``) and values equal to the number of times this "
"outcome was measured."
msgstr ""

#: of qiskit.result.Result.data:25
msgid ""
"Statevector backends return a dictionary with key 'statevector' and "
"values being a list[list[complex components]] list of 2^n_qubits complex "
"amplitudes. Where each complex number is represented as a 2 entry list "
"for each component. For example, a list of [0.5+1j, 0-1j] would be "
"represented as [[0.5, 1], [0, -1]]."
msgstr ""

#: of qiskit.result.Result.data:31
msgid ""
"Unitary backends return a dictionary with key 'unitary' and values being "
"a list[list[list[complex components]]] list of 2^n_qubits x 2^n_qubits "
"complex amplitudes in a two entry list for each component. For example if"
" the amplitude is [[0.5+0j, 0-1j], ...] the value returned will be "
"[[[0.5, 0], [0, -1]], ...]."
msgstr ""

#: of qiskit.result.Result.data:38
msgid ""
"The simulator backends also have an optional key 'snapshots' which "
"returns a dict of snapshots specified by the simulator backend. The value"
" is of the form dict[slot: dict[str: array]] where the keys are the "
"requested snapshot slots, and the values are a dictionary of the "
"snapshots."
msgstr ""

#: of qiskit.result.Result.data:45
msgid "if data for the experiment could not be retrieved."
msgstr ""

#: of qiskit.result.Result.get_counts:3
msgid "the index of the experiment, as specified by ``get_data()``."
msgstr ""

#: of qiskit.result.Result.get_counts:7
msgid ""
"int]: a dictionary with the counts for each qubit, with     the keys "
"containing a string in binary format and separated     according to the "
"registers in circuit (e.g. ``0100 1110``).     The string is little-"
"endian (cr[0] on the right hand side)."
msgstr ""

#: of qiskit.result.Result.get_counts:11
msgid "int]: a dictionary with the counts for each qubit, with"
msgstr ""

#: of qiskit.result.Result.get_counts:10
msgid ""
"the keys containing a string in binary format and separated according to "
"the registers in circuit (e.g. ``0100 1110``). The string is little-"
"endian (cr[0] on the right hand side)."
msgstr ""

#: of qiskit.result.Result.get_counts:15
msgid "if there are no counts for the experiment."
msgstr ""

#: of qiskit.result.Result.get_memory:5 qiskit.result.Result.get_statevector:3
#: qiskit.result.Result.get_unitary:3
msgid "the index of the experiment, as specified by ``data()``."
msgstr ""

#: of qiskit.result.Result.get_memory:9
msgid ""
"Either the list of each outcome, formatted according to     registers in "
"circuit or a complex numpy np.darray with shape:      | `meas_level` | "
"`meas_return` | shape                                             |     "
"|--------------|---------------|---------------------------------------------------|"
"     | 0            | `single`      | np.ndarray[shots, memory_slots, "
"memory_slot_size] |     | 0            | `avg`         | "
"np.ndarray[memory_slots, memory_slot_size]        |     | 1            | "
"`single`      | np.ndarray[shots, memory_slots]                   |     |"
" 1            | `avg`         | np.ndarray[memory_slots]"
"                          |     | 2            | `memory=True` | list"
"                                              |"
msgstr ""

#: of qiskit.result.Result.get_memory:19
msgid "Either the list of each outcome, formatted according to"
msgstr ""

#: of qiskit.result.Result.get_memory:12
msgid "registers in circuit or a complex numpy np.darray with shape:"
msgstr ""

#: of qiskit.result.Result.get_memory
msgid ""
"`meas_level` | `meas_return` | shape"
"                                             |"
msgstr ""

#: of qiskit.result.Result.get_memory:15
msgid ""
"|--------------|---------------|---------------------------------------------------|"
" | 0            | `single`      | np.ndarray[shots, memory_slots, "
"memory_slot_size] | | 0            | `avg`         | "
"np.ndarray[memory_slots, memory_slot_size]        | | 1            | "
"`single`      | np.ndarray[shots, memory_slots]                   | | 1"
"            | `avg`         | np.ndarray[memory_slots]"
"                          | | 2            | `memory=True` | list"
"                                              |"
msgstr ""

#: of qiskit.result.Result.get_memory:23
msgid "if there is no memory data for the circuit."
msgstr ""

#: of qiskit.result.Result.get_statevector:6
msgid "the number of decimals in the statevector. If None, does not round."
msgstr ""

#: of qiskit.result.Result.get_statevector:10
msgid "list of 2^n_qubits complex amplitudes."
msgstr ""

#: of qiskit.result.Result.get_statevector:13
msgid "if there is no statevector for the experiment."
msgstr ""

#: of qiskit.result.Result.get_unitary:6
msgid "the number of decimals in the unitary. If None, does not round."
msgstr ""

#: of qiskit.result.Result.get_unitary:10
msgid "list of 2^n_qubits x 2^n_qubits complex     amplitudes."
msgstr ""

#: of qiskit.result.Result.get_unitary:12
msgid "list of 2^n_qubits x 2^n_qubits complex"
msgstr ""

#: of qiskit.result.Result.get_unitary:13
msgid "amplitudes."
msgstr ""

#: of qiskit.result.Result.get_unitary:16
msgid "if there is no unitary for the experiment."
msgstr ""

#: ../../api/qiskit.result.ResultError.rst:2
msgid "ResultError"
msgstr ""

#: of qiskit.result.ResultError:1 qiskit.result.exceptions.ResultError:1
msgid "Exceptions raised due to errors in result output."
msgstr ""

#: of qiskit.result.ResultError:3 qiskit.result.exceptions.ResultError:3
msgid "It may be better for the Qiskit API to raise this exception."
msgstr ""

#: of qiskit.result.ResultError:5 qiskit.result.exceptions.ResultError:5
msgid ""
"This is the error record as it comes back from the API. The format is "
"like::      error = {'status': 403,              'message': 'Your credits"
" are not enough.',              'code': 'MAX_CREDITS_EXCEEDED'}"
msgstr ""

#: of qiskit.result.ResultError:5 qiskit.result.exceptions.ResultError:5
msgid ""
"This is the error record as it comes back from the API. The format is "
"like::"
msgstr ""

#: ../../api/qiskit.result.exceptions.rst:2
msgid "qiskit.result.exceptions module"
msgstr ""

#: of qiskit.result.exceptions:1
msgid "Exception for errors when there's an error in the Result"
msgstr ""

#: ../../api/qiskit.result.models.rst:2
msgid "qiskit.result.models module"
msgstr ""

#: of qiskit.result.models:1
msgid "Schema and helper models for schema-conformant Results."
msgstr ""

#: of qiskit.result.models.ExperimentResult:1
msgid "Model for ExperimentResult."
msgstr ""

#: of qiskit.result.models.ExperimentResult:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``ExperimentResultSchema``."
msgstr ""

#: of qiskit.result.models.ExperimentResult:8
msgid "the starting and ending shot for this data."
msgstr ""

#: of qiskit.result.models.ExperimentResult:10
msgid "int or tuple"
msgstr ""

#: of qiskit.result.models.ExperimentResult:14
msgid "if true, we can trust results for this experiment."
msgstr ""

#: of qiskit.result.models.ExperimentResult:20
msgid "results information."
msgstr ""

#: of qiskit.result.models.ExperimentResult:22
msgid "ExperimentResultData"
msgstr ""

#: of qiskit.result.models.ExperimentResult:26
msgid "Measurement result level."
msgstr ""

#: of qiskit.result.models.ExperimentResultData:1
msgid "Model for ExperimentResultData."
msgstr ""

#: of qiskit.result.models.ExperimentResultData:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check "
"``ExperimentResultDataSchema``."
msgstr ""

#: of qiskit.result.models.ExperimentResultDataSchema:1
msgid "Schema for ExperimentResultData."
msgstr ""

#: of qiskit.result.models.ExperimentResultSchema:1
msgid "Schema for ExperimentResult."
msgstr ""

#: of qiskit.result.models.ResultSchema:1
msgid "Schema for Result."
msgstr ""

#: ../../api/qiskit.result.postprocess.rst:2
msgid "qiskit.result.postprocess module"
msgstr ""

#: of qiskit.result.postprocess:1
msgid "Post-processing of raw result."
msgstr ""

#: of qiskit.result.postprocess.format_counts:1
msgid ""
"Format a single experiment result coming from backend to present to the "
"Qiskit user."
msgstr ""

#: of qiskit.result.postprocess.format_counts:4
msgid "counts histogram of multiple shots"
msgstr ""

#: of qiskit.result.postprocess.format_counts:6
#: qiskit.result.postprocess.format_level_2_memory:5
msgid ""
"the experiment header dictionary containing useful information for "
"postprocessing."
msgstr ""

#: of qiskit.result.postprocess.format_counts:10
msgid "a formatted counts"
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:1
msgid "Format a single bitstring (memory) from a single shot experiment."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:3
msgid "The hexadecimals are expanded to bitstrings"
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:5
msgid "Spaces are inserted at register divisions."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:7
msgid "result of a single experiment."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:9
msgid ""
"the experiment header dictionary containing useful information for "
"postprocessing. creg_sizes are a nested list where the inner element is a"
" list of creg name, creg size pairs. memory_slots is an integers "
"specifying the number of total memory_slots in the experiment."
msgstr ""

#: of qiskit.result.postprocess.format_counts_memory:16
msgid "a formatted memory"
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:1
msgid "Format an experiment result memory object for measurement level 0."
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:3
#: qiskit.result.postprocess.format_level_1_memory:3
msgid ""
"Memory from experiment with `meas_level==1`. `avg` or `single` will be "
"inferred from shape of result memory."
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:7
msgid "Measurement level 0 complex numpy array"
msgstr ""

#: of qiskit.result.postprocess.format_level_0_memory:10
msgid ""
"If the returned numpy array does not have 2 (avg) or 3 (single)     "
"indicies."
msgstr ""

#: of qiskit.result.postprocess.format_level_1_memory:1
msgid "Format an experiment result memory object for measurement level 1."
msgstr ""

#: of qiskit.result.postprocess.format_level_1_memory:7
msgid "Measurement level 1 complex numpy array"
msgstr ""

#: of qiskit.result.postprocess.format_level_1_memory:10
msgid ""
"If the returned numpy array does not have 1 (avg) or 2 (single)     "
"indicies."
msgstr ""

#: of qiskit.result.postprocess.format_level_2_memory:1
msgid "Format an experiment result memory object for measurement level 2."
msgstr ""

#: of qiskit.result.postprocess.format_level_2_memory:3
msgid "Memory from experiment with `meas_level==2` and `memory==True`."
msgstr ""

#: of qiskit.result.postprocess.format_level_2_memory:9
msgid "List of bitstrings"
msgstr ""

#: of qiskit.result.postprocess.format_statevector:1
msgid "Format statevector coming from the backend to present to the Qiskit user."
msgstr ""

#: of qiskit.result.postprocess.format_statevector:3
msgid "a list of [re, im] complex numbers."
msgstr ""

#: of qiskit.result.postprocess.format_statevector:5
#: qiskit.result.postprocess.format_unitary:5
msgid "the number of decimals in the statevector. If None, no rounding is done."
msgstr ""

#: of qiskit.result.postprocess.format_statevector:9
msgid "a list of python complex numbers."
msgstr ""

#: of qiskit.result.postprocess.format_unitary:1
msgid "Format unitary coming from the backend to present to the Qiskit user."
msgstr ""

#: of qiskit.result.postprocess.format_unitary:3
msgid "a list of list of [re, im] complex numbers"
msgstr ""

#: of qiskit.result.postprocess.format_unitary:9
msgid "a matrix of complex numbers"
msgstr ""

#: ../../api/qiskit.test.rst:2
msgid "qiskit.test package"
msgstr ""

#: ../../api/qiskit.test.base.rst:2
msgid "qiskit.test.base module"
msgstr ""

#: of qiskit.test.base:1
msgid "Base TestCases for the unit tests."
msgstr ""

#: of qiskit.test.base:3
msgid ""
"Implementors of unit tests for Terra are encouraged to subclass "
"``QiskitTestCase`` in order to take advantage of utility functions (for "
"example, the environment variables for customizing different options), "
"and the decorators in the ``decorators`` package."
msgstr ""

#: of qiskit.test.base.QiskitTestCase:1
msgid "ベースクラス: :class:`unittest.case.TestCase`"
msgstr ""

#: of qiskit.test.base.QiskitTestCase:1
msgid "Helper class that contains common functionality."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:1
msgid "Assert two dictionaries with numeric values are almost equal."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:3
msgid ""
"Fail if the two dictionaries are unequal as determined by comparing that "
"the difference between values with the same key are not greater than "
"delta (default 1e-8), or that difference rounded to the given number of "
"decimal places is not zero. If a key in one dictionary is not in the "
"other the default_value keyword argument will be used for the missing "
"value (default 0). If the two objects compare equal then they will "
"automatically compare almost equal."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:11
#: qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:13
msgid "a dictionary."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:15
msgid "threshold for comparison (defaults to 1e-8)."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:17
msgid "return a custom message on failure."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:19
msgid "number of decimal places for comparison."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:21
msgid "default value for missing keys."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertDictAlmostEqual:24
msgid "raises TestCase failureException if the test fails."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertNoLogs:1
msgid "Assert that no message is sent to the specified logger and level."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.assertNoLogs:3
msgid ""
"Context manager to test that no message is sent to the specified logger "
"and level (the opposite of TestCase.assertLogs())."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.setUpClass:1
msgid ""
"Hook method for setting up class fixture before running tests in the "
"class."
msgstr ""

#: of qiskit.test.base.QiskitTestCase.tearDown:1
msgid "Hook method for deconstructing the test fixture after testing it."
msgstr ""

#: ../../api/qiskit.test.decorators.rst:2
msgid "qiskit.test.decorators module"
msgstr ""

#: ../../api/qiskit.test.http_recorder.rst:2
msgid "qiskit.test.http\\_recorder module"
msgstr ""

#: ../../api/qiskit.test.mock.rst:2
msgid "qiskit.test.mock module"
msgstr ""

#: ../../api/qiskit.test.providers.rst:2
msgid "qiskit.test.providers package"
msgstr ""

#: ../../api/qiskit.test.providers.backend.rst:2
msgid "qiskit.test.providers.backend module"
msgstr ""

#: ../../api/qiskit.test.providers.provider.rst:2
msgid "qiskit.test.providers.provider module"
msgstr ""

#: ../../api/qiskit.test.reference_circuits.rst:2
msgid "qiskit.test.reference\\_circuits module"
msgstr ""

#: ../../api/qiskit.test.testing_options.rst:2
msgid "qiskit.test.testing\\_options module"
msgstr ""

#: ../../api/qiskit.test.utils.rst:2
msgid "qiskit.test.utils module"
msgstr ""

#: of qiskit.test.utils:1
msgid "Utils for using with Qiskit unit tests."
msgstr ""

#: of qiskit.test.utils.Path:1
msgid "Helper with paths commonly used during the tests."
msgstr ""

#: of qiskit.test.utils.setup_test_logging:1
msgid "Set logging to file and stdout for a logger."
msgstr ""

#: of qiskit.test.utils.setup_test_logging:3
msgid "logger object to be updated."
msgstr ""

#: of qiskit.test.utils.setup_test_logging:5
msgid "logging level."
msgstr ""

#: of qiskit.test.utils.setup_test_logging:7
msgid "name of the output file."
msgstr ""

#: ../../api/qiskit.tools.rst:2
msgid "qiskit.tools package"
msgstr ""

#: of qiskit.tools:3
msgid ""
"The functions in this module provide convenience helpers for accessing "
"commonly used features of the SDK in a simplified way. They support a "
"small subset of scenarios and flows: for more advanced usage, it is "
"encouraged to instead refer to the documentation of each component and "
"use them separately."
msgstr ""

#: ../../api/qiskit.tools.compile.rst:2
msgid "compile"
msgstr ""

#: of qiskit.tools.compile:1 qiskit.tools.compiler.compile:1
msgid "Compile a list of circuits into a qobj."
msgstr ""

#: of qiskit.tools.compile:5 qiskit.tools.compiler.compile:5
#: qiskit.transpiler.transpile:5 qiskit.transpiler.transpiler.transpile:5
msgid "a backend to compile for"
msgstr ""

#: of qiskit.tools.compile:7 qiskit.tools.compiler.compile:7
msgid "dictionary of parameters (e.g. noise) used by runner"
msgstr ""

#: of qiskit.tools.compile:9 qiskit.tools.compiler.compile:9
msgid ""
"list of basis gates names supported by the target. Default: "
"['u1','u2','u3','cx','id']"
msgstr ""

#: of qiskit.tools.compile:12 qiskit.tools.compiler.compile:12
#: qiskit.transpiler.transpile:10 qiskit.transpiler.transpiler.transpile:10
msgid "coupling map (perhaps custom) to target in mapping"
msgstr ""

#: of qiskit.tools.compile:14 qiskit.tools.compiler.compile:14
msgid "initial layout of qubits in mapping"
msgstr ""

#: of qiskit.tools.compile:16 qiskit.tools.compiler.compile:16
msgid "number of repetitions of each circuit, for sampling"
msgstr ""

#: of qiskit.tools.compile:18 qiskit.tools.compiler.compile:18
msgid "maximum credits to use"
msgstr ""

#: of qiskit.tools.compile:20 qiskit.tools.compiler.compile:20
msgid "random seed for simulators"
msgstr ""

#: of qiskit.tools.compile:22 qiskit.tools.compiler.compile:22
msgid "random seed for swapper mapper"
msgstr ""

#: of qiskit.tools.compile:26 qiskit.tools.compiler.compile:26
msgid "a pass manger for the transpiler pipeline"
msgstr ""

#: of qiskit.tools.compile:28 qiskit.tools.compiler.compile:28
msgid "if True, per-shot measurement bitstrings are returned as well"
msgstr ""

#: of qiskit.tools.compile:31 qiskit.tools.compiler.compile:31
msgid "the qobj to be run on the backends"
msgstr ""

#: of qiskit.tools.compile:34 qiskit.tools.compiler.compile:34
msgid "if the desired options are not supported by backend"
msgstr ""

#: ../../api/qiskit.tools.compiler.rst:2
msgid "qiskit.tools.compiler module"
msgstr ""

#: of qiskit.tools.compiler:1
msgid "DEPRECATED: WILL BE REMOVED AFTER 0.8."
msgstr ""

#: ../../api/qiskit.tools.events.rst:2
msgid "qiskit.tools.events package"
msgstr ""

#: of qiskit.tools.events:1
msgid "Events"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:2
msgid "TextProgressBar"
msgstr ""

#: of qiskit.tools.events.TextProgressBar:1
#: qiskit.tools.events.progressbar.TextProgressBar:1
#: qiskit.tools.jupyter.progressbar.HTMLProgressBar:1
msgid "ベースクラス: :class:`qiskit.tools.events.progressbar.BaseProgressBar`"
msgstr ""

#: of qiskit.tools.events.TextProgressBar:1
#: qiskit.tools.events.progressbar.TextProgressBar:1
msgid "A simple text-based progress bar."
msgstr ""

#: of qiskit.tools.events.TextProgressBar:4
#: qiskit.tools.events.progressbar.TextProgressBar:5
msgid "output_handler"
msgstr ""

#: of qiskit.tools.events.TextProgressBar:3
#: qiskit.tools.events.progressbar.TextProgressBar:4
msgid "the handler the progress bar should be written to, default"
msgstr ""

#: of qiskit.tools.events.TextProgressBar:4
#: qiskit.tools.events.progressbar.TextProgressBar:4
msgid "is sys.stdout, another option is sys.stderr"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ":obj:`clear <qiskit.tools.events.TextProgressBar.clear>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1 of
#: qiskit.tools.events.TextProgressBar.clear:1
#: qiskit.tools.events.pubsub.Subscriber.clear:1
msgid "Unsubscribe everything"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ":obj:`finished <qiskit.tools.events.TextProgressBar.finished>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1 of
#: qiskit.tools.events.TextProgressBar.finished:1
#: qiskit.tools.events.progressbar.BaseProgressBar.finished:1
#: qiskit.tools.jupyter.progressbar.HTMLProgressBar.finished:1
msgid "Run when progress bar has completed."
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ""
":obj:`start <qiskit.tools.events.TextProgressBar.start>`\\ "
"\\(iterations\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1 of
#: qiskit.tools.events.TextProgressBar.start:1
#: qiskit.tools.events.progressbar.BaseProgressBar.start:1
#: qiskit.tools.events.progressbar.TextProgressBar.start:1
#: qiskit.tools.jupyter.progressbar.HTMLProgressBar.start:1
msgid "Start the progress bar."
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ""
":obj:`subscribe <qiskit.tools.events.TextProgressBar.subscribe>`\\ "
"\\(event\\, callback\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ""
"Subscribes to an event, associating a callback function to that event, so"
" when the event occurs, the callback will be called."
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ""
":obj:`time_elapsed <qiskit.tools.events.TextProgressBar.time_elapsed>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1 of
#: qiskit.tools.events.TextProgressBar.time_elapsed:1
#: qiskit.tools.events.progressbar.BaseProgressBar.time_elapsed:1
msgid "Return the time elapsed since start."
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ""
":obj:`time_remaining_est "
"<qiskit.tools.events.TextProgressBar.time_remaining_est>`\\ "
"\\(completed\\_iter\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1 of
#: qiskit.tools.events.TextProgressBar.time_remaining_est:1
#: qiskit.tools.events.progressbar.BaseProgressBar.time_remaining_est:1
msgid "Estimate the remaining time left."
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ""
":obj:`unsubscribe <qiskit.tools.events.TextProgressBar.unsubscribe>`\\ "
"\\(event\\, callback\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1 of
#: qiskit.tools.events.TextProgressBar.unsubscribe:1
#: qiskit.tools.events.pubsub.Subscriber.unsubscribe:1
msgid ""
"Unsubscribe a pair event-callback, so the callback will not be called "
"anymore when the event occurs."
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1
msgid ":obj:`update <qiskit.tools.events.TextProgressBar.update>`\\ \\(n\\)"
msgstr ""

#: ../../api/qiskit.tools.events.TextProgressBar.rst:21:<autosummary>:1 of
#: qiskit.tools.events.TextProgressBar.update:1
#: qiskit.tools.events.progressbar.BaseProgressBar.update:1
#: qiskit.tools.events.progressbar.TextProgressBar.update:1
#: qiskit.tools.jupyter.progressbar.HTMLProgressBar.update:1
msgid "Update status of progress bar."
msgstr ""

#: of qiskit.tools.events.TextProgressBar.start:3
#: qiskit.tools.events.progressbar.BaseProgressBar.start:3
#: qiskit.tools.events.progressbar.TextProgressBar.start:3
#: qiskit.tools.jupyter.progressbar.HTMLProgressBar.start:3
msgid "Number of iterations."
msgstr ""

#: of qiskit.tools.events.TextProgressBar.subscribe:1
#: qiskit.tools.events.pubsub.Subscriber.subscribe:1
msgid ""
"Subscribes to an event, associating a callback function to that event, so"
" when the event occurs, the callback will be called. This is a blocking "
"call, so try to keep callbacks as lighweight as possible."
msgstr ""

#: of qiskit.tools.events.TextProgressBar.time_elapsed:3
#: qiskit.tools.events.progressbar.BaseProgressBar.time_elapsed:3
msgid "Time since progress bar started."
msgstr ""

#: of qiskit.tools.events.TextProgressBar.time_remaining_est:3
#: qiskit.tools.events.progressbar.BaseProgressBar.time_remaining_est:3
msgid "Number of iterations completed."
msgstr ""

#: of qiskit.tools.events.TextProgressBar.time_remaining_est:6
#: qiskit.tools.events.progressbar.BaseProgressBar.time_remaining_est:6
msgid "Estimated time remaining."
msgstr ""

#: ../../api/qiskit.tools.events.progressbar.rst:2
msgid "qiskit.tools.events.progressbar module"
msgstr ""

#: of qiskit.tools.events.progressbar:1 qiskit.tools.jupyter.progressbar:1
msgid "Progress bars module"
msgstr ""

#: of qiskit.tools.events.progressbar.BaseProgressBar:1
msgid "ベースクラス: :class:`qiskit.tools.events.pubsub.Subscriber`"
msgstr ""

#: of qiskit.tools.events.progressbar.BaseProgressBar:1
msgid "An abstract progress bar with some shared functionality."
msgstr ""

#: ../../api/qiskit.tools.events.pubsub.rst:2
msgid "qiskit.tools.events.pubsub module"
msgstr ""

#: of qiskit.tools.events.pubsub:1
msgid "Message broker for the Publisher / Subscriber mechanism"
msgstr ""

#: of qiskit.tools.events.pubsub.Publisher:1
msgid ""
"Represents a Publisher, every component (class) can become a Publisher "
"and send events by inheriting this class. Functions can call this class "
"like: Publisher().publish(\"event\", args, ... )"
msgstr ""

#: of qiskit.tools.events.pubsub.Publisher.publish:1
msgid ""
"Triggers an event, and associates some data to it, so if there are any "
"subscribers, their callback will be called synchronously."
msgstr ""

#: of qiskit.tools.events.pubsub.Subscriber:1
msgid ""
"Represents a Subscriber, every component (class) can become a Subscriber "
"and subscribe to events, that will call callback functions when they are "
"emitted."
msgstr ""

#: ../../api/qiskit.tools.jupyter.rst:2
msgid "qiskit.tools.jupyter package"
msgstr ""

#: of qiskit.tools.jupyter:1
msgid "Initialize the Jupyter routines."
msgstr ""

#: ../../api/qiskit.tools.jupyter.backend_monitor.rst:2
msgid "qiskit.tools.jupyter.backend\\_monitor module"
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor:1
#: qiskit.tools.jupyter.backend_overview:1
msgid "A module for monitoring backends."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.BackendMonitor:1
#: qiskit.tools.jupyter.backend_overview.BackendOverview:1
#: qiskit.tools.jupyter.jupyter_magics.ProgressBarMagic:1
#: qiskit.tools.jupyter.jupyter_magics.StatusMagic:1
msgid "ベースクラス: :class:`IPython.core.magic.Magics`"
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.BackendMonitor:1
#: qiskit.tools.jupyter.backend_overview.BackendOverview:1
#: qiskit.tools.jupyter.jupyter_magics.StatusMagic:1
msgid "A class of status magic functions."
msgstr ""

#: of
#: qiskit.tools.jupyter.backend_monitor.BackendMonitor.qiskit_backend_monitor:1
#: qiskit.tools.jupyter.backend_overview.BackendOverview.qiskit_backend_overview:5
msgid "A Jupyter magic function to monitor backends."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.config_tab:1
msgid "The backend configuration widget."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.config_tab:3
#: qiskit.tools.jupyter.backend_monitor.detailed_map:3
#: qiskit.tools.jupyter.backend_monitor.gates_tab:3
#: qiskit.tools.jupyter.backend_monitor.job_history:3
#: qiskit.tools.jupyter.backend_monitor.qubits_tab:3
msgid "The backend."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.config_tab:6
msgid "A GridBox widget."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.detailed_map:1
msgid "Widget for displaying detailed noise map."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.detailed_map:6
msgid "Widget holding noise map images."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.gates_tab:1
msgid "The multiple qubit gate error widget."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.gates_tab:6
#: qiskit.tools.jupyter.backend_monitor.qubits_tab:6
msgid "A VBox widget."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.job_history:1
msgid "Widget for displaying job history"
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.job_history:6
msgid "A tab widget for history images."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.plot_job_history:1
msgid "Plots the job history of the user from the given list of jobs."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.plot_job_history:3
msgid "A list of jobs with type IBMQjob."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.plot_job_history:5
msgid "Interval over which to examine."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.plot_job_history:8
#: qiskit.visualization.gate_map.plot_gate_map:24
#: qiskit.visualization.plot_gate_map:24
msgid "A Matplotlib figure instance."
msgstr ""

#: of qiskit.tools.jupyter.backend_monitor.qubits_tab:1
msgid "The qubits properties widget"
msgstr ""

#: ../../api/qiskit.tools.jupyter.backend_overview.rst:2
msgid "qiskit.tools.jupyter.backend\\_overview module"
msgstr ""

#: of
#: qiskit.tools.jupyter.backend_overview.BackendOverview.qiskit_backend_overview:8
#: qiskit.tools.jupyter.jupyter_magics.ProgressBarMagic.qiskit_progress_bar:7
#: qiskit.tools.jupyter.jupyter_magics.StatusMagic.qiskit_job_status:8
msgid "optional arguments:"
msgstr ""

#: of
#: qiskit.tools.jupyter.backend_overview.BackendOverview.qiskit_backend_overview:9
#: qiskit.tools.jupyter.jupyter_magics.StatusMagic.qiskit_job_status:9
msgid "Interval for status check."
msgstr ""

#: of qiskit.tools.jupyter.backend_overview.GridBox_with_thread:1
msgid "ベースクラス: :class:`ipywidgets.widgets.widget_box.GridBox`"
msgstr ""

#: of qiskit.tools.jupyter.backend_overview.GridBox_with_thread:1
msgid "A GridBox that will close an attached thread"
msgstr ""

#: of qiskit.tools.jupyter.backend_overview.backend_widget:1
msgid "Creates a backend widget."
msgstr ""

#: of qiskit.tools.jupyter.backend_overview.generate_jobs_pending_widget:1
msgid "Generates a jobs_pending progress bar widget."
msgstr ""

#: of qiskit.tools.jupyter.backend_overview.update_backend_info:1
msgid "Updates the monitor info Called from another thread."
msgstr ""

#: ../../api/qiskit.tools.jupyter.jupyter_magics.rst:2
msgid "qiskit.tools.jupyter.jupyter\\_magics module"
msgstr ""

#: of qiskit.tools.jupyter.jupyter_magics:1
msgid "A module of magic functions"
msgstr ""

#: of qiskit.tools.jupyter.jupyter_magics.ProgressBarMagic:1
msgid "A class of progress bar magic functions."
msgstr ""

#: of
#: qiskit.tools.jupyter.jupyter_magics.ProgressBarMagic.qiskit_progress_bar:5
msgid "A Jupyter magic function to generate progressbar."
msgstr ""

#: of
#: qiskit.tools.jupyter.jupyter_magics.ProgressBarMagic.qiskit_progress_bar:8
msgid "Type of progress bar, 'html' or 'text'."
msgstr ""

#: of qiskit.tools.jupyter.jupyter_magics.StatusMagic.qiskit_job_status:5
msgid "A Jupyter magic function to check the status of a Qiskit job instance."
msgstr ""

#: ../../api/qiskit.tools.jupyter.progressbar.rst:2
msgid "qiskit.tools.jupyter.progressbar module"
msgstr ""

#: of qiskit.tools.jupyter.progressbar.HTMLProgressBar:1
msgid "A simple HTML progress bar for using in IPython notebooks."
msgstr ""

#: ../../api/qiskit.tools.logging.rst:2
msgid "qiskit.tools.logging module"
msgstr ""

#: of qiskit.tools.logging.SimpleInfoFormatter:1
msgid "ベースクラス: :class:`logging.Formatter`"
msgstr ""

#: of qiskit.tools.logging.SimpleInfoFormatter:1
msgid "Custom Formatter that uses a simple format for INFO."
msgstr ""

#: of qiskit.tools.logging.set_qiskit_logger:1
msgid "Update 'qiskit' logger configuration using a SDK default one."
msgstr ""

#: of qiskit.tools.logging.set_qiskit_logger:3
msgid ""
"Update the configuration of the 'qiskit' logger using the default SDK "
"configuration provided by `QISKIT_LOGGING_CONFIG`:"
msgstr ""

#: of qiskit.tools.logging.set_qiskit_logger:6
msgid "console logging using a custom format for levels != INFO."
msgstr ""

#: of qiskit.tools.logging.set_qiskit_logger:7
msgid "console logging with simple format for level INFO."
msgstr ""

#: of qiskit.tools.logging.set_qiskit_logger:8
msgid "set logger level to INFO."
msgstr ""

#: of qiskit.tools.logging.set_qiskit_logger:12
msgid ""
"This function modifies the configuration of the standard logging system "
"for the 'qiskit.*' loggers, and might interfere with custom logger "
"configurations."
msgstr ""

#: of qiskit.tools.logging.unset_qiskit_logger:1
msgid "Remove the handlers for the 'qiskit' logger."
msgstr ""

#: ../../api/qiskit.tools.monitor.rst:2
msgid "qiskit.tools.monitor package"
msgstr ""

#: of qiskit.tools.monitor:1
msgid "A module for monitoring jobs, backends, etc."
msgstr ""

#: ../../api/qiskit.tools.monitor.backend_monitor.rst:2
msgid "backend_monitor"
msgstr ""

#: of qiskit.tools.monitor.backend_monitor:1
msgid "Monitor a single IBMQ backend."
msgstr ""

#: of qiskit.tools.monitor.backend_monitor:3
msgid "Backend to monitor."
msgstr ""

#: of qiskit.tools.monitor.backend_monitor:6
msgid "Input is not a IBMQ backend."
msgstr ""

#: ../../api/qiskit.tools.monitor.backend_overview.rst:2
msgid "backend_overview"
msgstr ""

#: of qiskit.tools.monitor.backend_overview:1
msgid "Gives overview information on all the IBMQ backends that are available."
msgstr ""

#: ../../api/qiskit.tools.monitor.job_monitor.rst:2
msgid "job_monitor"
msgstr ""

#: of qiskit.tools.monitor.job_monitor:1
msgid "Monitor the status of a IBMQJob instance."
msgstr ""

#: of qiskit.tools.monitor.job_monitor:3
msgid "Job to monitor."
msgstr ""

#: of qiskit.tools.monitor.job_monitor:5
msgid "Time interval between status queries."
msgstr ""

#: of qiskit.tools.monitor.job_monitor:7
msgid "Monitor asyncronously (in Jupyter only)."
msgstr ""

#: of qiskit.tools.monitor.job_monitor:9
msgid "If True, do not print status messages."
msgstr ""

#: of qiskit.tools.monitor.job_monitor:11
msgid "The file like object to write status messages to."
msgstr ""

#: of qiskit.tools.monitor.job_monitor:15
msgid "When trying to run async outside of Jupyter"
msgstr ""

#: of qiskit.tools.monitor.job_monitor:16
msgid "ipywidgets not available for notebook."
msgstr ""

#: ../../api/qiskit.tools.parallel.rst:2
msgid "qiskit.tools.parallel module"
msgstr ""

#: of qiskit.tools.parallel:1
msgid ""
"Routines for running Python functions in parallel using process pools "
"from the multiprocessing library."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:1 qiskit.tools.parallel_map:1
msgid ""
"Parallel execution of a mapping of `values` to the function `task`. This "
"is functionally equivalent to::"
msgstr ""

#: of qiskit.tools.parallel.parallel_map:6 qiskit.tools.parallel_map:6
msgid ""
"On Windows this function defaults to a serial implementation to avoid the"
" overhead from spawning processes in Windows."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:9 qiskit.tools.parallel_map:9
msgid "Function that is to be called for each value in ``values``."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:11 qiskit.tools.parallel_map:11
msgid ""
"List or array of values for which the ``task`` function is to be "
"evaluated."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:14 qiskit.tools.parallel_map:14
msgid "Optional additional arguments to the ``task`` function."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:16 qiskit.tools.parallel_map:16
msgid "Optional additional keyword argument to the ``task`` function."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:18 qiskit.tools.parallel_map:18
msgid "Number of processes to spawn."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:21 qiskit.tools.parallel_map:21
msgid ""
"The result list contains the value of         ``task(value, *task_args, "
"**task_kwargs)`` for             each value in ``values``."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:24 qiskit.tools.parallel_map:24
msgid "The result list contains the value of"
msgstr ""

#: of qiskit.tools.parallel.parallel_map:24 qiskit.tools.parallel_map:24
msgid "``task(value, *task_args, **task_kwargs)`` for"
msgstr ""

#: of qiskit.tools.parallel.parallel_map:25 qiskit.tools.parallel_map:25
msgid "each value in ``values``."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:28 qiskit.tools.parallel_map:28
msgid "If user interrupts via keyboard."
msgstr ""

#: of qiskit.tools.parallel.parallel_map:31 qiskit.tools.parallel_map:31
msgid ""
"terra.parallel.start: The collection of parallel tasks are about to "
"start. terra.parallel.update: One of the parallel task has finished. "
"terra.parallel.finish: All the parallel tasks have finished."
msgstr ""

#: ../../api/qiskit.tools.parallel_map.rst:2
msgid "parallel_map"
msgstr ""

#: ../../api/qiskit.tools.qcvv.rst:2
msgid "qiskit.tools.qcvv package"
msgstr ""

#: of qiskit.tools.qcvv:1
msgid "Tools for quantum charactarization, validation, verification."
msgstr ""

#: ../../api/qiskit.tools.qcvv.fitters.rst:2
msgid "qiskit.tools.qcvv.fitters module"
msgstr ""

#: of qiskit.tools.qcvv.fitters:1
msgid "Basic plotting methods using matplotlib."
msgstr ""

#: of qiskit.tools.qcvv.fitters:3
msgid ""
"These include methods to plot Bloch vectors, histograms, and quantum "
"spheres."
msgstr ""

#: of qiskit.tools.qcvv.fitters.exp_fit_fun:1
msgid "Function used to fit the exponential decay."
msgstr ""

#: of qiskit.tools.qcvv.fitters.osc_fit_fun:1
msgid "Function used to fit the decay cosine."
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:1
msgid "Plot randomized benchmarking data."
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:3
msgid "list of subsequence lengths"
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:5
msgid "list of lists of survival probabilities for each sequence"
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:8
msgid "mean of the survival probabilities at each sequence length"
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:11
msgid "error of the survival"
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:13
msgid "fit parameters"
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:15
msgid "function that computes survival probability"
msgstr ""

#: of qiskit.tools.qcvv.fitters.plot_rb_data:17
msgid "plot axis (if passed in)"
msgstr ""

#: of qiskit.tools.qcvv.fitters.rb_epc:1
msgid "Take the rb fit data and convert it into EPC (error per Clifford)"
msgstr ""

#: of qiskit.tools.qcvv.fitters.rb_epc:3
msgid ""
"dictionary of the fit quantities (A, alpha, B) with the keys 'qn' where n"
" is  the qubit and subkeys 'fit', e.g. {'q0':{'fit': [1, 0, 0.9], "
"'fiterr': [0, 0, 0]}}}"
msgstr ""

#: of qiskit.tools.qcvv.fitters.rb_epc:7
msgid ""
"(see randomized benchmarking functions). Pattern which specifies which "
"qubits performing RB with which qubits. E.g. [[1],[0,2]] is Q1  doing 1Q "
"RB simultaneously with Q0/Q2 doing 2Q RB"
msgstr ""

#: of qiskit.tools.qcvv.fitters.rb_epc:13
msgid "updates the passed in fit dictionary with the epc"
msgstr ""

#: of qiskit.tools.qcvv.fitters.rb_fit_fun:1
msgid "Function used to fit rb."
msgstr ""

#: of qiskit.tools.qcvv.fitters.shape_rb_data:1
msgid "Take the raw rb data and convert it into averages and std dev"
msgstr ""

#: of qiskit.tools.qcvv.fitters.shape_rb_data:3
msgid ""
"m x n x l list where m is the number of seeds, n is the number of "
"Clifford sequences and l is the number of qubits"
msgstr ""

#: of qiskit.tools.qcvv.fitters.shape_rb_data:7
msgid ""
"2 x n x l list where index 0 is the mean over seeds, 1 is     the std dev"
" overseeds"
msgstr ""

#: of qiskit.tools.qcvv.fitters.shape_rb_data:9
msgid "2 x n x l list where index 0 is the mean over seeds, 1 is"
msgstr ""

#: of qiskit.tools.qcvv.fitters.shape_rb_data:10
msgid "the std dev overseeds"
msgstr ""

#: ../../api/qiskit.tools.qcvv.tomography.rst:2
msgid "qiskit.tools.qcvv.tomography module"
msgstr ""

#: of qiskit.tools.qcvv.tomography:1
msgid "Quantum Tomography Module"
msgstr ""

#: of qiskit.tools.qcvv.tomography:11
msgid "Description:"
msgstr ""

#: of qiskit.tools.qcvv.tomography:4
msgid ""
"This module contains functions for performing quantum state and quantum "
"process tomography. This includes: - Functions for generating a set of "
"circuits to"
msgstr ""

#: of qiskit.tools.qcvv.tomography:7
msgid "extract tomographically complete sets of measurement data."
msgstr ""

#: of qiskit.tools.qcvv.tomography:8
msgid ""
"Functions for generating a tomography data set from the results after the"
" circuits have been executed on a backend."
msgstr ""

#: of qiskit.tools.qcvv.tomography:10
msgid ""
"Functions for reconstructing a quantum state, or quantum process (Choi-"
"matrix) from tomography data sets."
msgstr ""

#: of qiskit.tools.qcvv.tomography:16
msgid "Reconstruction Methods:"
msgstr ""

#: of qiskit.tools.qcvv.tomography:14
msgid ""
"Currently implemented reconstruction methods are - Linear inversion by "
"weighted least-squares fitting. - Fast maximum likelihood reconstruction "
"using ref [1]."
msgstr ""

#: of qiskit.tools.qcvv.tomography:21
msgid "[1] J Smolin, JM Gambetta, G Smith, Phys. Rev. Lett. 108, 070502 (2012)."
msgstr ""

#: of qiskit.tools.qcvv.tomography:21
msgid "Open access: arXiv:1106.5458 [quant-ph]."
msgstr ""

#: of qiskit.tools.qcvv.tomography:34
msgid "Workflow:"
msgstr ""

#: of qiskit.tools.qcvv.tomography:24
msgid ""
"The basic functions for performing state and tomography experiments are: "
"- `tomography_set`, `state_tomography_set`, and `process_tomography_set`"
msgstr ""

#: of qiskit.tools.qcvv.tomography:26
msgid "all generates data structures for tomography experiments."
msgstr ""

#: of qiskit.tools.qcvv.tomography:27
msgid "`create_tomography_circuits` generates the quantum circuits specified"
msgstr ""

#: of qiskit.tools.qcvv.tomography:28
msgid "in a `tomography_set` for performing state tomography of the output"
msgstr ""

#: of qiskit.tools.qcvv.tomography:30
msgid "`tomography_data` extracts the results after executing the tomography"
msgstr ""

#: of qiskit.tools.qcvv.tomography:30
msgid ""
"circuits and returns it in a data structure used by fitters for state "
"reconstruction."
msgstr ""

#: of qiskit.tools.qcvv.tomography:34
msgid "`fit_tomography_data` reconstructs a density matrix or Choi-matrix from"
msgstr ""

#: of qiskit.tools.qcvv.tomography:33
msgid "the a set of tomography data."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:1
#: qiskit.transpiler.PropertySet:1
msgid "ベースクラス: :class:`dict`"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:1
msgid "Dictionary subsclass that includes methods for adding gates to circuits."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:3
msgid ""
"A TomographyBasis is a dictionary where the keys index a measurement and "
"the values are a list of projectors associated to that measurement. It "
"also includes two optional methods `prep_gate` and `meas_gate`:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:6
msgid ""
"`prep_gate` adds gates to a circuit to prepare the corresponding basis "
"projector from an initial ground state."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:8
msgid ""
"`meas_gate` adds gates to a circuit to transform the default "
"Z-measurement into a measurement in the basis."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:10
msgid ""
"With the exception of built in bases, these functions do nothing unless "
"they are specified by the user. They may be set by the data members "
"`prep_fun` and `meas_fun`. We illustrate this with an example."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:16
msgid ""
"A measurement in the Pauli-X basis has two outcomes corresponding to the "
"projectors:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:18
msgid "`Xp = [[0.5, 0.5], [0.5, 0.5]]` `Xm = [[0.5, -0.5], [-0.5, 0.5]]`"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:20
msgid "We can express this as a basis by"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:21
msgid "`BX = TomographyBasis( {'X': [Xp, Xm]} )`"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:33
msgid "To specifiy the gates to prepare and measure in this basis we :"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:23
msgid "``` def BX_prep_fun(circuit, qreg, op):"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:25
msgid "bas, proj = op if bas == \"X\":"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:27
msgid "if proj == 0:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:28
#: qiskit.tools.qcvv.tomography.TomographyBasis:33
msgid "circuit.u2(0., np.pi, qreg)  # apply H"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:29
msgid "else:  # proj == 1"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:30
msgid "circuit.u2(np.pi, np.pi, qreg)  # apply H.X"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:32
msgid "def BX_prep_fun(circuit, qreg, op):"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:32
msgid "if op == \"X\":"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:37
msgid "We can then attach these functions to the basis using:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:36
msgid "`BX.prep_fun = BX_prep_fun` `BX.meas_fun = BX_meas_fun`."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:47
msgid "Generating function:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:40
msgid ""
"A generating function `tomography_basis` exists to create bases in a "
"single step. Using the above example this can be done by: ``` BX = "
"tomography_basis({'X': [Xp, Xm]},"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis:44
msgid "prep_fun=BX_prep_fun, meas_fun=BX_meas_fun)"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.meas_gate:1
msgid "Add measurement gates to a circuit."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.meas_gate:3
msgid "circuit to add measurement to."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.meas_gate:5
msgid "quantum register being measured."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.meas_gate:7
msgid "the basis label for the measurement."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.prep_gate:1
msgid "Add state preparation gates to a circuit."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.prep_gate:3
msgid "circuit to add a preparation to."
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.prep_gate:5
msgid "quantum register to apply"
msgstr ""

#: of qiskit.tools.qcvv.tomography.TomographyBasis.prep_gate:8
msgid "the basis label and index for the"
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:1
msgid ""
"Create the circuits to rotate to points in phase space :param circuit: "
"The circuit to be appended with tomography"
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:3
msgid "state preparation and/or measurements."
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:5
msgid "phis"
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:7
msgid "thetas"
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:9
msgid "a list of the qubit indexes of qreg to be measured."
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:11
#: qiskit.tools.qcvv.tomography.create_tomography_circuits:17
msgid "the quantum register containing qubits to be measured."
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:14
#: qiskit.tools.qcvv.tomography.create_tomography_circuits:20
msgid "the classical register containing bits to store measurement outcomes."
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:18
msgid "A list of names of the added wigner function circuits."
msgstr ""

#: of qiskit.tools.qcvv.tomography.build_wigner_circuits:21
msgid "if circuit is not a valid QuantumCircuit."
msgstr ""

#: of qiskit.tools.qcvv.tomography.count_keys:1
msgid "Generate outcome bitstrings for n-qubits."
msgstr ""

#: of qiskit.tools.qcvv.tomography.count_keys:3
msgid "the number of qubits."
msgstr ""

#: of qiskit.tools.qcvv.tomography.count_keys:6
msgid ""
"A list of bitstrings ordered as follows: Example: n=2 returns ['00', "
"'01', '10', '11']."
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:1
msgid "Add tomography measurement circuits to a QuantumProgram."
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:3
msgid ""
"The quantum program must contain a circuit 'name', which is treated as a "
"state preparation circuit for state tomography, or as teh circuit being "
"measured for process tomography. This function then appends the circuit "
"with a set of measurements specified by the input `tomography_set`, "
"optionally it also prepends the circuit with state preparation circuits "
"if they are specified in the `tomography_set`."
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:10
msgid ""
"For n-qubit tomography with a tomographically complete set of "
"preparations and measurements this results in $4^n 3^n$ circuits being "
"added to the quantum program."
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:14
msgid ""
"The circuit to be appended with tomography state preparation and/or "
"measurements."
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:23
#: qiskit.tools.qcvv.tomography.tomography_data:8
msgid "the dict of tomography configurations."
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:26
msgid "A list of quantum tomography circuits for the input circuit."
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:29
msgid "if circuit is not a valid QuantumCircuit"
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:33
msgid ""
"For a tomography set specifying state tomography of qubit-0 prepared by a"
" circuit 'circ' this would return: ``` ['circ_meas_X(0)', "
"'circ_meas_Y(0)', 'circ_meas_Z(0)'] ``` For process tomography of the "
"same circuit with preparation in the SIC-POVM basis it would return: ``` "
"["
msgstr ""

#: of qiskit.tools.qcvv.tomography.create_tomography_circuits:42
msgid ""
"'circ_prep_S0(0)_meas_X(0)', 'circ_prep_S0(0)_meas_Y(0)', "
"'circ_prep_S0(0)_meas_Z(0)', 'circ_prep_S1(0)_meas_X(0)', "
"'circ_prep_S1(0)_meas_Y(0)', 'circ_prep_S1(0)_meas_Z(0)', "
"'circ_prep_S2(0)_meas_X(0)', 'circ_prep_S2(0)_meas_Y(0)', "
"'circ_prep_S2(0)_meas_Z(0)', 'circ_prep_S3(0)_meas_X(0)', "
"'circ_prep_S3(0)_meas_Y(0)', 'circ_prep_S3(0)_meas_Z(0)'"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:1
msgid "Reconstruct a density matrix or process-matrix from tomography data."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:3
msgid ""
"If the input data is state_tomography_data the returned operator will be "
"a density matrix. If the input data is process_tomography_data the "
"returned operator will be a Choi-matrix in the column-vectorization "
"convention."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:8
msgid "process tomography measurement data."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:10
msgid ""
"the fitting method to use. Available methods:     - 'wizard' (default)"
"     - 'leastsq'"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:10
msgid "the fitting method to use. Available methods:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:12
msgid "'wizard' (default)"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:13
msgid "'leastsq'"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:15
msgid "additional options for fitting method."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:18
msgid "The fitted operator."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:33
msgid "Available methods:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:29
msgid "'wizard' (Default): The returned operator will be constrained to be"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:23
msgid "positive-semidefinite."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:24
msgid "Options: - 'trace': the trace of the returned operator."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:26
msgid "The default value is 1."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:27
msgid "'beta': hedging parameter for computing frequencies from"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:28
msgid "zero-count data. The default value is 0.50922."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:29
msgid "'epsilon: threshold for truncating small eigenvalues to zero."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:30
msgid "The default value is 0"
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:33
msgid "'leastsq': Fitting without positive-semidefinite constraint."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:32
msgid ""
"Options: - 'trace': Same as for 'wizard' method. - 'beta': Same as for "
"'wizard' method."
msgstr ""

#: of qiskit.tools.qcvv.tomography.fit_tomography_data:35
msgid "if the `method` parameter is not valid."
msgstr ""

#: of qiskit.tools.qcvv.tomography.marginal_counts:1
msgid "Compute the marginal counts for a subset of measured qubits."
msgstr ""

#: of qiskit.tools.qcvv.tomography.marginal_counts:3
msgid "the counts returned from a backend ({str: int})."
msgstr ""

#: of qiskit.tools.qcvv.tomography.marginal_counts:5
msgid "the qubits to return the marginal counts distribution for."
msgstr ""

#: of qiskit.tools.qcvv.tomography.marginal_counts:9
msgid ""
"A counts dict for the meas_qubits.abs Example: if `counts = {'00': 10, "
"'01': 5}`     `marginal_counts(counts, [0])` returns `{'0': 15, '1': 0}`."
"     `marginal_counts(counts, [0])` returns `{'0': 10, '1': 5}`."
msgstr ""

#: of qiskit.tools.qcvv.tomography.marginal_counts:9
msgid ""
"A counts dict for the meas_qubits.abs Example: if `counts = {'00': 10, "
"'01': 5}`"
msgstr ""

#: of qiskit.tools.qcvv.tomography.marginal_counts:11
msgid ""
"`marginal_counts(counts, [0])` returns `{'0': 15, '1': 0}`. "
"`marginal_counts(counts, [0])` returns `{'0': 10, '1': 5}`."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:1
msgid "Generate a dictionary of process tomography experiment configurations."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:3
#: qiskit.tools.qcvv.tomography.state_tomography_set:3
#: qiskit.tools.qcvv.tomography.tomography_set:3
msgid ""
"This returns a data structure that is used by other tomography functions "
"to generate state and process tomography circuits, and extract tomography"
" data from results after execution on a backend."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:40
msgid "A quantum process tomography set is created by specifying a preparation"
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:8
msgid ""
"basis along with a measurement basis. The preparation basis may be a user"
" defined `tomography_basis`, or one of the two built in basis 'SIC' or "
"'Pauli'. - SIC: Is a minimal symmetric informationally complete "
"preparation"
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:12
#: qiskit.tools.qcvv.tomography.state_tomography_set:19
#: qiskit.tools.qcvv.tomography.tomography_set:19
msgid ""
"basis for 4 states for each qubit (4 ^ number of qubits total preparation"
" states). These correspond to the |0> state and the 3 other vertices of a"
" tetrahedron on the Bloch-sphere."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:17
#: qiskit.tools.qcvv.tomography.state_tomography_set:24
#: qiskit.tools.qcvv.tomography.tomography_set:24
msgid "Pauli: Is a tomographically overcomplete preparation basis of the six"
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:16
#: qiskit.tools.qcvv.tomography.state_tomography_set:23
#: qiskit.tools.qcvv.tomography.tomography_set:23
msgid ""
"eigenstates of the 3 Pauli operators (6 ^ number of qubits total "
"preparation states)."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:20
msgid ""
"meas_qubits (list): The qubits being measured. meas_basis "
"(tomography_basis or str): The qubit measurement basis."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:22
msgid "The default value is 'Pauli'."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:23
msgid "prep_qubits (list or None): The qubits being prepared. If None then"
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:24
msgid "meas_qubits will be used for process tomography experiments."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:26
msgid "prep_basis (tomography_basis or str): The qubit preparation basis."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:26
msgid "The default value is 'SIC'."
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:29
msgid ""
"dict: A dict of tomography configurations that can be parsed by "
"`create_tomography_circuits` and `tomography_data` functions for "
"implementing quantum tomography experiments. This output contains fields "
"\"qubits\", \"meas_basis\", \"prep_basus\", circuits\". ``` {"
msgstr ""

#: of qiskit.tools.qcvv.tomography.process_tomography_set:35
msgid ""
"'qubits': qubits (list[ints]), 'meas_basis': meas_basis "
"(tomography_basis), 'prep_basis': prep_basis (tomography_basis), "
"'circuit_labels': (list[string]), 'circuits': (list[dict])  # prep and "
"meas configurations"
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:1
msgid "Generate a dictionary of state tomography experiment configurations."
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:11
#: qiskit.tools.qcvv.tomography.tomography_set:11
msgid "Quantum State Tomography:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:8
#: qiskit.tools.qcvv.tomography.tomography_set:8
msgid ""
"Be default it will return a set for performing Quantum State Tomography "
"where individual qubits are measured in the Pauli basis. A custom "
"measurement basis may also be used by defining a user `tomography_basis` "
"and passing this in for the `meas_basis` argument."
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:24
#: qiskit.tools.qcvv.tomography.tomography_set:24
msgid "Quantum Process Tomography:"
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:14
#: qiskit.tools.qcvv.tomography.tomography_set:14
msgid ""
"A quantum process tomography set is created by specifying a preparation "
"basis along with a measurement basis. The preparation basis may be a user"
" defined `tomography_basis`, or one of the two built in basis 'SIC' or "
"'Pauli'. - SIC: Is a minimal symmetric informationally complete "
"preparation"
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:26
#: qiskit.tools.qcvv.tomography.tomography_set:26
msgid "The qubits being measured."
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:28
#: qiskit.tools.qcvv.tomography.tomography_set:28
msgid "The qubit measurement basis. The default value is 'Pauli'."
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:32
msgid ""
"A dict of tomography configurations that can be parsed by "
"`create_tomography_circuits` and `tomography_data` functions for "
"implementing quantum tomography experiments. This output contains fields "
"\"qubits\", \"meas_basis\", \"circuits\". ``` {     'qubits': qubits "
"(list[ints]),     'meas_basis': meas_basis (tomography_basis),     "
"'circuit_labels': (list[string]),     'circuits': (list[dict])  # prep "
"and meas configurations } ```"
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:32
msgid ""
"A dict of tomography configurations that can be parsed by "
"`create_tomography_circuits` and `tomography_data` functions for "
"implementing quantum tomography experiments. This output contains fields "
"\"qubits\", \"meas_basis\", \"circuits\". ``` {"
msgstr ""

#: of qiskit.tools.qcvv.tomography.state_tomography_set:38
msgid ""
"'qubits': qubits (list[ints]), 'meas_basis': meas_basis "
"(tomography_basis), 'circuit_labels': (list[string]), 'circuits': "
"(list[dict])  # prep and meas configurations"
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_basis:1
msgid "Generate a TomographyBasis object."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_basis:3
msgid "See TomographyBasis for further details.abs"
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_basis:5
msgid "the function which adds preparation gates to a circuit."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_basis:8
msgid "the function which adds measurement gates to a circuit."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_basis:12
msgid "A tomography basis."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_circuit_names:1
msgid "Return a list of tomography circuit names."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_circuit_names:3
msgid ""
"The returned list is the same as the one returned by "
"`create_tomography_circuits` and can be used by a QuantumProgram to "
"execute tomography circuits and extract measurement results."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_circuit_names:7
msgid "a tomography set generated by `tomography_set`."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_circuit_names:10
msgid "the name of the base QuantumCircuit used by the"
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_circuit_names:14
msgid "A list of circuit names."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_data:1
msgid "Return a results dict for a state or process tomography experiment."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_data:3
msgid "Results from execution of a process tomography circuits on a backend."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_data:6
msgid "The name of the circuit being reconstructed."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_data:11
msgid ""
"A list of dicts for the outcome of each process tomography measurement "
"circuit."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_set:1
msgid "Generate a dictionary of tomography experiment configurations."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_set:31
msgid ""
"The qubits being prepared. If None then meas_qubits will be used for "
"process tomography experiments."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_set:34
msgid ""
"The optional qubit preparation basis. If no basis is specified state "
"tomography will be performed instead of process tomography. A built in "
"basis may be specified by 'SIC' or 'Pauli'  (SIC basis recommended for > "
"2 qubits)."
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_set:40
msgid ""
"A dict of tomography configurations that can be parsed by "
"`create_tomography_circuits` and `tomography_data` functions for "
"implementing quantum tomography experiments. This output contains fields "
"\"qubits\", \"meas_basis\", \"circuits\". It may also optionally contain "
"a field \"prep_basis\" for process tomography experiments. ``` {     "
"'qubits': qubits (list[ints]),     'meas_basis': meas_basis "
"(tomography_basis),     'circuit_labels': (list[string]),     'circuits':"
" (list[dict])  # prep and meas configurations     # optionally for "
"process tomography experiments:     'prep_basis': prep_basis "
"(tomography_basis) } ```"
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_set:40
msgid ""
"A dict of tomography configurations that can be parsed by "
"`create_tomography_circuits` and `tomography_data` functions for "
"implementing quantum tomography experiments. This output contains fields "
"\"qubits\", \"meas_basis\", \"circuits\". It may also optionally contain "
"a field \"prep_basis\" for process tomography experiments. ``` {"
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_set:47
msgid ""
"'qubits': qubits (list[ints]), 'meas_basis': meas_basis "
"(tomography_basis), 'circuit_labels': (list[string]), 'circuits': "
"(list[dict])  # prep and meas configurations # optionally for process "
"tomography experiments: 'prep_basis': prep_basis (tomography_basis)"
msgstr ""

#: of qiskit.tools.qcvv.tomography.tomography_set:57
msgid "if the Qubits argument is not a list."
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:1
msgid "Get the value of the Wigner function from measurement results."
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:3
msgid "Results from execution of a state tomography circuits on a backend."
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:6
msgid "a list of the qubit indexes measured."
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:8
msgid "a list of names of the circuits"
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:10
msgid "number of shots"
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:13
msgid "The values of the Wigner function at measured points in     phase space"
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:15
msgid "The values of the Wigner function at measured points in"
msgstr ""

#: of qiskit.tools.qcvv.tomography.wigner_data:16
msgid "phase space"
msgstr ""

#: ../../api/qiskit.tools.qi.rst:2
msgid "qiskit.tools.qi package"
msgstr ""

#: ../../api/qiskit.tools.qi.qi.rst:2
msgid "qiskit.tools.qi.qi module"
msgstr ""

#: of qiskit.tools.qi.qi:1
msgid "A collection of useful quantum information functions."
msgstr ""

#: of qiskit.tools.qi.qi:3
msgid ""
"Currently this file is very sparse. More functions will be added over "
"time."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:1
msgid "Convert a Choi-matrix to a Pauli-basis superoperator."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:3
msgid ""
"Note that this function assumes that the Choi-matrix is defined in the "
"standard column-stacking convention and is normalized to have trace 1. "
"For a channel E this is defined as: choi = (I \\otimes E)(bell_state)."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:8
msgid ""
"The resulting 'rauli' R acts on input states as |rho_out>_p = "
"R.|rho_in>_p where |rho> = vectorize(rho, method='pauli') for order=1 and"
" |rho> = vectorize(rho, method='pauli_weights') for order=0."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:13
msgid "the input Choi-matrix."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:15
msgid ""
"ordering of the Pauli group vector. order=1 (default) is standard "
"lexicographic ordering.     Eg: [II, IX, IY, IZ, XI, XX, XY,...] order=0 "
"is ordered by weights.     Eg. [II, IX, IY, IZ, XI, XY, XZ, XX, XY,...]"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:15
msgid ""
"ordering of the Pauli group vector. order=1 (default) is standard "
"lexicographic ordering."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:17
msgid "Eg: [II, IX, IY, IZ, XI, XX, XY,...]"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:18
msgid "order=0 is ordered by weights."
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:19
msgid "Eg. [II, IX, IY, IZ, XI, XY, XZ, XX, XY,...]"
msgstr ""

#: of qiskit.tools.qi.qi.choi_to_rauli:22
msgid "A superoperator in the Pauli basis."
msgstr ""

#: of qiskit.tools.qi.qi.chop:1
msgid "Truncate small values of a complex array."
msgstr ""

#: of qiskit.tools.qi.qi.chop:3
msgid "array to truncte small values."
msgstr ""

#: of qiskit.tools.qi.qi.chop:5
msgid "threshold."
msgstr ""

#: of qiskit.tools.qi.qi.chop:8
msgid "A new operator with small values set to zero."
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:1
msgid "Calculate the concurrence."
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:3
msgid "a quantum state (1x4 array) or a density matrix (4x4 array)"
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:7
msgid "concurrence."
msgstr ""

#: of qiskit.tools.qi.qi.concurrence:10
msgid "if attempted on more than two qubits."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:1
msgid "Devectorize a vectorized square matrix."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:3
msgid "a vectorized density matrix."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:5
msgid ""
"the method of devectorization. Allowed values are - 'col' (default): "
"flattens to column-major vector. - 'row': flattens to row-major vector. -"
" 'pauli': flattens in the n-qubit Pauli basis. - 'pauli-weights': "
"flattens in the n-qubit Pauli basis ordered by    weight."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:5
msgid ""
"the method of devectorization. Allowed values are - 'col' (default): "
"flattens to column-major vector. - 'row': flattens to row-major vector. -"
" 'pauli': flattens in the n-qubit Pauli basis. - 'pauli-weights': "
"flattens in the n-qubit Pauli basis ordered by"
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:10 qiskit.tools.qi.qi.vectorize:10
msgid "weight."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:13
msgid "the resulting matrix."
msgstr ""

#: of qiskit.tools.qi.qi.devectorize:16 qiskit.tools.qi.qi.vectorize:16
msgid "if input state is not a n-qubit state"
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:1
msgid "Compute the entanglement of formation of quantum state."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:3
msgid ""
"The input quantum state must be either a bipartite state vector, or a "
"2-qubit density matrix."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:6
msgid "(N) array_like or (4,4) array_like, a bipartite quantum state."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:10
msgid "the dimension of the first subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:12
msgid "the dimension of the second subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.entanglement_of_formation:15
msgid "The entanglement of formation."
msgstr ""

#: of qiskit.tools.qi.qi.entropy:1
msgid "Compute the von-Neumann entropy of a quantum state."
msgstr ""

#: of qiskit.tools.qi.qi.entropy:3
msgid "a density matrix or state vector."
msgstr ""

#: of qiskit.tools.qi.qi.entropy:6
msgid "The von-Neumann entropy S(rho)."
msgstr ""

#: of qiskit.tools.qi.qi.is_pos_def:1
msgid "Return is_pos_def."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:1
msgid "Compute the mutual information of a bipartite state."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:3
msgid "a bipartite state-vector or density-matrix."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:5
msgid "dimension of the first subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:7
msgid "dimension of the second subsystem."
msgstr ""

#: of qiskit.tools.qi.qi.mutual_information:10
msgid "The mutual information S(rho_A) + S(rho_B) - S(rho_AB)."
msgstr ""

#: of qiskit.tools.qi.qi.outer:1
msgid "Construct the outer product of two vectors."
msgstr ""

#: of qiskit.tools.qi.qi.outer:3
msgid ""
"The second vector argument is optional, if absent the projector of the "
"first vector will be returned."
msgstr ""

#: of qiskit.tools.qi.qi.outer:6
msgid "the first vector."
msgstr ""

#: of qiskit.tools.qi.qi.outer:8
msgid "the (optional) second vector."
msgstr ""

#: of qiskit.tools.qi.qi.outer:11
msgid "The matrix |v1><v2|."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:1
msgid "Partial trace over subsystems of multi-partite matrix."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:3
msgid "Note that subsystems are ordered as rho012 = rho0(x)rho1(x)rho2."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:5
msgid "a matrix NxN"
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:7
msgid "a list of subsystems (starting from 0) to trace over."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:10
msgid ""
"a list of the dimensions of the subsystems. If this is not set it will "
"assume all subsystems are qubits."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:14
msgid ""
"ordering of systems in operator. If True system-0 is the right most "
"system in tensor product. If False system-0 is the left most system in "
"tensor product."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:19
msgid "A density matrix with the appropriate subsystems traced     over."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:21
msgid "A density matrix with the appropriate subsystems traced"
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:22
msgid "over."
msgstr ""

#: of qiskit.tools.qi.qi.partial_trace:25
msgid "if input is not a multi-qubit state."
msgstr ""

#: of qiskit.tools.qi.qi.qft:1
msgid "n-qubit QFT on q in circ."
msgstr ""

#: of qiskit.tools.qi.qi.random_density_matrix:1
#: qiskit.tools.qi.qi.random_unitary_matrix:1
msgid "Deprecated in 0.8+"
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:1
msgid "Compute the Shannon entropy of a probability vector."
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:3
msgid ""
"The shannon entropy of a probability vector pv is defined as $H(pv) = - "
"\\sum_j pv[j] log_b (pv[j])$ where $0 log_b 0 = 0$."
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:6
msgid "a probability vector."
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:8
msgid "the base of the logarith"
msgstr ""

#: of qiskit.tools.qi.qi.shannon_entropy:11
msgid "The Shannon entropy H(pvec)."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:1
msgid "Flatten an operator to a vector in a specified basis."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:3
msgid "a density matrix."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:5
msgid ""
"the method of vectorization. Allowed values are - 'col' (default) "
"flattens to column-major vector. - 'row' flattens to row-major vector. - "
"'pauli'flattens in the n-qubit Pauli basis. - 'pauli-weights': flattens "
"in the n-qubit Pauli basis ordered by    weight."
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:5
msgid ""
"the method of vectorization. Allowed values are - 'col' (default) "
"flattens to column-major vector. - 'row' flattens to row-major vector. - "
"'pauli'flattens in the n-qubit Pauli basis. - 'pauli-weights': flattens "
"in the n-qubit Pauli basis ordered by"
msgstr ""

#: of qiskit.tools.qi.qi.vectorize:13
msgid "the resulting vector."
msgstr ""

#: ../../api/qiskit.tools.visualization.rst:2
msgid "qiskit.tools.visualization module"
msgstr ""

#: ../../api/qiskit.transpiler.rst:2
msgid "qiskit.transpiler package"
msgstr ""

#: of qiskit.transpiler:1
msgid "Utils for transpiler."
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:2
msgid "AnalysisPass"
msgstr ""

#: of qiskit.transpiler.AnalysisPass:1 qiskit.transpiler.TransformationPass:1
#: qiskit.transpiler.basepasses.AnalysisPass:1
#: qiskit.transpiler.basepasses.TransformationPass:1
msgid "ベースクラス: :class:`qiskit.transpiler.basepasses.BasePass`"
msgstr ""

#: of qiskit.transpiler.AnalysisPass:1
#: qiskit.transpiler.basepasses.AnalysisPass:1
msgid "An analysis pass: change property set, not DAG."
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.AnalysisPass.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.TransformationPass.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CXDirection.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CheckMap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CountOps.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Decompose.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Depth.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Size.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Unroller.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Width.rst:15:<autosummary>:1
msgid ""
"If the pass is an AnalysisPass, that means that the pass can analyze the "
"DAG and write the results of that analysis in the property set."
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.AnalysisPass.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.TransformationPass.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CXDirection.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CheckMap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CountOps.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Decompose.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Depth.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Size.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Unroller.rst:15:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Width.rst:15:<autosummary>:1 of
#: qiskit.transpiler.AnalysisPass.is_transformation_pass:1
#: qiskit.transpiler.TransformationPass.is_transformation_pass:1
#: qiskit.transpiler.basepasses.BasePass.is_transformation_pass:1
#: qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.is_transformation_pass:1
#: qiskit.transpiler.passes.BasicSwap.is_transformation_pass:1
#: qiskit.transpiler.passes.CXCancellation.is_transformation_pass:1
#: qiskit.transpiler.passes.CXDirection.is_transformation_pass:1
#: qiskit.transpiler.passes.CheckCXDirection.is_transformation_pass:1
#: qiskit.transpiler.passes.CheckMap.is_transformation_pass:1
#: qiskit.transpiler.passes.Collect2qBlocks.is_transformation_pass:1
#: qiskit.transpiler.passes.CommutationAnalysis.is_transformation_pass:1
#: qiskit.transpiler.passes.CommutativeCancellation.is_transformation_pass:1
#: qiskit.transpiler.passes.ConsolidateBlocks.is_transformation_pass:1
#: qiskit.transpiler.passes.CountOps.is_transformation_pass:1
#: qiskit.transpiler.passes.DAGFixedPoint.is_transformation_pass:1
#: qiskit.transpiler.passes.Decompose.is_transformation_pass:1
#: qiskit.transpiler.passes.DenseLayout.is_transformation_pass:1
#: qiskit.transpiler.passes.Depth.is_transformation_pass:1
#: qiskit.transpiler.passes.EnlargeWithAncilla.is_transformation_pass:1
#: qiskit.transpiler.passes.FixedPoint.is_transformation_pass:1
#: qiskit.transpiler.passes.FullAncillaAllocation.is_transformation_pass:1
#: qiskit.transpiler.passes.LegacySwap.is_transformation_pass:1
#: qiskit.transpiler.passes.LookaheadSwap.is_transformation_pass:1
#: qiskit.transpiler.passes.MergeAdjacentBarriers.is_transformation_pass:1
#: qiskit.transpiler.passes.NoiseAdaptiveLayout.is_transformation_pass:1
#: qiskit.transpiler.passes.NumTensorFactors.is_transformation_pass:1
#: qiskit.transpiler.passes.Optimize1qGates.is_transformation_pass:1
#: qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.is_transformation_pass:1
#: qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.is_transformation_pass:1
#: qiskit.transpiler.passes.RemoveResetInZeroState.is_transformation_pass:1
#: qiskit.transpiler.passes.ResourceEstimation.is_transformation_pass:1
#: qiskit.transpiler.passes.SetLayout.is_transformation_pass:1
#: qiskit.transpiler.passes.Size.is_transformation_pass:1
#: qiskit.transpiler.passes.StochasticSwap.is_transformation_pass:1
#: qiskit.transpiler.passes.TrivialLayout.is_transformation_pass:1
#: qiskit.transpiler.passes.Unroll3qOrMore.is_transformation_pass:1
#: qiskit.transpiler.passes.Unroller.is_transformation_pass:1
#: qiskit.transpiler.passes.Width.is_transformation_pass:1
msgid ""
"If the pass is a TransformationPass, that means that the pass can "
"manipulate the DAG, but cannot modify the property set (but it can be "
"read)."
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.AnalysisPass.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.TransformationPass.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CXDirection.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CheckMap.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CountOps.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Decompose.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Depth.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Size.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Unroller.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Width.rst:22:<autosummary>:1 of
#: qiskit.transpiler.AnalysisPass.name:1
#: qiskit.transpiler.TransformationPass.name:1
#: qiskit.transpiler.basepasses.BasePass.name:1
#: qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.name:1
#: qiskit.transpiler.passes.BasicSwap.name:1
#: qiskit.transpiler.passes.CXCancellation.name:1
#: qiskit.transpiler.passes.CXDirection.name:1
#: qiskit.transpiler.passes.CheckCXDirection.name:1
#: qiskit.transpiler.passes.CheckMap.name:1
#: qiskit.transpiler.passes.Collect2qBlocks.name:1
#: qiskit.transpiler.passes.CommutationAnalysis.name:1
#: qiskit.transpiler.passes.CommutativeCancellation.name:1
#: qiskit.transpiler.passes.ConsolidateBlocks.name:1
#: qiskit.transpiler.passes.CountOps.name:1
#: qiskit.transpiler.passes.DAGFixedPoint.name:1
#: qiskit.transpiler.passes.Decompose.name:1
#: qiskit.transpiler.passes.DenseLayout.name:1
#: qiskit.transpiler.passes.Depth.name:1
#: qiskit.transpiler.passes.EnlargeWithAncilla.name:1
#: qiskit.transpiler.passes.FixedPoint.name:1
#: qiskit.transpiler.passes.FullAncillaAllocation.name:1
#: qiskit.transpiler.passes.LegacySwap.name:1
#: qiskit.transpiler.passes.LookaheadSwap.name:1
#: qiskit.transpiler.passes.MergeAdjacentBarriers.name:1
#: qiskit.transpiler.passes.NoiseAdaptiveLayout.name:1
#: qiskit.transpiler.passes.NumTensorFactors.name:1
#: qiskit.transpiler.passes.Optimize1qGates.name:1
#: qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.name:1
#: qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.name:1
#: qiskit.transpiler.passes.RemoveResetInZeroState.name:1
#: qiskit.transpiler.passes.ResourceEstimation.name:1
#: qiskit.transpiler.passes.SetLayout.name:1
#: qiskit.transpiler.passes.Size.name:1
#: qiskit.transpiler.passes.StochasticSwap.name:1
#: qiskit.transpiler.passes.TrivialLayout.name:1
#: qiskit.transpiler.passes.Unroll3qOrMore.name:1
#: qiskit.transpiler.passes.Unroller.name:1
#: qiskit.transpiler.passes.Width.name:1
msgid "The name of the pass."
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.AnalysisPass.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.AnalysisPass.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.TransformationPass.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.CountOps.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Depth.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.SetLayout.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Size.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.Width.rst:22:<autosummary>:1
msgid "Run a pass on the DAGCircuit."
msgstr ""

#: of qiskit.transpiler.AnalysisPass.is_analysis_pass:1
#: qiskit.transpiler.TransformationPass.is_analysis_pass:1
#: qiskit.transpiler.basepasses.BasePass.is_analysis_pass:1
#: qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.is_analysis_pass:1
#: qiskit.transpiler.passes.BasicSwap.is_analysis_pass:1
#: qiskit.transpiler.passes.CXCancellation.is_analysis_pass:1
#: qiskit.transpiler.passes.CXDirection.is_analysis_pass:1
#: qiskit.transpiler.passes.CheckCXDirection.is_analysis_pass:1
#: qiskit.transpiler.passes.CheckMap.is_analysis_pass:1
#: qiskit.transpiler.passes.Collect2qBlocks.is_analysis_pass:1
#: qiskit.transpiler.passes.CommutationAnalysis.is_analysis_pass:1
#: qiskit.transpiler.passes.CommutativeCancellation.is_analysis_pass:1
#: qiskit.transpiler.passes.ConsolidateBlocks.is_analysis_pass:1
#: qiskit.transpiler.passes.CountOps.is_analysis_pass:1
#: qiskit.transpiler.passes.DAGFixedPoint.is_analysis_pass:1
#: qiskit.transpiler.passes.Decompose.is_analysis_pass:1
#: qiskit.transpiler.passes.DenseLayout.is_analysis_pass:1
#: qiskit.transpiler.passes.Depth.is_analysis_pass:1
#: qiskit.transpiler.passes.EnlargeWithAncilla.is_analysis_pass:1
#: qiskit.transpiler.passes.FixedPoint.is_analysis_pass:1
#: qiskit.transpiler.passes.FullAncillaAllocation.is_analysis_pass:1
#: qiskit.transpiler.passes.LegacySwap.is_analysis_pass:1
#: qiskit.transpiler.passes.LookaheadSwap.is_analysis_pass:1
#: qiskit.transpiler.passes.MergeAdjacentBarriers.is_analysis_pass:1
#: qiskit.transpiler.passes.NoiseAdaptiveLayout.is_analysis_pass:1
#: qiskit.transpiler.passes.NumTensorFactors.is_analysis_pass:1
#: qiskit.transpiler.passes.Optimize1qGates.is_analysis_pass:1
#: qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.is_analysis_pass:1
#: qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.is_analysis_pass:1
#: qiskit.transpiler.passes.RemoveResetInZeroState.is_analysis_pass:1
#: qiskit.transpiler.passes.ResourceEstimation.is_analysis_pass:1
#: qiskit.transpiler.passes.SetLayout.is_analysis_pass:1
#: qiskit.transpiler.passes.Size.is_analysis_pass:1
#: qiskit.transpiler.passes.StochasticSwap.is_analysis_pass:1
#: qiskit.transpiler.passes.TrivialLayout.is_analysis_pass:1
#: qiskit.transpiler.passes.Unroll3qOrMore.is_analysis_pass:1
#: qiskit.transpiler.passes.Unroller.is_analysis_pass:1
#: qiskit.transpiler.passes.Width.is_analysis_pass:1
msgid ""
"If the pass is an AnalysisPass, that means that the pass can analyze the "
"DAG and write the results of that analysis in the property set. "
"Modifications on the DAG are not allowed by this kind of pass."
msgstr ""

#: of qiskit.transpiler.AnalysisPass.run:1
#: qiskit.transpiler.TransformationPass.run:1
#: qiskit.transpiler.basepasses.BasePass.run:1
#: qiskit.transpiler.passes.CountOps.run:1
#: qiskit.transpiler.passes.DAGFixedPoint.run:1
#: qiskit.transpiler.passes.Depth.run:1
#: qiskit.transpiler.passes.FixedPoint.run:1
#: qiskit.transpiler.passes.MergeAdjacentBarriers.run:1
#: qiskit.transpiler.passes.NumTensorFactors.run:1
#: qiskit.transpiler.passes.ResourceEstimation.run:1
#: qiskit.transpiler.passes.SetLayout.run:1 qiskit.transpiler.passes.Size.run:1
#: qiskit.transpiler.passes.Width.run:1
#: qiskit.transpiler.passes.count_ops.CountOps.run:1
#: qiskit.transpiler.passes.dag_fixed_point.DAGFixedPoint.run:1
#: qiskit.transpiler.passes.fixed_point.FixedPoint.run:1
#: qiskit.transpiler.passes.mapping.set_layout.SetLayout.run:1
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers.run:1
#: qiskit.transpiler.passes.num_tensor_factors.NumTensorFactors.run:1
#: qiskit.transpiler.passes.resource_estimation.ResourceEstimation.run:1
msgid ""
"Run a pass on the DAGCircuit. This is implemented by the pass developer. "
":param dag: the dag on which the pass is run. :type dag: DAGCircuit"
msgstr ""

#: of qiskit.transpiler.AnalysisPass.run:5
#: qiskit.transpiler.TransformationPass.run:5
#: qiskit.transpiler.basepasses.BasePass.run:5
#: qiskit.transpiler.passes.CountOps.run:5
#: qiskit.transpiler.passes.DAGFixedPoint.run:5
#: qiskit.transpiler.passes.Depth.run:5
#: qiskit.transpiler.passes.FixedPoint.run:5
#: qiskit.transpiler.passes.MergeAdjacentBarriers.run:5
#: qiskit.transpiler.passes.NumTensorFactors.run:5
#: qiskit.transpiler.passes.ResourceEstimation.run:5
#: qiskit.transpiler.passes.SetLayout.run:5 qiskit.transpiler.passes.Size.run:5
#: qiskit.transpiler.passes.Width.run:5
#: qiskit.transpiler.passes.count_ops.CountOps.run:5
#: qiskit.transpiler.passes.dag_fixed_point.DAGFixedPoint.run:5
#: qiskit.transpiler.passes.fixed_point.FixedPoint.run:5
#: qiskit.transpiler.passes.mapping.set_layout.SetLayout.run:5
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers.run:5
#: qiskit.transpiler.passes.num_tensor_factors.NumTensorFactors.run:5
#: qiskit.transpiler.passes.resource_estimation.ResourceEstimation.run:5
msgid "when this is left unimplemented for a pass."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:2
msgid "CouplingMap"
msgstr ""

#: of qiskit.transpiler.CouplingMap:1 qiskit.transpiler.coupling.CouplingMap:1
msgid "Directed graph specifying fixed coupling."
msgstr ""

#: of qiskit.transpiler.CouplingMap:3 qiskit.transpiler.coupling.CouplingMap:3
msgid ""
"Nodes correspond to physical qubits (integers) and directed edges "
"correspond to permitted CNOT gates"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:14:<autosummary>:1
msgid ":obj:`physical_qubits <qiskit.transpiler.CouplingMap.physical_qubits>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:14:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.physical_qubits:1
#: qiskit.transpiler.coupling.CouplingMap.physical_qubits:1
msgid "Returns a sorted list of physical_qubits"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ""
":obj:`add_edge <qiskit.transpiler.CouplingMap.add_edge>`\\ \\(src\\, "
"dst\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.add_edge:1
#: qiskit.transpiler.coupling.CouplingMap.add_edge:1
msgid "Add directed edge to coupling graph."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ""
":obj:`add_physical_qubit "
"<qiskit.transpiler.CouplingMap.add_physical_qubit>`\\ "
"\\(physical\\_qubit\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.add_physical_qubit:1
#: qiskit.transpiler.coupling.CouplingMap.add_physical_qubit:1
msgid "Add a physical qubit to the coupling graph as a node."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ""
":obj:`distance <qiskit.transpiler.CouplingMap.distance>`\\ "
"\\(physical\\_qubit1\\, physical\\_qubit2\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.distance:1
#: qiskit.transpiler.coupling.CouplingMap.distance:1
msgid ""
"Returns the undirected distance between physical_qubit1 and "
"physical_qubit2."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ":obj:`get_edges <qiskit.transpiler.CouplingMap.get_edges>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.get_edges:1
#: qiskit.transpiler.coupling.CouplingMap.get_edges:1
msgid "Gets the list of edges in the coupling graph."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ":obj:`is_connected <qiskit.transpiler.CouplingMap.is_connected>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.is_connected:1
#: qiskit.transpiler.coupling.CouplingMap.is_connected:1
msgid "Test if the graph is connected."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ":obj:`reduce <qiskit.transpiler.CouplingMap.reduce>`\\ \\(mapping\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.reduce:1
#: qiskit.transpiler.coupling.CouplingMap.reduce:1
msgid ""
"Returns a reduced coupling map that corresponds to the subgraph of qubits"
" selected in the mapping."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ""
":obj:`shortest_undirected_path "
"<qiskit.transpiler.CouplingMap.shortest_undirected_path>`\\ "
"\\(physical\\_qubit1\\, ...\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ""
"Returns the shortest undirected path between physical_qubit1 and "
"physical_qubit2."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ":obj:`size <qiskit.transpiler.CouplingMap.size>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.size:1
#: qiskit.transpiler.coupling.CouplingMap.size:1
msgid "Return the number of physical qubits in this graph."
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1
msgid ":obj:`subgraph <qiskit.transpiler.CouplingMap.subgraph>`\\ \\(nodelist\\)"
msgstr ""

#: ../../api/qiskit.transpiler.CouplingMap.rst:28:<autosummary>:1 of
#: qiskit.transpiler.CouplingMap.subgraph:1
#: qiskit.transpiler.coupling.CouplingMap.subgraph:1
msgid "Return a CouplingMap object for a subgraph of self."
msgstr ""

#: of qiskit.transpiler.CouplingMap.add_edge:3
#: qiskit.transpiler.coupling.CouplingMap.add_edge:3
msgid "src (int): source physical qubit dst (int): destination physical qubit"
msgstr ""

#: of qiskit.transpiler.CouplingMap.add_physical_qubit:3
#: qiskit.transpiler.coupling.CouplingMap.add_physical_qubit:3
msgid "physical_qubit (int): An integer representing a physical qubit."
msgstr ""

#: of qiskit.transpiler.CouplingMap.add_physical_qubit:5
#: qiskit.transpiler.coupling.CouplingMap.add_physical_qubit:5
msgid "if trying to add duplicate qubit"
msgstr ""

#: of qiskit.transpiler.CouplingMap.distance:3
#: qiskit.transpiler.coupling.CouplingMap.distance:3
msgid "A physical qubit"
msgstr ""

#: of qiskit.transpiler.CouplingMap.distance:5
#: qiskit.transpiler.coupling.CouplingMap.distance:5
msgid "Another physical qubit"
msgstr ""

#: of qiskit.transpiler.CouplingMap.distance:8
#: qiskit.transpiler.coupling.CouplingMap.distance:8
msgid "The undirected distance"
msgstr ""

#: of qiskit.transpiler.CouplingMap.distance:11
#: qiskit.transpiler.coupling.CouplingMap.distance:11
msgid "if the qubits do not exist in the CouplingMap"
msgstr ""

#: of qiskit.transpiler.CouplingMap.get_edges:3
#: qiskit.transpiler.coupling.CouplingMap.get_edges:3
msgid "Each edge is a pair of physical qubits."
msgstr ""

#: of qiskit.transpiler.CouplingMap.is_connected:3
#: qiskit.transpiler.coupling.CouplingMap.is_connected:3
msgid "Return True if connected, False otherwise"
msgstr ""

#: of qiskit.transpiler.CouplingMap.reduce:5
#: qiskit.transpiler.coupling.CouplingMap.reduce:5
msgid "A mapping of reduced qubits to device qubits."
msgstr ""

#: of qiskit.transpiler.CouplingMap.reduce:9
#: qiskit.transpiler.coupling.CouplingMap.reduce:9
msgid "A reduced coupling_map for the selected qubits."
msgstr ""

#: of qiskit.transpiler.CouplingMap.reduce:12
#: qiskit.transpiler.coupling.CouplingMap.reduce:12
msgid "Reduced coupling map must be connected."
msgstr ""

#: of qiskit.transpiler.CouplingMap.shortest_undirected_path:1
#: qiskit.transpiler.coupling.CouplingMap.shortest_undirected_path:1
msgid ""
"Returns the shortest undirected path between physical_qubit1 and "
"physical_qubit2. :param physical_qubit1: A physical qubit :type "
"physical_qubit1: int :param physical_qubit2: Another physical qubit :type"
" physical_qubit2: int"
msgstr ""

#: of qiskit.transpiler.CouplingMap.shortest_undirected_path:7
#: qiskit.transpiler.coupling.CouplingMap.shortest_undirected_path:7
msgid "The shortest undirected path"
msgstr ""

#: of qiskit.transpiler.CouplingMap.shortest_undirected_path:10
#: qiskit.transpiler.coupling.CouplingMap.shortest_undirected_path:10
msgid "When there is no path between physical_qubit1, physical_qubit2."
msgstr ""

#: of qiskit.transpiler.CouplingMap.subgraph:3
#: qiskit.transpiler.coupling.CouplingMap.subgraph:3
msgid "nodelist (list): list of integer node labels"
msgstr ""

#: ../../api/qiskit.transpiler.FencedDAGCircuit.rst:2
msgid "FencedDAGCircuit"
msgstr ""

#: of qiskit.transpiler.FencedDAGCircuit:1
#: qiskit.transpiler.FencedPropertySet:1
#: qiskit.transpiler.fencedobjs.FencedDAGCircuit:1
#: qiskit.transpiler.fencedobjs.FencedPropertySet:1
msgid "ベースクラス: :class:`qiskit.transpiler.fencedobjs.FencedObject`"
msgstr ""

#: of qiskit.transpiler.FencedDAGCircuit:1
#: qiskit.transpiler.fencedobjs.FencedDAGCircuit:1
msgid "A dag circuit that cannot be modified (via remove_op_node)"
msgstr ""

#: ../../api/qiskit.transpiler.FencedPropertySet.rst:2
msgid "FencedPropertySet"
msgstr ""

#: of qiskit.transpiler.FencedPropertySet:1
#: qiskit.transpiler.fencedobjs.FencedPropertySet:1
msgid "A property set that cannot be written (via __setitem__)"
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:2
msgid "FlowController"
msgstr ""

#: of qiskit.transpiler.FlowController:1
msgid ""
"This class is a base class for multiple types of working list. When you "
"iterate on it, it returns the next pass to run."
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:14:<autosummary>:1
msgid ""
":obj:`registered_controllers "
"<qiskit.transpiler.FlowController.registered_controllers>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1
msgid ""
":obj:`add_flow_controller "
"<qiskit.transpiler.FlowController.add_flow_controller>`\\ \\(name\\, "
"controller\\)"
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1
msgid "Adds a flow controller."
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1
msgid ""
":obj:`controller_factory "
"<qiskit.transpiler.FlowController.controller_factory>`\\ \\(passes\\, "
"options\\, ...\\)"
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1 of
#: qiskit.transpiler.FlowController.controller_factory:1
msgid ""
"Constructs a flow controller based on the partially evaluated controller "
"arguments."
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1
msgid ":obj:`dump_passes <qiskit.transpiler.FlowController.dump_passes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1 of
#: qiskit.transpiler.FlowController.dump_passes:1
msgid "Fetches the passes added to this flow controller."
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1
msgid ""
":obj:`remove_flow_controller "
"<qiskit.transpiler.FlowController.remove_flow_controller>`\\ \\(name\\)"
msgstr ""

#: ../../api/qiskit.transpiler.FlowController.rst:23:<autosummary>:1
msgid "Removes a flow controller."
msgstr ""

#: of qiskit.transpiler.FlowController.add_flow_controller:1
msgid ""
"Adds a flow controller. :param name: Name of the controller to add. :type"
" name: string :param controller: The class implementing a flow "
"controller. :type controller: type(FlowController)"
msgstr ""

#: of qiskit.transpiler.FlowController.controller_factory:3
msgid "passes to add to the flow controller."
msgstr ""

#: of qiskit.transpiler.FlowController.controller_factory:5
msgid "PassManager options."
msgstr ""

#: of qiskit.transpiler.FlowController.controller_factory:7
msgid "Partially evaluated controller arguments in the form `{name:partial}`"
msgstr ""

#: of qiskit.transpiler.FlowController.controller_factory:11
msgid "When partial_controller is not well-formed."
msgstr ""

#: of qiskit.transpiler.FlowController.controller_factory:13
msgid "A FlowController instance."
msgstr ""

#: of qiskit.transpiler.FlowController.dump_passes:3
msgid ""
"Returns (dict): {'options': self.options, 'passes': [passes], 'type': "
"type(self)}"
msgstr ""

#: of qiskit.transpiler.FlowController.remove_flow_controller:1
msgid ""
"Removes a flow controller. :param name: Name of the controller to remove."
" :type name: string"
msgstr ""

#: of qiskit.transpiler.FlowController.remove_flow_controller:5
msgid "If the controller to remove was not registered."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:2
msgid "Layout"
msgstr ""

#: of qiskit.transpiler.Layout:1
msgid "Two-ways dict to represent a Layout."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`add <qiskit.transpiler.Layout.add>`\\ \\(virtual\\_bit\\[\\, "
"physical\\_bit\\]\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Adds a map element between `bit` and `physical_bit`."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`add_register <qiskit.transpiler.Layout.add_register>`\\ \\(reg\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Adds at the end physical_qubits that map each bit in reg."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`combine_into_edge_map "
"<qiskit.transpiler.Layout.combine_into_edge_map>`\\ "
"\\(another\\_layout\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.combine_into_edge_map:1
msgid "Combines self and another_layout into an \"edge map\"."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`copy <qiskit.transpiler.Layout.copy>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.copy:1
msgid "Returns a copy of a Layout instance."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`from_dict <qiskit.transpiler.Layout.from_dict>`\\ \\(input\\_dict\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Populates a Layout from a dictionary."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`from_intlist <qiskit.transpiler.Layout.from_intlist>`\\ "
"\\(int\\_list\\, \\*qregs\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.from_intlist:1
msgid ""
"Converts a list of integers to a Layout mapping virtual qubits (index of "
"the list) to physical qubits (the list values)."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`from_tuplelist <qiskit.transpiler.Layout.from_tuplelist>`\\ "
"\\(tuple\\_list\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.from_tuplelist:1
msgid ""
"Populates a Layout from a list containing virtual "
"qubits---(QuantumRegister, int) tuples---, or None."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`generate_trivial_layout "
"<qiskit.transpiler.Layout.generate_trivial_layout>`\\ \\(\\*regs\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Creates a trivial (\"one-to-one\") Layout with the registers in `regs`."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`get_physical_bits <qiskit.transpiler.Layout.get_physical_bits>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.get_physical_bits:1
msgid ""
"Returns the dictionary where the keys are physical (qu)bits and the "
"values are virtual (qu)bits."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`get_registers <qiskit.transpiler.Layout.get_registers>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.get_registers:1
msgid ""
"Returns the registers in the layout [QuantumRegister(2, 'qr0'), "
"QuantumRegister(3, 'qr1')] :returns: A list of Register in the layout "
":rtype: List"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`get_virtual_bits <qiskit.transpiler.Layout.get_virtual_bits>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.get_virtual_bits:1
msgid ""
"Returns the dictionary where the keys are virtual (qu)bits and the values"
" are physical (qu)bits."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`is_virtual <qiskit.transpiler.Layout.is_virtual>`\\ \\(value\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1 of
#: qiskit.transpiler.Layout.is_virtual:1
msgid "Checks if value has the format of a virtual qubit"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ""
":obj:`order_based_on_type "
"<qiskit.transpiler.Layout.order_based_on_type>`\\ \\(value1\\, value2\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "decides which one is physical/virtual based on the type."
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid ":obj:`swap <qiskit.transpiler.Layout.swap>`\\ \\(left\\, right\\)"
msgstr ""

#: ../../api/qiskit.transpiler.Layout.rst:27:<autosummary>:1
msgid "Swaps the map between left and right."
msgstr ""

#: of qiskit.transpiler.Layout.add:1
msgid ""
"Adds a map element between `bit` and `physical_bit`. If `physical_bit` is"
" not defined, `bit` will be mapped to a new physical bit (extending the "
"length of the layout by one.) :param virtual_bit: A (qu)bit. For example,"
" (QuantumRegister(3, 'qr'), 2). :type virtual_bit: tuple :param "
"physical_bit: A physical bit. For example, 3. :type physical_bit: int"
msgstr ""

#: of qiskit.transpiler.Layout.add_register:1
msgid ""
"Adds at the end physical_qubits that map each bit in reg. :param reg: A "
"(qu)bit Register. For example, QuantumRegister(3, 'qr'). :type reg: "
"Register"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:3
msgid "For example::"
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:10
msgid "The edge map is used to compose dags via, for example, compose_back."
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:12
msgid "The other layout to combine."
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:15
msgid "A \"edge map\"."
msgstr ""

#: of qiskit.transpiler.Layout.combine_into_edge_map:18
msgid ""
"another_layout can be bigger than self, but not smaller. Otherwise, "
"raises."
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:1
msgid ""
"Populates a Layout from a dictionary. The dictionary must be a bijective "
"mapping between virtual qubits (tuple) and physical qubits (int)."
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:5
msgid ""
"e.g.: {(QuantumRegister(3, 'qr'), 0): 0,  (QuantumRegister(3, 'qr'), 1): "
"1,  (QuantumRegister(3, 'qr'), 2): 2}  Can be written more concisely as "
"follows:  virtual to physical:     {qr[0]: 0,      qr[1]: 1,      qr[2]: "
"2}  physical to virtual:     {0: qr[0],      1: qr[1],      2: qr[2]}"
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:5
msgid "e.g.: {(QuantumRegister(3, 'qr'), 0): 0,"
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:7
msgid "(QuantumRegister(3, 'qr'), 1): 1, (QuantumRegister(3, 'qr'), 2): 2}"
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:10
msgid "Can be written more concisely as follows:"
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:14
msgid "qr[1]: 1, qr[2]: 2}"
msgstr ""

#: of qiskit.transpiler.Layout.from_dict:19
msgid "1: qr[1], 2: qr[2]}"
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:5
msgid "A list of integers."
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:7
msgid "The quantum registers to apply the layout to."
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:11
msgid "The corresponding Layout object."
msgstr ""

#: of qiskit.transpiler.Layout.from_intlist:14
msgid "Invalid input layout."
msgstr ""

#: of qiskit.transpiler.Layout.from_tuplelist:4
msgid "e.g.: [qr[0], None, qr[2], qr[3]]"
msgstr ""

#: of qiskit.transpiler.Layout.from_tuplelist:7
msgid "the corresponding Layout object"
msgstr ""

#: of qiskit.transpiler.Layout.from_tuplelist:10
msgid "If the elements are not (Register, integer) or None"
msgstr ""

#: of qiskit.transpiler.Layout.generate_trivial_layout:1
msgid ""
"Creates a trivial (\"one-to-one\") Layout with the registers in `regs`. "
":param \\*regs: registers to include in the layout. :type \\*regs: "
"Registers"
msgstr ""

#: of qiskit.transpiler.Layout.generate_trivial_layout:5
msgid "A layout with all the `regs` in the given order."
msgstr ""

#: of qiskit.transpiler.Layout.order_based_on_type:1
msgid ""
"decides which one is physical/virtual based on the type. Returns "
"(virtual, physical)"
msgstr ""

#: of qiskit.transpiler.Layout.swap:1
msgid ""
"Swaps the map between left and right. :param left: Item to swap with "
"right. :type left: tuple or int :param right: Item to swap with left. "
":type right: tuple or int"
msgstr ""

#: of qiskit.transpiler.Layout.swap:7
msgid "If left and right have not the same type."
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:2
msgid "PassManager"
msgstr ""

#: of qiskit.transpiler.PassManager:1
msgid "A PassManager schedules the passes"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1
msgid ""
":obj:`append <qiskit.transpiler.PassManager.append>`\\ \\(passes\\[\\, "
"ignore\\_requires\\, ...\\]\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>
msgid "param passes"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1 of
#: qiskit.transpiler.PassManager.append:1
msgid "pass(es) to be added to schedule"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1
msgid ":obj:`passes <qiskit.transpiler.PassManager.passes>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1 of
#: qiskit.transpiler.PassManager.passes:1
msgid "Returns a list structure of the appended passes and its options."
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1
msgid ":obj:`reset <qiskit.transpiler.PassManager.reset>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1 of
#: qiskit.transpiler.PassManager.reset:1
msgid "\"Resets the pass manager instance"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.PassManager.run>`\\ \\(circuit\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PassManager.rst:17:<autosummary>:1 of
#: qiskit.transpiler.PassManager.run:1
msgid "Run all the passes on a QuantumCircuit"
msgstr ""

#: of qiskit.transpiler.PassManager.append:3
msgid "ignore the preserves claim of passes. Default: False"
msgstr ""

#: of qiskit.transpiler.PassManager.append:5
msgid "ignore the requires need of passes. Default: False"
msgstr ""

#: of qiskit.transpiler.PassManager.append:7
msgid "max number of iterations of passes. Default: 1000"
msgstr ""

#: of qiskit.transpiler.PassManager.append:9
msgid "See add_flow_controller(): Dictionary of"
msgstr ""

#: of qiskit.transpiler.PassManager.append:11
msgid ""
"* do_while (callable property_set -> boolean): The passes repeat until "
"the   callable returns False.   Default: `lambda x: False # i.e. passes "
"run once`  * condition (callable property_set -> boolean): The passes run"
" only if the   callable returns True.   Default: `lambda x: True # i.e. "
"passes run`"
msgstr ""

#: of qiskit.transpiler.PassManager.append:12
msgid ""
"do_while (callable property_set -> boolean): The passes repeat until the "
"callable returns False. Default: `lambda x: False # i.e. passes run once`"
msgstr ""

#: of qiskit.transpiler.PassManager.append:16
msgid ""
"condition (callable property_set -> boolean): The passes run only if the "
"callable returns True. Default: `lambda x: True # i.e. passes run`"
msgstr ""

#: of qiskit.transpiler.PassManager.append:20
msgid "if a pass in passes is not a proper pass."
msgstr ""

#: of qiskit.transpiler.PassManager.passes:3
msgid "Returns (list): The appended passes."
msgstr ""

#: of qiskit.transpiler.PassManager.run:3
msgid "circuit to transform via all the registered passes"
msgstr ""

#: of qiskit.transpiler.PassManager.run:6
msgid "Transformed circuit."
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:2
msgid "PropertySet"
msgstr ""

#: of qiskit.transpiler.PropertySet:1
msgid "A default dictionary-like object"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`clear <qiskit.transpiler.PropertySet.clear>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`copy <qiskit.transpiler.PropertySet.copy>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`fromkeys <qiskit.transpiler.PropertySet.fromkeys>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1 of
#: qiskit.transpiler.PropertySet.fromkeys:1
msgid "Returns a new dict with keys from iterable and values equal to value."
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`get <qiskit.transpiler.PropertySet.get>`\\ \\(k\\[\\,d\\]\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`items <qiskit.transpiler.PropertySet.items>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`keys <qiskit.transpiler.PropertySet.keys>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`pop <qiskit.transpiler.PropertySet.pop>`\\ \\(k\\[\\,d\\]\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1 of
#: qiskit.transpiler.PropertySet.pop:1
msgid "If key is not found, d is returned if given, otherwise KeyError is raised"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`popitem <qiskit.transpiler.PropertySet.popitem>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1 of
#: qiskit.transpiler.PropertySet.popitem:1
msgid "2-tuple; but raise KeyError if D is empty."
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ""
":obj:`setdefault <qiskit.transpiler.PropertySet.setdefault>`\\ "
"\\(k\\[\\,d\\]\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ""
":obj:`update <qiskit.transpiler.PropertySet.update>`\\ \\(\\[E\\, "
"\\]\\*\\*F\\)"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1 of
#: qiskit.transpiler.PropertySet.update:1
msgid ""
"If E is present and has a .keys() method, then does:  for k in E: D[k] = "
"E[k] If E is present and lacks a .keys() method, then does:  for k, v in "
"E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"
msgstr ""

#: ../../api/qiskit.transpiler.PropertySet.rst:24:<autosummary>:1
msgid ":obj:`values <qiskit.transpiler.PropertySet.values>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.TransformationPass.rst:2
msgid "TransformationPass"
msgstr ""

#: of qiskit.transpiler.TransformationPass:1
#: qiskit.transpiler.basepasses.TransformationPass:1
msgid "A transformation pass: change DAG, not property set."
msgstr ""

#: ../../api/qiskit.transpiler.TransformationPass.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.TransformationPass.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.TransformationPass.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.TransformationPass.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.TransformationPass.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.TransformationPass.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.TransformationPass.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.TransformationPass.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.TranspilerAccessError.rst:2
msgid "TranspilerAccessError"
msgstr ""

#: of qiskit.transpiler.TranspilerAccessError:1
#: qiskit.transpiler.exceptions.TranspilerAccessError:1
msgid "Exception of access error in the transpiler passes."
msgstr ""

#: ../../api/qiskit.transpiler.TranspilerError.rst:2
msgid "TranspilerError"
msgstr ""

#: of qiskit.transpiler.TranspilerError:1
#: qiskit.transpiler.exceptions.TranspilerError:1
msgid "Exceptions raised during transpilation"
msgstr ""

#: ../../api/qiskit.transpiler.basepasses.rst:2
msgid "qiskit.transpiler.basepasses module"
msgstr ""

#: of qiskit.transpiler.basepasses:1
msgid "This module implements the base pass."
msgstr ""

#: of qiskit.transpiler.basepasses.BasePass:1
msgid "Base class for transpiler passes."
msgstr ""

#: of qiskit.transpiler.basepasses.MetaPass:1
msgid "ベースクラス: :class:`type`"
msgstr ""

#: of qiskit.transpiler.basepasses.MetaPass:1
msgid ""
"Enforces the creation of some fields in the pass while allowing passes to"
" override __init__"
msgstr ""

#: ../../api/qiskit.transpiler.coupling.rst:2
msgid "qiskit.transpiler.coupling module"
msgstr ""

#: of qiskit.transpiler.coupling:3
msgid ""
"The nodes of the graph correspond to physical qubits (represented as "
"integers) and the directed edges indicate which physical qubits are "
"coupled and the permitted direction of CNOT gates. The object has a "
"distance function that can be used to map quantum circuits onto a device "
"with this coupling."
msgstr ""

#: ../../api/qiskit.transpiler.exceptions.rst:2
msgid "qiskit.transpiler.exceptions module"
msgstr ""

#: of qiskit.transpiler.exceptions:1
msgid "Exception for errors raised by the transpiler."
msgstr ""

#: ../../api/qiskit.transpiler.fencedobjs.rst:2
msgid "qiskit.transpiler.fencedobjs module"
msgstr ""

#: of qiskit.transpiler.fencedobjs:1
msgid ""
"Fenced objects are wraps for raising TranspilerAccessError when they are "
"modified."
msgstr ""

#: of qiskit.transpiler.fencedobjs.FencedObject:1
msgid ""
"Given an instance and a list of attributes to fence, raises a "
"TranspilerAccessError when one of these attributes is accessed."
msgstr ""

#: ../../api/qiskit.transpiler.models.rst:2
msgid "qiskit.transpiler.models module"
msgstr ""

#: of qiskit.transpiler.models:1
msgid "Models for TranspileConfig and RunConfig."
msgstr ""

#: of qiskit.transpiler.models.TranspileConfigSchema:1
msgid "Schema for TranspileConfig."
msgstr ""

#: ../../api/qiskit.transpiler.passes.rst:2
msgid "qiskit.transpiler.passes package"
msgstr ""

#: of qiskit.transpiler.passes:1
msgid "Module containing transpiler pass."
msgstr ""

#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:2
msgid "BarrierBeforeFinalMeasurements"
msgstr ""

#: of qiskit.transpiler.passes.BarrierBeforeFinalMeasurements:1
#: qiskit.transpiler.passes.BasicSwap:1
#: qiskit.transpiler.passes.CXCancellation:1
#: qiskit.transpiler.passes.CXDirection:1
#: qiskit.transpiler.passes.CommutativeCancellation:1
#: qiskit.transpiler.passes.ConsolidateBlocks:1
#: qiskit.transpiler.passes.Decompose:1
#: qiskit.transpiler.passes.EnlargeWithAncilla:1
#: qiskit.transpiler.passes.LegacySwap:1
#: qiskit.transpiler.passes.LookaheadSwap:1
#: qiskit.transpiler.passes.MergeAdjacentBarriers:1
#: qiskit.transpiler.passes.Optimize1qGates:1
#: qiskit.transpiler.passes.OptimizeSwapBeforeMeasure:1
#: qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure:1
#: qiskit.transpiler.passes.RemoveResetInZeroState:1
#: qiskit.transpiler.passes.StochasticSwap:1
#: qiskit.transpiler.passes.Unroll3qOrMore:1
#: qiskit.transpiler.passes.Unroller:1
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation:1
#: qiskit.transpiler.passes.consolidate_blocks.ConsolidateBlocks:1
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation:1
#: qiskit.transpiler.passes.mapping.barrier_before_final_measurements.BarrierBeforeFinalMeasurements:1
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap:1
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection:1
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla:1
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap:1
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap:1
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap:1
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers:1
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates:1
#: qiskit.transpiler.passes.optimize_swap_before_measure.OptimizeSwapBeforeMeasure:1
#: qiskit.transpiler.passes.remove_diagonal_gates_before_measure.RemoveDiagonalGatesBeforeMeasure:1
#: qiskit.transpiler.passes.remove_reset_in_zero_state.RemoveResetInZeroState:1
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore:1
msgid "ベースクラス: :class:`qiskit.transpiler.basepasses.TransformationPass`"
msgstr ""

#: of qiskit.transpiler.passes.BarrierBeforeFinalMeasurements:1
#: qiskit.transpiler.passes.mapping.barrier_before_final_measurements.BarrierBeforeFinalMeasurements:1
msgid "Adds a barrier before final measurements."
msgstr ""

#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:22:<autosummary>:1
msgid ""
":obj:`name "
"<qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:22:<autosummary>:1
msgid ""
":obj:`run "
"<qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.run>`\\ "
"\\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.BarrierBeforeFinalMeasurements.run:1
#: qiskit.transpiler.passes.mapping.barrier_before_final_measurements.BarrierBeforeFinalMeasurements.run:1
msgid "Return a circuit with a barrier before last measurements."
msgstr ""

#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:2
msgid "BasicSwap"
msgstr ""

#: of qiskit.transpiler.passes.BasicSwap:1
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap:1
msgid ""
"Maps (with minimum effort) a DAGCircuit onto a `coupling_map` adding swap"
" gates."
msgstr ""

#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.BasicSwap.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.BasicSwap.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.BasicSwap.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.BasicSwap.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.BasicSwap.rst:22:<autosummary>:1
msgid "Runs the BasicSwap pass on `dag`."
msgstr ""

#: of qiskit.transpiler.passes.BasicSwap.run:1
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap.run:1
msgid ""
"Runs the BasicSwap pass on `dag`. :param dag: DAG to map. :type dag: "
"DAGCircuit"
msgstr ""

#: of qiskit.transpiler.passes.BasicSwap.run:5
#: qiskit.transpiler.passes.StochasticSwap.run:6
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap.run:5
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run:6
msgid "A mapped DAG."
msgstr ""

#: of qiskit.transpiler.passes.BasicSwap.run:8
#: qiskit.transpiler.passes.LookaheadSwap.run:12
#: qiskit.transpiler.passes.StochasticSwap.run:9
#: qiskit.transpiler.passes.mapping.basic_swap.BasicSwap.run:8
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run:12
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run:9
msgid "if the coupling map or the layout are not"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:2
msgid "CXCancellation"
msgstr ""

#: of qiskit.transpiler.passes.CXCancellation:1
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation:1
msgid "Cancel back-to-back 'cx' gates in dag."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.CXCancellation.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.CXCancellation.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.CXCancellation.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.CXCancellation.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXCancellation.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.CXCancellation.run:1
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation.run:1
msgid "Run one pass of cx cancellation on the circuit"
msgstr ""

#: of qiskit.transpiler.passes.CXCancellation.run:3
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation.run:3
msgid "the directed acyclic graph to run on."
msgstr ""

#: of qiskit.transpiler.passes.CXCancellation.run:6
#: qiskit.transpiler.passes.cx_cancellation.CXCancellation.run:6
msgid "Transformed DAG."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXDirection.rst:2
msgid "CXDirection"
msgstr ""

#: of qiskit.transpiler.passes.CXDirection:1
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection:1
msgid ""
"Rearranges the direction of the cx nodes to make the circuit compatible "
"with the directed coupling map."
msgstr ""

#: of qiskit.transpiler.passes.CXDirection:4
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection:4
msgid "It uses this equivalence::"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXDirection.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.CXDirection.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXDirection.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.CXDirection.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXDirection.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.CXDirection.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXDirection.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.CXDirection.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CXDirection.rst:22:<autosummary>:1
msgid "Flips the cx nodes to match the directed coupling map."
msgstr ""

#: of qiskit.transpiler.passes.CXDirection.run:1
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection.run:1
msgid ""
"Flips the cx nodes to match the directed coupling map. :param dag: DAG to"
" map. :type dag: DAGCircuit"
msgstr ""

#: of qiskit.transpiler.passes.CXDirection.run:5
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection.run:5
msgid "The rearranged dag for the coupling map"
msgstr ""

#: of qiskit.transpiler.passes.CXDirection.run:8
#: qiskit.transpiler.passes.mapping.cx_direction.CXDirection.run:8
msgid "If the circuit cannot be mapped just by flipping the     cx nodes."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:2
msgid "CheckCXDirection"
msgstr ""

#: of qiskit.transpiler.passes.CheckCXDirection:1
#: qiskit.transpiler.passes.CheckMap:1
#: qiskit.transpiler.passes.Collect2qBlocks:1
#: qiskit.transpiler.passes.CommutationAnalysis:1
#: qiskit.transpiler.passes.CountOps:1 qiskit.transpiler.passes.DAGFixedPoint:1
#: qiskit.transpiler.passes.DenseLayout:1 qiskit.transpiler.passes.Depth:1
#: qiskit.transpiler.passes.FixedPoint:1
#: qiskit.transpiler.passes.FullAncillaAllocation:1
#: qiskit.transpiler.passes.NoiseAdaptiveLayout:1
#: qiskit.transpiler.passes.NumTensorFactors:1
#: qiskit.transpiler.passes.ResourceEstimation:1
#: qiskit.transpiler.passes.SetLayout:1 qiskit.transpiler.passes.Size:1
#: qiskit.transpiler.passes.TrivialLayout:1 qiskit.transpiler.passes.Width:1
#: qiskit.transpiler.passes.collect_2q_blocks.Collect2qBlocks:1
#: qiskit.transpiler.passes.commutation_analysis.CommutationAnalysis:1
#: qiskit.transpiler.passes.count_ops.CountOps:1
#: qiskit.transpiler.passes.dag_fixed_point.DAGFixedPoint:1
#: qiskit.transpiler.passes.fixed_point.FixedPoint:1
#: qiskit.transpiler.passes.mapping.check_cx_direction.CheckCXDirection:1
#: qiskit.transpiler.passes.mapping.check_map.CheckMap:1
#: qiskit.transpiler.passes.mapping.dense_layout.DenseLayout:1
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation:1
#: qiskit.transpiler.passes.mapping.noise_adaptive_layout.NoiseAdaptiveLayout:1
#: qiskit.transpiler.passes.mapping.set_layout.SetLayout:1
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout:1
#: qiskit.transpiler.passes.num_tensor_factors.NumTensorFactors:1
#: qiskit.transpiler.passes.resource_estimation.ResourceEstimation:1
msgid "ベースクラス: :class:`qiskit.transpiler.basepasses.AnalysisPass`"
msgstr ""

#: of qiskit.transpiler.passes.CheckCXDirection:1
#: qiskit.transpiler.passes.mapping.check_cx_direction.CheckCXDirection:1
msgid ""
"Checks if the CNOTs in the DAG circuit follow the right direction with "
"respect to the coupling map."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.CheckCXDirection.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.CheckCXDirection.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.CheckCXDirection.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.CheckCXDirection.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckCXDirection.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.CheckCXDirection.run:1
#: qiskit.transpiler.passes.mapping.check_cx_direction.CheckCXDirection.run:1
msgid ""
"If `dag` is mapped and the direction is correct the property "
"`is_direction_mapped` is set to True (or to False otherwise)."
msgstr ""

#: of qiskit.transpiler.passes.CheckCXDirection.run:4
#: qiskit.transpiler.passes.mapping.check_cx_direction.CheckCXDirection.run:4
msgid "DAG to check."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckMap.rst:2
msgid "CheckMap"
msgstr ""

#: of qiskit.transpiler.passes.CheckMap:1
#: qiskit.transpiler.passes.mapping.check_map.CheckMap:1
msgid ""
"Checks if a DAGCircuit is mapped to `coupling_map`, setting "
"`is_swap_mapped` in the property set as True if mapped. False otherwise."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckMap.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.CheckMap.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckMap.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.CheckMap.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckMap.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.CheckMap.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckMap.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.CheckMap.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CheckMap.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.CheckMap.run:1
#: qiskit.transpiler.passes.mapping.check_map.CheckMap.run:1
msgid ""
"If `dag` is mapped to `coupling_map`, the property `is_swap_mapped` is "
"set to True (or to False otherwise)."
msgstr ""

#: of qiskit.transpiler.passes.CheckMap.run:4
#: qiskit.transpiler.passes.StochasticSwap.run:3
#: qiskit.transpiler.passes.mapping.check_map.CheckMap.run:4
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run:3
msgid "DAG to map."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:2
msgid "Collect2qBlocks"
msgstr ""

#: of qiskit.transpiler.passes.Collect2qBlocks:1
#: qiskit.transpiler.passes.collect_2q_blocks.Collect2qBlocks:1
msgid "Pass to collect sequences of uninterrupted gates acting on 2 qubits."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.Collect2qBlocks.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Collect2qBlocks.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Collect2qBlocks.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Collect2qBlocks.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Collect2qBlocks.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.Collect2qBlocks.run:1
#: qiskit.transpiler.passes.collect_2q_blocks.Collect2qBlocks.run:1
msgid "collect blocks of adjacent gates acting on a pair of \"cx\" qubits."
msgstr ""

#: of qiskit.transpiler.passes.Collect2qBlocks.run:3
#: qiskit.transpiler.passes.collect_2q_blocks.Collect2qBlocks.run:3
msgid ""
"The blocks contain \"op\" nodes in topological sort order such that all "
"gates in a block act on the same pair of qubits and are adjacent in the "
"circuit. the blocks are built by examining predecessors and successors of"
" \"cx\" gates in the circuit. u1, u2, u3, cx, id gates will be included."
msgstr ""

#: of qiskit.transpiler.passes.Collect2qBlocks.run:9
#: qiskit.transpiler.passes.collect_2q_blocks.Collect2qBlocks.run:9
msgid "Return a list of tuples of \"op\" node labels."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:2
msgid "CommutationAnalysis"
msgstr ""

#: of qiskit.transpiler.passes.CommutationAnalysis:1
#: qiskit.transpiler.passes.commutation_analysis.CommutationAnalysis:1
msgid "An analysis pass to find commutation relations between DAG nodes."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.CommutationAnalysis.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.CommutationAnalysis.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.CommutationAnalysis.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.CommutationAnalysis.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutationAnalysis.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.CommutationAnalysis.run:1
#: qiskit.transpiler.passes.commutation_analysis.CommutationAnalysis.run:1
msgid ""
"Run the pass on the DAG, and write the discovered commutation relations "
"into the property_set."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:2
msgid "CommutativeCancellation"
msgstr ""

#: of qiskit.transpiler.passes.CommutativeCancellation:1
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation:1
msgid ""
"Transformation pass that cancels the redundant (self-adjoint) gates "
"through commutation relations"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.CommutativeCancellation.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.CommutativeCancellation.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:22:<autosummary>:1
msgid ""
":obj:`name <qiskit.transpiler.passes.CommutativeCancellation.name>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:22:<autosummary>:1
msgid ""
":obj:`run <qiskit.transpiler.passes.CommutativeCancellation.run>`\\ "
"\\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CommutativeCancellation.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.CommutativeCancellation.run:1
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run:1
msgid "Run the CommutativeCancellation pass on a dag"
msgstr ""

#: of qiskit.transpiler.passes.CommutativeCancellation.run:3
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run:3
msgid "the DAG to be optimized."
msgstr ""

#: of qiskit.transpiler.passes.CommutativeCancellation.run:6
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run:6
msgid "the optimized DAG."
msgstr ""

#: of qiskit.transpiler.passes.CommutativeCancellation.run:9
#: qiskit.transpiler.passes.commutative_cancellation.CommutativeCancellation.run:9
msgid "when the 1 qubit rotation gates are not found"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:2
msgid "ConsolidateBlocks"
msgstr ""

#: of qiskit.transpiler.passes.ConsolidateBlocks:1
#: qiskit.transpiler.passes.consolidate_blocks.ConsolidateBlocks:1
msgid ""
"Pass to consolidate sequences of uninterrupted gates acting on the same "
"qubits into a Unitary node, to be resynthesized later, to a potentially "
"more optimal subcircuit. Important note: this pass assumes that the "
"'blocks_list' property that it reads is given such that blocks are in "
"topological order."
msgstr ""

#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.ConsolidateBlocks.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.ConsolidateBlocks.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.ConsolidateBlocks.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.ConsolidateBlocks.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ConsolidateBlocks.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.ConsolidateBlocks.run:1
#: qiskit.transpiler.passes.consolidate_blocks.ConsolidateBlocks.run:1
msgid ""
"iterate over each block and replace it with an equivalent Unitary on the "
"same wires."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CountOps.rst:2
msgid "CountOps"
msgstr ""

#: of qiskit.transpiler.passes.CountOps:1 qiskit.transpiler.passes.count_ops:1
#: qiskit.transpiler.passes.count_ops.CountOps:1
msgid "An analysis pass for counting operations in a DAG circuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.CountOps.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.CountOps.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CountOps.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.CountOps.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CountOps.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.CountOps.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.CountOps.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.CountOps.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:2
msgid "DAGFixedPoint"
msgstr ""

#: of qiskit.transpiler.passes.DAGFixedPoint:1
#: qiskit.transpiler.passes.dag_fixed_point.DAGFixedPoint:1
msgid ""
"A dummy analysis pass that checks if the DAG a fixed point. The results "
"is saved in property_set['dag_fixed_point'] as a boolean."
msgstr ""

#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.DAGFixedPoint.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.DAGFixedPoint.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.DAGFixedPoint.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DAGFixedPoint.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.DAGFixedPoint.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Decompose.rst:2
msgid "Decompose"
msgstr ""

#: of qiskit.transpiler.passes.Decompose:1
msgid "Expand a gate in a circuit using its decomposition rules."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Decompose.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.Decompose.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Decompose.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Decompose.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Decompose.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Decompose.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Decompose.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Decompose.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Decompose.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.Decompose.run:1
msgid "Expand a given gate into its decomposition."
msgstr ""

#: of qiskit.transpiler.passes.Decompose.run:3
#: qiskit.transpiler.passes.Unroll3qOrMore.run:3
#: qiskit.transpiler.passes.Unroller.run:3
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run:3
msgid "input dag"
msgstr ""

#: of qiskit.transpiler.passes.Decompose.run:6
msgid "output dag where gate was expanded."
msgstr ""

#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:2
msgid "DenseLayout"
msgstr ""

#: of qiskit.transpiler.passes.DenseLayout:1
#: qiskit.transpiler.passes.mapping.dense_layout.DenseLayout:1
msgid "Chooses a Layout by finding the most connected subset of qubits."
msgstr ""

#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.DenseLayout.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.DenseLayout.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.DenseLayout.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.DenseLayout.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.DenseLayout.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.DenseLayout.run:1
#: qiskit.transpiler.passes.mapping.dense_layout.DenseLayout.run:1
msgid ""
"Pick a convenient layout depending on the best matching qubit "
"connectivity, and set the property `layout`."
msgstr ""

#: of qiskit.transpiler.passes.DenseLayout.run:4
#: qiskit.transpiler.passes.TrivialLayout.run:3
#: qiskit.transpiler.passes.mapping.dense_layout.DenseLayout.run:4
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout.run:3
msgid "DAG to find layout for."
msgstr ""

#: of qiskit.transpiler.passes.DenseLayout.run:7
#: qiskit.transpiler.passes.TrivialLayout.run:6
#: qiskit.transpiler.passes.mapping.dense_layout.DenseLayout.run:7
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout.run:6
msgid "if dag wider than self.coupling_map"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Depth.rst:2
msgid "Depth"
msgstr ""

#: of qiskit.transpiler.passes.Depth:1
msgid "An analysis pass for calculating the depth of a DAG circuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Depth.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.Depth.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Depth.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Depth.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Depth.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Depth.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Depth.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Depth.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:2
msgid "EnlargeWithAncilla"
msgstr ""

#: of qiskit.transpiler.passes.EnlargeWithAncilla:1
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla:1
msgid ""
"Extends the DAG circuit with virtual qubits (ancilla) that are specified "
"in the layout, but not present in the circuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.EnlargeWithAncilla.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.EnlargeWithAncilla.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.EnlargeWithAncilla.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.EnlargeWithAncilla.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.EnlargeWithAncilla.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.EnlargeWithAncilla.run:1
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run:1
msgid ""
"Extends dag with virtual qubits that are in layout but not in the circuit"
" yet."
msgstr ""

#: of qiskit.transpiler.passes.EnlargeWithAncilla.run:3
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run:3
msgid "DAG to extend."
msgstr ""

#: of qiskit.transpiler.passes.EnlargeWithAncilla.run:6
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run:6
msgid "An extended DAG."
msgstr ""

#: of qiskit.transpiler.passes.EnlargeWithAncilla.run:9
#: qiskit.transpiler.passes.FullAncillaAllocation.run:15
#: qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla.run:9
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run:15
msgid "If there is not layout in the property set or not set at init time."
msgstr ""

#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:2
msgid "FixedPoint"
msgstr ""

#: of qiskit.transpiler.passes.FixedPoint:1
#: qiskit.transpiler.passes.fixed_point.FixedPoint:1
msgid ""
"A dummy analysis pass that checks if a property reached a fixed point. "
"The results is saved in property_set['<property>_fixed_point'] as a "
"boolean."
msgstr ""

#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.FixedPoint.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.FixedPoint.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.FixedPoint.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FixedPoint.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.FixedPoint.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:2
msgid "FullAncillaAllocation"
msgstr ""

#: of qiskit.transpiler.passes.FullAncillaAllocation:1
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation:1
msgid "Allocates all idle nodes from the coupling map as ancilla on the layout."
msgstr ""

#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.FullAncillaAllocation.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.FullAncillaAllocation.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.FullAncillaAllocation.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:22:<autosummary>:1
msgid ""
":obj:`run <qiskit.transpiler.passes.FullAncillaAllocation.run>`\\ "
"\\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.FullAncillaAllocation.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.FullAncillaAllocation.run:1
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run:1
msgid "Extend the layout with new (physical qubit, virtual qubit) pairs."
msgstr ""

#: of qiskit.transpiler.passes.FullAncillaAllocation.run:3
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run:3
msgid ""
"The dag signals which virtual qubits are already in the circuit. This "
"pass will allocate new virtual qubits such that no collision occurs (i.e."
" Layout bijectivity is preserved)"
msgstr ""

#: of qiskit.transpiler.passes.FullAncillaAllocation.run:7
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run:7
msgid ""
"The coupling_map and layout together determine which physical qubits are "
"free."
msgstr ""

#: of qiskit.transpiler.passes.FullAncillaAllocation.run:9
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run:9
msgid "circuit to analyze"
msgstr ""

#: of qiskit.transpiler.passes.FullAncillaAllocation.run:12
#: qiskit.transpiler.passes.mapping.full_ancilla_allocation.FullAncillaAllocation.run:12
msgid "returns the same dag circuit, unmodified"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:2
msgid "LegacySwap"
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap:1
#: qiskit.transpiler.passes.StochasticSwap:1
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap:1
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap:1
msgid "Maps a DAGCircuit onto a `coupling_map` adding swap gates."
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.LegacySwap.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.LegacySwap.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1
msgid ""
":obj:`layer_permutation "
"<qiskit.transpiler.passes.LegacySwap.layer_permutation>`\\ "
"\\(layer\\_partition\\, layout\\, ...\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1 of
#: qiskit.transpiler.passes.LegacySwap.layer_permutation:1
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.layer_permutation:1
msgid "Find a swap circuit that implements a permutation for this layer."
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.LegacySwap.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.LegacySwap.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1 of
#: qiskit.transpiler.passes.LegacySwap.run:1
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run:1
msgid "Map a DAGCircuit onto a CouplingGraph using swap gates."
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1
msgid ""
":obj:`swap_mapper_layer_update "
"<qiskit.transpiler.passes.LegacySwap.swap_mapper_layer_update>`\\ \\(i\\,"
" first\\_layer\\, ...\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LegacySwap.rst:24:<autosummary>:1 of
#: qiskit.transpiler.passes.LegacySwap.swap_mapper_layer_update:1
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.swap_mapper_layer_update:1
msgid "Update the QASM string for an iteration of swap_mapper."
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.layer_permutation:3
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.layer_permutation:3
msgid ""
"The goal is to swap qubits such that qubits in the same two-qubit gates "
"are adjacent."
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.layer_permutation:6
#: qiskit.transpiler.passes.mapping.legacy_swap:3
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.layer_permutation:6
msgid "Based on Sergey Bravyi's algorithm."
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.layer_permutation:8
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.layer_permutation:8
msgid ""
"The layer_partition is a list of (qu)bit lists and each qubit is a tuple "
"(qreg, index). The layout is a dict mapping qubits in the circuit to "
"qubits in the coupling graph and represents the current positions of the "
"data. The qubit_subset is the subset of qubits in the coupling graph that"
" we have chosen to map into. The coupling is a CouplingGraph. TRIALS is "
"the number of attempts the randomized algorithm makes."
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.layer_permutation:17
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.layer_permutation:17
msgid "Returns: success_flag, best_circ, best_d, best_layout, trivial_flag"
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.layer_permutation:19
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.layer_permutation:19
msgid ""
"If success_flag is True, then best_circ contains a DAGCircuit with the "
"swap circuit, best_d contains the depth of the swap circuit, and "
"best_layout contains the new positions of the data qubits after the swap "
"circuit has been applied. The trivial_flag is set if the layer has no "
"multi-qubit gates."
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.run:3
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run:3
msgid "input DAG circuit"
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.run:6
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run:6
msgid ""
"object containing a circuit equivalent to circuit_graph that respects "
"couplings in coupling_map, and a layout dict mapping qubits of "
"circuit_graph into qubits of coupling_map. The layout may differ from the"
" initial_layout if the first layer of gates cannot be executed on the "
"initial_layout."
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.run:14
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.run:14
msgid "if there was any error during the mapping or with the     parameters."
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.swap_mapper_layer_update:3
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.swap_mapper_layer_update:3
msgid ""
"i = layer number first_layer = True if this is the first layer with "
"multi-qubit gates best_layout = layout returned from swap algorithm "
"best_d = depth returned from swap algorithm best_circ = swap circuit "
"returned from swap algorithm layer_list = list of circuit objects for "
"each layer"
msgstr ""

#: of qiskit.transpiler.passes.LegacySwap.swap_mapper_layer_update:10
#: qiskit.transpiler.passes.mapping.legacy_swap.LegacySwap.swap_mapper_layer_update:10
msgid "Return DAGCircuit object to append to the output DAGCircuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:2
msgid "LookaheadSwap"
msgstr ""

#: of qiskit.transpiler.passes.LookaheadSwap:1
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap:1
msgid "Map input circuit onto a backend topology via insertion of SWAPs."
msgstr ""

#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.LookaheadSwap.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.LookaheadSwap.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.LookaheadSwap.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.LookaheadSwap.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.LookaheadSwap.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.LookaheadSwap.run:1
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run:1
msgid "Run one pass of the lookahead mapper on the provided DAG."
msgstr ""

#: of qiskit.transpiler.passes.LookaheadSwap.run:3
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run:3
msgid "the directed acyclic graph to be mapped"
msgstr ""

#: of qiskit.transpiler.passes.LookaheadSwap.run:6
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run:6
msgid ""
"A dag mapped to be compatible with the coupling_map in     the "
"property_set."
msgstr ""

#: of qiskit.transpiler.passes.LookaheadSwap.run:8
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run:8
msgid "A dag mapped to be compatible with the coupling_map in"
msgstr ""

#: of qiskit.transpiler.passes.LookaheadSwap.run:9
#: qiskit.transpiler.passes.mapping.lookahead_swap.LookaheadSwap.run:9
msgid "the property_set."
msgstr ""

#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:2
msgid "MergeAdjacentBarriers"
msgstr ""

#: of qiskit.transpiler.passes.MergeAdjacentBarriers:1
#: qiskit.transpiler.passes.merge_adjacent_barriers.MergeAdjacentBarriers:1
msgid "Returns a circuit with any adjacent barriers merged together"
msgstr ""

#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.MergeAdjacentBarriers.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.MergeAdjacentBarriers.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.MergeAdjacentBarriers.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.MergeAdjacentBarriers.rst:22:<autosummary>:1
msgid ""
":obj:`run <qiskit.transpiler.passes.MergeAdjacentBarriers.run>`\\ "
"\\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:2
msgid "NoiseAdaptiveLayout"
msgstr ""

#: of qiskit.transpiler.passes.NoiseAdaptiveLayout:1
#: qiskit.transpiler.passes.mapping.noise_adaptive_layout.NoiseAdaptiveLayout:1
msgid ""
"Chooses a noise-adaptive Layout based on current calibration data for the"
" backend."
msgstr ""

#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.NoiseAdaptiveLayout.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.NoiseAdaptiveLayout.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.NoiseAdaptiveLayout.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.NoiseAdaptiveLayout.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NoiseAdaptiveLayout.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.NoiseAdaptiveLayout.run:1
#: qiskit.transpiler.passes.mapping.noise_adaptive_layout.NoiseAdaptiveLayout.run:1
msgid "Main run method for the noise adaptive layout."
msgstr ""

#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:2
msgid "NumTensorFactors"
msgstr ""

#: of qiskit.transpiler.passes.NumTensorFactors:1
#: qiskit.transpiler.passes.num_tensor_factors:1
#: qiskit.transpiler.passes.num_tensor_factors.NumTensorFactors:1
msgid ""
"An analysis pass for calculating the number of tensor factors of a DAG "
"circuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.NumTensorFactors.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.NumTensorFactors.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.NumTensorFactors.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.NumTensorFactors.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.NumTensorFactors.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:2
msgid "Optimize1qGates"
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates:1
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates:1
msgid ""
"Simplify runs of single qubit gates in the [\"u1\", \"u2\", \"u3\", "
"\"cx\", \"id\"] basis."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.Optimize1qGates.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Optimize1qGates.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1
msgid ""
":obj:`compose_u3 <qiskit.transpiler.passes.Optimize1qGates.compose_u3>`\\"
" \\(theta1\\, phi1\\, lambda1\\, theta2\\, ...\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1 of
#: qiskit.transpiler.passes.Optimize1qGates.compose_u3:1
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.compose_u3:1
msgid "Return a triple theta, phi, lambda for the product."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Optimize1qGates.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Optimize1qGates.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:22:<autosummary>:1
#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:22:<autosummary>:1
#: of qiskit.transpiler.passes.Optimize1qGates.run:1
#: qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.run:1
#: qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.run:1
#: qiskit.transpiler.passes.RemoveResetInZeroState.run:1
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.run:1
#: qiskit.transpiler.passes.optimize_swap_before_measure.OptimizeSwapBeforeMeasure.run:1
#: qiskit.transpiler.passes.remove_diagonal_gates_before_measure.RemoveDiagonalGatesBeforeMeasure.run:1
#: qiskit.transpiler.passes.remove_reset_in_zero_state.RemoveResetInZeroState.run:1
msgid "Return a new circuit that has been optimized."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1
msgid ""
":obj:`yzy_to_zyz <qiskit.transpiler.passes.Optimize1qGates.yzy_to_zyz>`\\"
" \\(xi\\, theta1\\, theta2\\[\\, eps\\]\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Optimize1qGates.rst:24:<autosummary>:1 of
#: qiskit.transpiler.passes.Optimize1qGates.yzy_to_zyz:1
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.yzy_to_zyz:1
msgid "Express a Y.Z.Y single qubit gate as a Z.Y.Z gate."
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates.compose_u3:7
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.compose_u3:7
msgid "u3(theta, phi, lambda)"
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates.compose_u3:4
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.compose_u3:4
msgid ""
"= u3(theta1, phi1, lambda1).u3(theta2, phi2, lambda2) = "
"Rz(phi1).Ry(theta1).Rz(lambda1+phi2).Ry(theta2).Rz(lambda2) = "
"Rz(phi1).Rz(phi').Ry(theta').Rz(lambda').Rz(lambda2) = u3(theta', phi1 + "
"phi', lambda2 + lambda')"
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates.compose_u3:9
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.compose_u3:9
msgid "Return theta, phi, lambda."
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates.yzy_to_zyz:3
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.yzy_to_zyz:3
msgid "Solve the equation"
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates.yzy_to_zyz:7
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.yzy_to_zyz:7
msgid "Ry(theta1).Rz(xi).Ry(theta2) = Rz(phi).Ry(theta).Rz(lambda)"
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates.yzy_to_zyz:9
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.yzy_to_zyz:9
msgid "for theta, phi, and lambda."
msgstr ""

#: of qiskit.transpiler.passes.Optimize1qGates.yzy_to_zyz:11
#: qiskit.transpiler.passes.optimize_1q_gates.Optimize1qGates.yzy_to_zyz:11
msgid "Return a solution theta, phi, and lambda."
msgstr ""

#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:2
msgid "OptimizeSwapBeforeMeasure"
msgstr ""

#: of qiskit.transpiler.passes.OptimizeSwapBeforeMeasure:1
#: qiskit.transpiler.passes.optimize_swap_before_measure.OptimizeSwapBeforeMeasure:1
msgid "Remove the swaps followed by measurement (and adapt the measurement)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:22:<autosummary>:1
msgid ""
":obj:`name <qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.name>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.rst:22:<autosummary>:1
msgid ""
":obj:`run <qiskit.transpiler.passes.OptimizeSwapBeforeMeasure.run>`\\ "
"\\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:2
msgid "RemoveDiagonalGatesBeforeMeasure"
msgstr ""

#: of qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure:1
#: qiskit.transpiler.passes.remove_diagonal_gates_before_measure.RemoveDiagonalGatesBeforeMeasure:1
msgid ""
"Remove diagonal gates (like RZ, T, Z, etc) before a measurement. "
"Including diagonal 2Q gates."
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:22:<autosummary>:1
msgid ""
":obj:`name "
"<qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.name>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.rst:22:<autosummary>:1
msgid ""
":obj:`run "
"<qiskit.transpiler.passes.RemoveDiagonalGatesBeforeMeasure.run>`\\ "
"\\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:2
msgid "RemoveResetInZeroState"
msgstr ""

#: of qiskit.transpiler.passes.RemoveResetInZeroState:1
#: qiskit.transpiler.passes.remove_reset_in_zero_state.RemoveResetInZeroState:1
msgid "Remove reset gate when the qubit is in zero state"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.RemoveResetInZeroState.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.RemoveResetInZeroState.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:22:<autosummary>:1
msgid ""
":obj:`name <qiskit.transpiler.passes.RemoveResetInZeroState.name>`\\ "
"\\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.RemoveResetInZeroState.rst:22:<autosummary>:1
msgid ""
":obj:`run <qiskit.transpiler.passes.RemoveResetInZeroState.run>`\\ "
"\\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:2
msgid "ResourceEstimation"
msgstr ""

#: of qiskit.transpiler.passes.ResourceEstimation:1
#: qiskit.transpiler.passes.resource_estimation.ResourceEstimation:1
msgid "Requires Depth(), Width(), Size(), CountOps(), and NumTensorFactors()."
msgstr ""

#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.ResourceEstimation.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.ResourceEstimation.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.ResourceEstimation.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.ResourceEstimation.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.ResourceEstimation.run>`\\ \\(\\_\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.SetLayout.rst:2
msgid "SetLayout"
msgstr ""

#: of qiskit.transpiler.passes.SetLayout:1
#: qiskit.transpiler.passes.mapping.set_layout:1
#: qiskit.transpiler.passes.mapping.set_layout.SetLayout:1
msgid "Sets property_set['layout'] to layout."
msgstr ""

#: ../../api/qiskit.transpiler.passes.SetLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.SetLayout.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.SetLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.SetLayout.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.SetLayout.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.SetLayout.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.SetLayout.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.SetLayout.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Size.rst:2
msgid "Size"
msgstr ""

#: of qiskit.transpiler.passes.Size:1
msgid "An analysis pass for calculating the size of a DAG circuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Size.rst:15:<autosummary>:1
msgid ":obj:`is_analysis_pass <qiskit.transpiler.passes.Size.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Size.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Size.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Size.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Size.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Size.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Size.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:2
msgid "StochasticSwap"
msgstr ""

#: of qiskit.transpiler.passes.StochasticSwap:3
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap:3
msgid "Uses a randomized algorithm."
msgstr ""

#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.StochasticSwap.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.StochasticSwap.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.StochasticSwap.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.StochasticSwap.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.StochasticSwap.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.StochasticSwap.run:1
#: qiskit.transpiler.passes.mapping.stochastic_swap.StochasticSwap.run:1
msgid "Run the StochasticSwap pass on `dag`."
msgstr ""

#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:2
msgid "TrivialLayout"
msgstr ""

#: of qiskit.transpiler.passes.TrivialLayout:1
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout:1
msgid ""
"Chooses a Layout by assigning n circuit qubits to device qubits 0, .., "
"n-1."
msgstr ""

#: of qiskit.transpiler.passes.TrivialLayout:3
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout:3
msgid "Does not assume any ancilla."
msgstr ""

#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.TrivialLayout.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.TrivialLayout.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.TrivialLayout.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.TrivialLayout.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.TrivialLayout.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.TrivialLayout.run:1
#: qiskit.transpiler.passes.mapping.trivial_layout.TrivialLayout.run:1
msgid "Pick a layout by assigning n circuit qubits to device qubits 0, .., n-1."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:2
msgid "Unroll3qOrMore"
msgstr ""

#: of qiskit.transpiler.passes.Unroll3qOrMore:1
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore:1
msgid ""
"Recursively expands 3+ qubit gates until the circuit only contains 1 "
"qubit and 2qubit gates."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.Unroll3qOrMore.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Unroll3qOrMore.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Unroll3qOrMore.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Unroll3qOrMore.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroll3qOrMore.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.Unroll3qOrMore.run:1
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run:1
msgid "Expand 3+ qubit gates using their decomposition rules."
msgstr ""

#: of qiskit.transpiler.passes.Unroll3qOrMore.run:6
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run:6
msgid "output dag with maximum node degrees of 2"
msgstr ""

#: of qiskit.transpiler.passes.Unroll3qOrMore.run:9
#: qiskit.transpiler.passes.unroll_3q_or_more.Unroll3qOrMore.run:9
msgid "if a 3q+ gate is not decomposable"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroller.rst:2
msgid "Unroller"
msgstr ""

#: of qiskit.transpiler.passes.Unroller:1
msgid ""
"Unroll (expand) non-basis, non-opaque instructions recursively to a "
"desired basis, using decomposition rules defined for each instruction."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroller.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.Unroller.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroller.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Unroller.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroller.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Unroller.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroller.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Unroller.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Unroller.rst:22:<autosummary>:1 of
#: qiskit.transpiler.passes.Unroller.run:1
msgid "Expand all op nodes to the given basis."
msgstr ""

#: of qiskit.transpiler.passes.Unroller.run:6
msgid "if unable to unroll given the basis due to undefined"
msgstr ""

#: of qiskit.transpiler.passes.Unroller.run:9
msgid "output unrolled dag"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Width.rst:2
msgid "Width"
msgstr ""

#: of qiskit.transpiler.passes.Width:1
msgid "An analysis pass for calculating the width of a DAG circuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.Width.rst:15:<autosummary>:1
msgid ""
":obj:`is_analysis_pass "
"<qiskit.transpiler.passes.Width.is_analysis_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Width.rst:15:<autosummary>:1
msgid ""
":obj:`is_transformation_pass "
"<qiskit.transpiler.passes.Width.is_transformation_pass>`\\"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Width.rst:22:<autosummary>:1
msgid ":obj:`name <qiskit.transpiler.passes.Width.name>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.Width.rst:22:<autosummary>:1
msgid ":obj:`run <qiskit.transpiler.passes.Width.run>`\\ \\(dag\\)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.collect_2q_blocks.rst:2
msgid "qiskit.transpiler.passes.collect\\_2q\\_blocks module"
msgstr ""

#: of qiskit.transpiler.passes.collect_2q_blocks:1
msgid ""
"Traverse the DAG and find blocks of gates that act consecutively on pairs"
" of qubits. Write the blocks to propert_set as a dictionary of the form:"
msgstr ""

#: of qiskit.transpiler.passes.collect_2q_blocks:7
msgid "{(q0, q1): [[g0, g1, g2], [g5]],"
msgstr ""

#: of qiskit.transpiler.passes.collect_2q_blocks:6
msgid "(q0, q2): [[g3, g4]] .. ."
msgstr ""

#: of qiskit.transpiler.passes.collect_2q_blocks:11
msgid "Based on implementation by Andrew Cross."
msgstr ""

#: ../../api/qiskit.transpiler.passes.commutation_analysis.rst:2
msgid "qiskit.transpiler.passes.commutation\\_analysis module"
msgstr ""

#: of qiskit.transpiler.passes.commutation_analysis:1
msgid "Pass for detecting commutativity in a circuit."
msgstr ""

#: of qiskit.transpiler.passes.commutation_analysis:3
msgid ""
"Property_set['commutation_set'] is a dictionary that describes the "
"commutation relations on a given wire, all the gates on a wire are "
"grouped into a set of gates that commute."
msgstr ""

#: of qiskit.transpiler.passes.commutation_analysis:7
msgid ""
"This pass also provides useful methods to determine if two gates can "
"commute in the circuit."
msgstr ""

#: of qiskit.transpiler.passes.commutation_analysis:10
msgid ""
"TODO: the current pass determines commutativity through matrix "
"multiplication. A rule-based analysis would be potentially faster, but "
"more limited."
msgstr ""

#: ../../api/qiskit.transpiler.passes.commutative_cancellation.rst:2
msgid "qiskit.transpiler.passes.commutative\\_cancellation module"
msgstr ""

#: of qiskit.transpiler.passes.commutative_cancellation:1
msgid ""
"Pass for cancelling self-inverse gates/rotations. The cancellation "
"utilizes the commutation relations in the circuit. Gates considered "
"include H, X, Y, Z, CX, CY, CZ."
msgstr ""

#: ../../api/qiskit.transpiler.passes.consolidate_blocks.rst:2
msgid "qiskit.transpiler.passes.consolidate\\_blocks module"
msgstr ""

#: of qiskit.transpiler.passes.consolidate_blocks:1
msgid ""
"Replace each block of consecutive gates by a single Unitary node. The "
"blocks are collected by a previous pass, such as Collect2qBlocks."
msgstr ""

#: ../../api/qiskit.transpiler.passes.count_ops.rst:2
msgid "qiskit.transpiler.passes.count\\_ops module"
msgstr ""

#: ../../api/qiskit.transpiler.passes.cx_cancellation.rst:2
msgid "qiskit.transpiler.passes.cx\\_cancellation module"
msgstr ""

#: of qiskit.transpiler.passes.cx_cancellation:1
msgid "Pass for peep-hole cancellation of consecutive CX gates."
msgstr ""

#: ../../api/qiskit.transpiler.passes.dag_fixed_point.rst:2
msgid "qiskit.transpiler.passes.dag\\_fixed\\_point module"
msgstr ""

#: of qiskit.transpiler.passes.dag_fixed_point:1
msgid "Detects when the DAG reached a fixed point (it's not modified anymore)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.fixed_point.rst:2
msgid "qiskit.transpiler.passes.fixed\\_point module"
msgstr ""

#: of qiskit.transpiler.passes.fixed_point:1
msgid "The FixedPoint pass detects fixed points in properties."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.rst:2
msgid "qiskit.transpiler.passes.mapping package"
msgstr ""

#: of qiskit.transpiler.passes.mapping:1
msgid "Module containing transpiler mapping passes."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.barrier_before_final_measurements.rst:2
msgid ""
"qiskit.transpiler.passes.mapping.barrier\\_before\\_final\\_measurements "
"module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.barrier_before_final_measurements:1
msgid ""
"This pass adds a barrier before the set of final measurements. "
"Measurements are considered final if they are followed by no other "
"operations (aside from other measurements or barriers.)"
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.basic_swap.rst:2
msgid "qiskit.transpiler.passes.mapping.basic\\_swap module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.basic_swap:1
msgid "A pass implementing a basic mapper."
msgstr ""

#: of qiskit.transpiler.passes.mapping.basic_swap:3
msgid ""
"The basic mapper is a minimum effort to insert swap gates to map the DAG "
"into a coupling map. When a cx is not in the coupling map possibilities, "
"it inserts one or more swaps in front to make it compatible."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.check_cx_direction.rst:2
msgid "qiskit.transpiler.passes.mapping.check\\_cx\\_direction module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.check_cx_direction:1
msgid ""
"This pass checks if the CNOTs (or any other 2Q) in the DAG follow the "
"right direction with respect to thecoupling map."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.check_map.rst:2
msgid "qiskit.transpiler.passes.mapping.check\\_map module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.check_map:1
msgid "This pass checks if a DAG circuit is already mapped to a coupling map."
msgstr ""

#: of qiskit.transpiler.passes.mapping.check_map:3
msgid ""
"It checks that all 2-qubit interactions are laid out to be physically "
"close."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.cx_direction.rst:2
msgid "qiskit.transpiler.passes.mapping.cx\\_direction module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.cx_direction:1
msgid ""
"The CX direction rearrenges the direction of the cx nodes to make the "
"circuit compatible with the coupling_map."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.cython.rst:2
msgid "qiskit.transpiler.passes.mapping.cython package"
msgstr ""

#: of qiskit.transpiler.passes.mapping.cython:1
msgid "Module containing transpiler Cython code."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.cython.stochastic_swap.rst:2
msgid "qiskit.transpiler.passes.mapping.cython.stochastic\\_swap package"
msgstr ""

#: of qiskit.transpiler.passes.mapping.cython.stochastic_swap:1
msgid "Module containing Cython code for StochasticSwap mapper."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.rst:2
msgid ""
"qiskit.transpiler.passes.mapping.cython.stochastic\\_swap.swap\\_trial "
"module"
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:1
msgid "A single iteration of the tchastic swap mapping routine."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:3
msgid "The number of physical qubits."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:5
msgid "The numeric (integer) representation of the initial_layout."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:8
msgid "Int ndarray listing qubits in set."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:10
msgid "Int array with integers giving qubits on which two-qubits gates act on."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:13
msgid "Array of doubles that gives the square of the distance graph."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:16
msgid "Array of doubles that gives the distance graph."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:18
msgid "Int array of edges in coupling map."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:20
msgid "A double array that holds the perturbed cdist2 array."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:22
msgid "An instance of the NumPy RandomState."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.swap_trial.swap_trial:25
msgid ""
"Best distance achieved in this trial. EdgeCollection: Collection of "
"optimal edges found. NLayout: The optimal layout found. int: The number "
"of depth steps required in mapping."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.rst:2
msgid "qiskit.transpiler.passes.mapping.cython.stochastic\\_swap.utils module"
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection:1
msgid ""
"A simple contain that contains a C++ vector representing edges in the "
"coupling map that are found to be optimal by the swap mapper.  This "
"allows us to keep the vector alive."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection.add:1
msgid "Add two edges, in order, to the collection."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection.add:3
msgid "The beginning edge."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection.add:5
msgid "The end of the edge."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection.edges:1
msgid ""
"Returns the vector of edges as a NumPy arrau. :returns: Int array of "
"edges. :rtype: ndarray"
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.EdgeCollection.size:1
msgid ""
"The size of the edge collection. :returns: Size of the edge collection. "
":rtype: int"
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout:1
msgid ""
"A Numeric representation of a Qiskit Layout object. Here all qubit "
"layouts are stored as int arrays."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.logic_to_phys:1
msgid ""
"The array mapping logical to physical qubits. :returns: Int array of "
"logical to physical mappings. :rtype: ndarray"
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.phys_to_logic:1
msgid ""
"The array mapping physical to logical qubits. :returns: Int array of "
"physical to logical mappings. :rtype: ndarray"
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.to_layout:1
msgid "Converts numeric layout back to Qiskit Layout object."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.to_layout:3
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout:5
msgid "An ordered dict of (QuantumRegister, int) tuples."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.NLayout.to_layout:7
msgid "The corresponding Qiskit Layout object."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout:1
msgid "Converts Qiskit Layout object to numerical NLayout."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout:3
msgid "A Qiskit Layout instance."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout:8
msgid "Number of physical qubits."
msgstr ""

#: ../../docstring of
#: qiskit.transpiler.passes.mapping.cython.stochastic_swap.utils.nlayout_from_layout:11
msgid "The corresponding numerical layout."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.dense_layout.rst:2
msgid "qiskit.transpiler.passes.mapping.dense\\_layout module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.dense_layout:1
msgid "A pass for choosing a Layout of a circuit onto a Coupling graph."
msgstr ""

#: of qiskit.transpiler.passes.mapping.dense_layout:3
msgid ""
"This pass associates a physical qubit (int) to each virtual qubit of the "
"circuit (tuple(QuantumRegister, int))."
msgstr ""

#: of qiskit.transpiler.passes.mapping.dense_layout:6
#: qiskit.transpiler.passes.mapping.noise_adaptive_layout:28
msgid ""
"Note: even though a 'layout' is not strictly a property of the DAG, in "
"the transpiler architecture it is best passed around between passes by "
"being set in `property_set`."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.enlarge_with_ancilla.rst:2
msgid "qiskit.transpiler.passes.mapping.enlarge\\_with\\_ancilla module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.enlarge_with_ancilla:1
msgid ""
"Transformation pass that extends the circuit with new virtual qubits "
"(i.e. ancilla). Which qubits to add are previously allocated in the "
"'layout' property, by a previous pass."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.full_ancilla_allocation.rst:2
msgid "qiskit.transpiler.passes.mapping.full\\_ancilla\\_allocation module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.full_ancilla_allocation:1
msgid ""
"A pass for allocating all idle physical qubits (those that exist in "
"coupling map but not the dag circuit) as ancilla. It will also choose new"
" virtual qubits to correspond to those physical ancilla."
msgstr ""

#: of qiskit.transpiler.passes.mapping.full_ancilla_allocation:5
msgid ""
"Note: This is an analysis pass, and only responsible for choosing "
"physical ancilla locations and their corresponding virtual qubits. A "
"separate transformation pass must add those virtual qubits to the "
"circuit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.legacy_swap.rst:2
msgid "qiskit.transpiler.passes.mapping.legacy\\_swap module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.legacy_swap:1
msgid "A pass implementing the legacy swapper."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.lookahead_swap.rst:2
msgid "qiskit.transpiler.passes.mapping.lookahead\\_swap module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:1
msgid ""
"Implementation of Sven Jandura's swap mapper submission for the 2018 "
"QISKit Developer Challenge, adapted to integrate into the transpiler "
"architecture."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:4
msgid ""
"The role of the mapper pass is to modify the starting circuit to be "
"compatible with the target device's topology (the set of two-qubit gates "
"available on the hardware.) To do this, the mapper will insert SWAP gates"
" to relocate the virtual qubits for each upcoming gate onto a set of "
"coupled physical qubits. However, as SWAP gates are particularly lossy, "
"the goal is to accomplish this remapping while introducing the fewest "
"possible additional SWAPs."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:11
msgid ""
"This algorithm searches through the available combinations of SWAP gates "
"by means of a narrowed best first/beam search, described as follows:"
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:14
msgid "Start with a layout of virtual qubits onto physical qubits."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:15
msgid ""
"Find any gates in the input circuit which can be performed with the "
"current layout and mark them as mapped."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:17
msgid ""
"For all possible SWAP gates, calculate the layout that would result from "
"their application and rank them according to the distance of the "
"resulting layout over upcoming gates (see _calc_layout_distance.)"
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:20
msgid ""
"For the four (SEARCH_WIDTH) highest-ranking SWAPs, repeat the above "
"process on the layout that would be generated if they were applied."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:22
msgid ""
"Repeat this process down to a depth of four (SEARCH_DEPTH) SWAPs away "
"from the initial layout, for a total of 256 (SEARCH_WIDTH^SEARCH_DEPTH) "
"prospective layouts."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:25
msgid ""
"Choose the layout which maximizes the number of two-qubit which could be "
"performed. Add its mapped gates, including the SWAPs generated, to the "
"output circuit."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:28
msgid "Repeat the above until all gates from the initial circuit are mapped."
msgstr ""

#: of qiskit.transpiler.passes.mapping.lookahead_swap:30
msgid ""
"For more details on the algorithm, see Sven's blog post: "
"https://medium.com/qiskit/improving-a-quantum-compiler-48410d7a7084"
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.noise_adaptive_layout.rst:2
msgid "qiskit.transpiler.passes.mapping.noise\\_adaptive\\_layout module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.noise_adaptive_layout:1
msgid "A pass for choosing a Layout of a circuit onto a Backend"
msgstr ""

#: of qiskit.transpiler.passes.mapping.noise_adaptive_layout:3
msgid ""
"This pass associates a physical qubit (int) to each virtual qubit of the "
"circuit (tuple(QuantumRegister, int)), using calibration data."
msgstr ""

#: of qiskit.transpiler.passes.mapping.noise_adaptive_layout:6
msgid ""
"The pass implements the qubit mapping method from: Noise-Adaptive "
"Compiler Mappings for Noisy Intermediate-Scale Quantum Computers Prakash "
"Murali, Jonathan M. Baker, Ali Javadi-Abhari, Frederic T. Chong, Margaret"
" R. Martonosi ASPLOS 2019 (arXiv:1901.11054)."
msgstr ""

#: of qiskit.transpiler.passes.mapping.noise_adaptive_layout:12
msgid "Greedy mapping heuristic"
msgstr ""

#: of qiskit.transpiler.passes.mapping.noise_adaptive_layout:14
msgid ""
"Ordering of edges: Map qubits edge-by-edge in the order of decreasing "
"frequency of occurence in the program dag."
msgstr ""

#: of qiskit.transpiler.passes.mapping.noise_adaptive_layout:17
msgid ""
"Initialization: If an edge exists with both endpoints unmapped, pick the "
"best available hardware cx to execute this edge. Iterative step: When an "
"edge exists with one endpoint unmapped, map that endpoint to a location "
"which allows maximum reliability for CNOTs with previously mapped qubits."
" In the end if there are unmapped qubits (which don't participate in any "
"CNOT), map them to any available hardware qubit."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.set_layout.rst:2
msgid "qiskit.transpiler.passes.mapping.set\\_layout module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.set_layout:3
#: qiskit.transpiler.passes.mapping.trivial_layout:4
msgid ""
"This pass associates a physical qubit (int) to each virtual qubit of the "
"circuit (tuple(QuantumRegister, int)) in increasing order."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.stochastic_swap.rst:2
msgid "qiskit.transpiler.passes.mapping.stochastic\\_swap module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap:1
msgid "A pass implementing the default Qiskit stochastic mapper."
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap.gates_to_idx:1
msgid "Converts gate tuples into a nested list of integers."
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap.gates_to_idx:3
msgid "List of (QuantumRegister, int) pairs representing gates."
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap.gates_to_idx:6
#: qiskit.transpiler.passes.mapping.stochastic_swap.regtuple_to_numeric:7
msgid "List of )QuantumRegister, int) tuples."
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap.gates_to_idx:9
msgid "Nested list of integers for gates."
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap.regtuple_to_numeric:1
msgid ""
"Takes (QuantumRegister, int) tuples and converts them into an integer "
"array."
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap.regtuple_to_numeric:4
msgid "List of tuples of (QuantumRegister, int) to convert."
msgstr ""

#: of qiskit.transpiler.passes.mapping.stochastic_swap.regtuple_to_numeric:10
msgid "Array of integers."
msgstr ""

#: ../../api/qiskit.transpiler.passes.mapping.trivial_layout.rst:2
msgid "qiskit.transpiler.passes.mapping.trivial\\_layout module"
msgstr ""

#: of qiskit.transpiler.passes.mapping.trivial_layout:1
msgid ""
"A pass for choosing a Layout of a circuit onto a Coupling graph, using a "
"simple round-robin order."
msgstr ""

#: ../../api/qiskit.transpiler.passes.merge_adjacent_barriers.rst:2
msgid "qiskit.transpiler.passes.merge\\_adjacent\\_barriers module"
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:1
msgid "A pass that merges any adjacent barriers into one"
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:3
msgid ""
"Only barriers which can be merged without affecting the barrier structure"
" of the DAG will be merged."
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:6
msgid ""
"Not all redundant barriers will necessarily be merged, only adjacent "
"barriers are merged."
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:8
msgid ""
"For example, the circuit qr = QuantumRegister(3, 'q') circuit = "
"QuantumCircuit(qr) circuit.barrier(qr[0]) circuit.barrier(qr[1]) "
"circuit.barrier(qr)"
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:15
msgid ""
"Will be transformed into a circuit corresponding to "
"circuit.barrier(qr[0]) circuit.barrier(qr) after one iteration of the "
"pass. These two barriers were not merged by the first pass as they are "
"not adjacent in the initial circuit."
msgstr ""

#: of qiskit.transpiler.passes.merge_adjacent_barriers:21
msgid "The pass then can be reapplied to merge the newly adjacent barriers."
msgstr ""

#: ../../api/qiskit.transpiler.passes.num_tensor_factors.rst:2
msgid "qiskit.transpiler.passes.num\\_tensor\\_factors module"
msgstr ""

#: ../../api/qiskit.transpiler.passes.optimize_1q_gates.rst:2
msgid "qiskit.transpiler.passes.optimize\\_1q\\_gates module"
msgstr ""

#: of qiskit.transpiler.passes.optimize_1q_gates:1
msgid ""
"Transpiler pass to optimize chains of single-qubit u1, u2, u3 gates by "
"combining them into a single gate."
msgstr ""

#: ../../api/qiskit.transpiler.passes.optimize_swap_before_measure.rst:2
msgid "qiskit.transpiler.passes.optimize\\_swap\\_before\\_measure module"
msgstr ""

#: of qiskit.transpiler.passes.optimize_swap_before_measure:3
msgid ""
"Transpiler pass to remove swaps in front of measurements by re-targeting "
"the classical bit"
msgstr ""

#: of qiskit.transpiler.passes.optimize_swap_before_measure:2
msgid "of the measure instruction."
msgstr ""

#: ../../api/qiskit.transpiler.passes.remove_diagonal_gates_before_measure.rst:2
msgid ""
"qiskit.transpiler.passes.remove\\_diagonal\\_gates\\_before\\_measure "
"module"
msgstr ""

#: of qiskit.transpiler.passes.remove_diagonal_gates_before_measure:1
msgid ""
"Transpiler pass to remove diagonal gates (like RZ, T, Z, etc) before a "
"measurement. Including diagonal 2Q gates."
msgstr ""

#: ../../api/qiskit.transpiler.passes.remove_reset_in_zero_state.rst:2
msgid "qiskit.transpiler.passes.remove\\_reset\\_in\\_zero\\_state module"
msgstr ""

#: of qiskit.transpiler.passes.remove_reset_in_zero_state:1
msgid "Transpiler pass to remove reset gate when the qubit is in zero state"
msgstr ""

#: ../../api/qiskit.transpiler.passes.resource_estimation.rst:2
msgid "qiskit.transpiler.passes.resource\\_estimation module"
msgstr ""

#: of qiskit.transpiler.passes.resource_estimation:1
msgid ""
"An analysis pass for automatically running Depth(), Width(), Size(), "
"CountOps(), and Tensor_Factor()"
msgstr ""

#: ../../api/qiskit.transpiler.passes.unroll_3q_or_more.rst:2
msgid "qiskit.transpiler.passes.unroll\\_3q\\_or\\_more module"
msgstr ""

#: of qiskit.transpiler.passes.unroll_3q_or_more:1
msgid "Pass for decomposing 3q (or more) gates into 2q or 1q gates."
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.rst:2
msgid "qiskit.transpiler.preset\\_passmanagers package"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers:1
msgid "Preset PassManager flows."
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.default.rst:2
msgid "qiskit.transpiler.preset\\_passmanagers.default module"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.default:1
msgid "A default passmanager."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.default.default_pass_manager:1
#: qiskit.transpiler.preset_passmanagers.default_pass_manager:1
msgid "The default pass manager that maps to the coupling map."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.default.default_pass_manager:6
#: qiskit.transpiler.preset_passmanagers.default_pass_manager:6
msgid "A pass manager to map and optimize."
msgstr ""

#: of
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager_simulator:1
#: qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator:1
msgid "The default pass manager without a coupling map."
msgstr ""

#: of
#: qiskit.transpiler.preset_passmanagers.default.default_pass_manager_simulator:6
#: qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator:6
msgid "A passmanager that just unrolls, without any optimization."
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.default_pass_manager.rst:2
msgid "default_pass_manager"
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.default_pass_manager_simulator.rst:2
msgid "default_pass_manager_simulator"
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level0.rst:2
msgid "qiskit.transpiler.preset\\_passmanagers.level0 module"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level0:1
msgid ""
"Level 0 pass manager: no optimization, just conforming to basis and "
"coupling map"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level0.level_0_pass_manager:1
#: qiskit.transpiler.preset_passmanagers.level_0_pass_manager:1
msgid ""
"Level 0 pass manager: no explicit optimization other than mapping to "
"backend."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level0.level_0_pass_manager:3
#: qiskit.transpiler.preset_passmanagers.level_0_pass_manager:3
msgid ""
"This pass manager applies the user-given initial layout. If none is "
"given, a trivial layout consisting of mapping the i-th virtual qubit to "
"the i-th physical qubit is used. Any unused physical qubit is allocated "
"as ancilla space. The pass manager then unrolls the circuit to the "
"desired basis, and transforms the circuit to match the coupling map. "
"Finally, extra resets are removed. Note: in simulators where "
"coupling_map=None, only the unrolling and optimization stages are done."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level0.level_0_pass_manager:14
#: qiskit.transpiler.preset_passmanagers.level_0_pass_manager:14
msgid "a level 0 pass manager."
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level1.rst:2
msgid "qiskit.transpiler.preset\\_passmanagers.level1 module"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level1:1
msgid ""
"Level 1 pass manager: mapping in addition to light optimization via "
"adjacent gate collapse"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level1.level_1_pass_manager:1
#: qiskit.transpiler.preset_passmanagers.level_1_pass_manager:1
msgid ""
"Level 1 pass manager: light optimization by simple adjacent gate "
"collapsing"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level1.level_1_pass_manager:3
#: qiskit.transpiler.preset_passmanagers.level_1_pass_manager:3
msgid ""
"This pass manager applies the user-given initial layout. If none is "
"given, and a trivial layout (i-th virtual -> i-th physical) makes the "
"circuit fit the coupling map, that is used. Otherwise, the circuit is "
"mapped to the most densely connected coupling subgraph, and swaps are "
"inserted to map. Any unused physical qubit is allocated as ancilla space."
" The pass manager then unrolls the circuit to the desired basis, and "
"transforms the circuit to match the coupling map. Finally, optimizations "
"in the form of adjacent gate collapse and redundant reset removal are "
"performed. Note: in simulators where coupling_map=None, only the "
"unrolling and optimization stages are done."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level1.level_1_pass_manager:16
#: qiskit.transpiler.preset_passmanagers.level_1_pass_manager:16
msgid "a level 1 pass manager."
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level2.rst:2
msgid "qiskit.transpiler.preset\\_passmanagers.level2 module"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level2:1
msgid ""
"Level 2 pass manager: noise adaptive mapping in addition to commutation-"
"based optimization"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level2.level_2_pass_manager:1
#: qiskit.transpiler.preset_passmanagers.level_2_pass_manager:1
msgid ""
"Level 2 pass manager: medium optimization by noise adaptive qubit mapping"
" and gate cancellation using commutativity rules."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level2.level_2_pass_manager:4
#: qiskit.transpiler.preset_passmanagers.level_2_pass_manager:4
msgid ""
"This pass manager applies the user-given initial layout. If none is "
"given, and device calibration information is available, the circuit is "
"mapped to the qubits with best readouts and to CX gates with highest "
"fidelity. Otherwise, a layout on the most densely connected qubits is "
"used. The pass manager then transforms the circuit to match the coupling "
"constraints. It is then unrolled to the basis, and any flipped cx "
"directions are fixed. Finally, optimizations in the form of commutative "
"gate cancellation and redundant reset removal are performed. Note: in "
"simulators where coupling_map=None, only the unrolling and optimization "
"stages are done."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level2.level_2_pass_manager:18
#: qiskit.transpiler.preset_passmanagers.level3.level_3_pass_manager:18
#: qiskit.transpiler.preset_passmanagers.level_2_pass_manager:18
#: qiskit.transpiler.preset_passmanagers.level_3_pass_manager:18
msgid "a level 2 pass manager."
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level3.rst:2
msgid "qiskit.transpiler.preset\\_passmanagers.level3 module"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level3:1
msgid ""
"Level 3 pass manager: noise adaptive mapping in addition to heavy "
"optimization based on unitary synthesis"
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level3.level_3_pass_manager:1
#: qiskit.transpiler.preset_passmanagers.level_3_pass_manager:1
msgid ""
"Level 3 pass manager: heavy optimization by noise adaptive qubit mapping "
"and gate cancellation using commutativity rules and unitary synthesis."
msgstr ""

#: of qiskit.transpiler.preset_passmanagers.level3.level_3_pass_manager:4
#: qiskit.transpiler.preset_passmanagers.level_3_pass_manager:4
msgid ""
"This pass manager applies the user-given initial layout. If none is "
"given, and device calibration information is available, the circuit is "
"mapped to the qubits with best readouts and to CX gates with highest "
"fidelity. Otherwise, a layout on the most densely connected qubits is "
"used. The pass manager then transforms the circuit to match the coupling "
"constraints. It is then unrolled to the basis, and any flipped cx "
"directions are fixed. Finally, optimizations in the form of commutative "
"gate cancellation, resynthesis of two-qubit unitary blocks, and redundant"
" reset removal are performed. Note: in simulators where "
"coupling_map=None, only the unrolling and optimization stages are done."
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level_0_pass_manager.rst:2
msgid "level_0_pass_manager"
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level_1_pass_manager.rst:2
msgid "level_1_pass_manager"
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level_2_pass_manager.rst:2
msgid "level_2_pass_manager"
msgstr ""

#: ../../api/qiskit.transpiler.preset_passmanagers.level_3_pass_manager.rst:2
msgid "level_3_pass_manager"
msgstr ""

#: of qiskit.transpiler.transpile:1 qiskit.transpiler.transpiler.transpile:1
msgid "transpile one or more circuits."
msgstr ""

#: of qiskit.transpiler.transpile:7 qiskit.transpiler.transpile_dag:8
#: qiskit.transpiler.transpiler.transpile:7
#: qiskit.transpiler.transpiler.transpile_dag:8
msgid ""
"list of basis gate names supported by the target. Default: "
"['u1','u2','u3','cx','id']"
msgstr ""

#: of qiskit.transpiler.transpile:12 qiskit.transpiler.transpiler.transpile:12
msgid ""
"Initial position of virtual qubits on physical qubits. The final layout "
"is not guaranteed to be the same, as the transpiler may permute qubits "
"through swaps or other means."
msgstr ""

#: of qiskit.transpiler.transpile:16 qiskit.transpiler.transpiler.transpile:16
msgid "random seed for the swap_mapper"
msgstr ""

#: of qiskit.transpiler.transpile:18 qiskit.transpiler.transpiler.transpile:18
msgid "a pass_manager for the transpiler stages"
msgstr ""

#: ../../api/qiskit.transpiler.transpile_circuit.rst:2
msgid "transpile_circuit"
msgstr ""

#: of qiskit.transpiler.transpile_circuit:1
msgid "Select a PassManager and run a single circuit through it."
msgstr ""

#: of qiskit.transpiler.transpile_circuit:3
msgid "circuit to transpile"
msgstr ""

#: of qiskit.transpiler.transpile_circuit:5
msgid "configuration dictating how to transpile"
msgstr ""

#: of qiskit.transpiler.transpile_circuit:8
msgid "transpiled circuit"
msgstr ""

#: of qiskit.transpiler.transpile_circuit:11
msgid "if transpile_config is not valid or transpilation incurs error"
msgstr ""

#: ../../api/qiskit.transpiler.transpile_config.rst:2
msgid "qiskit.transpiler.transpile\\_config module"
msgstr ""

#: of qiskit.transpiler.transpile_config:1
msgid "Models for TranspileConfig and its related components."
msgstr ""

#: of qiskit.transpiler.transpile_config.TranspileConfig:1
msgid "Model for TranspileConfig."
msgstr ""

#: of qiskit.transpiler.transpile_config.TranspileConfig:3
msgid ""
"Please note that this class only describes the required fields. For the "
"full description of the model, please check ``TranspileConfigSchema``."
msgstr ""

#: of qiskit.transpiler.transpile_config.TranspileConfig:8
msgid ""
"a non-negative integer indicating the optimization level. 0 means no "
"transformation on the circuit. Higher levels may produce more optimized "
"circuits, but may take longer."
msgstr ""

#: ../../api/qiskit.transpiler.transpile_dag.rst:2
msgid "transpile_dag"
msgstr ""

#: of qiskit.transpiler.transpile_dag:1
#: qiskit.transpiler.transpiler.transpile_dag:1
msgid ""
"Deprecated - Use qiskit.compiler.transpile for transpiling from circuits "
"to circuits. Transform a dag circuit into another dag circuit "
"(transpile), through consecutive passes on the dag."
msgstr ""

#: of qiskit.transpiler.transpile_dag:6
#: qiskit.transpiler.transpiler.transpile_dag:6
msgid "dag circuit to transform via transpilation"
msgstr ""

#: of qiskit.transpiler.transpile_dag:11
#: qiskit.transpiler.transpiler.transpile_dag:11
msgid ""
"A graph of coupling::          [      [control0(int), target0(int)],"
"      [control1(int), target1(int)],     ]          eg. [[0, 2], [1, 2], "
"[1, 3], [3, 4]}"
msgstr ""

#: of qiskit.transpiler.transpile_dag:12
#: qiskit.transpiler.transpiler.transpile_dag:12
msgid "A graph of coupling::"
msgstr ""

#: of qiskit.transpiler.transpile_dag:21
#: qiskit.transpiler.transpiler.transpile_dag:21
msgid "A layout object"
msgstr ""

#: of qiskit.transpiler.transpile_dag:23
#: qiskit.transpiler.transpiler.transpile_dag:23
msgid "random seed_mapper for the swap mapper"
msgstr ""

#: of qiskit.transpiler.transpile_dag:25
#: qiskit.transpiler.transpiler.transpile_dag:25
msgid ""
"pass manager instance for the transpilation process If None, a default "
"set of passes are run. Otherwise, the passes defined in it will run. If "
"contains no passes in it, no dag transformations occur."
msgstr ""

#: of qiskit.transpiler.transpile_dag:31
#: qiskit.transpiler.transpiler.transpile_dag:31
msgid "transformed dag"
msgstr ""

#: ../../api/qiskit.transpiler.transpiler.rst:2
msgid "qiskit.transpiler.transpiler module"
msgstr ""

#: of qiskit.transpiler.transpiler:1
msgid "THIS FILE IS DEPRECATED AND WILL BE REMOVED IN RELEASE 0.9."
msgstr ""

#: ../../api/qiskit.user_config.rst:2
msgid "qiskit.user\\_config module"
msgstr ""

#: of qiskit.user_config:1
msgid "Utils for reading a user preference config files."
msgstr ""

#: of qiskit.user_config.UserConfig:1
msgid "Class representing a user config file"
msgstr ""

#: of qiskit.user_config.UserConfig:3
msgid "The config file format should look like:"
msgstr ""

#: of qiskit.user_config.UserConfig:5
msgid "[default] circuit_drawer = mpl"
msgstr ""

#: of qiskit.user_config.UserConfig.read_config_file:1
msgid "Read config file and parse the contents into the settings attr."
msgstr ""

#: of qiskit.user_config.get_config:1
msgid "Read the config file from the default location or env var"
msgstr ""

#: of qiskit.user_config.get_config:3
msgid ""
"It will read a config file at either the default location "
"~/.qiskit/settings.conf or if set the value of the QISKIT_SETTINGS env "
"var."
msgstr ""

#: of qiskit.user_config.get_config:6
msgid ""
"It will return the parsed settings dict from the parsed config file. "
":returns: The settings dict from the parsed config file. :rtype: dict"
msgstr ""

#: ../../api/qiskit.util.rst:2
msgid "qiskit.util module"
msgstr ""

#: of qiskit.util:1
msgid "Common utilities for Qiskit."
msgstr ""

#: of qiskit.util.local_hardware_info:1
msgid "Basic hardware information about the local machine."
msgstr ""

#: of qiskit.util.local_hardware_info:3
msgid ""
"Gives actual number of CPU's in the machine, even when hyperthreading is "
"turned on. CPU count defaults to 1 when true count can't be determined."
msgstr ""

#: of qiskit.util.local_hardware_info:6
msgid "The hardware information."
msgstr ""

#: ../../api/qiskit.validation.rst:2
msgid "qiskit.validation package"
msgstr ""

#: of qiskit.validation:1
msgid "Models and schemas for Terra."
msgstr ""

#: ../../api/qiskit.validation.BaseModel.rst:2
msgid "BaseModel"
msgstr ""

#: of qiskit.validation.BaseModel:1 qiskit.validation.base.BaseModel:1
msgid "ベースクラス: :class:`types.SimpleNamespace`"
msgstr ""

#: of qiskit.validation.BaseModel:1 qiskit.validation.base.BaseModel:1
msgid "Base class for Models for validated Qiskit classes."
msgstr ""

#: ../../api/qiskit.validation.BaseModel.rst:16:<autosummary>:1
msgid ":obj:`as_dict <qiskit.validation.BaseModel.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseModel.rst:16:<autosummary>:1
msgid ":obj:`from_dict <qiskit.validation.BaseModel.from_dict>`\\ \\(dict\\_\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseModel.rst:16:<autosummary>:1
msgid ":obj:`to_dict <qiskit.validation.BaseModel.to_dict>`\\ \\(\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:2
msgid "BaseSchema"
msgstr ""

#: of qiskit.validation.BaseSchema:1 qiskit.validation.base.BaseSchema:1
msgid "ベースクラス: :class:`marshmallow.schema.Schema`"
msgstr ""

#: of qiskit.validation.BaseSchema:1 qiskit.validation.base.BaseSchema:1
msgid "Base class for Schemas for validated Qiskit classes."
msgstr ""

#: of qiskit.validation.BaseSchema:3 qiskit.validation.base.BaseSchema:3
msgid "Provides convenience functionality for the Qiskit common use case:"
msgstr ""

#: of qiskit.validation.BaseSchema:5 qiskit.validation.base.BaseSchema:5
msgid "deserialization into class instances instead of dicts."
msgstr ""

#: of qiskit.validation.BaseSchema:6 qiskit.validation.base.BaseSchema:6
msgid "handling of unknown attributes not defined in the schema."
msgstr ""

#: of qiskit.validation.BaseSchema:10 qiskit.validation.base.BaseSchema:10
msgid "class used to instantiate the instance. The"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:17:<autosummary>:1
msgid ":obj:`TYPE_MAPPING <qiskit.validation.BaseSchema.TYPE_MAPPING>`\\"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:17:<autosummary>:1
msgid ":obj:`dict_class <qiskit.validation.BaseSchema.dict_class>`\\"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:17:<autosummary>:1
msgid ":obj:`opts <qiskit.validation.BaseSchema.opts>`\\"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:17:<autosummary>:1
msgid ":obj:`set_class <qiskit.validation.BaseSchema.set_class>`\\"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ":obj:`accessor <qiskit.validation.BaseSchema.accessor>`\\ \\(func\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dump <qiskit.validation.BaseSchema.dump>`\\ \\(obj\\[\\, many\\, "
"update\\_fields\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dump_additional_data "
"<qiskit.validation.BaseSchema.dump_additional_data>`\\ \\(valid\\_data\\,"
" many\\, ...\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`dumps <qiskit.validation.BaseSchema.dumps>`\\ \\(obj\\[\\, many\\, "
"update\\_fields\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`error_handler <qiskit.validation.BaseSchema.error_handler>`\\ "
"\\(func\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`get_attribute <qiskit.validation.BaseSchema.get_attribute>`\\ "
"\\(attr\\, obj\\, default\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`handle_error <qiskit.validation.BaseSchema.handle_error>`\\ "
"\\(error\\, data\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`load <qiskit.validation.BaseSchema.load>`\\ \\(data\\[\\, many\\, "
"partial\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`load_additional_data "
"<qiskit.validation.BaseSchema.load_additional_data>`\\ \\(valid\\_data\\,"
" many\\, ...\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`loads <qiskit.validation.BaseSchema.loads>`\\ \\(json\\_data\\[\\, "
"many\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ":obj:`make_model <qiskit.validation.BaseSchema.make_model>`\\ \\(data\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`on_bind_field <qiskit.validation.BaseSchema.on_bind_field>`\\ "
"\\(field\\_name\\, field\\_obj\\)"
msgstr ""

#: ../../api/qiskit.validation.BaseSchema.rst:35:<autosummary>:1
msgid ""
":obj:`validate <qiskit.validation.BaseSchema.validate>`\\ \\(data\\[\\, "
"many\\, partial\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:2
msgid "ModelTypeValidator"
msgstr ""

#: of qiskit.validation.ModelTypeValidator:1
#: qiskit.validation.base.ModelTypeValidator:1
msgid "ベースクラス: :class:`marshmallow.fields.Field`"
msgstr ""

#: of qiskit.validation.ModelTypeValidator:1
#: qiskit.validation.base.ModelTypeValidator:1
msgid "A field able to validate the correct type of a value."
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1
msgid ":obj:`context <qiskit.validation.ModelTypeValidator.context>`\\"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1 of
#: qiskit.validation.ModelTypeValidator.context:1
msgid "The context dictionary for the parent :class:`Schema`."
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1
msgid ""
":obj:`default_error_messages "
"<qiskit.validation.ModelTypeValidator.default_error_messages>`\\"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1
msgid ":obj:`name <qiskit.validation.ModelTypeValidator.name>`\\"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1
msgid ":obj:`parent <qiskit.validation.ModelTypeValidator.parent>`\\"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1
msgid ":obj:`root <qiskit.validation.ModelTypeValidator.root>`\\"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1
msgid ""
"Reference to the `Schema` that this field belongs to even if it is buried"
" in a `List`."
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:19:<autosummary>:1
msgid ":obj:`valid_types <qiskit.validation.ModelTypeValidator.valid_types>`\\"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1
msgid ""
":obj:`check_type <qiskit.validation.ModelTypeValidator.check_type>`\\ "
"\\(value\\, attr\\, data\\)"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1 of
#: qiskit.validation.ModelTypeValidator.check_type:1
#: qiskit.validation.base.ModelTypeValidator.check_type:1
#: qiskit.validation.fields.custom.DictParameters.check_type:1
msgid "Validates a value against the correct type of the field."
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1
msgid ""
":obj:`deserialize <qiskit.validation.ModelTypeValidator.deserialize>`\\ "
"\\(value\\[\\, attr\\, data\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1 of
#: qiskit.validation.ModelTypeValidator.deserialize:1
msgid "Deserialize ``value``."
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1
msgid ""
":obj:`fail <qiskit.validation.ModelTypeValidator.fail>`\\ \\(key\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1 of
#: qiskit.validation.ModelTypeValidator.fail:1
msgid "A helper method that simply raises a `ValidationError`."
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1
msgid ""
":obj:`get_value <qiskit.validation.ModelTypeValidator.get_value>`\\ "
"\\(attr\\, obj\\[\\, accessor\\, default\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1 of
#: qiskit.validation.ModelTypeValidator.get_value:1
msgid "Return the value for a given key from an object."
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1
msgid ""
":obj:`serialize <qiskit.validation.ModelTypeValidator.serialize>`\\ "
"\\(attr\\, obj\\[\\, accessor\\]\\)"
msgstr ""

#: ../../api/qiskit.validation.ModelTypeValidator.rst:29:<autosummary>:1 of
#: qiskit.validation.ModelTypeValidator.serialize:1
msgid ""
"Pulls the value for the given key from the object, applies the field's "
"formatting and returns the result."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.root:1
msgid ""
"Reference to the `Schema` that this field belongs to even if it is buried"
" in a `List`. Return `None` for unbound fields."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.check_type:3
#: qiskit.validation.base.ModelTypeValidator.check_type:3
#: qiskit.validation.fields.custom.DictParameters.check_type:3
msgid "It calls ``_expected_types`` to get a list of valid types."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.check_type:5
#: qiskit.validation.base.ModelTypeValidator.check_type:5
#: qiskit.validation.fields.custom.DictParameters.check_type:5
msgid "Subclasses can do one of the following:"
msgstr ""

#: of qiskit.validation.ModelTypeValidator.check_type:7
#: qiskit.validation.base.ModelTypeValidator.check_type:7
#: qiskit.validation.fields.custom.DictParameters.check_type:7
msgid ""
"1. They can override the ``valid_types`` property with a tuple with the "
"expected types for this field."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.check_type:10
#: qiskit.validation.base.ModelTypeValidator.check_type:10
#: qiskit.validation.fields.custom.DictParameters.check_type:10
msgid ""
"2. They can override the ``_expected_types`` method to return a tuple of "
"expected types for the field."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.check_type:13
#: qiskit.validation.base.ModelTypeValidator.check_type:13
#: qiskit.validation.fields.custom.DictParameters.check_type:13
msgid "3. They can change ``check_type`` completely to customize validation."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.check_type:16
#: qiskit.validation.base.ModelTypeValidator.check_type:16
#: qiskit.validation.fields.custom.DictParameters.check_type:16
msgid ""
"This method or the overrides must return the ``value`` parameter "
"untouched."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.deserialize:3
msgid "If an invalid value is passed or if a required value is missing."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.serialize:4
msgid "The attibute or key to get from the object."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.serialize:5
msgid "The object to pull the key from."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.serialize:6
msgid "Function used to pull values from ``obj``."
msgstr ""

#: of qiskit.validation.ModelTypeValidator.serialize:7
msgid "In case of formatting problem"
msgstr ""

#: ../../api/qiskit.validation.ModelValidationError.rst:2
msgid "ModelValidationError"
msgstr ""

#: ../../api/qiskit.validation.base.rst:2
msgid "qiskit.validation.base module"
msgstr ""

#: of qiskit.validation.base:1
msgid "Building blocks for Qiskit validated classes."
msgstr ""

#: of qiskit.validation.base:3
msgid ""
"This module provides the ``BaseSchema`` and ``BaseModel`` classes as the "
"main building blocks for defining objects (Models) that conform to a "
"specification (Schema) and are validated at instantiation, along with "
"providing facilities for being serialized and deserialized."
msgstr ""

#: of qiskit.validation.base:8
msgid ""
"Implementors are recommended to subclass the two classes, and \"binding\""
" them together by using ``bind_schema``::"
msgstr ""

#: of qiskit.validation.base.BaseSchema.Meta:1
msgid "In marshmallow3, all schemas are strict."
msgstr ""

#: of qiskit.validation.base.Obj:1
msgid "Generic object in a Model."
msgstr ""

#: of qiskit.validation.base.ObjSchema:1
msgid "Generic object schema."
msgstr ""

#: of qiskit.validation.base.bind_schema:1 qiskit.validation.bind_schema:1
msgid "Class decorator for adding schema validation to its instances."
msgstr ""

#: of qiskit.validation.base.bind_schema:3 qiskit.validation.bind_schema:3
msgid ""
"Instances of the decorated class are automatically validated after "
"instantiation and they are augmented to allow further validations with "
"the private method ``_validate()``."
msgstr ""

#: of qiskit.validation.base.bind_schema:7 qiskit.validation.bind_schema:7
msgid ""
"The decorator also adds the class attribute ``schema`` with the schema "
"used for validation, along with a class attribute ``shallow_schema`` used"
" for validation during instantiation."
msgstr ""

#: of qiskit.validation.base.bind_schema:11 qiskit.validation.bind_schema:11
msgid ""
"It also allows using the ``to_dict`` and ``from_dict`` in the model "
"class, with perform serialization/deserialization to/from simple Python "
"objects respectively."
msgstr ""

#: of qiskit.validation.base.bind_schema:15 qiskit.validation.bind_schema:15
msgid ""
"The same schema cannot be bound more than once. If you need to reuse a "
"schema for a different class, create a new schema subclassing the one you"
" want to reuse and leave the new empty::"
msgstr ""

#: of qiskit.validation.base.bind_schema:33 qiskit.validation.bind_schema:33
msgid "when trying to bind the same schema more than once."
msgstr ""

#: of qiskit.validation.base.bind_schema:35 qiskit.validation.bind_schema:35
msgid "the same class with validation capabilities."
msgstr ""

#: ../../api/qiskit.validation.bind_schema.rst:2
msgid "bind_schema"
msgstr ""

#: ../../api/qiskit.validation.exceptions.rst:2
msgid "qiskit.validation.exceptions module"
msgstr ""

#: of qiskit.validation.exceptions:1
msgid "Exceptions for errors raised by the validation."
msgstr ""

#: of qiskit.validation.exceptions.ModelValidationError:1
msgid ""
"ベースクラス: :class:`marshmallow.exceptions.ValidationError`, "
":class:`qiskit.exceptions.QiskitError`"
msgstr ""

#: ../../api/qiskit.validation.fields.rst:2
msgid "qiskit.validation.fields package"
msgstr ""

#: of qiskit.validation.fields:1
msgid "Fields to be used with Qiskit validated classes."
msgstr ""

#: of qiskit.validation.fields:3
msgid "When extending this module with new Fields:"
msgstr ""

#: of qiskit.validation.fields:5
msgid "Distinguish a new type, like the ``Complex`` number in this module."
msgstr ""

#: of qiskit.validation.fields:6
msgid "Use a new Marshmallow field not used in ``qiskit`` yet."
msgstr ""

#: of qiskit.validation.fields:8
msgid ""
"Marshmallow fields does not allow model validation so you need to create "
"a new field, make it subclass of the Marshmallow field *and* "
"``ModelTypeValidator``, and redefine ``valid_types`` to be the list of "
"valid types. Usually, **the same types this field deserializes to**. For "
"instance::"
msgstr ""

#: of qiskit.validation.fields:18
msgid "See ``ModelTypeValidator`` for more subclassing options."
msgstr ""

#: of qiskit.validation.fields.Boolean:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Boolean`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.Boolean:1 qiskit.validation.fields.Raw:1
msgid "A boolean field."
msgstr ""

#: of qiskit.validation.fields.Boolean:3 qiskit.validation.fields.Date:3
#: qiskit.validation.fields.DateTime:12 qiskit.validation.fields.Number:4
#: qiskit.validation.fields.Raw:3 qiskit.validation.fields.String:3
#: qiskit.validation.fields.containers.List:10
#: qiskit.validation.fields.containers.Nested:38
msgid "The same keyword arguments that :class:`Field` receives."
msgstr ""

#: of qiskit.validation.fields.Date:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Date`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.Date:1
msgid "ISO8601-formatted date string."
msgstr ""

#: of qiskit.validation.fields.DateTime:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.DateTime`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.DateTime:1
msgid "A formatted datetime string in UTC."
msgstr ""

#: of qiskit.validation.fields.DateTime:3
msgid "Example: ``'2014-12-22T03:12:58.019077+00:00'``"
msgstr ""

#: of qiskit.validation.fields.DateTime:5
msgid ""
"Timezone-naive `datetime` objects are converted to UTC (+00:00) by "
":meth:`Schema.dump <marshmallow.Schema.dump>`. :meth:`Schema.load "
"<marshmallow.Schema.load>` returns `datetime` objects that are timezone-"
"aware."
msgstr ""

#: of qiskit.validation.fields.DateTime:10
msgid ""
"Either ``\"rfc\"`` (for RFC822), ``\"iso\"`` (for ISO8601), or a date "
"format string. If `None`, defaults to \"iso\"."
msgstr ""

#: of qiskit.validation.fields.Email:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Email`, "
":class:`qiskit.validation.fields.String`"
msgstr ""

#: of qiskit.validation.fields.Email:1
msgid ""
"A validated email field. Validation occurs during both serialization and "
"deserialization."
msgstr ""

#: of qiskit.validation.fields.Email:4
msgid "The same positional arguments that :class:`String` receives."
msgstr ""

#: of qiskit.validation.fields.Email:5 qiskit.validation.fields.Url:8
msgid "The same keyword arguments that :class:`String` receives."
msgstr ""

#: of qiskit.validation.fields.Float:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Float`, "
":class:`qiskit.validation.fields.Number`"
msgstr ""

#: of qiskit.validation.fields.Float:1
msgid "A double as IEEE-754 double precision string."
msgstr ""

#: of qiskit.validation.fields.Float:3
msgid "If True, format the value as a string."
msgstr ""

#: of qiskit.validation.fields.Float:4 qiskit.validation.fields.Integer:3
msgid "The same keyword arguments that :class:`Number` receives."
msgstr ""

#: of qiskit.validation.fields.Integer:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Integer`, "
":class:`qiskit.validation.fields.Number`"
msgstr ""

#: of qiskit.validation.fields.Integer:1
msgid "An integer field."
msgstr ""

#: of qiskit.validation.fields.Number:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Number`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.Number:1
msgid "Base class for number fields."
msgstr ""

#: of qiskit.validation.fields.Number:3
msgid "If True, format the serialized value as a string."
msgstr ""

#: of qiskit.validation.fields.Raw:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Raw`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.String:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.String`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.String:1
msgid "A string field."
msgstr ""

#: of qiskit.validation.fields.Url:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Url`, "
":class:`qiskit.validation.fields.String`"
msgstr ""

#: of qiskit.validation.fields.Url:1
msgid ""
"A validated URL field. Validation occurs during both serialization and "
"deserialization."
msgstr ""

#: of qiskit.validation.fields.Url:4
msgid "Default value for the field if the attribute is not set."
msgstr ""

#: of qiskit.validation.fields.Url:5
msgid ""
"The name of the attribute to get the value from. If `None`, assumes the "
"attribute has the same name as the field."
msgstr ""

#: of qiskit.validation.fields.Url:7
msgid "Allow relative URLs."
msgstr ""

#: ../../api/qiskit.validation.fields.containers.rst:2
msgid "qiskit.validation.fields.containers module"
msgstr ""

#: of qiskit.validation.fields.containers:1
msgid "Container fields that represent nested/collections of schemas or types."
msgstr ""

#: of qiskit.validation.fields.containers.Dict:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Dict`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.containers.Dict:1
msgid "A dict field. Supports dicts and dict-like objects."
msgstr ""

#: of qiskit.validation.fields.containers.Dict:4
msgid ""
"This field is only appropriate when the structure of nested data is not "
"known. For structured data, use `Nested`."
msgstr ""

#: of qiskit.validation.fields.containers.List:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.List`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.containers.List:1
msgid "A list field, composed with another `Field` class or instance."
msgstr ""

#: of qiskit.validation.fields.containers.List:8
msgid "A field class or instance."
msgstr ""

#: of qiskit.validation.fields.containers.List:9
msgid "Default value for serialization."
msgstr ""

#: of qiskit.validation.fields.containers.List:12
msgid ""
"The ``allow_none`` parameter now applies to deserialization and has the "
"same semantics as the other fields."
msgstr ""

#: of qiskit.validation.fields.containers.List.check_type:1
msgid "Validate if it's a list of valid item-field values."
msgstr ""

#: of qiskit.validation.fields.containers.List.check_type:3
msgid ""
"Check if each element in the list can be validated by the item-field "
"passed during construction."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:1
msgid ""
"ベースクラス: :class:`marshmallow.fields.Nested`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.containers.Nested:1
msgid "Allows you to nest a :class:`Schema <marshmallow.Schema>` inside a field."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:4
msgid "Examples: ::"
msgstr ""

#: of qiskit.validation.fields.containers.Nested:11
msgid ""
"When passing a `Schema <marshmallow.Schema>` instance as the first "
"argument, the instance's ``exclude``, ``only``, and ``many`` attributes "
"will be respected."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:14
msgid ""
"Therefore, when passing the ``exclude``, ``only``, or ``many`` arguments "
"to `fields.Nested`, you should pass a `Schema <marshmallow.Schema>` class"
" (not an instance) as the first argument."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:25
msgid ""
"The Schema class or class name (string) to nest, or ``\"self\"`` to nest "
"the :class:`Schema` within itself."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:27
msgid "A list or tuple of fields to exclude."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:28
msgid ""
"Raise an :exc:`ValidationError` during deserialization if the field, "
"*and* any required field values specified in the `nested` schema, are not"
" found in the data. If not a `bool` (e.g. a `str`), the provided value "
"will be used as the message of the :exc:`ValidationError` instead of the "
"default message."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:33
msgid ""
"A tuple or string of the field(s) to marshal. If `None`, all fields will "
"be marshalled. If a field name (string) is given, only a single value "
"will be returned as output instead of a dictionary. This parameter takes "
"precedence over ``exclude``."
msgstr ""

#: of qiskit.validation.fields.containers.Nested:37
msgid "Whether the field is a collection of objects."
msgstr ""

#: of qiskit.validation.fields.containers.Nested.check_type:1
msgid "Validate if the value is of the type of the schema's model."
msgstr ""

#: of qiskit.validation.fields.containers.Nested.check_type:3
msgid "Assumes the nested schema is a ``BaseSchema``."
msgstr ""

#: ../../api/qiskit.validation.fields.custom.rst:2
msgid "qiskit.validation.fields.custom module"
msgstr ""

#: of qiskit.validation.fields.custom:1
msgid "Fields custom to Terra to be used with Qiskit validated classes."
msgstr ""

#: of qiskit.validation.fields.custom.Complex:1
#: qiskit.validation.fields.custom.DictParameters:1
#: qiskit.validation.fields.custom.InstructionParameter:1
#: qiskit.validation.fields.polymorphic.ByType:1
msgid "ベースクラス: :class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.custom.Complex:1
msgid "Field for complex numbers."
msgstr ""

#: of qiskit.validation.fields.custom.Complex:3
msgid ""
"Field for parsing complex numbers: * deserializes to Python's `complex`. "
"* serializes to a tuple of 2 decimals `(real, imaginary)`"
msgstr ""

#: of qiskit.validation.fields.custom.DictParameters:1
msgid "Field for objects used in measurement kernel and discriminator parameters."
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter:1
msgid "Field for objects used in instruction parameters."
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter:3
msgid ""
"This field provides support for parsing objects of types that uses by "
"qobj.experiments.instructions.parameters: * basic Python types: complex, "
"int, float, str, list * ``numpy``: integer, float, ndarray * ``sympy``: "
"Symbol, Basic"
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter:9
msgid ""
"Note that by using this field, serialization-deserialization round-"
"tripping becomes not possible, as certain types serialize to the same "
"Python basic type (for example, numpy.float and regular float). If "
"possible, it is recommended that more specific and defined fields are "
"used instead."
msgstr ""

#: of qiskit.validation.fields.custom.InstructionParameter.check_type:1
msgid "Customize check_type for handling containers."
msgstr ""

#: ../../api/qiskit.validation.fields.polymorphic.rst:2
msgid "qiskit.validation.fields.polymorphic module"
msgstr ""

#: of qiskit.validation.fields.polymorphic:1
msgid "Polymorphic fields that represent one of several schemas or types."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField:1
msgid ""
"ベースクラス: :class:`marshmallow_polyfield.polyfield.PolyField`, "
":class:`qiskit.validation.base.ModelTypeValidator`"
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField:1
msgid "Base class for polymorphic fields."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField:3
msgid ""
"Defines a Field that can contain data fitting different ``BaseSchema``. "
"Deciding the type is performed by the ``to_dict_selector()`` and "
"``from_dict_selector()`` functions, that act on ``choices``."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField:7
msgid ""
"Subclasses are recommended to customize the ``to_dict_selector()`` and "
"``from_dict_selector()``, adding the necessary logic for inspecting "
"``choices`` and the data, and returning one of the Schemas."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField:12
msgid ""
"choices (dict or iterable): iterable or dict containing the schema "
"instances and the information needed for performing disambiguation. many "
"(bool): whether the field is a collection of objects. metadata (dict): "
"the same keyword arguments that ``PolyField`` receives."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField.check_type:1
msgid "Check if the type of the value is one of the possible choices."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField.check_type:3
msgid "Possible choices are the model classes bound to the possible schemas."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField.from_dict_selector:1
#: qiskit.validation.fields.polymorphic.ByAttribute.from_dict_selector:1
#: qiskit.validation.fields.polymorphic.TryFrom.from_dict_selector:1
msgid "Return an schema in ``choices`` for deserialization."
msgstr ""

#: of qiskit.validation.fields.polymorphic.BasePolyField.to_dict_selector:1
#: qiskit.validation.fields.polymorphic.ByAttribute.to_dict_selector:1
#: qiskit.validation.fields.polymorphic.TryFrom.to_dict_selector:1
msgid "Return an schema in ``choices`` for serialization."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:1
#: qiskit.validation.fields.polymorphic.TryFrom:1
msgid "ベースクラス: :class:`qiskit.validation.fields.polymorphic.BasePolyField`"
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:1
msgid "Polymorphic field that disambiguates based on an attribute's existence."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:3
msgid ""
"Polymorphic field that accepts a dictionary of (``'attribute': schema``) "
"entries, and checks for the existence of ``attribute`` in the data for "
"disambiguating."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:11
#: qiskit.validation.fields.polymorphic.ByType:11
#: qiskit.validation.fields.polymorphic.TryFrom:12
msgid "class PetOwnerSchema(BaseSchema):"
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:11
msgid "pet = ByAttribute({'fur_density': CatSchema,"
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:11
msgid "'barking_power': DogSchema)}"
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:13
msgid ""
"class]): dictionary with attribute names as keys, and BaseSchema classes "
"as values."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:15
#: qiskit.validation.fields.polymorphic.TryFrom:17
msgid "whether the field is a collection of objects."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByAttribute:17
#: qiskit.validation.fields.polymorphic.TryFrom:19
msgid "the same keyword arguments that ``PolyField`` receives."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType:1
msgid "Polymorphic field that disambiguates based on an attribute's type."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType:3
msgid ""
"Polymorphic field that accepts a list of ``Fields``, and checks that the "
"data belongs to any of those types. Note this Field does not inherit from"
" ``BasePolyField``, as it operates directly on ``Fields`` instead of "
"operating in ``Schemas``."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType:11
msgid "contact_method = ByType([fields.Email(), fields.Url()])"
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType:13
msgid "list of accepted `Fields` instances."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType:15
msgid "args for Field."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType:17
msgid "kwargs for Field."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType.check_type:1
msgid "Check if at least one of the possible choices validates the value."
msgstr ""

#: of qiskit.validation.fields.polymorphic.ByType.check_type:3
msgid "Possible choices are assumed to be ``ModelTypeValidator`` fields."
msgstr ""

#: of qiskit.validation.fields.polymorphic.TryFrom:1
msgid "Polymorphic field that returns the first candidate schema that matches."
msgstr ""

#: of qiskit.validation.fields.polymorphic.TryFrom:3
msgid ""
"Polymorphic field that accepts a list of candidate schemas, and iterates "
"through them, returning the first Schema that matches the data. Note that"
" the list of choices is traversed in order, and an attempt to match the "
"data is performed until a valid Schema is found, which might have "
"performance implications."
msgstr ""

#: of qiskit.validation.fields.polymorphic.TryFrom:12
msgid "pet = TryFrom([CatSchema, DogSchema])"
msgstr ""

#: of qiskit.validation.fields.polymorphic.TryFrom:14
msgid ""
"list of BaseSchema classes that are iterated in order for for performing "
"disambiguation."
msgstr ""

#: ../../api/qiskit.validation.jsonschema.rst:2
msgid "qiskit.validation.jsonschema package"
msgstr ""

#: of qiskit.validation.jsonschema:1
msgid "Validation using the .json schemas."
msgstr ""

#: ../../api/qiskit.validation.jsonschema.exceptions.rst:2
msgid "qiskit.validation.jsonschema.exceptions module"
msgstr ""

#: of qiskit.validation.jsonschema.exceptions:1
msgid "Error handling for jsonschema validation."
msgstr ""

#: of qiskit.validation.jsonschema.exceptions.SchemaValidationError:1
msgid "Represents an error during JSON Schema validation."
msgstr ""

#: ../../api/qiskit.validation.jsonschema.schema_validation.rst:2
msgid "qiskit.validation.jsonschema.schema\\_validation module"
msgstr ""

#: of qiskit.validation.jsonschema.schema_validation:1
msgid "Validation module for validation against JSON schemas."
msgstr ""

#: of
#: qiskit.validation.jsonschema.schema_validation.validate_json_against_schema:1
msgid "Validates JSON dict against a schema."
msgstr ""

#: of
#: qiskit.validation.jsonschema.schema_validation.validate_json_against_schema:3
msgid "JSON to be validated."
msgstr ""

#: of
#: qiskit.validation.jsonschema.schema_validation.validate_json_against_schema:5
msgid ""
"JSON schema dictionary or the name of one of the standards schemas in "
"Qiskit to validate against it. The list of standard schemas is: "
"``backend_configuration``, ``backend_properties``, ``backend_status``, "
"``default_pulse_configuration``, ``job_status``, ``qobj``, ``result``."
msgstr ""

#: of
#: qiskit.validation.jsonschema.schema_validation.validate_json_against_schema:12
msgid "Optional error message."
msgstr ""

#: of
#: qiskit.validation.jsonschema.schema_validation.validate_json_against_schema:15
msgid "Raised if validation fails."
msgstr ""

#: ../../api/qiskit.validation.validate.rst:2
msgid "qiskit.validation.validate module"
msgstr ""

#: of qiskit.validation.validate:1
msgid "Validators for Qiskit validated classes."
msgstr ""

#: of qiskit.validation.validate.Or:1
#: qiskit.validation.validate.PatternProperties:1
msgid "ベースクラス: :class:`marshmallow.validate.Validator`"
msgstr ""

#: of qiskit.validation.validate.Or:1
msgid "Validate using a boolean \"or\" against a list of Validators."
msgstr ""

#: of qiskit.validation.validate.Or:3
msgid ""
"This validator accepts a list of other ``Validators``, and returns True "
"if any of those validators pass."
msgstr ""

#: of qiskit.validation.validate.Or:8
msgid "wheels = Integer(validate=Or(Equal(4), Equal(2)))"
msgstr ""

#: of qiskit.validation.validate.PatternProperties:1
msgid "Validate the keys and values of an object, disallowing additional ones."
msgstr ""

#: of qiskit.validation.validate.PatternProperties:3
msgid ""
"This validator is a combination of the jsonschema `patternProperties` and"
" `additionalProperties == False`. It enforces that the keys of an object "
"conform to any of the specified validators in the mapping, and its value "
"has the specified type."
msgstr ""

#: of qiskit.validation.validate.PatternProperties:8
msgid "Examples::"
msgstr ""

#: ../../api/qiskit.version.rst:2
msgid "qiskit.version module"
msgstr ""

#: of qiskit.version:1
msgid "Contains the terra version."
msgstr ""

#: ../../api/qiskit.visualization.rst:2
msgid "qiskit.visualization package"
msgstr ""

#: of qiskit.visualization:1
msgid "Main Qiskit visualization methods."
msgstr ""

#: ../../api/qiskit.visualization.VisualizationError.rst:2
msgid "VisualizationError"
msgstr ""

#: of qiskit.visualization.VisualizationError:1
#: qiskit.visualization.exceptions.VisualizationError:1
msgid "For visualization specific errors."
msgstr ""

#: ../../api/qiskit.visualization.bloch.rst:2
msgid "qiskit.visualization.bloch module"
msgstr ""

#: of qiskit.visualization.bloch:1
msgid "Bloch sphere"
msgstr ""

#: of qiskit.visualization.bloch.Bloch:1
msgid ""
"Class for plotting data on the Bloch sphere.  Valid data can be either "
"points, vectors, or qobj objects."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:6
msgid "User supplied Matplotlib axes for Bloch sphere animation."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:8 qiskit.visualization.bloch.Bloch:14
msgid "instance"
msgstr ""

#: of qiskit.visualization.bloch.Bloch:12
msgid "User supplied Matplotlib Figure instance for plotting Bloch sphere."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:18
msgid "Color of font used for Bloch sphere labels."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:24
msgid "Size of font used for Bloch sphere labels."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:30
msgid "Sets transparency of Bloch sphere frame."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:36
msgid "Color of sphere wireframe."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:42
msgid "Width of wireframe."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:48
msgid ""
"List of colors for Bloch sphere point markers to cycle through. i.e. By "
"default, points 0 and 4 will both be blue ('b')."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:55
msgid "List of point marker shapes to cycle through."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:61
msgid ""
"List of point marker sizes. Note, not all point markers look the same "
"size when plotted!"
msgstr ""

#: of qiskit.visualization.bloch.Bloch:68
msgid "Transparency of Bloch sphere itself."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:74
msgid "Color of Bloch sphere."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:80
msgid ""
"Figure size of Bloch sphere plot.  Best to have both numbers the same; "
"otherwise you will have a Bloch sphere that looks like a football."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:87
msgid "List of vector colors to cycle through."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:93
msgid "Width of displayed vectors."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:99
msgid "Vector arrowhead style (from matplotlib's arrow style)."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:105
msgid "Width of vectors arrowhead."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:111
msgid "Azimuthal and Elevation viewing angles."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:117
msgid "List of strings corresponding to +x and -x axes labels, respectively."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:123
msgid "Positions of +x and -x labels respectively."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:129
msgid "List of strings corresponding to +y and -y axes labels, respectively."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:135
msgid "Positions of +y and -y labels respectively."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:141
msgid "List of strings corresponding to +z and -z axes labels, respectively."
msgstr ""

#: of qiskit.visualization.bloch.Bloch:147
msgid "Positions of +z and -z labels respectively."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_annotation:1
msgid ""
"Add a text or LaTeX annotation to Bloch sphere, parametrized by a qubit "
"state or a vector."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_annotation:4
msgid "Position for the annotation. Qobj of a qubit or a vector of 3 elements."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_annotation:7
msgid ""
"Annotation text. You can use LaTeX, but remember to use raw string e.g. "
"r\"$\\langle x \\rangle$\" or escape backslashes e.g. \"$\\\\langle x "
"\\\\rangle$\"."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_annotation:13
msgid ""
"Options as for mplot3d.axes3d.text, including: fontsize, color, "
"horizontalalignment, verticalalignment."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_annotation:16
msgid "If input not array_like or tuple."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_points:1
msgid ""
"Add a list of data points to bloch sphere. :param points: Collection of "
"data points. :type points: array_like :param meth: Type of points to "
"plot, use 'm' for multicolored, 'l' for points"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_points:5
msgid "connected with a line."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_vectors:1
msgid "Add a list of vectors to Bloch sphere."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.add_vectors:3
msgid "Array with vectors of unit length or smaller."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.clear:1
msgid "Resets Bloch sphere data sets to empty."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.make_sphere:1
msgid "Plots Bloch sphere and data sets."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.plot_annotations:1
msgid "Plot annotations"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.plot_axes:1
msgid "axes"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.plot_axes_labels:1
msgid "axes labels"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.plot_back:1
msgid "back half of sphere"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.plot_front:1
msgid "front half of sphere"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.plot_points:1
msgid "Plot points"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.plot_vectors:1
msgid "Plot vector"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.render:1
msgid "Render the Bloch sphere and its data sets in on given figure and axes."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.save:1
msgid ""
"Saves Bloch sphere to file of type ``format`` in directory ``dirc``. "
":param name: Name of saved image. Must include path and format as well."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.save:3
msgid ""
"i.e. '/Users/Paul/Desktop/bloch.png' This overrides the 'format' and "
"'dirc' arguments."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.save:6
msgid "Format of output image."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.save:8
msgid "Directory for output images. Defaults to current working directory."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:1
msgid "Set x, y and z labels according to one of conventions."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:3
msgid ""
"One of the following:     - \"original\"     - \"xyz\"     - \"sx sy sz\""
"     - \"01\"     - \"polarization jones\"     - \"polarization jones "
"letters\"     see also: http://en.wikipedia.org/wiki/Jones_calculus     -"
" \"polarization stokes\"     see also: "
"http://en.wikipedia.org/wiki/Stokes_parameters"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:12
msgid "One of the following:"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:5
msgid "\"original\""
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:6
msgid "\"xyz\""
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:7
msgid "\"sx sy sz\""
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:8
msgid "\"01\""
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:9
msgid "\"polarization jones\""
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:10
msgid "\"polarization jones letters\""
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:11
msgid ""
"see also: http://en.wikipedia.org/wiki/Jones_calculus - \"polarization "
"stokes\" see also: http://en.wikipedia.org/wiki/Stokes_parameters"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.set_label_convention:16
msgid "If convention is not valid."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.show:1
msgid "Display Bloch sphere and corresponding data sets."
msgstr ""

#: of qiskit.visualization.bloch.Bloch.vector_mutation:1
msgid "Sets the width of the vectors arrowhead"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.vector_style:1
msgid "Style of Bloch vectors, default = '-|>' (or 'simple')"
msgstr ""

#: of qiskit.visualization.bloch.Bloch.vector_width:1
msgid "Width of Bloch vectors, default = 5"
msgstr ""

#: ../../api/qiskit.visualization.circuit_drawer.rst:2
msgid "circuit_drawer"
msgstr ""

#: of qiskit.visualization.circuit_drawer:1
#: qiskit.visualization.circuit_visualization.circuit_drawer:1
msgid ""
"Draw a quantum circuit to different formats (set by output parameter): 0."
" text: ASCII art TextDrawing that can be printed in the console. 1. "
"latex: high-quality images, but heavy external software dependencies 2. "
"matplotlib: purely in Python with no external dependencies"
msgstr ""

#: of qiskit.visualization.circuit_drawer:6
#: qiskit.visualization.circuit_visualization.circuit_drawer:6
msgid "the quantum circuit to draw"
msgstr ""

#: of qiskit.visualization.circuit_drawer:12
#: qiskit.visualization.circuit_visualization.circuit_drawer:12
msgid ""
"dictionary of style or file name of style file. This option is only used "
"by the `mpl`, `latex`, and `latex_source` output types. If a str is "
"passed in that is the path to a json file which contains that will be "
"open, parsed, and then used just as the input dict."
msgstr ""

#: of qiskit.visualization.circuit_drawer:30
#: qiskit.visualization.circuit_visualization.circuit_drawer:30
msgid ""
"Sets the length of the lines generated by `text` output type. This useful"
" when the drawing does not fit in the console. If None (default), it will"
" try to guess the console width using shutil.get_terminal_size(). "
"However, if you're running in jupyter the default line length is set to "
"80 characters. If you don't want pagination at all, set `line_length=-1`."
msgstr ""

#: of qiskit.visualization.circuit_drawer:50
#: qiskit.visualization.circuit_visualization.circuit_drawer:50
msgid ""
"(output `latex`) an in-memory representation of the image     of the "
"circuit diagram. matplotlib.figure: (output `mpl`) a matplotlib figure "
"object for the     circuit diagram. String: (output `latex_source`). The "
"LaTeX source code. TextDrawing: (output `text`). A drawing that can be "
"printed as ascii art"
msgstr ""

#: of qiskit.visualization.circuit_drawer:52
#: qiskit.visualization.circuit_visualization.circuit_drawer:52
msgid "(output `latex`) an in-memory representation of the image"
msgstr ""

#: of qiskit.visualization.circuit_drawer:53
#: qiskit.visualization.circuit_visualization.circuit_drawer:53
msgid "of the circuit diagram."
msgstr ""

#: of qiskit.visualization.circuit_drawer:54
#: qiskit.visualization.circuit_visualization.circuit_drawer:54
msgid "matplotlib.figure: (output `mpl`) a matplotlib figure object for the"
msgstr ""

#: of qiskit.visualization.circuit_drawer:55
#: qiskit.visualization.circuit_visualization.circuit_drawer:55
msgid "circuit diagram."
msgstr ""

#: of qiskit.visualization.circuit_drawer:56
#: qiskit.visualization.circuit_visualization.circuit_drawer:56
msgid ""
"String: (output `latex_source`). The LaTeX source code. TextDrawing: "
"(output `text`). A drawing that can be printed as ascii art"
msgstr ""

#: of qiskit.visualization.circuit_drawer:61
#: qiskit.visualization.circuit_visualization.circuit_drawer:61
msgid "when the output methods requieres non-installed libraries."
msgstr ""

#: of qiskit.visualization.circuit_drawer:65
#: qiskit.visualization.circuit_visualization.circuit_drawer:65
msgid ""
"The style dict kwarg contains numerous options that define the style of "
"the output circuit visualization. While the style dict is used by the "
"`mpl`, `latex`, and `latex_source` outputs some options in that are only "
"used by the `mpl` output. These options are defined below, if it is only "
"used by the `mpl` output it is marked as such:"
msgstr ""

#: of qiskit.visualization.circuit_drawer:71
#: qiskit.visualization.circuit_visualization.circuit_drawer:71
msgid "textcolor (str): The color code to use for text. Defaults to"
msgstr ""

#: of qiskit.visualization.circuit_drawer:72
#: qiskit.visualization.circuit_drawer:74
#: qiskit.visualization.circuit_drawer:76
#: qiskit.visualization.circuit_visualization.circuit_drawer:72
#: qiskit.visualization.circuit_visualization.circuit_drawer:74
#: qiskit.visualization.circuit_visualization.circuit_drawer:76
msgid "`'#000000'` (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:73
#: qiskit.visualization.circuit_visualization.circuit_drawer:73
msgid "subtextcolor (str): The color code to use for subtext. Defaults to"
msgstr ""

#: of qiskit.visualization.circuit_drawer:75
#: qiskit.visualization.circuit_visualization.circuit_drawer:75
msgid "linecolor (str): The color code to use for lines. Defaults to"
msgstr ""

#: of qiskit.visualization.circuit_drawer:77
#: qiskit.visualization.circuit_visualization.circuit_drawer:77
msgid "creglinecolor (str): The color code to use for classical register lines"
msgstr ""

#: of qiskit.visualization.circuit_drawer:78
#: qiskit.visualization.circuit_visualization.circuit_drawer:78
msgid "`'#778899'`(`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:79
#: qiskit.visualization.circuit_visualization.circuit_drawer:79
msgid "gatetextcolor (str): The color code to use for gate text `'#000000'`"
msgstr ""

#: of qiskit.visualization.circuit_drawer:80
#: qiskit.visualization.circuit_drawer:90
#: qiskit.visualization.circuit_drawer:129
#: qiskit.visualization.circuit_visualization.circuit_drawer:80
#: qiskit.visualization.circuit_visualization.circuit_drawer:90
#: qiskit.visualization.circuit_visualization.circuit_drawer:129
msgid "(`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:81
#: qiskit.visualization.circuit_visualization.circuit_drawer:81
msgid "gatefacecolor (str): The color code to use for gates. Defaults to"
msgstr ""

#: of qiskit.visualization.circuit_drawer:82
#: qiskit.visualization.circuit_visualization.circuit_drawer:82
msgid "`'#ffffff'` (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:83
#: qiskit.visualization.circuit_visualization.circuit_drawer:83
msgid "barrierfacecolor (str): The color code to use for barriers. Defaults to"
msgstr ""

#: of qiskit.visualization.circuit_drawer:84
#: qiskit.visualization.circuit_visualization.circuit_drawer:84
msgid "`'#bdbdbd'` (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:85
#: qiskit.visualization.circuit_visualization.circuit_drawer:85
msgid "backgroundcolor (str): The color code to use for the background."
msgstr ""

#: of qiskit.visualization.circuit_drawer:86
#: qiskit.visualization.circuit_visualization.circuit_drawer:86
msgid "Defaults to `'#ffffff'` (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:87
#: qiskit.visualization.circuit_visualization.circuit_drawer:87
msgid "fontsize (int): The font size to use for text. Defaults to 13 (`mpl`"
msgstr ""

#: of qiskit.visualization.circuit_drawer:88
#: qiskit.visualization.circuit_drawer:122
#: qiskit.visualization.circuit_drawer:131
#: qiskit.visualization.circuit_visualization.circuit_drawer:88
#: qiskit.visualization.circuit_visualization.circuit_drawer:122
#: qiskit.visualization.circuit_visualization.circuit_drawer:131
msgid "only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:89
#: qiskit.visualization.circuit_visualization.circuit_drawer:89
msgid "subfontsize (int): The font size to use for subtext. Defaults to 8"
msgstr ""

#: of qiskit.visualization.circuit_drawer:112
#: qiskit.visualization.circuit_visualization.circuit_drawer:112
msgid "displaytext (dict): A dictionary of the text to use for each element"
msgstr ""

#: of qiskit.visualization.circuit_drawer:92
#: qiskit.visualization.circuit_visualization.circuit_drawer:92
msgid "type in the output visualization. The default values are: {"
msgstr ""

#: of qiskit.visualization.circuit_drawer:94
#: qiskit.visualization.circuit_visualization.circuit_drawer:94
msgid ""
"'id': 'id', 'u0': 'U_0', 'u1': 'U_1', 'u2': 'U_2', 'u3': 'U_3', 'x': 'X',"
" 'y': 'Y', 'z': 'Z', 'h': 'H', 's': 'S', 'sdg': 'S^\\dagger', 't': 'T', "
"'tdg': 'T^\\dagger', 'rx': 'R_x', 'ry': 'R_y', 'rz': 'R_z', 'reset': "
"'\\left|0\\right\\rangle'"
msgstr ""

#: of qiskit.visualization.circuit_drawer:111
#: qiskit.visualization.circuit_visualization.circuit_drawer:111
msgid ""
"} You must specify all the necessary values if using this. There is no "
"provision for passing an incomplete dict in. (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:117
#: qiskit.visualization.circuit_visualization.circuit_drawer:117
msgid "displaycolor (dict): The color codes to use for each circuit element."
msgstr ""

#: of qiskit.visualization.circuit_drawer:115
#: qiskit.visualization.circuit_visualization.circuit_drawer:115
msgid ""
"By default all values default to the value of `gatefacecolor` and the "
"keys are the same as `displaytext`. Also, just like `displaytext` there "
"is no provision for an incomplete dict passed in. (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:119
#: qiskit.visualization.circuit_visualization.circuit_drawer:119
msgid "latexdrawerstyle (bool): When set to True enable latex mode which will"
msgstr ""

#: of qiskit.visualization.circuit_drawer:120
#: qiskit.visualization.circuit_visualization.circuit_drawer:120
msgid "draw gates like the `latex` output modes. (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:121
#: qiskit.visualization.circuit_visualization.circuit_drawer:121
msgid "usepiformat (bool): When set to True use radians for output (`mpl`"
msgstr ""

#: of qiskit.visualization.circuit_drawer:123
#: qiskit.visualization.circuit_visualization.circuit_drawer:123
msgid "fold (int): The number of circuit elements to fold the circuit at."
msgstr ""

#: of qiskit.visualization.circuit_drawer:124
#: qiskit.visualization.circuit_visualization.circuit_drawer:124
msgid "Defaults to 20 (`mpl` only)"
msgstr ""

#: of qiskit.visualization.circuit_drawer:125
#: qiskit.visualization.circuit_visualization.circuit_drawer:125
msgid ""
"cregbundle (bool): If set True bundle classical registers (`mpl` only) "
"showindex (bool): If set True draw an index. (`mpl` only) compress "
"(bool): If set True draw a compressed circuit (`mpl` only) figwidth "
"(int): The maximum width (in inches) for the output figure."
msgstr ""

#: of qiskit.visualization.circuit_drawer:130
#: qiskit.visualization.circuit_visualization.circuit_drawer:130
msgid "dpi (int): The DPI to use for the output image. Defaults to 150 (`mpl`"
msgstr ""

#: of qiskit.visualization.circuit_drawer:132
#: qiskit.visualization.circuit_visualization.circuit_drawer:132
msgid ""
"margin (list): `mpl` only creglinestyle (str): The style of line to use "
"for classical registers."
msgstr ""

#: of qiskit.visualization.circuit_drawer:134
#: qiskit.visualization.circuit_visualization.circuit_drawer:134
msgid ""
"Choices are `'solid'`, `'doublet'`, or any valid matplotlib `linestyle` "
"kwarg value. Defaults to `doublet`(`mpl` only)"
msgstr ""

#: ../../api/qiskit.visualization.circuit_visualization.rst:2
msgid "qiskit.visualization.circuit\\_visualization module"
msgstr ""

#: of qiskit.visualization.circuit_visualization:5
msgid "Two quantum circuit drawers based on:"
msgstr ""

#: of qiskit.visualization.circuit_visualization:2
msgid "Ascii art"
msgstr ""

#: of qiskit.visualization.circuit_visualization:3
msgid "LaTeX"
msgstr ""

#: of qiskit.visualization.circuit_visualization:4
msgid "Matplotlib"
msgstr ""

#: of qiskit.visualization.circuit_visualization.qx_color_scheme:1
#: qiskit.visualization.qx_color_scheme:1
msgid "Return default style for matplotlib_circuit_drawer (IBM QX style)."
msgstr ""

#: ../../api/qiskit.visualization.counts_visualization.rst:2
msgid "qiskit.visualization.counts\\_visualization module"
msgstr ""

#: of qiskit.visualization.counts_visualization:1
msgid "Visualization functions for measurement counts."
msgstr ""

#: of qiskit.visualization.counts_visualization.hamming_distance:1
msgid "Calculate the Hamming distance between two bit strings"
msgstr ""

#: of qiskit.visualization.counts_visualization.hamming_distance:3
msgid "First string."
msgstr ""

#: of qiskit.visualization.counts_visualization.hamming_distance:5
msgid "Second string."
msgstr ""

#: of qiskit.visualization.counts_visualization.hamming_distance:8
msgid "Distance between strings."
msgstr ""

#: of qiskit.visualization.counts_visualization.hamming_distance:11
msgid "Strings not same length"
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:1
#: qiskit.visualization.plot_histogram:1
msgid "Plot a histogram of data."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:3
#: qiskit.visualization.plot_histogram:3
msgid ""
"This is either a list of dictionaries or a single dict containing the "
"values to represent (ex {'001': 130})"
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:6
#: qiskit.visualization.plot_histogram:6
#: qiskit.visualization.plot_state_city:10
#: qiskit.visualization.plot_state_hinton:7
#: qiskit.visualization.plot_state_paulivec:9
#: qiskit.visualization.plot_state_qsphere:6
#: qiskit.visualization.state_visualization.plot_state_city:10
#: qiskit.visualization.state_visualization.plot_state_hinton:7
#: qiskit.visualization.state_visualization.plot_state_paulivec:9
#: qiskit.visualization.state_visualization.plot_state_qsphere:6
msgid "Figure size in inches."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:8
#: qiskit.visualization.plot_histogram:8
msgid "String or list of strings for histogram bar colors."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:10
#: qiskit.visualization.plot_histogram:10
msgid ""
"The number of terms to plot and rest is made into a single bar called "
"'rest'."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:13
#: qiskit.visualization.plot_histogram:13
msgid "Could be 'asc', 'desc', or 'hamming'."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:15
#: qiskit.visualization.plot_histogram:15
msgid "Target string if 'sort' is a distance measure."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:17
#: qiskit.visualization.plot_histogram:17
msgid ""
"A list of strings to use for labels of the data. The number of entries "
"must match the length of data (if data is a list or 1 if it's a dict)"
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:21
#: qiskit.visualization.plot_histogram:21
msgid "Label each bar in histogram with probability value."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:23
#: qiskit.visualization.plot_histogram:23
msgid "A string to use for the plot title"
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:26
#: qiskit.visualization.plot_histogram:26
msgid "A figure for the rendered histogram."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:29
#: qiskit.visualization.plot_histogram:29
msgid "Matplotlib not available."
msgstr ""

#: of qiskit.visualization.counts_visualization.plot_histogram:30
#: qiskit.visualization.interactive.iplot_histogram:20
#: qiskit.visualization.plot_histogram:30
msgid "When legend is provided and the length doesn't     match the input data."
msgstr ""

#: ../../api/qiskit.visualization.dag_drawer.rst:2
msgid "dag_drawer"
msgstr ""

#: of qiskit.visualization.dag_drawer:1
#: qiskit.visualization.dag_visualization.dag_drawer:1
msgid ""
"Plot the directed acyclic graph (dag) to represent operation dependencies"
" in a quantum circuit."
msgstr ""

#: of qiskit.visualization.dag_drawer:4
#: qiskit.visualization.dag_visualization.dag_drawer:4
msgid ""
"Note this function leverages `pydot "
"<https://github.com/erocarrera/pydot>`_ (via `nxpd "
"<https://github.com/chebee7i/nxpd`_) to generate the graph, which means "
"that having `Graphviz <https://www.graphviz.org/>`_ installed on your "
"system is required for this to work."
msgstr ""

#: of qiskit.visualization.dag_drawer:10
#: qiskit.visualization.dag_visualization.dag_drawer:10
msgid "The dag to draw."
msgstr ""

#: of qiskit.visualization.dag_drawer:12
#: qiskit.visualization.dag_visualization.dag_drawer:12
msgid "scaling factor"
msgstr ""

#: of qiskit.visualization.dag_drawer:14
#: qiskit.visualization.dag_visualization.dag_drawer:14
msgid "file path to save image to (format inferred from name)"
msgstr ""

#: of qiskit.visualization.dag_drawer:16
#: qiskit.visualization.dag_visualization.dag_drawer:16
msgid "'plain': B&W graph 'color' (default): color input/output/op nodes"
msgstr ""

#: of qiskit.visualization.dag_drawer:20
#: qiskit.visualization.dag_visualization.dag_drawer:20
msgid "if in Jupyter notebook and not saving to file,     otherwise None."
msgstr ""

#: of qiskit.visualization.dag_drawer:22
#: qiskit.visualization.dag_visualization.dag_drawer:22
msgid "if in Jupyter notebook and not saving to file,"
msgstr ""

#: of qiskit.visualization.dag_drawer:23
#: qiskit.visualization.dag_visualization.dag_drawer:23
msgid "otherwise None."
msgstr ""

#: of qiskit.visualization.dag_drawer:26
#: qiskit.visualization.dag_visualization.dag_drawer:26
msgid "when style is not recognized."
msgstr ""

#: of qiskit.visualization.dag_drawer:27
#: qiskit.visualization.dag_visualization.dag_drawer:27
msgid "when nxpd or pydot not installed."
msgstr ""

#: ../../api/qiskit.visualization.dag_visualization.rst:2
msgid "qiskit.visualization.dag\\_visualization module"
msgstr ""

#: of qiskit.visualization.dag_visualization:1
msgid "Visualization function for DAG circuit representation."
msgstr ""

#: ../../api/qiskit.visualization.exceptions.rst:2
msgid "qiskit.visualization.exceptions module"
msgstr ""

#: of qiskit.visualization.exceptions:1
msgid "Exception for errors raised by visualization module."
msgstr ""

#: ../../api/qiskit.visualization.gate_map.rst:2
msgid "qiskit.visualization.gate\\_map module"
msgstr ""

#: of qiskit.visualization.gate_map:1
msgid "A module for visualizing device coupling maps"
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:1
#: qiskit.visualization.plot_gate_map:1
msgid "Plots the gate map of a device."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:3
#: qiskit.visualization.plot_gate_map:3
msgid "A backend instance,"
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:5
#: qiskit.visualization.plot_gate_map:5
msgid "Output figure size (wxh) in inches."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:7
#: qiskit.visualization.plot_gate_map:7
msgid "Plot directed coupling map."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:9
#: qiskit.visualization.plot_gate_map:9
msgid "Label the qubits."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:11
#: qiskit.visualization.plot_gate_map:11
msgid "Size of qubit marker."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:13
#: qiskit.visualization.plot_gate_map:13
msgid "Width of lines."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:15
#: qiskit.visualization.plot_gate_map:15
msgid "Font size of qubit labels."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:17
#: qiskit.visualization.plot_gate_map:17
msgid "A list of colors for the qubits"
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:19
#: qiskit.visualization.plot_gate_map:19
msgid "A list of colors for each line from coupling_map."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:21
#: qiskit.visualization.plot_gate_map:21
msgid "The font color for the qubit labels."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:27
#: qiskit.visualization.plot_gate_map:27
msgid "if tried to pass a simulator."
msgstr ""

#: of qiskit.visualization.gate_map.plot_gate_map:28
#: qiskit.visualization.plot_gate_map:28
msgid "if matplotlib not installed."
msgstr ""

#: ../../api/qiskit.visualization.interactive.rst:2
msgid "qiskit.visualization.interactive package"
msgstr ""

#: of qiskit.visualization.interactive:1
msgid "Qsikit visualization library."
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_bloch_multivector.rst:2
msgid "iplot_bloch_multivector"
msgstr ""

#: of qiskit.visualization.interactive.iplot_bloch_multivector:1
#: qiskit.visualization.interactive.iplot_blochsphere.iplot_bloch_multivector:1
msgid "Create a bloch sphere representation."
msgstr ""

#: of qiskit.visualization.interactive.iplot_bloch_multivector:3
#: qiskit.visualization.interactive.iplot_blochsphere.iplot_bloch_multivector:3
msgid ""
"Graphical representation of the input array, using as much bloch spheres "
"as qubit are required."
msgstr ""

#: of qiskit.visualization.interactive.iplot_bloch_multivector:6
#: qiskit.visualization.interactive.iplot_blochsphere.iplot_bloch_multivector:6
msgid "State vector or density matrix"
msgstr ""

#: of qiskit.visualization.interactive.iplot_bloch_multivector:8
#: qiskit.visualization.interactive.iplot_blochsphere.iplot_bloch_multivector:8
#: qiskit.visualization.interactive.iplot_hinton.iplot_state_hinton:8
#: qiskit.visualization.interactive.iplot_histogram:9
#: qiskit.visualization.interactive.iplot_paulivec.iplot_state_paulivec:7
#: qiskit.visualization.interactive.iplot_qsphere.iplot_state_qsphere:8
#: qiskit.visualization.interactive.iplot_state:8
#: qiskit.visualization.interactive.iplot_state_hinton:8
#: qiskit.visualization.interactive.iplot_state_paulivec:7
#: qiskit.visualization.interactive.iplot_state_qsphere:8
msgid "Figure size in pixels."
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_blochsphere.rst:2
msgid "qiskit.visualization.interactive.iplot\\_blochsphere module"
msgstr ""

#: of qiskit.visualization.interactive.iplot_blochsphere:1
msgid "Bloch sphere visualization"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_cities.rst:2
msgid "qiskit.visualization.interactive.iplot\\_cities module"
msgstr ""

#: of qiskit.visualization.interactive.iplot_cities:1
msgid "Cities visualization"
msgstr ""

#: of qiskit.visualization.interactive.iplot_cities.iplot_state_city:1
#: qiskit.visualization.interactive.iplot_state_city:1
msgid "Create a cities representation."
msgstr ""

#: of qiskit.visualization.interactive.iplot_cities.iplot_state_city:3
#: qiskit.visualization.interactive.iplot_state_city:3
msgid "Graphical representation of the input array using a city style graph."
msgstr ""

#: of qiskit.visualization.interactive.iplot_cities.iplot_state_city:5
#: qiskit.visualization.interactive.iplot_paulivec.iplot_state_paulivec:5
#: qiskit.visualization.interactive.iplot_qsphere.iplot_state_qsphere:6
#: qiskit.visualization.interactive.iplot_state_city:5
#: qiskit.visualization.interactive.iplot_state_paulivec:5
#: qiskit.visualization.interactive.iplot_state_qsphere:6
msgid "State vector or density matrix."
msgstr ""

#: of qiskit.visualization.interactive.iplot_cities.iplot_state_city:7
#: qiskit.visualization.interactive.iplot_state_city:7
msgid "The figure size in pixels."
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_hinton.rst:2
msgid "qiskit.visualization.interactive.iplot\\_hinton module"
msgstr ""

#: of qiskit.visualization.interactive.iplot_hinton:1
msgid "Hinton visualization"
msgstr ""

#: of qiskit.visualization.interactive.iplot_hinton.iplot_state_hinton:1
#: qiskit.visualization.interactive.iplot_state_hinton:1
msgid "Create a hinton representation."
msgstr ""

#: of qiskit.visualization.interactive.iplot_hinton.iplot_state_hinton:3
#: qiskit.visualization.interactive.iplot_state_hinton:3
msgid ""
"Graphical representation of the input array using a 2D city style graph "
"(hinton)."
msgstr ""

#: of qiskit.visualization.interactive.iplot_hinton.iplot_state_hinton:6
#: qiskit.visualization.interactive.iplot_state_hinton:6
msgid "Density matrix"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_histogram.rst:2
msgid "iplot_histogram"
msgstr ""

#: of qiskit.visualization.interactive.iplot_histogram:1
msgid "Create a histogram representation."
msgstr ""

#: of qiskit.visualization.interactive.iplot_histogram:3
msgid ""
"Graphical representation of the input array using a vertical bars style "
"graph."
msgstr ""

#: of qiskit.visualization.interactive.iplot_histogram:6
msgid ""
"This is either a list of dicts or a single dict containing the values to "
"represent (ex. {'001' : 130})"
msgstr ""

#: of qiskit.visualization.interactive.iplot_histogram:11
msgid ""
"The number of terms to plot and rest is made into a single bar called "
"other values"
msgstr ""

#: of qiskit.visualization.interactive.iplot_histogram:14
msgid "Could be 'asc' or 'desc'"
msgstr ""

#: of qiskit.visualization.interactive.iplot_histogram:16
msgid ""
"A list of strings to use for labels of the data. The number of entries "
"must match the length of data."
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_paulivec.rst:2
msgid "qiskit.visualization.interactive.iplot\\_paulivec module"
msgstr ""

#: of qiskit.visualization.interactive.iplot_paulivec:1
msgid "Paulivec visualization"
msgstr ""

#: of qiskit.visualization.interactive.iplot_paulivec.iplot_state_paulivec:1
#: qiskit.visualization.interactive.iplot_state_paulivec:1
msgid "Create a paulivec representation."
msgstr ""

#: of qiskit.visualization.interactive.iplot_paulivec.iplot_state_paulivec:3
#: qiskit.visualization.interactive.iplot_state_paulivec:3
msgid "Graphical representation of the input array."
msgstr ""

#: of qiskit.visualization.interactive.iplot_paulivec.iplot_state_paulivec:9
#: qiskit.visualization.interactive.iplot_state_paulivec:9
msgid "activate slider"
msgstr ""

#: of qiskit.visualization.interactive.iplot_paulivec.iplot_state_paulivec:11
#: qiskit.visualization.interactive.iplot_state_paulivec:11
msgid "show legend of graph content"
msgstr ""

#: of qiskit.visualization.interactive.iplot_paulivec.process_data:1
msgid "Sort rho data"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_qsphere.rst:2
msgid "qiskit.visualization.interactive.iplot\\_qsphere module"
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere:1
msgid "Qsphere visualization"
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.bit_string_index:1
#: qiskit.visualization.state_visualization.bit_string_index:1
msgid "Return the index of a string of 0s and 1s."
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.iplot_state_qsphere:1
#: qiskit.visualization.interactive.iplot_state_qsphere:1
msgid "Create a Q sphere representation."
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.iplot_state_qsphere:3
#: qiskit.visualization.interactive.iplot_state_qsphere:3
msgid ""
"Graphical representation of the input array, using a Q sphere for each "
"eigenvalue."
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.lex_index:1
#: qiskit.visualization.state_visualization.lex_index:1
msgid "Return  the lex index of a combination.."
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.lex_index:3
#: qiskit.visualization.interactive.iplot_qsphere.n_choose_k:3
#: qiskit.visualization.state_visualization.lex_index:3
#: qiskit.visualization.state_visualization.n_choose_k:3
msgid "the total number of options ."
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.lex_index:5
#: qiskit.visualization.interactive.iplot_qsphere.n_choose_k:5
#: qiskit.visualization.state_visualization.lex_index:5
#: qiskit.visualization.state_visualization.n_choose_k:5
msgid "The number of elements."
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.lex_index:10
#: qiskit.visualization.state_visualization.lex_index:10
msgid "returns int index for lex order"
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.lex_index:13
#: qiskit.visualization.state_visualization.lex_index:13
msgid "if length of list is not equal to k"
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.n_choose_k:1
#: qiskit.visualization.state_visualization.n_choose_k:1
msgid "Return the number of combinations for n choose k."
msgstr ""

#: of qiskit.visualization.interactive.iplot_qsphere.n_choose_k:8
#: qiskit.visualization.state_visualization.n_choose_k:8
msgid "returns the binomial coefficient"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_state.rst:2
msgid "iplot_state"
msgstr ""

#: of qiskit.visualization.interactive.iplot_state:1
#: qiskit.visualization.plot_state:1
#: qiskit.visualization.state_visualization.plot_state:1
msgid "Plot the quantum state."
msgstr ""

#: of qiskit.visualization.interactive.iplot_state:3
#: qiskit.visualization.plot_state:3
#: qiskit.visualization.state_visualization.plot_state:3
msgid "statevector or density matrix representation of a quantum state."
msgstr ""

#: of qiskit.visualization.interactive.iplot_state:6
#: qiskit.visualization.plot_state:6
#: qiskit.visualization.state_visualization.plot_state:6
msgid "Plotting method to use."
msgstr ""

#: of qiskit.visualization.interactive.iplot_state:11
#: qiskit.visualization.plot_state:15
#: qiskit.visualization.state_visualization.plot_state:15
msgid "if the input is not a statevector or density"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_state_city.rst:2
msgid "iplot_state_city"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_state_hinton.rst:2
msgid "iplot_state_hinton"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_state_paulivec.rst:2
msgid "iplot_state_paulivec"
msgstr ""

#: ../../api/qiskit.visualization.interactive.iplot_state_qsphere.rst:2
msgid "iplot_state_qsphere"
msgstr ""

#: ../../api/qiskit.visualization.interpolation.rst:2
msgid "qiskit.visualization.interpolation module"
msgstr ""

#: of qiskit.visualization.interpolation:1
msgid "interpolation module for pulse visualization."
msgstr ""

#: of qiskit.visualization.interpolation.cubic_spline:1
#: qiskit.visualization.interpolation.interp1d:1
#: qiskit.visualization.interpolation.linear:1
#: qiskit.visualization.interpolation.step_wise:1
msgid "Scipy interpolation wrapper."
msgstr ""

#: of qiskit.visualization.interpolation.cubic_spline:3
#: qiskit.visualization.interpolation.interp1d:3
#: qiskit.visualization.interpolation.linear:3
#: qiskit.visualization.interpolation.step_wise:3
msgid "time."
msgstr ""

#: of qiskit.visualization.interpolation.cubic_spline:5
#: qiskit.visualization.interpolation.interp1d:5
#: qiskit.visualization.interpolation.linear:5
#: qiskit.visualization.interpolation.step_wise:5
msgid "complex pulse envelope."
msgstr ""

#: of qiskit.visualization.interpolation.cubic_spline:7
#: qiskit.visualization.interpolation.interp1d:7
#: qiskit.visualization.interpolation.linear:7
#: qiskit.visualization.interpolation.step_wise:7
msgid "data points for interpolation."
msgstr ""

#: of qiskit.visualization.interpolation.cubic_spline:9
#: qiskit.visualization.interpolation.interp1d:9
#: qiskit.visualization.interpolation.linear:9
#: qiskit.visualization.interpolation.step_wise:9
msgid ""
"Scipy interpolation type. See `scipy.interpolate.interp1d` documentation "
"for more information."
msgstr ""

#: of qiskit.visualization.interpolation.cubic_spline:13
#: qiskit.visualization.interpolation.interp1d:13
#: qiskit.visualization.interpolation.linear:13
#: qiskit.visualization.interpolation.step_wise:13
msgid "interpolated waveform."
msgstr ""

#: ../../api/qiskit.visualization.latex.rst:2
msgid "qiskit.visualization.latex module"
msgstr ""

#: of qiskit.visualization.latex:1
msgid "latex circuit visualization backends."
msgstr ""

#: of qiskit.visualization.latex.QCircuitImage:1
msgid "This class contains methods to create \\LaTeX circuit images."
msgstr ""

#: of qiskit.visualization.latex.QCircuitImage:3
msgid ""
"The class targets the \\LaTeX package Q-circuit (https://arxiv.org/pdf"
"/quant-ph/0406003)."
msgstr ""

#: of qiskit.visualization.latex.QCircuitImage:6
msgid "Thanks to Eric Sabo for the initial implementation for Qiskit."
msgstr ""

#: of qiskit.visualization.latex.QCircuitImage.latex:1
msgid "Return LaTeX string representation of circuit."
msgstr ""

#: of qiskit.visualization.latex.QCircuitImage.latex:3
msgid ""
"This method uses the LaTeX Qconfig package to create a graphical "
"representation of the circuit."
msgstr ""

#: of qiskit.visualization.latex.QCircuitImage.latex:6
msgid "for writing to a LaTeX file."
msgstr ""

#: ../../api/qiskit.visualization.matplotlib.rst:2
msgid "qiskit.visualization.matplotlib module"
msgstr ""

#: of qiskit.visualization.matplotlib:1
msgid "mpl circuit visualization backend."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels:1
msgid "Pulse dataset for channel."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.add_instruction:1
msgid "Add new pulse instruction to channel."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.add_instruction:3
msgid "Starting time of instruction"
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.add_instruction:5
msgid "Instruction object to be added"
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.conditionals:1
msgid "Get conditionals."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.framechanges:1
msgid "Get frame changes."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.is_empty:1
msgid "Return if pulse is empty."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.is_empty:3
msgid "if the channel has nothing to plot"
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.labels:1
msgid "Get labels."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.snapshots:1
msgid "Get snapshots."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.to_table:1
msgid "Get table contains."
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.to_table:3
msgid "name of channel"
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.to_table:6
msgid "dictionary of events in the channel"
msgstr ""

#: of qiskit.visualization.matplotlib.EventsOutputChannels.waveform:1
msgid "Get waveform."
msgstr ""

#: of qiskit.visualization.matplotlib.SamplePulseDrawer:1
msgid "A class to create figure for sample pulse."
msgstr ""

#: of qiskit.visualization.matplotlib.SamplePulseDrawer.draw:1
msgid ""
"Draw figure. :param pulse: SamplePulse to draw :type pulse: SamplePulse "
":param dt: time interval :type dt: float :param interp_method: "
"interpolation function"
msgstr ""

#: of qiskit.visualization.matplotlib.SamplePulseDrawer.draw:7
#: qiskit.visualization.matplotlib.ScheduleDrawer.draw:7
msgid "See `qiskit.visualization.interpolation` for more information"
msgstr ""

#: of qiskit.visualization.matplotlib.SamplePulseDrawer.draw:12
msgid "A matplotlib figure object of the pulse envelope"
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer:1
msgid "A class to create figure for schedule and channel."
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer.draw:1
msgid ""
"Draw figure. :param schedule: Schedule to draw :type schedule: "
"ScheduleComponent :param dt: time interval :type dt: float :param "
"interp_method: interpolation function"
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer.draw:9
msgid "plot range"
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer.draw:13
msgid "channels to draw"
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer.draw:15
msgid "if plot all channels even it is empty"
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer.draw:17
msgid "Draw event table"
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer.draw:24
msgid "A matplotlib figure object for the pulse schedule"
msgstr ""

#: of qiskit.visualization.matplotlib.ScheduleDrawer.draw:27
msgid "when schedule cannot be drawn"
msgstr ""

#: ../../api/qiskit.visualization.plot_bloch_multivector.rst:2
msgid "plot_bloch_multivector"
msgstr ""

#: of qiskit.visualization.plot_bloch_multivector:1
#: qiskit.visualization.plot_bloch_vector:1
#: qiskit.visualization.state_visualization.plot_bloch_multivector:1
#: qiskit.visualization.state_visualization.plot_bloch_vector:1
msgid "Plot the Bloch sphere."
msgstr ""

#: of qiskit.visualization.plot_bloch_multivector:3
#: qiskit.visualization.plot_bloch_vector:3
#: qiskit.visualization.state_visualization.plot_bloch_multivector:3
#: qiskit.visualization.state_visualization.plot_bloch_vector:3
msgid "Plot a sphere, axes, the Bloch vector, and its projections onto each axis."
msgstr ""

#: of qiskit.visualization.plot_bloch_multivector:5
#: qiskit.visualization.plot_state_city:6
#: qiskit.visualization.plot_state_hinton:3
#: qiskit.visualization.state_visualization.plot_bloch_multivector:5
#: qiskit.visualization.state_visualization.plot_state_city:6
#: qiskit.visualization.state_visualization.plot_state_hinton:3
msgid "Numpy array for state vector or density matrix."
msgstr ""

#: of qiskit.visualization.plot_bloch_multivector:7
#: qiskit.visualization.plot_bloch_vector:7
#: qiskit.visualization.plot_state_city:8
#: qiskit.visualization.plot_state_hinton:5
#: qiskit.visualization.plot_state_paulivec:7
#: qiskit.visualization.state_visualization.plot_bloch_multivector:7
#: qiskit.visualization.state_visualization.plot_bloch_vector:7
#: qiskit.visualization.state_visualization.plot_state_city:8
#: qiskit.visualization.state_visualization.plot_state_hinton:5
#: qiskit.visualization.state_visualization.plot_state_paulivec:7
msgid "a string that represents the plot title"
msgstr ""

#: of qiskit.visualization.plot_bloch_multivector:9
#: qiskit.visualization.state_visualization.plot_bloch_multivector:9
msgid "Has no effect, here for compatibility only."
msgstr ""

#: of qiskit.visualization.plot_bloch_multivector:12
#: qiskit.visualization.plot_bloch_vector:14
#: qiskit.visualization.state_visualization.plot_bloch_multivector:12
#: qiskit.visualization.state_visualization.plot_bloch_vector:14
msgid "A matplotlib figure instance if `ax = None`."
msgstr ""

#: of qiskit.visualization.plot_bloch_multivector:15
#: qiskit.visualization.plot_bloch_vector:17 qiskit.visualization.plot_state:14
#: qiskit.visualization.plot_state_city:21
#: qiskit.visualization.plot_state_hinton:13
#: qiskit.visualization.plot_state_paulivec:17
#: qiskit.visualization.plot_state_qsphere:12
#: qiskit.visualization.state_visualization.plot_bloch_multivector:15
#: qiskit.visualization.state_visualization.plot_bloch_vector:17
#: qiskit.visualization.state_visualization.plot_state:14
#: qiskit.visualization.state_visualization.plot_state_city:21
#: qiskit.visualization.state_visualization.plot_state_hinton:13
#: qiskit.visualization.state_visualization.plot_state_paulivec:17
#: qiskit.visualization.state_visualization.plot_state_qsphere:12
msgid "Requires matplotlib."
msgstr ""

#: ../../api/qiskit.visualization.plot_bloch_vector.rst:2
msgid "plot_bloch_vector"
msgstr ""

#: of qiskit.visualization.plot_bloch_vector:5
#: qiskit.visualization.state_visualization.plot_bloch_vector:5
msgid "array of three elements where [<x>, <y>, <z>]"
msgstr ""

#: of qiskit.visualization.plot_bloch_vector:9
#: qiskit.visualization.state_visualization.plot_bloch_vector:9
msgid "An Axes to use for rendering the bloch sphere"
msgstr ""

#: of qiskit.visualization.plot_bloch_vector:11
#: qiskit.visualization.state_visualization.plot_bloch_vector:11
msgid "Figure size in inches. Has no effect is passing `ax`."
msgstr ""

#: ../../api/qiskit.visualization.plot_gate_map.rst:2
msgid "plot_gate_map"
msgstr ""

#: ../../api/qiskit.visualization.plot_histogram.rst:2
msgid "plot_histogram"
msgstr ""

#: ../../api/qiskit.visualization.plot_state.rst:2
msgid "plot_state"
msgstr ""

#: of qiskit.visualization.plot_state:8
#: qiskit.visualization.state_visualization.plot_state:8
msgid "Figure size in inches,"
msgstr ""

#: of qiskit.visualization.plot_state:11
#: qiskit.visualization.plot_state_city:18
#: qiskit.visualization.plot_state_hinton:10
#: qiskit.visualization.plot_state_paulivec:14
#: qiskit.visualization.state_visualization.plot_state:11
#: qiskit.visualization.state_visualization.plot_state_city:18
#: qiskit.visualization.state_visualization.plot_state_hinton:10
#: qiskit.visualization.state_visualization.plot_state_paulivec:14
msgid "The matplotlib.Figure of the visualization"
msgstr ""

#: ../../api/qiskit.visualization.plot_state_city.rst:2
msgid "plot_state_city"
msgstr ""

#: of qiskit.visualization.plot_state_city:1
#: qiskit.visualization.state_visualization.plot_state_city:1
msgid "Plot the cityscape of quantum state."
msgstr ""

#: of qiskit.visualization.plot_state_city:3
#: qiskit.visualization.state_visualization.plot_state_city:3
msgid ""
"Plot two 3d bar graphs (two dimensional) of the real and imaginary part "
"of the density matrix rho."
msgstr ""

#: of qiskit.visualization.plot_state_city:12
#: qiskit.visualization.state_visualization.plot_state_city:12
msgid "A list of len=2 giving colors for real and"
msgstr ""

#: of qiskit.visualization.plot_state_city:15
#: qiskit.visualization.state_visualization.plot_state_city:15
msgid "Transparency value for bars"
msgstr ""

#: of qiskit.visualization.plot_state_city:22
#: qiskit.visualization.state_visualization.plot_state_city:22
msgid "When 'color' is not a list of len=2."
msgstr ""

#: ../../api/qiskit.visualization.plot_state_hinton.rst:2
msgid "plot_state_hinton"
msgstr ""

#: of qiskit.visualization.plot_state_hinton:1
#: qiskit.visualization.state_visualization.plot_state_hinton:1
msgid "Plot a hinton diagram for the quanum state."
msgstr ""

#: ../../api/qiskit.visualization.plot_state_paulivec.rst:2
msgid "plot_state_paulivec"
msgstr ""

#: of qiskit.visualization.plot_state_paulivec:1
#: qiskit.visualization.state_visualization.plot_state_paulivec:1
msgid "Plot the paulivec representation of a quantum state."
msgstr ""

#: of qiskit.visualization.plot_state_paulivec:3
#: qiskit.visualization.state_visualization.plot_state_paulivec:3
msgid "Plot a bargraph of the mixed state rho over the pauli matrices"
msgstr ""

#: of qiskit.visualization.plot_state_paulivec:5
#: qiskit.visualization.state_visualization.plot_state_paulivec:5
msgid "Numpy array for state vector or density matrix"
msgstr ""

#: of qiskit.visualization.plot_state_paulivec:11
#: qiskit.visualization.state_visualization.plot_state_paulivec:11
msgid "Color of the expectation value bars."
msgstr ""

#: ../../api/qiskit.visualization.plot_state_qsphere.rst:2
msgid "plot_state_qsphere"
msgstr ""

#: of qiskit.visualization.plot_state_qsphere:1
#: qiskit.visualization.state_visualization.plot_state_qsphere:1
msgid "Plot the qsphere representation of a quantum state."
msgstr ""

#: of qiskit.visualization.plot_state_qsphere:3
#: qiskit.visualization.state_visualization.plot_state_qsphere:3
msgid "State vector or density matrix representation."
msgstr ""

#: of qiskit.visualization.plot_state_qsphere:9
#: qiskit.visualization.state_visualization.plot_state_qsphere:9
msgid "A matplotlib figure instance."
msgstr ""

#: ../../api/qiskit.visualization.pulse_drawer.rst:2
msgid "pulse_drawer"
msgstr ""

#: of qiskit.visualization.pulse_drawer:1
#: qiskit.visualization.pulse_visualization.pulse_drawer:1
msgid "Plot the interpolated envelope of pulse"
msgstr ""

#: of qiskit.visualization.pulse_drawer:3
#: qiskit.visualization.pulse_visualization.pulse_drawer:3
msgid "Data to plot"
msgstr ""

#: of qiskit.visualization.pulse_drawer:11
#: qiskit.visualization.pulse_visualization.pulse_drawer:11
msgid ""
"interpolation function See `qiskit.visualization.interpolation` for more "
"information"
msgstr ""

#: of qiskit.visualization.pulse_drawer:14
#: qiskit.visualization.pulse_visualization.pulse_drawer:14
msgid "scaling of waveform amplitude"
msgstr ""

#: of qiskit.visualization.pulse_drawer:32
#: qiskit.visualization.pulse_visualization.pulse_drawer:32
msgid "A matplotlib figure object for the pulse envelope"
msgstr ""

#: of qiskit.visualization.pulse_drawer:35
#: qiskit.visualization.pulse_visualization.pulse_drawer:35
msgid "when invalid data is given or lack of information"
msgstr ""

#: ../../api/qiskit.visualization.pulse_visualization.rst:2
msgid "qiskit.visualization.pulse\\_visualization module"
msgstr ""

#: of qiskit.visualization.pulse_visualization:1
msgid "matplotlib pulse visualization."
msgstr ""

#: ../../api/qiskit.visualization.qcstyle.rst:2
msgid "qiskit.visualization.qcstyle module"
msgstr ""

#: ../../api/qiskit.visualization.qx_color_scheme.rst:2
msgid "qx_color_scheme"
msgstr ""

#: ../../api/qiskit.visualization.state_visualization.rst:2
msgid "qiskit.visualization.state\\_visualization module"
msgstr ""

#: of qiskit.visualization.state_visualization:1
msgid "Visualization functions for quantum states."
msgstr ""

#: of qiskit.visualization.state_visualization.Arrow3D:1
msgid "ベースクラス: :class:`matplotlib.patches.FancyArrowPatch`"
msgstr ""

#: of qiskit.visualization.state_visualization.Arrow3D:1
msgid "Standard 3D arrow."
msgstr ""

#: of qiskit.visualization.state_visualization.Arrow3D.draw:1
msgid "Draw the arrow."
msgstr ""

#: of qiskit.visualization.state_visualization.generate_facecolors:1
msgid ""
"Generates shaded facecolors for shaded bars. This is here to work around "
"a Matplotlib bug where alpha does not work in Bar3D. :param x: The x- "
"coordinates of the anchor point of the bars. :type x: array_like :param "
"y: The y- coordinates of the anchor point of the bars. :type y: "
"array_like :param z: The z- coordinates of the anchor point of the bars. "
":type z: array_like :param dx: Width of bars. :type dx: array_like :param"
" dy: Depth of bars. :type dy: array_like :param dz: Height of bars. :type"
" dz: array_like :param color: sequence of valid color specifications, "
"optional :type color: array_like"
msgstr ""

#: of qiskit.visualization.state_visualization.generate_facecolors:19
msgid "Shaded colors for bars."
msgstr ""

#: of qiskit.visualization.state_visualization.phase_to_color_wheel:1
msgid "Map a phase of a complexnumber to a color in (r,g,b)."
msgstr ""

#: of qiskit.visualization.state_visualization.phase_to_color_wheel:3
msgid ""
"complex_number is phase is first mapped to angle in the range [0, 2pi] "
"and then to a color wheel with blue at zero phase."
msgstr ""

#: ../../api/qiskit.visualization.text.rst:2
msgid "qiskit.visualization.text module"
msgstr ""

#: of qiskit.visualization.text:1
msgid ""
"A module for drawing circuits in ascii art or some other text "
"representation"
msgstr ""

#: of qiskit.visualization.text.Barrier:1 qiskit.visualization.text.Bullet:1
#: qiskit.visualization.text.Ex:1 qiskit.visualization.text.Reset:1
msgid "ベースクラス: :class:`qiskit.visualization.text.DirectOnQuWire`"
msgstr ""

#: of qiskit.visualization.text.Barrier:1
msgid "Draws a barrier. top:  ░     ░ mid: ─░─ ───░─── bot:  ░     ░"
msgstr ""

#: of qiskit.visualization.text.BoxOnClWire:1
#: qiskit.visualization.text.BoxOnQuWire:1
#: qiskit.visualization.text.BreakWire:1
#: qiskit.visualization.text.DirectOnQuWire:1
#: qiskit.visualization.text.EmptyWire:1 qiskit.visualization.text.InputWire:1
#: qiskit.visualization.text.MeasureTo:1 qiskit.visualization.text.MultiBox:1
msgid "ベースクラス: :class:`qiskit.visualization.text.DrawElement`"
msgstr ""

#: of qiskit.visualization.text.BoxOnClWire:1
msgid ""
"Draws a box on the classical wire top: ┌───┐   ┌───┐ mid: ╡ A ╞ ══╡ A ╞══"
" bot: └───┘   └───┘"
msgstr ""

#: of qiskit.visualization.text.BoxOnClWireBot:1
#: qiskit.visualization.text.BoxOnClWireMid:1
#: qiskit.visualization.text.BoxOnClWireTop:1
msgid ""
"ベースクラス: :class:`qiskit.visualization.text.MultiBox`, "
":class:`qiskit.visualization.text.BoxOnClWire`"
msgstr ""

#: of qiskit.visualization.text.BoxOnClWireBot:1
msgid ""
"Draws the bottom part of a conditional box that affects more than one "
"classical wire"
msgstr ""

#: of qiskit.visualization.text.BoxOnClWireMid:1
msgid ""
"Draws the middle part of a conditional box that affects more than one "
"classical wire"
msgstr ""

#: of qiskit.visualization.text.BoxOnClWireTop:1
msgid ""
"Draws the top part of a conditional box that affects more than one "
"classical wire"
msgstr ""

#: of qiskit.visualization.text.BoxOnQuWire:1
msgid ""
"Draws a box on the quantum wire top: ┌───┐   ┌───┐ mid: ┤ A ├ ──┤ A ├── "
"bot: └───┘   └───┘"
msgstr ""

#: of qiskit.visualization.text.BoxOnQuWireBot:1
#: qiskit.visualization.text.BoxOnQuWireMid:1
#: qiskit.visualization.text.BoxOnQuWireTop:1
msgid ""
"ベースクラス: :class:`qiskit.visualization.text.MultiBox`, "
":class:`qiskit.visualization.text.BoxOnQuWire`"
msgstr ""

#: of qiskit.visualization.text.BoxOnQuWireBot:1
msgid "Draws the bottom part of a box that affects more than one quantum wire"
msgstr ""

#: of qiskit.visualization.text.BoxOnQuWireMid:1
msgid "Draws the middle part of a box that affects more than one quantum wire"
msgstr ""

#: of qiskit.visualization.text.BoxOnQuWireTop:1
msgid "Draws the top part of a box that affects more than one quantum wire"
msgstr ""

#: of qiskit.visualization.text.BreakWire:1
msgid "This element is used to break the drawing in several pages."
msgstr ""

#: of qiskit.visualization.text.BreakWire.fillup_layer:1
msgid ""
"Creates a layer with BreakWire elements. :param layer_length: The length "
"of the layer to create :type layer_length: int :param arrow_char: The "
"char used to create the BreakWire element. :type arrow_char: char"
msgstr ""

#: of qiskit.visualization.text.BreakWire.fillup_layer:7
msgid "The new layer."
msgstr ""

#: of qiskit.visualization.text.Bullet:1
msgid ""
"Draws a bullet (usually with a connector). E.g. the top part of a CX "
"gate. top: mid: ─■─  ───■─── bot:  │      │"
msgstr ""

#: of qiskit.visualization.text.DirectOnQuWire:1
msgid "Element to the wire (without the box)."
msgstr ""

#: of qiskit.visualization.text.DrawElement:1
msgid "An element is an instruction or an operation that need to be drawn."
msgstr ""

#: of qiskit.visualization.text.DrawElement.bot:1
msgid "Constructs the bottom line of the element"
msgstr ""

#: of qiskit.visualization.text.DrawElement.connect:1
msgid ""
"Connects boxes and elements using wire_char and setting proper "
"connectors. :param wire_char: For example '║' or '│'. :type wire_char: "
"char :param where: Where the connector should be set. :type where: "
"list[\"top\", \"bot\"] :param label: Some connectors have a label (see "
"cu1, for example). :type label: string"
msgstr ""

#: of qiskit.visualization.text.DrawElement.length:1
msgid "Returns the length of the element, including the box around."
msgstr ""

#: of qiskit.visualization.text.DrawElement.mid:1
msgid "Constructs the middle line of the element"
msgstr ""

#: of qiskit.visualization.text.DrawElement.top:1
msgid "Constructs the top line of the element"
msgstr ""

#: of qiskit.visualization.text.DrawElement.width:1
#: qiskit.visualization.text.MultiBox.width:1
msgid "Returns the width of the label, including padding"
msgstr ""

#: of qiskit.visualization.text.EmptyWire:1
msgid "This element is just the wire, with no instructions nor operations."
msgstr ""

#: of qiskit.visualization.text.EmptyWire.fillup_layer:1
msgid ""
"Given a layer, replace the Nones in it with EmptyWire elements. :param "
"layer: The layer that contains Nones. :type layer: list :param "
"first_clbit: The first wire that is classic. :type first_clbit: int"
msgstr ""

#: of qiskit.visualization.text.EmptyWire.fillup_layer:7
msgid "The new layer, with no Nones."
msgstr ""

#: of qiskit.visualization.text.Ex:1
msgid ""
"Draws an X (usually with a connector). E.g. the top part of a swap gate "
"top: mid: ─X─ ───X─── bot:  │     │"
msgstr ""

#: of qiskit.visualization.text.InputWire:1
msgid "This element is the label and the initial value of a wire."
msgstr ""

#: of qiskit.visualization.text.InputWire.fillup_layer:1
msgid ""
"Creates a layer with InputWire elements. :param names: List of names for "
"the wires. :type names: list"
msgstr ""

#: of qiskit.visualization.text.InputWire.fillup_layer:5
msgid "The new layer"
msgstr ""

#: of qiskit.visualization.text.Layer:1
msgid "A layer is the \"column\" of the circuit."
msgstr ""

#: of qiskit.visualization.text.Layer.connect_with:1
msgid ""
"Connects the elements in the layer using wire_char. :param wire_char: For"
" example '║' or '│'. :type wire_char: char"
msgstr ""

#: of qiskit.visualization.text.Layer.full_layer:1
msgid ""
"Returns the composition of qubits and classic wires. :returns: "
"self.qubit_layer + self.clbit_layer :rtype: String"
msgstr ""

#: of qiskit.visualization.text.Layer.set_cl_multibox:1
msgid ""
"Sets the multi clbit box. :param creg: The affected classical register. "
":type creg: string :param label: The label for the multi clbit box. :type"
" label: string :param top_connect: The char to connect the box on the "
"top. :type top_connect: char"
msgstr ""

#: of qiskit.visualization.text.Layer.set_clbit:1
msgid ""
"Sets the clbit to the element :param clbit: Element of self.cregs. :type "
"clbit: cbit :param element: Element to set in the clbit :type element: "
"DrawElement"
msgstr ""

#: of qiskit.visualization.text.Layer.set_qu_multibox:1
msgid ""
"Sets the multi qubit box. :param bits: A list of affected bits. :type "
"bits: list[int] :param label: The label for the multi qubit box. :type "
"label: string"
msgstr ""

#: of qiskit.visualization.text.Layer.set_qubit:1
msgid ""
"Sets the qubit to the element :param qubit: Element of self.qregs. :type "
"qubit: qbit :param element: Element to set in the qubit :type element: "
"DrawElement"
msgstr ""

#: of qiskit.visualization.text.MeasureFrom:1
msgid "ベースクラス: :class:`qiskit.visualization.text.BoxOnQuWire`"
msgstr ""

#: of qiskit.visualization.text.MeasureFrom:1
msgid ""
"The element on the quantum wire in which the measure is performed top: "
"┌─┐    ┌─┐ mid: ┤M├ ───┤M├─── bot: └╥┘    └╥┘"
msgstr ""

#: of qiskit.visualization.text.MeasureTo:1
msgid ""
"The element on the classic wire to which the measure is performed top:  ║"
"     ║ mid: ═╩═ ═══╩═══ bot:"
msgstr ""

#: of qiskit.visualization.text.MultiBox:1
msgid "Elements that is draw on over multiple wires."
msgstr ""

#: of qiskit.visualization.text.MultiBox.center_label:1
msgid ""
"In multi-bit elements, the label is centered vertically. :param "
"input_length: Rhe amount of wires affected. :type input_length: int "
":param order: Which middle element is this one? :type order: int"
msgstr ""

#: of qiskit.visualization.text.Reset:1
msgid "Draws a reset gate"
msgstr ""

#: of qiskit.visualization.text.TextDrawing:1
msgid "The text drawing"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.build_layers:1
msgid "Constructs layers. :returns: List of DrawElements. :rtype: list"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.build_layers:5
msgid "When the drawing is, for some reason, impossible to be drawn."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.draw_wires:1
msgid ""
"Given a list of wires, creates a list of lines with the text drawing. "
":param wires: A list of wires with instructions. :type wires: list :param"
" vertically_compressed: Default is `True`. It merges the lines"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.draw_wires:5
msgid "so the drawing will take less vertical room."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.draw_wires:8
#: qiskit.visualization.text.TextDrawing.lines:9
msgid "A list of lines with the text drawing."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.dump:1
msgid ""
"Dumps the ascii art in the file. :param filename: File to dump the ascii "
"art. :type filename: str :param encoding: Optional. Default \"utf-8\". "
":type encoding: str"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.label_for_box:1
msgid "Creates the label for a box."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.label_for_conditional:1
msgid "Creates the label for a conditional instruction."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.lines:1
msgid ""
"Generates a list with lines. These lines form the text drawing. :param "
"line_length: Optional. Breaks the circuit drawing to this length. This"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.lines:3
msgid ""
"useful when the drawing does not fit in the console. If None (default), "
"it will try to guess the console width using shutil.get_terminal_size(). "
"If you don't want pagination at all, set line_length=-1."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.merge_lines:1
msgid ""
"Merges two lines (top and bot) in the way that the overlapping make "
"senses. :param top: the top line :type top: str :param bot: the bottom "
"line :type bot: str :param icod: in case of doubt, which line should have"
" priority? Default: \"top\". :type icod: top or bot"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.merge_lines:9
msgid "The merge of both lines."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.normalize_width:1
msgid ""
"When the elements of the layer have different widths, sets the width to "
"the max elements. :param layer: A list of elements. :type layer: list"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.params_for_label:1
msgid ""
"Get the params and format them to add them to a label. None if there are "
"no params of if the params are numpy.ndarrays."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.single_string:1
msgid "Creates a long string with the ascii art Returns:"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.single_string:3
msgid "str: The lines joined by '"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.single_string:4
msgid "'"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.wire_names:1
msgid ""
"Returns a list of names for each wire. :param with_initial_value: "
"Optional (Default: True). If true, adds the initial value to"
msgstr ""

#: of qiskit.visualization.text.TextDrawing.wire_names:3
msgid "the name."
msgstr ""

#: of qiskit.visualization.text.TextDrawing.wire_names:6
msgid "The list of wire names."
msgstr ""

#: ../../api/qiskit.visualization.utils.rst:2
msgid "qiskit.visualization.utils module"
msgstr ""

#: of qiskit.visualization.utils:1
msgid "Common visualization utilities."
msgstr ""

