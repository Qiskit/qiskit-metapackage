
Tomography
==========

Ignis has tools to perform state and process tomography on a given
Qiskit circuit (the outcome of the circuit for state tomography,
the circuit itself for process). Tomography attempts to reconstruct
the state (density matrix) or the process map (superoperator)
given the constraints of quantum measurements.

To use the tomography module, import it with

.. code:: python

    import qiskit.ignis.verification.tomography

Generating Tomography Circuits
------------------------------

The goal of the generation stage is to obtain a family of circuits that can be passed
to the backend in order to obtain enough measurement for full tomography.

For state tomography this amounts to adding measurement gates, and in process
tomography this amounts to adding both measurement and initialization gates.

-  ``state_tomography_circuits(circuit, measured_qubits, meas_labels='Pauli', meas_basis='Pauli')``:
    - create state tomography circuits from **circuit** for the given **measured_qubits**.
    - The optional **meas_basis** is a string or an **TomographyBasis** object, which by default is **PauliBasis**
    - The optional **meas_labels** are used in naming the generated circuits.
-  ``process_tomography_circuits(circuit, measured_qubits, prepared_qubits=None, meas_labels='Pauli', meas_basis='Pauli', prep_labels='Pauli', prep_basis='Pauli')``:
    - create process tomography circuits from **circuit** for the given **measured_qubits**.
    - The optional **prepared_qubits** is used to specify a set of qubits to prepare in case they are different than **measured_qubits**.
    - The optional **meas_basis** is a string or an **TomographyBasis** object, which by default is **PauliBasis**
    - The optional **prep_basis** is a string or an **TomographyBasis** object, which by default is **PauliBasis**
    - The optional **meas_labels** are used in naming the generated circuits.
    - The optional **prep_labels** are used in naming the generated circuits.

Extracting Tomography Results
-----------------------------

Once the backend run is finished, the results should be converted to usable formats
the **tomography_data** function extracts the tomography-relevant data from the run
in a human-readable dictionary. The **fitter_data** further converts this data
into a matrix and vector representation useful for algorithmic fitting purposes.

- ``tomography_data(tomography_data(result, circuits)``: Returns a dictionary of the tomography measurements from the job run **result** on the given **circuits**.
- ```fitter_data(tomo_data, meas_basis='Pauli', prep_basis='Pauli', standard_weights=True, beta=0.5)``: Returns the data used by tomography fitters.
    - The input consists of the tomography data  (**tomo_data**) generated by the **tomography_data** function and optional parameters:
        - **meas_basis** and **prep_basis** should be the bases used in the actual tomography
        - **standard_weights** is a boolean indicating whether to apply weights to basis matrix and data based on count probability
        - **beta** is a float hedging parameter for 0, 1 probabilities.
    - The output is a tuple **(data, basis_matrix, weights)**
        - **data** is a vector of probabilities computed from the measurements.
        - **basis_matrix** is a matrix of the measurements.
        - **weights** is a vector of weights for the given probabilities.

Fitting Tomography Results
--------------------------

The fitting stage converts the fitter data previously generated into a matrix
representation of the state (density matrix) or process (Choi matrix) described
by the input circuit.

Fitting is performed by solving an optimization problem using a dedicated library
the current implementations rely on **scipy** and **cvxpy**. The implementations
differ in how they ensure the result is a proper density matrix/Choi matrix:
in **cvxpy** the constraints are encoded directly into the optimization problem
whereas in the **scipy** based algorithm the solution is rescaled to ensure it is
a proper solution.

- ``state_mle_fit(data, basis_matrix, weights=None)``: Performs **scipi** based fitting for state tomography.
- ``process_mle_fit(data, basis_matrix, weights=None)``: Performs **scipi** based fitting for process tomography.
- ``state_cvx_fit(data, basis_matrix, weights=None, **kwargs)``: Performs **cvxpy** based fitting for state tomography.
- ``process_cvx_fit(data, basis_matrix, weights=None, **kwargs)``: Performs **cvxpy** based fitting for process tomography.

The inputs are similar for all functions: **data**, **basis_matrix** and **weights** are
the same as the outputs of the **fitter_data** function. the additional **kwargs** argument
for cvxpy allows passing options directly to the cvx solver.


